name: HumanEval_158_find_max
language: py
results:
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len_words = []\n    max_len = 0\n    for word in words:\n\
    \        if len(set(word)) > max_len:\n            max_len = len(set(word))\n\
    \            max_len_words = [word]\n        elif len(set(word)) == max_len:\n\
    \            max_len_words.append(word)\n    \n    return min(max_len_words)\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9ypw1bu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph9ypw1bu.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmph9ypw1bu.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxgnqwcr.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmxgnqwcr.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpmxgnqwcr.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_set = set(max_word)\n    max_len\
    \ = len(max_set)\n    for word in words[1:]:\n        word_set = set(word)\n \
    \       word_len = len(word_set)\n        if word_len > max_len:\n           \
    \ max_word = word\n            max_set = word_set\n            max_len = word_len\n\
    \        elif word_len == max_len:\n            if word < max_word:\n        \
    \        max_word = word\n                max_set = word_set\n               \
    \ max_len = word_len\n    return max_word\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    raise NotImplementedError(\"Not implemented\")\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzlw03ocn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzlw03ocn.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzlw03ocn.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmpzlw03ocn.py\", line 13, in find_max\n    raise NotImplementedError(\"\
    Not implemented\")\nNotImplementedError: Not implemented\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_words = []\n    for word in words:\n   \
    \     if len(set(word)) > max_len:\n            max_len = len(set(word))\n   \
    \         max_words = [word]\n        elif len(set(word)) == max_len:\n      \
    \      max_words.append(word)\n    max_words.sort()\n    return max_words[0]\n\
    \nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"\
    enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\n    \ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvw1l8x5m.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvw1l8x5m.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvw1l8x5m.py\", line 17,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return \"\"\n    max_char = max([set(word)\
    \ for word in words], key=len)\n    max_list = [word for word in words if set(word)\
    \ == max_char]\n    return sorted(max_list)[0]\n\nwords = [\"a\", \"ab\", \"abc\"\
    , \"d\", \"cd\", \"bcd\", \"abcd\"]\nprint(find_max(words))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "abcd\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0epf9w2d.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0epf9w2d.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0epf9w2d.py\", line 26,\
    \ in check\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) ==\
    \ 'footbott'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    result = words[0]\n\
    \    max_unique = len(set(words[0]))\n    for word in words[1:]:\n        curr_unique\
    \ = len(set(word))\n        if curr_unique > max_unique:\n            max_unique\
    \ = curr_unique\n            result = word\n        elif curr_unique == max_unique:\n\
    \            result = min(result, word)\n    return result\n\nprint(find_max([\"\
    name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\n\
    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_char_count = 0\n    for word in words:\n\
    \        char_count = len(set(word))\n        if char_count > max_char_count:\n\
    \            max_char_count = char_count\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5b13itt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpf5b13itt.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpf5b13itt.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = None\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n\
    \            max_unique_chars = len(unique_chars)\n            max_word = word\n\
    \    return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefq06n2a.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpefq06n2a.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpefq06n2a.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    current_max = \"\"\n    for word in words:\n        if len(set(word))\
    \ > len(set(current_max)):\n            current_max = word\n    return current_max\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1srbiwa2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1srbiwa2.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1srbiwa2.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_value = 0\n    max_index = -1\n    for index, word in enumerate(words):\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_value:\n\
    \            max_value = unique_chars\n            max_index = index\n       \
    \ elif unique_chars == max_value:\n            if word < words[max_index]:\n \
    \               max_index = index\n    return words[max_index]\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    unique_chars_num = [len(set(word)) for word in words]\n    max_unique_chars_num\
    \ = max(unique_chars_num)\n    max_unique_chars_words = [word for word in words\
    \ if len(set(word)) == max_unique_chars_num]\n    return min(max_unique_chars_words)\n\
    \nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"\
    enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    ...\n    # your code here\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2gq8kdj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl2gq8kdj.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpl2gq8kdj.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    current_max = 0\n    max_word = \"\"\n    for word in words:\n\
    \        unique_chars = {}\n        for ch in word:\n            unique_chars[ch]\
    \ = True\n        if len(unique_chars) > current_max:\n            current_max\
    \ = len(unique_chars)\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4znwn0st.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4znwn0st.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp4znwn0st.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    current_max = 0\n    max_word = \"\"\n    for word in words:\n\
    \        word_len = len(set(word))\n        if current_max < word_len:\n     \
    \       current_max = word_len\n            max_word = word\n    return max_word\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3a8glah.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpi3a8glah.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpi3a8glah.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    len_words = {}\n    for word in words:\n        if len(set(word))\
    \ not in len_words:\n            len_words[len(set(word))] = [word]\n        else:\n\
    \            len_words[len(set(word))].append(word)\n    return sorted(len_words[max(len_words)])[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      unique_chars = {}\n        for char in word:\n            unique_chars[char]\
    \ = True\n        if len(unique_chars) > max_len:\n            max_len = len(unique_chars)\n\
    \            max_word = word\n    return max_word\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgcgso3_g.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgcgso3_g.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgcgso3_g.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return \"\"\n    max_word = words[0]\n\
    \    max_count = len(set(words[0]))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_count:\n            max_word = word\n            max_count = len(set(word))\n\
    \    return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbpxhq6w6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbpxhq6w6.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbpxhq6w6.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    word_tuple = [(word, len(set(word))) for word in words]\n   \
    \ sorted_words = sorted(word_tuple, key=lambda x: (x[1], x[0]), reverse=True)\n\
    \    return sorted_words[0][0]\n    # max_word = sorted_words[0][0]\n    # max_set\
    \ = sorted_words[0][1]\n    # for word in sorted_words:\n    #     if word[1]\
    \ == max_set:\n    #         return word[0]\n    #     elif word[1] < max_set:\n\
    \    #         return max_word\n    #     else:\n    #         return word[0]\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxotb8ai.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmppxotb8ai.py\", line 40,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppxotb8ai.py\", line 29,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\nprint(find_max([\"name\", \"\
    of\", \"string\"]))\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: "string\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpngouodf2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpngouodf2.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpngouodf2.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mwzhjwg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0mwzhjwg.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp0mwzhjwg.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_uniq = 0\n    for w in words:\n        uniq = set(w)\n  \
    \      if len(uniq) > max_uniq:\n            max_uniq = len(uniq)\n          \
    \  result = w\n    return result\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnafv_ub2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnafv_ub2.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpnafv_ub2.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    curr_word = \"\"\n    curr_word_set = set()\n    curr_count =\
    \ 0\n    max_count = 0\n    for word in words:\n        for char in word:\n  \
    \          if char not in curr_word_set:\n                curr_word_set.add(char)\n\
    \                curr_count += 1\n        if curr_count > max_count:\n       \
    \     max_count = curr_count\n            curr_word = word\n        curr_count\
    \ = 0\n        curr_word_set = set()\n    return curr_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnaa8h592.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpnaa8h592.py\", line 42,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpnaa8h592.py\", line 31,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # return the word with maximum unique characters\n    pass\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2_z9w41.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph2_z9w41.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmph2_z9w41.py\", line 17,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_string = \"\"\n    max_len = 0\n    for word in words:\n\
    \        current_len = len(set(word))\n        if current_len > max_len:\n   \
    \         max_len = current_len\n            max_string = word\n    return max_string\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3cvd10lt.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3cvd10lt.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp3cvd10lt.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_index = -1\n    max_char = -1\n    for index, word in enumerate(words):\n\
    \        unique_char = len(set(word))\n        if unique_char > max_char:\n  \
    \          max_char = unique_char\n            max_index = index\n    return words[max_index]\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsa4ts3h8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsa4ts3h8.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpsa4ts3h8.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # pass\n    words_dict = {}\n    if len(words) < 1:\n       \
    \ return None\n    else:\n        # go through each word in list, and remove duplicates\
    \ so that we can\n        # check the length of the set. Then add to the dictionary\n\
    \        for word in words:\n            words_dict[word] = len(set(word))\n \
    \       # print(words_dict)\n        # assign keys to an array and sort\n    \
    \    sorted_words = sorted(words_dict.keys())\n        # print(sorted_words)\n\
    \        # iterate through each word and compare with the next word, if the next\n\
    \        # word has a higher value and it's index is higher than the current word,\n\
    \        # return the current word\n        for i in range(len(sorted_words) -\
    \ 1):\n            if words_dict[sorted_words[i + 1]] > words_dict[sorted_words[i]]:\n\
    \                return sorted_words[i + 1]\n            else:\n             \
    \   continue\n        return sorted_words[0]\n\n\n\nprint(find_max([\"name\",\
    \ \"of\", \"string\"]))  # == \"string\"\nprint(find_max([\"name\", \"enam\",\
    \ \"game\"]))  # == \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])) \
    \ # == \"\"aaaaaaa\"\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprc6989z0.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmprc6989z0.py\", line 54,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmprc6989z0.py\", line 46,\
    \ in check\n    assert candidate(['play', 'this', 'game', 'of', 'footbott']) ==\
    \ 'footbott'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    if len(words) == 0:\n        return \"\"\
    \n    max_length = len(set(words[0]))\n    for word in words:\n        if len(set(word))\
    \ >= max_length:\n            max_length = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\nprint(find_max([\"name\", \"of\", \"string\"\
    ]))  # == \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # == \"\
    enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))  # == \"aaaaaaa\"\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\ngame\ncc\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxzrropx.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmppxzrropx.py\", line 40,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppxzrropx.py\", line 29,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyez9awfo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyez9awfo.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpyez9awfo.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # #########################################################################\n\
    \    # Your implementation here\n    # #########################################################################\n\
    \    # raise NotImplementedError(\"Your implementation here\")\n    def count_unique_chars(word):\n\
    \        # word = word.lower()\n        # counts = {}\n        # for c in word:\n\
    \        #     if c in counts:\n        #         counts[c] += 1\n        #  \
    \   else:\n        #         counts[c] = 1\n        # return len(counts)\n   \
    \     return len(set(word))\n\n    unique_chars = max(count_unique_chars(word)\
    \ for word in words)\n    return min(filter(lambda word: count_unique_chars(word)\
    \ == unique_chars, words))\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    count_words = [set(word) for word in words]\n    count_set =\
    \ []\n    for elem in count_words:\n        count_set.append(len(elem))\n    index\
    \ = count_set.index(max(count_set))\n    return words[index]\nprint(find_max([\"\
    name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\n\
    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeli9wvlh.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpeli9wvlh.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpeli9wvlh.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_chars = len(set(max_word))\n   \
    \ for i in range(1, len(words)):\n        word = words[i]\n        unique_chars\
    \ = len(set(word))\n        if unique_chars > max_chars:\n            max_chars\
    \ = unique_chars\n            max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp335cs138.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp335cs138.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp335cs138.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return \"\"\n    max_len = 0\n    max_word\
    \ = \"\"\n    for w in words:\n        if len(set(w)) > max_len:\n           \
    \ max_len = len(set(w))\n            max_word = w\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_v92yaq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpd_v92yaq.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpd_v92yaq.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    result = \"\"\n    for word in words:\n    \
    \    if len(set(word)) > max_len:\n            max_len = len(set(word))\n    \
    \        result = word\n    return result\n\nprint(find_max([\"name\", \"of\"\
    , \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yq73i7f.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp8yq73i7f.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8yq73i7f.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # your code here:\n    word_dict = {word: len(set(word)) for\
    \ word in words}\n    max_val = max(word_dict.values())\n    return sorted([word\
    \ for word, num in word_dict.items() if num == max_val])[0]\n```\n\n```python\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp1dvnsgnr.py\", line 17\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    for word in words:\n        if len(set(word))\
    \ > len(set(max_word)):\n            max_word = word\n    return max_word\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pzv39ig.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp6pzv39ig.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6pzv39ig.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n\
    \        if len(set(word)) > max_length:\n            max_length = len(set(word))\n\
    \            max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5791g6hu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp5791g6hu.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp5791g6hu.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # return max(words, key=lambda x: len(set(x))) # Using set to\
    \ remove duplicates\n    max_word = None\n    max_num_unique_chars = 0\n    for\
    \ word in words:\n        num_unique_chars = len(set(word))\n        if num_unique_chars\
    \ > max_num_unique_chars:\n            max_num_unique_chars = num_unique_chars\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpz21mel.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzpz21mel.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzpz21mel.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1kkfdvg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq1kkfdvg.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpq1kkfdvg.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Your code here\n    return max(words, key=lambda word: len(set(word)))\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ymwesx6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1ymwesx6.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1ymwesx6.py\", line 18,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    for word in words:\n        if len(set(word))\
    \ > len(set(max_word)):\n            max_word = word\n    return max_word\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqo72psjx.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqo72psjx.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqo72psjx.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = ''\n    for word in words:\n        if len(set(word))\
    \ > len(set(max_word)):\n            max_word = word\n    return max_word\n\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvbj491h.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphvbj491h.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmphvbj491h.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    assert words, \"List of words should not be empty\"\n    max_len\
    \ = -1\n    max_word = \"\"\n    for word in words:\n        if len(set(word))\
    \ > max_len:\n            max_len = len(set(word))\n            max_word = word\n\
    \    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwitejaq0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwitejaq0.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwitejaq0.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # max_unique_chars = max(map(lambda x: len(set(x)), words))\n\
    \    # return min(filter(lambda x: len(set(x)) == max_unique_chars, words))\n\
    \    return min(words, key=lambda x: (len(set(x)), x))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkdjk218.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnkdjk218.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpnkdjk218.py\", line 17,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_unique_chars = 0\n    max_unique_chars_word = \"\"\n    for\
    \ word in words:\n        unique_chars = set(word)\n        if len(unique_chars)\
    \ > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n    \
    \        max_unique_chars_word = word\n        elif len(unique_chars) == max_unique_chars:\n\
    \            if word < max_unique_chars_word:\n                max_unique_chars_word\
    \ = word\n    return max_unique_chars_word\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_unique_chars = 0\n    max_string = \"\"\n    for word in\
    \ words:\n        chars = set(word)\n        if len(chars) > max_unique_chars:\n\
    \            max_unique_chars = len(chars)\n            max_string = word\n  \
    \  return max_string\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmu51hyx4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmu51hyx4.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpmu51hyx4.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    word_dict = {}\n    for word in words:\n        word_dict[word]\
    \ = len(set(word))\n    word_max = max(word_dict, key=word_dict.get)\n    return\
    \ word_max\n\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8d_gc2_y.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp8d_gc2_y.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8d_gc2_y.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return None\n    if len(words) == 1:\n\
    \        return words[0]\n    else:\n        word_lengths = {}\n        for word\
    \ in words:\n            word_lengths[word] = len(set(word))\n        sorted_lengths\
    \ = sorted(word_lengths.items(), key=lambda kv: kv[1], reverse=True)\n       \
    \ unique_length = sorted_lengths[0][1]\n        for i in range(len(sorted_lengths)):\n\
    \            if sorted_lengths[i][1] < unique_length:\n                return\
    \ sorted_lengths[i-1][0]\n        return sorted_lengths[-1][0]\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjpvfer_.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpsjpvfer_.py\", line 40,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpsjpvfer_.py\", line 29,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_len_index = 0\n    for i, word in enumerate(words):\n\
    \        if len(set(word)) > max_len:\n            max_len = len(set(word))\n\
    \            max_len_index = i\n    return words[max_len_index]\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp65i3shkn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp65i3shkn.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp65i3shkn.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9441mh0m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9441mh0m.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9441mh0m.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmwcpp25.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplmwcpp25.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplmwcpp25.py\", line 16,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_val = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_val:\n            max_val = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkyr9lc3w.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkyr9lc3w.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkyr9lc3w.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = None\n    for word in words:\n  \
    \      num_unique = len(set(word))\n        if num_unique > max_len:\n       \
    \     max_len = num_unique\n            max_word = word\n    return max_word\n\
    \nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"\
    enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0lsc9yf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpe0lsc9yf.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpe0lsc9yf.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # TODO(zamfi): Store unique character count in a hash table keyed\
    \ by words.\n    # This can be used to avoid calculating number of unique characters\
    \ multiple\n    # times.\n    max_unique_char_count = 0\n    max_word = \"\"\n\
    \    for word in words:\n        unique_char_count = len(set(word))\n        if\
    \ unique_char_count > max_unique_char_count:\n            max_unique_char_count\
    \ = unique_char_count\n            max_word = word\n        elif unique_char_count\
    \ == max_unique_char_count:\n            if word < max_word:\n               \
    \ max_word = word\n    return max_word\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_chars = max([len(set(word)) for word in words])\n    return\
    \ [word for word in words if len(set(word)) == max_chars][0]\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfdc9aimh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfdc9aimh.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfdc9aimh.py\", line 17,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_count = len(set(max_word))\n   \
    \ for word in words[1:]:\n        count = len(set(word))\n        if count > max_count:\n\
    \            max_count = count\n            max_word = word\n        elif count\
    \ == max_count:\n            if word < max_word:\n                max_word = word\n\
    \    return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # This is O(n^2)\n    max_unique = 0\n    max_word = \"\"\n \
    \   for word in words:\n        unique = set(word)\n        if len(unique) > max_unique:\n\
    \            max_unique = len(unique)\n            max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pxr414s.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp7pxr414s.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp7pxr414s.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    for w in words:\n        max_len = max(max_len,\
    \ len(set(w)))\n    # max_len is the maximum number of unique characters in a\
    \ string\n    for w in words:\n        if len(set(w)) == max_len:\n          \
    \  return w\n    return \"\"\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp67oszdpa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp67oszdpa.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp67oszdpa.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_count = len(set(max_word))\n   \
    \ for word in words[1:]:\n        if len(set(word)) > max_count:\n           \
    \ max_word = word\n            max_count = len(set(word))\n    return max_word\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaepktn35.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpaepktn35.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpaepktn35.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for i in words:\n  \
    \      if len(set(i)) > max_length:\n            max_length = len(set(i))\n  \
    \          max_word = i\n    return max_word\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpctfymski.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpctfymski.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpctfymski.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # TODO: implement the function here\n    pass\n    result = \"\
    \"\n    for word in words:\n        # Find number of unique characters\n     \
    \   letters = []\n        for c in word:\n            if c not in letters:\n \
    \               letters.append(c)\n        if len(letters) > len(result):\n  \
    \          result = word\n        elif len(letters) == len(result):\n        \
    \    if word < result:\n                result = word\n    return result\n\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = None\n    max_num = 0\n    for word in words:\n  \
    \      num = len(set(word))\n        if num > max_num:\n            max_num =\
    \ num\n            max_word = word\n        elif num == max_num:\n           \
    \ if word < max_word:\n                max_word = word\n    return max_word\n\
    print(find_max([\"name\", \"of\", \"string\"]))\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    word_counts = []\n    for word in words:\n        word_counts.append((word,\
    \ len(set(word))))\n    max_count = max(word_counts, key=lambda x: x[1])[1]\n\
    \    return sorted([word for word, count in word_counts if count == max_count])[0]\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    raise NotImplementedError\n\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpyhzw4j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzpyhzw4j.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzpyhzw4j.py\", line 17,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmpzpyhzw4j.py\", line 13, in find_max\n    raise NotImplementedError\n\
    NotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_u9wiu2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6_u9wiu2.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6_u9wiu2.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word, max_count = None, 0\n    for word in words:\n     \
    \   uchars = set(word)\n        if len(uchars) > max_count:\n            max_word,\
    \ max_count = word, len(uchars)\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkf0qi2m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppkf0qi2m.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppkf0qi2m.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_chars = 0\n    for word in words:\n\
    \        if len(set(word)) > max_chars:\n            max_chars = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptu305pv7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmptu305pv7.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmptu305pv7.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2keg8uyp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2keg8uyp.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2keg8uyp.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    most_uniq = 0\n    most_uniq_word = ''\n    for word in words:\n\
    \        if len(set(word)) > most_uniq:\n            most_uniq = len(set(word))\n\
    \            most_uniq_word = word\n        elif len(set(word)) == most_uniq:\n\
    \            if most_uniq_word > word:\n                most_uniq_word = word\n\
    \    return most_uniq_word\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    word = words[0]\n    word_unique_chars = len(set(word))\n   \
    \ for w in words[1:]:\n        unique_chars = len(set(w))\n        if unique_chars\
    \ > word_unique_chars:\n            word = w\n            word_unique_chars =\
    \ unique_chars\n        elif unique_chars == word_unique_chars:\n            if\
    \ w < word:\n                word = w\n    return word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    word_with_max_unique_characters = words[0]\n    for word in words:\n\
    \        # If the next word has more unique characters than the current word,\n\
    \        # then update the current word\n        if len(set(word)) > len(set(word_with_max_unique_characters)):\n\
    \            word_with_max_unique_characters = word\n    return word_with_max_unique_characters\n\
    \nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"\
    enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtu74q_g.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpwtu74q_g.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwtu74q_g.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwazuslyn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwazuslyn.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwazuslyn.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return None\n    l = len(words)\n    max_word\
    \ = words[0]\n    max_len = len(set(words[0]))\n    for i in range(1, l):\n  \
    \      curr_word = words[i]\n        curr_len = len(set(curr_word))\n        if\
    \ curr_len > max_len:\n            max_word = curr_word\n            max_len =\
    \ curr_len\n        elif curr_len == max_len:\n            if curr_word < max_word:\n\
    \                max_word = curr_word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_words = []\n    for word in words:\n   \
    \     if len(set(word)) > max_len:\n            max_len = len(set(word))\n   \
    \         max_words = [word]\n        elif len(set(word)) == max_len:\n      \
    \      max_words.append(word)\n    return min(max_words)\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Create a set of char_sets, one for each word\n    char_sets\
    \ = [set(word) for word in words]\n    # Check the lengths of the sets\n    max_len\
    \ = max(len(char_set) for char_set in char_sets)\n    # Check the words against\
    \ the longest sets\n    valid_words = [word for word, char_set in zip(words, char_sets)\n\
    \                   if len(char_set) == max_len]\n    # Return the first word\
    \ in lexicographical order\n    return min(valid_words)\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # if len(words) == 0:\n    #     return \"\"\n    # unique_char_map\
    \ = {}\n    # for word in words:\n    #     word_dict = {}\n    #     for letter\
    \ in word:\n    #         if letter not in word_dict:\n    #             word_dict[letter]\
    \ = 1\n    #     unique_char_map[word] = len(word_dict)\n    # max_unique_chars\
    \ = max(unique_char_map.values())\n    # max_unique_words = []\n    # for word,\
    \ number in unique_char_map.items():\n    #     if number == max_unique_chars:\n\
    \    #         max_unique_words.append(word)\n    # max_unique_words.sort()\n\
    \    # return max_unique_words[0]\n\n    # return min([word for word in words\
    \ if len(set(word)) == max(map(lambda x: len(set(x)), words))])\n\n    return\
    \ min(filter(lambda x: len(set(x)) == max(map(lambda x: len(set(x)), words)),\
    \ words))\n\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n\
    \        # if len(set(word)) > max_length or (len(set(word)) == max_length and\
    \ word < max_word):\n        if len(set(word)) > max_length:\n            max_length\
    \ = len(set(word))\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxgsa2zq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpbxgsa2zq.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbxgsa2zq.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Write your code here\n    max_num = 0\n    max_word = \"\"\n\
    \    for word in words:\n        num = len(set(word))\n        if num > max_num:\n\
    \            max_num = num\n            max_word = word\n        elif num == max_num:\n\
    \            if word < max_word:\n                max_word = word\n    return\
    \ max_word\n\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwojruvf2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwojruvf2.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwojruvf2.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrrmgpaq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyrrmgpaq.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpyrrmgpaq.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_word_len = 0\n    for word in words:\n\
    \        uniques = set(word)\n        if len(uniques) >= max_word_len:\n     \
    \       max_word = word\n            max_word_len = len(uniques)\n    return max_word\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzbru6jg.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgzbru6jg.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgzbru6jg.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n\
    \        unique_letters = set(word)\n        if len(unique_letters) > max_length:\n\
    \            max_length = len(unique_letters)\n            max_word = word\n \
    \   return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3uhb96lw.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3uhb96lw.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp3uhb96lw.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_count = len(set(words[0]))\n   \
    \ for word in words[1:]:\n        unique_count = len(set(word))\n        if unique_count\
    \ > max_count:\n            max_count = unique_count\n            max_word = word\n\
    \        elif unique_count == max_count:\n            if word < max_word:\n  \
    \              max_word = word\n    return max_word\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihoubx36.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpihoubx36.py\", line 30,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpihoubx36.py\", line 18,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmpihoubx36.py\", line 14, in find_max\n    raise NotImplementedError()\n\
    NotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return None\n    max_len_word =\
    \ words[0]\n    max_len = len(set(words[0]))\n    for word in words:\n       \
    \ if len(set(word)) > max_len:\n            max_len = len(set(word))\n       \
    \     max_len_word = word\n    return max_len_word\n\nprint(find_max([\"name\"\
    , \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ky8qdzx.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3ky8qdzx.py\", line 39,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp3ky8qdzx.py\", line 28,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    uniques = {}\n    for i in words:\n        uniques[i] = len(set(i))\n\
    \    print(uniques)\n    maximum = max(uniques.values())\n    for i in words:\n\
    \        if uniques[i] == maximum:\n            return i\n\n\n\nprint(find_max([\"\
    name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\n\
    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "{'name': 4, 'of': 2, 'string': 6}\nstring\n{'name': 4, 'enam': 4, 'game':\
    \ 4}\nname\n{'aaaaaaa': 1, 'bb': 1, 'cc': 1}\naaaaaaa\n{'name': 4, 'of': 2, 'string':\
    \ 6}\n{'name': 4, 'enam': 4, 'game': 4}\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0f71xxi.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpp0f71xxi.py\", line 40,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpp0f71xxi.py\", line 29,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return \"\"\n    if len(words) == 1:\n\
    \        return words[0]\n    max_value = 0\n    max_word = None\n    for word\
    \ in words:\n        if len(set(word)) > max_value:\n            max_value = len(set(word))\n\
    \            max_word = word\n    return max_word\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1w6e9wj.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_1w6e9wj.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp_1w6e9wj.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # if not words:\n    #     return \"\"\n    # elif len(words)\
    \ == 1:\n    #     return words[0]\n    # else:\n    #     max_length = max(len(x)\
    \ for x in words)\n    #     max_words = [x for x in words if len(x) == max_length]\n\
    \    #     return min(max_words)\n\n    # max_word = \"\"\n    # max_length =\
    \ 0\n    # for word in words:\n    #     if len(set(word)) > max_length:\n   \
    \ #         max_length = len(set(word))\n    #         max_word = word\n    #\
    \ return max_word\n\n    # above doesn't work because it does not take account\
    \ of words with\n    # same number of unique characters\n\n    max_word = \"\"\
    \n    max_length = 0\n    for word in words:\n        unique_chars = set(word)\n\
    \        unique_length = len(unique_chars)\n        if unique_length > max_length:\n\
    \            max_length = unique_length\n            max_word = word\n       \
    \ elif unique_length == max_length:\n            max_word = min(max_word, word)\n\
    \    return max_word\n\n\n\nprint(find_max([\"name\", \"of\", \"string\"])) #==\
    \ \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"])) #== \"enam\"\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"])) #== \"\"aaaaaaa\"\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    longest = \"\"\n    for word in words:\n        if len(word)\
    \ > len(longest):\n            if len(set(word)) >= len(set(longest)):\n     \
    \           longest = word\n    return longest\n\nprint(find_max([\"name\", \"\
    of\", \"string\"])) #string\nprint(find_max([\"name\", \"enam\", \"game\"])) #enam\n\
    print(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"])) #aaaaaaa\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_p4lzae.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw_p4lzae.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpw_p4lzae.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return sorted(sorted(words), key=lambda word: len(set(word)))[-1]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjs4kbkwd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjs4kbkwd.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpjs4kbkwd.py\", line 17,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    unique_chars = [len(set(word)) for word in words]\n    best_index\
    \ = unique_chars.index(max(unique_chars))\n    return words[best_index]\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbsue8pu9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbsue8pu9.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbsue8pu9.py\", line 18,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvv_28h1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqvv_28h1.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpqvv_28h1.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    max_word = words[0]\n\
    \    for w in words:\n        if len(set(w)) > len(set(max_word)):\n         \
    \   max_word = w\n    return max_word\n\nprint(find_max([\"name\", \"of\", \"\
    string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfht7s06.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkfht7s06.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkfht7s06.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    unique_words = dict()\n    for word in words:\n        unique_words[word]\
    \ = len(set(word))\n    max_unique = max(unique_words.values())\n    return [key\
    \ for key, value in unique_words.items() if value == max_unique][0]\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7p4vos2m.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7p4vos2m.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp7p4vos2m.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n \ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0w4ulc0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpu0w4ulc0.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpu0w4ulc0.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_unique_chars = 0\n    max_unique_char_word = \"\"\n    for\
    \ word in words:\n        unique_chars = set(word)\n        if len(unique_chars)\
    \ > max_unique_chars:\n            max_unique_chars = len(unique_chars)\n    \
    \        max_unique_char_word = word\n        elif len(unique_chars) == max_unique_chars:\n\
    \            if word < max_unique_char_word:\n                max_unique_char_word\
    \ = word\n    return max_unique_char_word\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    word_max = words[0]\n\
    \    max_unique = len(set(word_max))\n    for word in words[1:]:\n        if len(set(word))\
    \ > max_unique:\n            word_max = word\n            max_unique = len(set(word))\n\
    \        elif len(set(word)) == max_unique:\n            if word < word_max:\n\
    \                word_max = word\n    return word_max\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_unique_chars = max(map(len, map(set, words)))\n    max_unique_words\
    \ = list(filter(lambda word: len(set(word)) == max_unique_chars, words))\n   \
    \ return min(max_unique_words)\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # determine max unique letters\n    max_unique = 0\n    for word\
    \ in words:\n        word_unique = len(set(word))\n        if word_unique > max_unique:\n\
    \            max_unique = word_unique\n\n    # filter by max unique letters and\
    \ lexicographical order\n    max_words = [word for word in words if len(set(word))\
    \ == max_unique]\n    max_words.sort()\n    return max_words[0]\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    words_unique_number = [len(set(i)) for i in words]\n    index\
    \ = words_unique_number.index(max(words_unique_number))\n    return words[index]\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdlbe2pw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkdlbe2pw.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpkdlbe2pw.py\", line 18,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_length = 0\n    max_words = []\n    for word in words:\n\
    \        word_list = list(word)\n        word_set = set(word_list)\n        if\
    \ len(word_set) > max_length:\n            max_length = len(word_set)\n      \
    \      max_words = [word]\n        elif len(word_set) == max_length:\n       \
    \     max_words.append(word)\n    max_words.sort()\n    return max_words[0]\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # First, we need to think about the trivial cases.\n    # 1.\
    \ What happens if the list is empty?\n    if len(words) == 0:\n        return\
    \ ''\n    # 2. What happens if it only contains one word?\n    elif len(words)\
    \ == 1:\n        return words[0]\n    # 3. How about if all the words are identical?\n\
    \    # 4. How about if all the words are of the same length?\n    # 5. How about\
    \ if all the words are of different lengths?\n    # 6. What if the list has different\
    \ words of different lengths?\n    else:\n        # We need to find a set of variables\
    \ to keep track of the maximum\n        # count and the word with the maximum\
    \ count.\n        max_count = 0\n        max_word = ''\n        for word in words:\n\
    \            # We can get the number of unique characters in a word by\n     \
    \       # converting it to a set and getting the length of the set.\n        \
    \    count = len(set(word))\n            # If this count is greater than the max,\
    \ we can update the\n            # max count and the word.\n            if count\
    \ > max_count:\n                max_count = count\n                max_word =\
    \ word\n            # Otherwise, we can compare the words and update the max word.\n\
    \            elif count == max_count:\n                if word < max_word:\n \
    \                   max_word = word\n        return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    elif len(words)\
    \ == 1:\n        return words[0]\n    else:\n        curr_max = \"\"\n       \
    \ curr_max_count = 0\n        for word in words:\n            char_count = len(set(word))\n\
    \            if char_count > curr_max_count:\n                curr_max = word\n\
    \                curr_max_count = char_count\n            elif char_count == curr_max_count:\n\
    \                if word < curr_max:\n                    curr_max = word\n  \
    \                  curr_max_count = char_count\n        return curr_max\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return \"\"\n    unique_words = {len(set(word)):\
    \ word for word in words}\n    return unique_words[max(unique_words.keys())]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w32ctzt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9w32ctzt.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9w32ctzt.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return None\n    elif len(words) == 1:\n\
    \        return words[0]\n    else:\n        find_max(words[1:])\n\n    # find\
    \ number of unique characters in a word\n    # if more than one word have the\
    \ same number of unique characters\n    # return one that comes first in lexicographical\
    \ order\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvonb653s.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvonb653s.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvonb653s.py\", line 24,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Collecting occurences of each character of each string\n  \
    \  max_unique_characters = 0\n    max_unique_character_string = \"\"\n    for\
    \ word in words:\n        unique_characters = set()\n        for character in\
    \ word:\n            unique_characters.add(character)\n        # Check if the\
    \ number of unique characters is greater than\n        # the max number of unique\
    \ characters\n        if len(unique_characters) > max_unique_characters:\n   \
    \         max_unique_characters = len(unique_characters)\n            max_unique_character_string\
    \ = word\n        # If there is a tie in number of unique characters,\n      \
    \  # return the one which comes first in lexicographical order\n        elif len(unique_characters)\
    \ == max_unique_characters:\n            if word < max_unique_character_string:\n\
    \                max_unique_character_string = word\n    return max_unique_character_string\n\
    \nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"\
    enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nenam\naaaaaaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    res = words[0]\n    for word in words:\n        if len(set(word))\
    \ > len(set(res)):\n            res = word\n    return res\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4law17q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpj4law17q.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpj4law17q.py\", line 20,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_length = 0\n    for word in words:\n        if len(set(word))\
    \ > max_length:\n            max_length = len(set(word))\n            max_word\
    \ = word\n    return max_word\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgg72q4zf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpgg72q4zf.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgg72q4zf.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return None\n    elif len(words)\
    \ == 1:\n        return words[0]\n    else:\n        # Find the string with max\
    \ number of unique characters\n        max_len = 0\n        max_index = 0\n  \
    \      for i in range(len(words)):\n            if len(set(words[i])) > max_len:\n\
    \                max_len = len(set(words[i]))\n                max_index = i\n\
    \        # Check if any other strings have equal number of unique characters\n\
    \        max_word = words[max_index]\n        for i in range(len(words)):\n  \
    \          if i != max_index and len(set(words[i])) == max_len:\n            \
    \    # If two strings have same number of unique characters, return\n        \
    \        # the first one in lexicographical order\n                if words[i]\
    \ < max_word:\n                    max_word = words[i]\n        return max_word\n\
    \    \n    \n    \n    \n\"\"\"\nRUN THIS CELL TO TEST YOUR CODE>\n\"\"\"\nfrom\
    \ nose.tools import assert_equal\n\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg_0ij4b.py\", line\
    \ 41, in <module>\n    from nose.tools import assert_equal\nModuleNotFoundError:\
    \ No module named 'nose'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7leovfp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph7leovfp.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmph7leovfp.py\", line 17,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = words[0]\n    max_unique_chars = len(set(words[0]))\n\
    \    for word in words[1:]:\n        unique_chars = len(set(word))\n        if\
    \ unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        elif unique_chars == max_unique_chars:\n\
    \            if word < max_word:\n                max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_string, max_length = \"\", 0\n    for w in words:\n     \
    \   if len(set(w)) > max_length:\n            max_string, max_length = w, len(set(w))\n\
    \    return max_string\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplycx22to.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplycx22to.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplycx22to.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_count = 0\n    result = \"\"\n    for item in words:\n  \
    \      count = len(set(item))\n        if count > max_count:\n            max_count\
    \ = count\n            result = item\n        elif count == max_count:\n     \
    \       if item < result:\n                result = item\n    return result\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qwsgypr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6qwsgypr.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6qwsgypr.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_string = \"\"\n    max_count = 0\n    for word in words:\n\
    \        # Find number of distinct characters in current word.\n        distinct_count\
    \ = len(set(word))\n        if distinct_count > max_count:\n            max_count\
    \ = distinct_count\n            max_string = word\n        elif distinct_count\
    \ == max_count:\n            if word < max_string:\n                max_string\
    \ = word\n    return max_string\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_unique_chars = 0\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n\
    \            max_unique_chars = unique_chars\n            max_word = word\n  \
    \  return max_word\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuc3wcl6h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuc3wcl6h.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpuc3wcl6h.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = None\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v4kytbm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1v4kytbm.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1v4kytbm.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_s = \"\"\n    max_char = 0\n    for word in words:\n    \
    \    unique_char = len(set(word))\n        if unique_char > max_char:\n      \
    \      max_char = unique_char\n            max_s = word\n    return max_s\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9sopux6p.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9sopux6p.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9sopux6p.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max = \"\"\n    max_num = 0\n    for word in words:\n       \
    \ word_len = len(set(word))\n        if word_len > max_num:\n            max =\
    \ word\n            max_num = word_len\n    return max\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppxsfdhc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpppxsfdhc.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpppxsfdhc.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Your code goes here.\n    max_word = words[0]\n    max_unique_chars\
    \ = len(set(words[0]))\n    for word in words[1:]:\n        unique_chars = len(set(word))\n\
    \        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n\
    \            max_word = word\n        elif unique_chars == max_unique_chars:\n\
    \            if word < max_word:\n                max_word = word\n    return\
    \ max_word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    idx = 0\n    while idx < len(words):\n        word = words[idx]\n\
    \        word_set = set(word)\n        if len(word_set) == len(word):\n      \
    \      return word\n        idx += 1\n    return \"\"\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6g2a11dr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6g2a11dr.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6g2a11dr.py\", line 22,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    num_unique_char = 0\n    max_unique_char = None\n    for word\
    \ in words:\n        num_unique_char = len(set(word))\n        if max_unique_char\
    \ is None or num_unique_char > len(set(max_unique_char)):\n            max_unique_char\
    \ = word\n        elif num_unique_char == len(set(max_unique_char)):\n       \
    \     if word < max_unique_char:\n                max_unique_char = word\n   \
    \ return max_unique_char\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    assert type(words) == list\n    assert words != []\n    word_dict\
    \ = {}\n    for word in words:\n        word_dict[word] = len(set(word))\n   \
    \ max_char = max(word_dict.values())\n    for word in word_dict:\n        if word_dict[word]\
    \ == max_char:\n            return word\n    return None\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rtrxhtw.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1rtrxhtw.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1rtrxhtw.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    number_of_unique_chars = [len(set(word)) for word in words]\n\
    \    max_unique_chars = max(number_of_unique_chars)\n    return words[number_of_unique_chars.index(max_unique_chars)]\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps__6czcb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmps__6czcb.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmps__6czcb.py\", line 18,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return \"\"\n    max = words[0]\n    for\
    \ word in words:\n        if len(set(word)) > len(set(max)):\n            max\
    \ = word\n    return max\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfw2f587.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvfw2f587.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpvfw2f587.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Check if any string has more than 1 unique characters\n   \
    \ unique_counts = [len(set(word)) for word in words]\n    if max(unique_counts)\
    \ == 1:\n        return \"\"\n\n    # Get list of all words having max unique\
    \ characters\n    max_val = max(unique_counts)\n    max_words = [word for word,\
    \ count in zip(words, unique_counts) if count == max_val]\n\n    # If multiple\
    \ max unique characters words, return the first in lexicographical order\n   \
    \ return min(max_words)\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupp6k66b.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpupp6k66b.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpupp6k66b.py\", line 28,\
    \ in check\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpka5ggzqb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpka5ggzqb.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpka5ggzqb.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhtufyaw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwhtufyaw.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwhtufyaw.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6x03i81_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6x03i81_.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp6x03i81_.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max = \"\"\n    max_amount = 0\n    for word in words:\n    \
    \    if len(set(word)) > max_amount:\n            max = word\n            max_amount\
    \ = len(set(word))\n    return max\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp72xtlxph.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp72xtlxph.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp72xtlxph.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return None\n    max_unique_count\
    \ = 0\n    max_unique_word = words[0]\n    for word in words:\n        if len(set(word))\
    \ > max_unique_count:\n            max_unique_count = len(set(word))\n       \
    \     max_unique_word = word\n    return max_unique_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaf543qe.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjaf543qe.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpjaf543qe.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # we can delete all words with number of uniques less than max\n\
    \    max_len = 0\n    for word in words:\n        max_len = max(max_len, len(set(word)))\n\
    \    uniques = []\n    for word in words:\n        if len(set(word)) == max_len:\n\
    \            uniques.append(word)\n    return sorted(uniques)[0]\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_len = 0\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4m1ipflr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4m1ipflr.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp4m1ipflr.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # set() removes duplicates\n    max_set = set()\n    max_word\
    \ = ''\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars)\
    \ > len(max_set):\n            max_set = unique_chars\n            max_word =\
    \ word\n        elif len(unique_chars) == len(max_set):\n            if word <\
    \ max_word:\n                max_word = word\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        unique_chars = set(word)\n        unique_count = len(unique_chars)\n\
    \        if unique_count > max_count:\n            max_count = unique_count\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq4u0loo2.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpq4u0loo2.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpq4u0loo2.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    most_unique = 0\n    max_word = \"\"\n    for word in words:\n\
    \        unique_chars = len(set(word))\n        if unique_chars > most_unique:\n\
    \            most_unique = unique_chars\n            max_word = word\n    return\
    \ max_word\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalg_g4jk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpalg_g4jk.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpalg_g4jk.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # YOUR CODE HERE\n    return \"\"\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2qm8h3y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpj2qm8h3y.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpj2qm8h3y.py\", line 17,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return ''\n    max_word = words[0]\n \
    \   max_chars = len(set(words[0]))\n    for word in words[1:]:\n        chars\
    \ = len(set(word))\n        if chars > max_chars:\n            max_chars = chars\n\
    \            max_word = word\n        elif chars == max_chars:\n            if\
    \ word < max_word:\n                max_word = word\n    return max_word\n\ndef\
    \ check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    def has_unique_characters(word: str) -> bool:\n        return\
    \ len(set(word)) == len(word)\n\n    words_with_unique_characters = [\n      \
    \  word for word in words if has_unique_characters(word)\n    ]\n\n    if not\
    \ words_with_unique_characters:\n        return None\n\n    return max(words_with_unique_characters,\
    \ key=len)\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fbgzhys.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_fbgzhys.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp_fbgzhys.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_chars = set()\n    max_word = ''\n    for word in words:\n\
    \        chars = set(word)\n        if len(chars) >= len(max_chars):\n       \
    \     max_chars = chars\n            max_word = word\n        if len(chars) ==\
    \ len(max_chars) and word < max_word:\n            max_chars = chars\n       \
    \     max_word = word\n    return max_word\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4er9mwz.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpd4er9mwz.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpd4er9mwz.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_count = 0\n    best_word = \"\"\n    for word in words:\n\
    \        word_count = len(set(word))\n        if word_count > max_count:\n   \
    \         max_count = word_count\n            best_word = word\n    return best_word\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpup_64a44.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpup_64a44.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpup_64a44.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    word_values = []\n    for word in words:\n        word_value\
    \ = {\"word\": word, \"value\": len(set(word))}\n        word_values.append(word_value)\n\
    \    max_value = max(word_values, key=lambda i: i[\"value\"])[\"value\"]\n   \
    \ words_with_max_value = [word_value[\"word\"] for word_value in word_values if\
    \ word_value[\"value\"] == max_value]\n    return sorted(words_with_max_value)[0]\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    ans = \"\"\n    for word in words:\n       \
    \ if len(set(word)) > max_len:\n            max_len = len(set(word))\n       \
    \     ans = word\n    return ans\n\nassert find_max([\"name\", \"of\", \"string\"\
    ]) == \"string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n\
    assert find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsynuocuj.py\", line\
    \ 22, in <module>\n    assert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\
    \nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_count = 0\n    for word in words:\n\
    \        counter = 0\n        # get a set of all characters in a word\n      \
    \  char_set = set(word)\n        # count the number of unique characters in a\
    \ word\n        for char in char_set:\n            counter += 1\n        # return\
    \ the word with maximum number of unique characters\n        if counter > max_count:\n\
    \            max_count = counter\n            max_word = word\n    return max_word\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuoqid6y4.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpuoqid6y4.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpuoqid6y4.py\", line 30,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7oke3r67.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7oke3r67.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp7oke3r67.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_chars = []\n    lexicographical_order = []\n    for word\
    \ in words:\n        chars = [char for char in word]\n        if len(set(chars))\
    \ == len(max_chars):\n            lexicographical_order.append(word)\n       \
    \ elif len(set(chars)) > len(max_chars):\n            max_chars = chars\n    \
    \        lexicographical_order = [word]\n    lexicographical_order.sort()\n  \
    \  return lexicographical_order[0]\n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n\
    \        if len(set(word)) > max_length:\n            max_length = len(set(word))\n\
    \            max_word = word\n    return max_word\n\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8m6458q7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8m6458q7.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8m6458q7.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n  \
    \      if len(set(word)) > max_len:\n            max_len = len(set(word))\n  \
    \          max_word = word\n    return max_word\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr3j_z237.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr3j_z237.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpr3j_z237.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return None\n    elif len(words)\
    \ == 1:\n        return words[0]\n    elif len(words) == 2:\n        w1 = set(words[0])\n\
    \        w2 = set(words[1])\n        if len(w1) > len(w2):\n            return\
    \ words[0]\n        elif len(w1) < len(w2):\n            return words[1]\n   \
    \     else:\n            if words[0] < words[1]:\n                return words[0]\n\
    \            else:\n                return words[1]\n    else:\n        return\
    \ find_max([find_max(words[:len(words)//2]),\n                         find_max(words[len(words)//2:])])\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_uniques = 0\n    max_word = \"\"\n    for word in words:\n\
    \        if len(set(word)) > max_uniques:\n            max_uniques = len(set(word))\n\
    \            max_word = word\n    return max_word\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjktuhzy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbjktuhzy.py\", line 33,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpbjktuhzy.py\", line 22,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_is6skx3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_is6skx3.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp_is6skx3.py\", line 16,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_set = set()\n    max_str = \"\"\n    for word in words:\n\
    \        curr_set = set(word)\n        if len(curr_set) > len(max_set):\n    \
    \        max_set = curr_set\n            max_str = word\n        elif len(curr_set)\
    \ == len(max_set):\n            if word < max_str:\n                max_str =\
    \ word\n    return max_str\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_char = 0\n    char_map = {}\n    max_word = None\n    for\
    \ word in words:\n        if len(word) > max_char:\n            max_char = len(word)\n\
    \            max_word = word\n            char_map.clear()\n            for ch\
    \ in word:\n                char_map[ch] = True\n            if len(char_map)\
    \ == max_char:\n                return word\n            else:\n             \
    \   max_char = len(char_map)\n                max_word = word\n        elif len(word)\
    \ == max_char:\n            char_map.clear()\n            for ch in word:\n  \
    \              char_map[ch] = True\n            if len(char_map) == max_char:\n\
    \                if word < max_word:\n                    max_word = word\n  \
    \  return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7dvhzmx.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpb7dvhzmx.py\", line 50,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpb7dvhzmx.py\", line 38,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcco_4g3g.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcco_4g3g.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcco_4g3g.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    sorted_words = sorted(words, key=len, reverse=True)\n    for\
    \ word in sorted_words:\n        if len(set(word)) == len(word):\n           \
    \ return word\n    return \"\"\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ufqov7z.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3ufqov7z.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp3ufqov7z.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    char_count_list = []\n    for i in words:\n        char_count_list.append(len(set(i)))\n\
    \    max_num = max(char_count_list)\n    max_count_index = char_count_list.index(max_num)\n\
    \    return words[max_count_index]\n    # # below is long way\n    # unique_count\
    \ = len(set(words[0]))\n    # max_count_index = 0\n    # for index, i in enumerate(words):\n\
    \    #     if len(set(i)) > unique_count:\n    #         unique_count = len(set(i))\n\
    \    #         max_count_index = index\n    # return words[max_count_index]\n\
    print(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"name\", \"\
    enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6cu4j4b.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpq6cu4j4b.py\", line 43,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpq6cu4j4b.py\", line 32,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return \"\"\n    max_num_chars = 0\n \
    \   max_word = \"\"\n    for word in words:\n        if len(set(word)) > max_num_chars:\n\
    \            max_num_chars = len(set(word))\n            max_word = word\n   \
    \ return max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi22cv1w8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpi22cv1w8.py\", line 36,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpi22cv1w8.py\", line 25,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    word_dict = {}\n    for word in words:\n        word_dict[word]\
    \ = len(set(word))\n    word_list = list(word_dict.items())\n    word_list.sort(key=lambda\
    \ x: x[1], reverse=True)\n    if word_list[0][1] == word_list[1][1]:\n       \
    \ return sorted(word_list)[0][0]\n    return word_list[0][0]\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppsfnsjr7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmppsfnsjr7.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppsfnsjr7.py\", line 27,\
    \ in check\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Write your code here:\n    max_len = 0\n    max_word = \"\"\
    \n    for word in words:\n        word_list = list(word)\n        word_list.sort()\n\
    \        word_list = ''.join(word_list)\n        word_list = set(word_list)\n\
    \        word_list = len(word_list)\n        if word_list > max_len:\n       \
    \     max_len = word_list\n            max_word = word\n    return max_word\n\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8f0i5p7n.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp8f0i5p7n.py\", line 41,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8f0i5p7n.py\", line 30,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda word: (len(set(word)), word))\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplbv6do2a.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplbv6do2a.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplbv6do2a.py\", line 17,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    raise NotImplementedError\n\n\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14nzzh0n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp14nzzh0n.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp14nzzh0n.py\", line 17,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmp14nzzh0n.py\", line 13, in find_max\n    raise NotImplementedError\n\
    NotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    unique_char_in_word = []\n    for word in words:\n        unique_char_in_word.append(len(set(word)))\n\
    \    max_unique_char = max(unique_char_in_word)\n    max_unique_index = unique_char_in_word.index(max_unique_char)\n\
    \    return words[max_unique_index]\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc785kfw0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpc785kfw0.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpc785kfw0.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    max_word = words[0]\n\
    \    max_count = len(set(max_word))\n    for w in words[1:]:\n        if len(set(w))\
    \ > max_count:\n            max_word = w\n            max_count = len(set(w))\n\
    \    return max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiskiod6u.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpiskiod6u.py\", line 39,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpiskiod6u.py\", line 28,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda x: len(set(x)))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplt65p0mm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplt65p0mm.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmplt65p0mm.py\", line 16,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = 0\n    word = \"\"\n    for i in words:\n        #\"\
    \".join() to create a string.\n        #\"\".join(set()) to create a string with\
    \ unique characters.\n        #\".join()\" to create a string with words in the\
    \ list of words.\n        #\"\".join(set(words)) to create a string with unique\
    \ words in the list of words.\n        if len(\"\".join(set(i))) > max_len:\n\
    \            max_len = len(\"\".join(set(i)))\n            word = i\n    return\
    \ word\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzu5tbp9s.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpzu5tbp9s.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpzu5tbp9s.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Edge case: if there are no words, return an empty string\n\
    \    if len(words) == 0:\n        return \"\"\n\n    # Initialize variables\n\
    \    max_word = words[0]\n    max_characters = len(set(max_word))\n\n    # Loop\
    \ through the list\n    for word in words:\n        # Get the number of unique\
    \ characters in the word\n        number_of_unique_characters = len(set(word))\n\
    \n        # If the new word has the maximum number of unique characters,\n   \
    \     # and it comes first in lexicographical order, update the max_word variable\n\
    \        if number_of_unique_characters > max_characters:\n            max_word\
    \ = word\n            max_characters = number_of_unique_characters\n        elif\
    \ number_of_unique_characters == max_characters:\n            if word < max_word:\n\
    \                max_word = word\n\n    return max_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # we are going to store words with their occurrences in a dict\n\
    \    # output should be a string\n    output = ''\n    occurrences = dict()\n\
    \    for word in words:\n        # use set comprehension to find the number of\
    \ unique characters\n        # in a word.\n        occurrences[word] = len({char\
    \ for char in word})\n    # find the max value of occurrences.\n    # We are making\
    \ use of the fact that max(dict) returns key with maximum value\n    # also, it\
    \ returns a key of first occurrence in case of a tie.\n    max_occurrence = max(occurrences,\
    \ key=occurrences.get)\n    # check if this is a tie by counting how many values\n\
    \    # are equal to max occurrence\n    if occurrences.values().count(occurrences[max_occurrence])\
    \ == 1:\n        output = max_occurrence\n    return output\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gdjh46y.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp7gdjh46y.py\", line 43,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp7gdjh46y.py\", line 31,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmp7gdjh46y.py\", line 27, in find_max\n    if occurrences.values().count(occurrences[max_occurrence])\
    \ == 1:\nAttributeError: 'dict_values' object has no attribute 'count'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_num = 0\n    max_word = ''\n    for word in words:\n    \
    \    temp = len(set(word))\n        if temp > max_num:\n            max_num =\
    \ temp\n            max_word = word\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdx1dfqhx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdx1dfqhx.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpdx1dfqhx.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    # Create an empty dictionary to store unique characters and their\
    \ count\n    unique_char_dict = {}\n    max_length = 0\n    max_word = \"\"\n\
    \    for word in words:\n        for char in word:\n            if char not in\
    \ unique_char_dict:\n                unique_char_dict[char] = 1\n            else:\n\
    \                unique_char_dict[char] += 1\n        # len(unique_char_dict)\
    \ represent the number of unique characters for each word\n        if len(unique_char_dict)\
    \ > max_length:\n            max_length = len(unique_char_dict)\n            max_word\
    \ = word\n        unique_char_dict.clear()\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzyq_r1d.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgzyq_r1d.py\", line 43,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpgzyq_r1d.py\", line 32,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcohnxsou.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcohnxsou.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcohnxsou.py\", line 15,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    #TODO\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmput7qingy.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmput7qingy.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmput7qingy.py\", line 17,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda word: len(set(word)))\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcoan96iu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcoan96iu.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpcoan96iu.py\", line 16,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    max_word = words[0]\n\
    \    max_count = len(set(words[0]))\n    for word in words[1:]:\n        uniq_chars\
    \ = len(set(word))\n        if uniq_chars > max_count:\n            max_count\
    \ = uniq_chars\n            max_word = word\n        elif uniq_chars == max_count:\n\
    \            if word < max_word:\n                max_word = word\n    return\
    \ max_word\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    unique_words = set()\n    for word in words:\n        unique_words.add(len(set(word)))\n\
    \    max_len = max(unique_words)\n    result = []\n    for word in words:\n  \
    \      if len(set(word)) == max_len:\n            result.append(word)\n    if\
    \ result:\n        return min(result)\n    return None\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = None\n    max_char_count = 0\n    for word in words:\n\
    \        char_count = len(set(word))\n        if char_count > max_char_count:\n\
    \            max_char_count = char_count\n            max_word = word\n    return\
    \ max_word\n\nprint(find_max([\"name\", \"of\", \"string\"]))\nprint(find_max([\"\
    name\", \"enam\", \"game\"]))\nprint(find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]))\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg52bbjrz.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpg52bbjrz.py\", line 38,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpg52bbjrz.py\", line 27,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7hmfwid.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb7hmfwid.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpb7hmfwid.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    if len(words) ==\
    \ 1:\n        return words[0]\n    i = 0\n    max_len = 0\n    max_i = 0\n   \
    \ while i < len(words):\n        words[i] = list(words[i])\n        words[i].sort()\n\
    \        words[i] = \"\".join(words[i])\n        if len(words[i]) > max_len:\n\
    \            max_len = len(words[i])\n            max_i = i\n        i += 1\n\
    \    return words[max_i]\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9tp76oo.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpf9tp76oo.py\", line 42,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpf9tp76oo.py\", line 30,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_unique_chars = 0\n    max_unique_word = \"\"\n    for word\
    \ in words:\n        word_unique_count = len(set(word))\n        if word_unique_count\
    \ > max_unique_chars:\n            max_unique_chars = word_unique_count\n    \
    \        max_unique_word = word\n    return max_unique_word\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxybob5a.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwxybob5a.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpwxybob5a.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_length = 0\n    max_word = \"\"\n    for word in words:\n\
    \        if len(set(word)) > max_length:\n            max_length = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8qtr50l.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpc8qtr50l.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpc8qtr50l.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if not words:\n        return ''\n    max_count = 0\n    max_word\
    \ = ''\n    for word in words:\n        # if the word has more unique characters\
    \ than max_count, update max_count and max_word\n        if len(set(word)) > max_count:\n\
    \            max_count = len(set(word))\n            max_word = word\n       \
    \ # if the words have the same number of unique characters\n        # keep the\
    \ first occurence of the word in lexicographical order\n        elif len(set(word))\
    \ == max_count:\n            if word < max_word:\n                max_word = word\n\
    \    return max_word\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\"\
    , \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpnoelx79q.py\", line 31\n    find_max([\"aaaaaaa\", \"\
    bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n                                           ^\n\
    SyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    #TODO: Implement this\n    pass\n\ndef check(candidate):\n  \
    \  assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ci40plp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5ci40plp.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp5ci40plp.py\", line 17,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = len(words[0])\n    max_word = words[0]\n    for word\
    \ in words:\n        if len(word) > max_len:\n            max_len = len(word)\n\
    \            max_word = word\n    return max_word\n\nprint(find_max([\"name\"\
    , \"of\", \"string\"]))\nprint(find_max([\"name\", \"enam\", \"game\"]))\nprint(find_max([\"\
    aaaaaaa\", \"bb\" ,\"cc\"]))\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: "string\nname\naaaaaaa\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1p7gm4nz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp1p7gm4nz.py\", line 37,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp1p7gm4nz.py\", line 26,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    words_list = []\n    for i in words:\n        words_list.append(set(i))\n\
    \    max_len = max(words_list, key=len)\n    max_index = words_list.index(max_len)\n\
    \    return words[max_index]\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplg5ftl2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpplg5ftl2.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpplg5ftl2.py\", line 21,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv29hja_6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpv29hja_6.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpv29hja_6.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=len)\ndef check(candidate):\n    assert\
    \ candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4xb1kd5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpe4xb1kd5.py\", line 27,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpe4xb1kd5.py\", line 16,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_char = 0\n    max_word = \"\"\n    for word in words:\n \
    \       if len(set(word)) > max_char:\n            max_char = len(set(word))\n\
    \            max_word = word\n    return max_word\n\ndef check(candidate):\n \
    \   assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj71hq5ag.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpj71hq5ag.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpj71hq5ag.py\", line 23,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_word = \"\"\n    max_num = 0\n    for word in words:\n  \
    \      unique_chars = set(word)\n        unique_num = len(unique_chars)\n    \
    \    if unique_num > max_num:\n            max_num = unique_num\n            max_word\
    \ = word\n    return max_word\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnex8xvui.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnex8xvui.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpnex8xvui.py\", line 24,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    if len(words) == 0:\n        return \"\"\n    elif len(words)\
    \ == 1:\n        return words[0]\n    else:\n        unique_characters = {}\n\
    \        for word in words:\n            for char in word:\n                if\
    \ char not in unique_characters:\n                    unique_characters[char]\
    \ = True\n        max_unique_characters = []\n        for word in words:\n   \
    \         unique_chars = []\n            for char in word:\n                if\
    \ char in unique_characters:\n                    unique_chars.append(char)\n\
    \            max_unique_characters.append(len(unique_chars))\n        max_value\
    \ = max(max_unique_characters)\n        max_value_index = max_unique_characters.index(max_value)\n\
    \        return words[max_value_index]\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsedoctb5.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpsedoctb5.py\", line 46,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpsedoctb5.py\", line 35,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\nassert find_max([\"name\", \"of\", \"string\"]) == \"\
    string\"\nassert find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nassert\
    \ find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"aaaaaaa\"\nprint(\"PASSED\")\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjvm5m4qo.py\", line\
    \ 15, in <module>\n    assert find_max([\"name\", \"of\", \"string\"]) == \"string\"\
    \nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    word = None\n    max_unique = 0\n    for w in words:\n      \
    \  num_unique = 0\n        seen = set()\n        for char in w:\n            if\
    \ char not in seen:\n                num_unique += 1\n                seen.add(char)\n\
    \        if num_unique > max_unique:\n            max_unique = num_unique\n  \
    \          word = w\n    return word\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfp24ncjs.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfp24ncjs.py\", line 39,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfp24ncjs.py\", line 28,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    max_len = max(map(len, words))\n    return max([word for word\
    \ in words if len(word) == max_len], key=lambda x: x)\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptppdpr5w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptppdpr5w.py\", line 29,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmptppdpr5w.py\", line 18,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0s00qf2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg0s00qf2.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpg0s00qf2.py\", line 16,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    d = {}\n    for word in words:\n        l = []\n        for character\
    \ in word:\n            if character not in l:\n                l.append(character)\n\
    \        d[word] = len(l)\n    # print(d)\n    max = 0\n    max_word = ''\n  \
    \  for key, value in d.items():\n        if value > max:\n            max = value\n\
    \            max_word = key\n        elif value == max:\n            if key <\
    \ max_word:\n                max_word = key\n    return max_word\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    dict_ = {}\n    for word in words:\n        dict_[word] = len(set(word))\n\
    \    return min([key for key, val in dict_.items() if val == max(dict_.values())])\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    return max(words, key=lambda word: (len(set(word)), word))\n\n\
    def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2sfzzi2y.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2sfzzi2y.py\", line 28,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp2sfzzi2y.py\", line 17,\
    \ in check\n    assert candidate(['name', 'enam', 'game']) == 'enam'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    words.sort()\n    curr_max = \"\"\n    for word in words:\n \
    \       temp = list(word)\n        temp.sort()\n        word = ''.join(temp)\n\
    \        curr_max = get_max(word, curr_max)\n    return curr_max\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_r885c_q.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_r885c_q.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp_r885c_q.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmp_r885c_q.py\", line 19, in find_max\n    curr_max = get_max(word,\
    \ curr_max)\nNameError: name 'get_max' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    results = []\n    # TODO: write your code here\n    return results\n\
    \n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8181hvlg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8181hvlg.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8181hvlg.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    find_max([\"name\", \"\
    of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"])\
    \ == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n\
    \    \"\"\"\n    from collections import Counter\n    unique_char_dict = {}\n\
    \    unique_char_max = 0\n    unique_max_word = \"\"\n    # Calculate the number\
    \ of unique characters in each word\n    for word in words:\n        unique_char_dict[word]\
    \ = len(Counter(word))\n        # Find the unique max\n        if unique_char_dict[word]\
    \ > unique_char_max:\n            unique_char_max = unique_char_dict[word]\n \
    \           unique_max_word = word\n        # If multiple words have same number\
    \ of unique characters,\n        # return the one which comes first in lexicographical\
    \ order\n        elif unique_char_dict[word] == unique_char_max:\n           \
    \ if word < unique_max_word:\n                unique_max_word = word\n    return\
    \ unique_max_word\n\n\"\"\"\nRun-time analysis:\nTime:\nWe have to run through\
    \ all the words, so the time complexity is O(N)\nwhere N is the number of words.\n\
    \nSpace:\nWe create a dictionary to store the number of unique characters for\n\
    each word, so the space complexity is O(N)\n\"\"\"\n\n\"\"\"\nAlternative 1:\n\
    The Counter object has a method called most_common(), which returns\nthe most\
    \ common elements and their counts in descending order.\nSince most_common() returns\
    \ a list of tuples, we need to get the\nfirst element of the first tuple.\nThe\
    \ word is stored in the first element, which is 0. The frequency\nis stored in\
    \ the second element, which is 1.\n\"\"\"\n\nfrom collections import Counter\n\
    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
    \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
    \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n \
    \   assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n\
    \    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
    \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
    \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
