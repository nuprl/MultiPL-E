name: HumanEval_128_prod_signs
language: py
results:
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x) for x in\
    \ arr) * prod(sign(x) for x in arr)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_3rcshjo.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_3rcshjo.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp_3rcshjo.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp_3rcshjo.py\"\
    , line 17, in prod_signs\n    return sum(abs(x) for x in arr) * prod(sign(x) for\
    \ x in arr)\nNameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum = 0\n    for i in arr:\n\
    \        sum += abs(i)\n    return sum * product(arr)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezd26ptb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpezd26ptb.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpezd26ptb.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpezd26ptb.py\"\
    , line 20, in prod_signs\n    return sum * product(arr)\nNameError: name 'product'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76n9nu9j.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp76n9nu9j.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp76n9nu9j.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_ = 0\n    prod = 1\n \
    \   for x in arr:\n        if x > 0:\n            sum_ += x\n            prod\
    \ *= 1\n        elif x < 0:\n            sum_ += -x\n            prod *= -1\n\
    \        else:\n            prod = 0\n    return sum_ * prod\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # your code here\n    if not arr:\n        return None\n    product_of_signs\
    \ = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num > 0:\n \
    \           product_of_signs *= 1\n        elif num < 0:\n            product_of_signs\
    \ *= -1\n        else:\n            product_of_signs *= 0\n        sum_of_magnitudes\
    \ += abs(num)\n    return sum_of_magnitudes * product_of_signs\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    product = 1\n    for n in\
    \ arr:\n        product *= n // abs(n) if n else 0\n    return sum(map(abs, arr))\
    \ * product\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    ans = 0\n    prod = 1\n  \
    \  for val in arr:\n        prod *= val\n        ans += abs(val)\n    return prod*ans\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9tiye5q9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9tiye5q9.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp9tiye5q9.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(list(map(abs, arr)))\
    \ * prod(list(map(lambda x: -1 if x < 0 else (1 if x > 0 else 0), arr)))\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgbhq_yw0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgbhq_yw0.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpgbhq_yw0.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpgbhq_yw0.py\"\
    , line 17, in prod_signs\n    return sum(list(map(abs, arr))) * prod(list(map(lambda\
    \ x: -1 if x < 0 else (1 if x > 0 else 0), arr)))\nNameError: name 'prod' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * reduce(lambda x, y: x * y, map(lambda x: 0 if x == 0 else (1 if x > 0 else\
    \ -1), arr))\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg6mggcm6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpg6mggcm6.py\", line 29,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpg6mggcm6.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpg6mggcm6.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: 0 if x == 0 else (1 if x > 0 else -1), arr))\nNameError:\
    \ name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        signs\
    \ = [1 if el >= 0 else -1 for el in arr]\n        return sum(abs(el) for el in\
    \ arr) * reduce(lambda x, y: x * y, signs)\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kyt2oua.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5kyt2oua.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp5kyt2oua.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp5kyt2oua.py\"\
    , line 19, in prod_signs\n    return sum(abs(el) for el in arr) * reduce(lambda\
    \ x, y: x * y, signs)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    res = 1\n    for num in arr:\n\
    \        if num < 0:\n            res *= -1\n        elif num > 0:\n         \
    \   res *= 1\n        else:\n            res *= 0\n    res *= sum(map(abs, arr))\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    sum_prod = 0\n    sgn_prod\
    \ = 1\n    for elem in arr:\n        sum_prod += abs(elem)\n        sgn_prod *=\
    \ elem // abs(elem)\n    return sum_prod * sgn_prod\ndef check(candidate):\n \
    \   assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0a5ayhhq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0a5ayhhq.py\", line 34,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0a5ayhhq.py\", line 25,\
    \ in check\n    assert candidate([0, 1]) == 0\n  File \"/tmp/tmp0a5ayhhq.py\"\
    , line 21, in prod_signs\n    sgn_prod *= elem // abs(elem)\nZeroDivisionError:\
    \ integer division or modulo by zero\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(abs(num) for num\
    \ in arr) * prod(sign(num) for num in arr)\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhhs_5cn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnhhs_5cn.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpnhhs_5cn.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpnhhs_5cn.py\"\
    , line 17, in prod_signs\n    return sum(abs(num) for num in arr) * prod(sign(num)\
    \ for num in arr)\nNameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    mult = 1\n    for i in arr:\n\
    \        mult *= sign(i)\n    return sum(map(abs, arr)) * mult\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmkz9asv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmplmkz9asv.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmplmkz9asv.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmplmkz9asv.py\"\
    , line 19, in prod_signs\n    mult *= sign(i)\nNameError: name 'sign' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqgw1bo5_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqgw1bo5_.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpqgw1bo5_.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_x9t5bt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpz_x9t5bt.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpz_x9t5bt.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    res = 1\n    for el in arr:\n\
    \        if el == 0:\n            return 0\n        if el < 0:\n            res\
    \ *= -1\n        res *= abs(el)\n    return res\n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n \
    \   assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lem23hn.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp0lem23hn.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0lem23hn.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        arr =\
    \ list(map(lambda x: x if x else 1, arr))\n        return sum(list(map(abs, arr)))\
    \ * reduce(lambda x, y: x * y, arr)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfe30zato.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfe30zato.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpfe30zato.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpfe30zato.py\"\
    , line 19, in prod_signs\n    return sum(list(map(abs, arr))) * reduce(lambda\
    \ x, y: x * y, arr)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    signs, magnitudes = [], []\n\
    \    for item in arr:\n        if item > 0:\n            signs.append(1)\n   \
    \     elif item < 0:\n            signs.append(-1)\n        else:\n          \
    \  signs.append(0)\n        magnitudes.append(abs(item))\n    return sum(magnitudes)\
    \ * (1 if sum(signs) > 0 else -1)\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpez9zutsb.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpez9zutsb.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpez9zutsb.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # your code here\n    if len(arr) == 0:\n        return None\n \
    \   else:\n        s = 0\n        for i in arr:\n            if i > 0:\n     \
    \           s += i\n            elif i < 0:\n                s -= i\n        p\
    \ = 1\n        for i in arr:\n            if i != 0:\n                p *= i//abs(i)\n\
    \        return s*p\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7i1rf5i2.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp7i1rf5i2.py\", line 42,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp7i1rf5i2.py\", line 33,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    product = 1\n    sum = 0\n\
    \    for el in arr:\n        product *= el / abs(el) if el != 0 else 1\n     \
    \   sum += abs(el)\n    return sum * product\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuohwchg7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuohwchg7.py\", line 34,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpuohwchg7.py\", line 25,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sign = lambda x: 1 if x >=\
    \ 0 else -1\n    prods = 1\n    signs = 1\n    sum_ = 0\n    for x in arr:\n \
    \       if x == 0:\n            prods = 1\n            signs = 1\n        else:\n\
    \            prods *= x\n            signs *= sign(x)\n        sum_ += abs(x)\n\
    \    return sum_ * signs\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcr0ckm0l.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpcr0ckm0l.py\", line 42,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpcr0ckm0l.py\", line 33,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        pass\n\
    \    res = 0\n    sign = 1\n    for i in arr:\n        res += abs(i)\n       \
    \ if i != 0:\n            sign *= i // abs(i)\n    return res * sign\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjdf9pzf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpwjdf9pzf.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpwjdf9pzf.py\", line 29,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    prod = 1\n    if len(arr) == 0:\n        return None\n    for num\
    \ in arr:\n        prod *= num\n    return prod - (prod // abs(prod))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq7o0031w.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq7o0031w.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpq7o0031w.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptyvv46ub.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptyvv46ub.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmptyvv46ub.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5czo99g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpd5czo99g.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpd5czo99g.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(abs(x) for x in\
    \ arr) * product(sign(x) for x in arr)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ld6geza.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3ld6geza.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp3ld6geza.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp3ld6geza.py\"\
    , line 17, in prod_signs\n    return sum(abs(x) for x in arr) * product(sign(x)\
    \ for x in arr)\nNameError: name 'product' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    p = 1\n    s = 0\n    for\
    \ a in arr:\n        p *= -1 if a < 0 else (0 if a == 0 else 1)\n        s +=\
    \ abs(a)\n    return s * p\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod_all = lambda arr: reduce(lambda\
    \ x, y: x * y, arr)\n    prod_signs = prod_all(list(map(lambda x: x // abs(x),\
    \ arr)))\n    sum_magnitudes = sum(list(map(lambda x: abs(x), arr)))\n    return\
    \ prod_signs * sum_magnitudes\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3bi_zb4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpf3bi_zb4.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpf3bi_zb4.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpf3bi_zb4.py\"\
    , line 18, in prod_signs\n    prod_signs = prod_all(list(map(lambda x: x // abs(x),\
    \ arr)))\n  File \"/tmp/tmpf3bi_zb4.py\", line 17, in <lambda>\n    prod_all =\
    \ lambda arr: reduce(lambda x, y: x * y, arr)\nNameError: name 'reduce' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    elif len(arr) == 1:\n    \
    \    return 0\n    # need to multiply by -1 if -1 appears in arr\n    sign = 1\n\
    \    if -1 in arr:\n        sign = -1\n    return sign * sum(abs(x) for x in arr)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiu5jyxy1.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpiu5jyxy1.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpiu5jyxy1.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    p_signs = 1\n    num_sum =\
    \ 0\n    for i in arr:\n        if i < 0:\n            p_signs *= -1\n       \
    \ num_sum += abs(i)\n    return num_sum * p_signs\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n \
    \   assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxd03giq3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxd03giq3.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpxd03giq3.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(abs(val) for val\
    \ in arr) * reduce(lambda x, y: x * y,\n                                     \
    \            [sign(val) for val in arr])\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj69du1wk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpj69du1wk.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpj69du1wk.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpj69du1wk.py\"\
    , line 17, in prod_signs\n    return sum(abs(val) for val in arr) * reduce(lambda\
    \ x, y: x * y,\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    s = 0\n    p = 1\n    for\
    \ x in arr:\n        s += abs(x)\n        p *= 1 if x > 0 else -1 if x < 0 else\
    \ 0\n    return s * p\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    s = sum(map(abs, arr))\n    p = 1\n    for n in arr:\n        p\
    \ *= 1 if n > 0 else -1 if n < 0 else 0\n    return s * p if arr else None\n\n\
    print(prod_signs([1, 2, 2, -4]))\nprint(prod_signs([0, 1]))\nprint(prod_signs([]))\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: "-9\n0\nNone\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    # prod stores product of signs\n\
    \    prod = 1\n    # mags stores sum of magnitudes\n    mags = 0\n    for i in\
    \ arr:\n        if i < 0:\n            prod *= -1\n        elif i == 0:\n    \
    \        # multiplication by 0 is equal to 0\n            prod = 0\n         \
    \   # sum of magnitudes is also equal to 0\n            mags = 0\n           \
    \ break\n        mags += abs(i)\n    return mags * prod\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) < 1:\n        return None\n    signs = {num: 1 if num\
    \ == 0 else (1 if num > 0 else -1) for num in arr}\n    return sum([abs(num) for\
    \ num in arr]) * reduce(lambda x, y: x * y, signs.values())\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdgbipx9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkdgbipx9.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpkdgbipx9.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpkdgbipx9.py\"\
    , line 18, in prod_signs\n    return sum([abs(num) for num in arr]) * reduce(lambda\
    \ x, y: x * y, signs.values())\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod_signs = 1\n    prod_magnitudes\
    \ = 1\n    for num in arr:\n        prod_signs *= cmp(num, 0)\n        prod_magnitudes\
    \ *= abs(num)\n    return prod_signs * prod_magnitudes\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0nxqv_pj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0nxqv_pj.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0nxqv_pj.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp0nxqv_pj.py\"\
    , line 20, in prod_signs\n    prod_signs *= cmp(num, 0)\nNameError: name 'cmp'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        return\
    \ sum(abs(x) for x in arr) * np.prod(np.sign(arr))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptp76gcqc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptp76gcqc.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmptp76gcqc.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmptp76gcqc.py\"\
    , line 18, in prod_signs\n    return sum(abs(x) for x in arr) * np.prod(np.sign(arr))\n\
    NameError: name 'np' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    ans = None\n    for i in arr:\n        if ans == None:\n       \
    \     ans = abs(i)\n        else:\n            ans = ans * abs(i)\n\n    if ans\
    \ == None:\n        return None\n    else:\n        ans = ans * prod(sign(i) for\
    \ i in arr)\n        return ans\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppeqj7036.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppeqj7036.py\", line 39,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmppeqj7036.py\", line 29,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmppeqj7036.py\"\
    , line 25, in prod_signs\n    ans = ans * prod(sign(i) for i in arr)\nNameError:\
    \ name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod_of_signs = 1\n    sum_of_magnitudes\
    \ = 0\n    for el in arr:\n        if el == 0:\n            continue\n       \
    \ sum_of_magnitudes += abs(el)\n        prod_of_signs *= sign(el)\n    return\
    \ prod_of_signs * sum_of_magnitudes\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzimk3mwi.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpzimk3mwi.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpzimk3mwi.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpzimk3mwi.py\"\
    , line 23, in prod_signs\n    prod_of_signs *= sign(el)\nNameError: name 'sign'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # your code here\n\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbi0k5ttv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbi0k5ttv.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpbi0k5ttv.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    mult = 1\n    for i in arr:\n\
    \        if i == 0:\n            return 0\n        mult *= i / abs(i)\n    return\
    \ sum(abs(i) for i in arr) * mult\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(abs(num) for num\
    \ in arr) * prod(sign(num) for num in arr)\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdcse3k96.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdcse3k96.py\", line 29,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpdcse3k96.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpdcse3k96.py\"\
    , line 17, in prod_signs\n    return sum(abs(num) for num in arr) * prod(sign(num)\
    \ for num in arr)\nNameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sum =\
    \ 0\n    for x in arr:\n        sum += abs(x)\n        if x > 0:\n           \
    \ prod *= 1\n        elif x < 0:\n            prod *= -1\n    return sum * prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6gcgu3hz.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp6gcgu3hz.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp6gcgu3hz.py\", line 29,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # your code here\n    return None\n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n \
    \   assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf_c0b_sb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf_c0b_sb.py\", line 29,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpf_c0b_sb.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    neg = pos = 0\n    for el\
    \ in arr:\n        if el < 0:\n            neg += 1\n        elif el > 0:\n  \
    \          pos += 1\n    if neg == 0 or pos == 0:\n        return 0\n    sign\
    \ = 1 if neg % 2 == 0 else -1\n    return sum(map(abs, arr)) * sign\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp6nmxwkp.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpp6nmxwkp.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpp6nmxwkp.py\", line 35,\
    \ in check\n    assert candidate([-1, 1, 1, 0]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    return None\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp47ykuq_x.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp47ykuq_x.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp47ykuq_x.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    summa = 0\n\
    \    for x in arr:\n        if x > 0:\n            prod *= 1\n        elif x <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        summa\
    \ += abs(x)\n    return summa * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    if len(arr) == 1:\n      \
    \  return abs(arr[0])\n    sum = 0\n    sign = 1\n    for num in arr:\n      \
    \  sum += abs(num)\n        if num:\n            sign *= num // abs(num)\n   \
    \ return sum * sign\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7jeq93ou.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7jeq93ou.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp7jeq93ou.py\", line 28,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    if 0 in arr:\n        return\
    \ 0\n    return sum(abs(n) for n in arr) * reduce(lambda x, y: x * y, arr) / abs(reduce(lambda\
    \ x, y: x * y, arr))\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5h0nnfk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpz5h0nnfk.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpz5h0nnfk.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpz5h0nnfk.py\"\
    , line 19, in prod_signs\n    return sum(abs(n) for n in arr) * reduce(lambda\
    \ x, y: x * y, arr) / abs(reduce(lambda x, y: x * y, arr))\nNameError: name 'reduce'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    signs = [1 if n > 0 else -1\
    \ if n < 0 else 0 for n in arr]\n    return sum(abs(n) for n in arr) * prod(signs)\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq797nt6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwq797nt6.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpwq797nt6.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpwq797nt6.py\"\
    , line 18, in prod_signs\n    return sum(abs(n) for n in arr) * prod(signs)\n\
    NameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    return None\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0zy4bej.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu0zy4bej.py\", line 29,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpu0zy4bej.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sg, mag = 1, 0\n    for a\
    \ in arr:\n        if a > 0:\n            sg *= 1\n        elif a < 0:\n     \
    \       sg *= -1\n        else:\n            sg = 0\n        mag += abs(a)\n \
    \   return sg * mag\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    if len(arr) == 1:\n      \
    \  return arr[0]\n    arr = [abs(i) for i in arr]\n    arr_prod = sum(arr)\n \
    \   for i in arr:\n        arr_prod *= i\n    return arr_prod\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnqt30ty4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnqt30ty4.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpnqt30ty4.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    prod_signs\
    \ = 1\n    for elem in arr:\n        sum_magnitudes += abs(elem)\n        prod_signs\
    \ *= int(elem > 0) - int(elem < 0)\n    return sum_magnitudes * prod_signs\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    s = 0\n    for\
    \ n in arr:\n        if n < 0:\n            prod *= -1\n        if n != 0:\n \
    \           s += abs(n)\n    return s * prod\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9q22lxhq.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp9q22lxhq.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp9q22lxhq.py\", line 27,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    neg_count = 0\n    prod =\
    \ 1\n    for i in arr:\n        if i < 0:\n            neg_count += 1\n      \
    \  prod *= abs(i)\n    if neg_count % 2:\n        return -prod\n    return prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl_7wb5i9.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpl_7wb5i9.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpl_7wb5i9.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # Note: here we have some type hinting, you can learn more on\n\
    \    # docs.python.org/3/library/typing.html.\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2a6govpk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2a6govpk.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp2a6govpk.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    sign_prod = None\n    mag_sum = 0\n    for a in arr:\n        if\
    \ a > 0:\n            if sign_prod is None:\n                sign_prod = 1\n \
    \           else:\n                sign_prod *= 1\n        elif a < 0:\n     \
    \       if sign_prod is None:\n                sign_prod = -1\n            else:\n\
    \                sign_prod *= -1\n        elif a == 0:\n            return 0\n\
    \        mag_sum += abs(a)\n    if sign_prod is None:\n        return None\n \
    \   return sign_prod * mag_sum\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1bjsdu87.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1bjsdu87.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp1bjsdu87.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * prod(map(sign, arr))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpidp5i4c6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpidp5i4c6.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpidp5i4c6.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpidp5i4c6.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * prod(map(sign, arr))\n\
    NameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for i in arr:\n\
    \        prod *= -1 if i < 0 else 1 if i > 0 else 0\n    return prod * sum(map(abs,\
    \ arr))\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n  \
    \  assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    lst = arr.copy()\n    if len(lst) == 0:\n        return None\n \
    \   elif len(lst) == 1:\n        if lst[0] < 0:\n            return -1 * lst[0]\n\
    \        else:\n            return lst[0]\n    else:\n        if lst[0] == 0:\n\
    \            lst.pop(0)\n            return prod_signs(lst)\n        elif lst[0]\
    \ < 0:\n            lst[0] = -1 * lst[0]\n            lst[1] = -1 * lst[1]\n \
    \           lst.pop(0)\n            return prod_signs(lst)\n        else:\n  \
    \          lst.pop(0)\n            return prod_signs(lst)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvx66zmcw.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpvx66zmcw.py\", line 47,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpvx66zmcw.py\", line 37,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcofq9gfm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpcofq9gfm.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpcofq9gfm.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sign_prod = 1\n    mag_sum\
    \ = 0\n    for x in arr:\n        if x == 0:\n            sign_prod = 0\n    \
    \        mag_sum = 0\n        else:\n            mag_sum += abs(x)\n         \
    \   sign_prod *= -1 if x < 0 else 1\n    return mag_sum * sign_prod\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    sign_prod = functools.reduce(operator.mul,\
    \ (1 if x >= 0 else -1 for x in arr))\n    return sum(abs(x) for x in arr) * sign_prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuldi9b4y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuldi9b4y.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpuldi9b4y.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpuldi9b4y.py\"\
    , line 17, in prod_signs\n    sign_prod = functools.reduce(operator.mul, (1 if\
    \ x >= 0 else -1 for x in arr))\nNameError: name 'functools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    s = 1\n    p = 1\n    for v in arr:\n        s += abs(v)\n     \
    \   p *= sign(v)\n    return p * s if len(arr) > 0 else None\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_yyumf3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpj_yyumf3.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpj_yyumf3.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpj_yyumf3.py\"\
    , line 19, in prod_signs\n    p *= sign(v)\nNameError: name 'sign' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    product = 1\n    for\
    \ i in arr:\n        if i > 0:\n            product *= 1\n        elif i < 0:\n\
    \            product *= -1\n        else:\n            product *= 0\n    sum =\
    \ 0\n    for i in arr:\n        sum += abs(i)\n    return sum * product\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    prod = 1\n    sum = 0\n    for i in arr:\n        if i == 0:\n \
    \           return 0\n        if i < 0:\n            prod *= -1\n        sum +=\
    \ abs(i)\n    return sum * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0idm44cr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0idm44cr.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0idm44cr.py\", line 28,\
    \ in check\n    assert candidate([]) == None\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    negative = 0\n    positive\
    \ = 0\n    total = 0\n    for i in arr:\n        if i > 0:\n            positive\
    \ += 1\n        elif i < 0:\n            negative += 1\n        total += abs(i)\n\
    \    if positive == 0 and negative == 0:\n        return 0\n    if positive ==\
    \ 0:\n        return total\n    if negative == 0:\n        return total\n    if\
    \ positive == 1 and negative == 1:\n        return -total\n    return -total\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_g5ootdq.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp_g5ootdq.py\", line 47,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp_g5ootdq.py\", line 38,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum = 0\n    prod = 1\n  \
    \  for el in arr:\n        if el > 0:\n            sum += el\n            prod\
    \ *= 1\n        elif el < 0:\n            sum += el * -1\n            prod *=\
    \ -1\n        else:\n            sum += 0\n            prod *= 0\n    return sum\
    \ * prod\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    sum_of_magnitudes =\
    \ 0\n    for x in arr:\n        sum_of_magnitudes += abs(x)\n    prod_of_signs\
    \ = 1\n    for x in arr:\n        if x > 0:\n            prod_of_signs *= 1\n\
    \        elif x < 0:\n            prod_of_signs *= -1\n        else:\n       \
    \     prod_of_signs *= 0\n    return sum_of_magnitudes * prod_of_signs\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    length = len(arr)\n    if length == 0:\n        return None\n  \
    \  product = 1\n    sum_of_magnitudes = 0\n    for i in range(length):\n     \
    \   if arr[i] == 0:\n            return 0\n        else:\n            if arr[i]\
    \ > 0:\n                product *= 1\n            else:\n                product\
    \ *= -1\n            sum_of_magnitudes += abs(arr[i])\n    return product * sum_of_magnitudes\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    res, sign = 0, 1\n    for\
    \ a in arr:\n        res += abs(a)\n        if a:\n            sign *= (a // abs(a))\n\
    \    return res * sign\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd3d9qkuk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpd3d9qkuk.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpd3d9qkuk.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    prod_signs\
    \ = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n        prod_signs\
    \ *= 1 if num > 0 else -1 if num < 0 else 0\n    return sum_magnitudes * prod_signs\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(list(map(abs, arr)))\
    \ * reduce(lambda x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else\
    \ 0, arr))\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpogqxl9_1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpogqxl9_1.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpogqxl9_1.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpogqxl9_1.py\"\
    , line 17, in prod_signs\n    return sum(list(map(abs, arr))) * reduce(lambda\
    \ x, y: x * y, map(lambda x: 1 if x > 0 else -1 if x < 0 else 0, arr))\nNameError:\
    \ name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    # your code here\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2110ux2h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2110ux2h.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp2110ux2h.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        sign_prod\
    \ = 1\n        sum_of_magnitudes = 0\n        for number in arr:\n           \
    \ if number == 0:\n                sign_prod = 0\n                break\n    \
    \        else:\n                sign_prod *= np.sign(number)\n               \
    \ sum_of_magnitudes += abs(number)\n        return sign_prod * sum_of_magnitudes\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9jk71_ch.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp9jk71_ch.py\", line 40,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp9jk71_ch.py\", line 30,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp9jk71_ch.py\"\
    , line 25, in prod_signs\n    sign_prod *= np.sign(number)\nNameError: name 'np'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    mult = 1\n    prod =\
    \ 1\n    for el in arr:\n        if el < 0:\n            mult *= -1\n        elif\
    \ el > 0:\n            prod *= el\n    return prod * mult\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph7pjzz9m.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmph7pjzz9m.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmph7pjzz9m.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for num in arr:\n\
    \        prod *= num / abs(num) if num else 0\n    return int(sum(map(abs, arr))\
    \ * prod)\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    elif not 1 in arr and not\
    \ -1 in arr:\n        return 0\n    abs_sum = sum(map(abs, arr))\n    minus_prod\
    \ = 1\n    zero_prod = 1\n    for i in arr:\n        if i < 0:\n            minus_prod\
    \ *= i\n        elif i == 0:\n            zero_prod *= i\n    return abs_sum *\
    \ (minus_prod * zero_prod)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwlms4ubj.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpwlms4ubj.py\", line 40,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpwlms4ubj.py\", line 30,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    elif all(num == 0 for num\
    \ in arr):\n        return 0\n    else:\n        return prod([abs(num) for num\
    \ in arr]) * prod([copysign(1, num) for num in arr])\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq762q9jz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpq762q9jz.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpq762q9jz.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpq762q9jz.py\"\
    , line 20, in prod_signs\n    return prod([abs(num) for num in arr]) * prod([copysign(1,\
    \ num) for num in arr])\nNameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod_signs = 1\n   \
    \ prod_magnitudes = 1\n    for num in arr:\n        prod_signs *= sign(num)\n\
    \        prod_magnitudes *= abs(num)\n    return prod_signs * prod_magnitudes\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2zee90a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpo2zee90a.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpo2zee90a.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpo2zee90a.py\"\
    , line 20, in prod_signs\n    prod_signs *= sign(num)\nNameError: name 'sign'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    product = 1\n    sum_of_abs\
    \ = 0\n    for elem in arr:\n        if elem == 0:\n            product = 0\n\
    \            break\n        elif elem > 0:\n            product *= 1\n       \
    \ else:\n            product *= -1\n        sum_of_abs += abs(elem)\n    return\
    \ product * sum_of_abs\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for n in arr:\n        if n == 0:\n            prod = 0\n         \
    \   break\n        if n < 0:\n            prod *= -1\n        sum_magnitudes +=\
    \ abs(n)\n    return prod * sum_magnitudes\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    i = 0\n    prod = 1\n    sign\
    \ = -1\n    while i < len(arr):\n        prod *= arr[i]\n        if arr[i] < 0:\n\
    \            sign *= -1\n        elif arr[i] == 0:\n            prod = 0\n   \
    \         sign = 1\n        i += 1\n    return sign * prod\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgfktku19.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgfktku19.py\", line 41,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpgfktku19.py\", line 31,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    if len(arr) == 1:\n      \
    \  return arr[0]\n    pos = 0\n    neg = 0\n    zero = 0\n    for i in arr:\n\
    \        if i > 0:\n            pos += 1\n        elif i < 0:\n            neg\
    \ += 1\n        else:\n            zero += 1\n    return pos*neg*sum(arr) + (pos*(pos-1)\
    \ + neg*(neg-1))*zero\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8877mlbb.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp8877mlbb.py\", line 41,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp8877mlbb.py\", line 31,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    abs_sum = 0\n\
    \    for i in arr:\n        if i < 0:\n            prod *= -1\n        elif i\
    \ == 0:\n            return 0\n        abs_sum += abs(i)\n    return prod * abs_sum\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return prod(map(abs, arr))\
    \ * prod(map(sign, arr))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3k1hgd6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpz3k1hgd6.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpz3k1hgd6.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpz3k1hgd6.py\"\
    , line 17, in prod_signs\n    return prod(map(abs, arr)) * prod(map(sign, arr))\n\
    NameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    sum_ = 0\n \
    \   for x in arr:\n        if x < 0:\n            sign *= -1\n        sum_ +=\
    \ abs(x)\n    return sum_ * sign\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3epnffun.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3epnffun.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp3epnffun.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    signs = [1 if a > 0 else -1\
    \ if a < 0 else 0 for a in arr]\n    abs_prod = prod(arr)\n    sign_prod = 1\n\
    \    for sign in signs:\n        if sign == 0:\n            return 0\n       \
    \ else:\n            sign_prod *= sign\n    return abs_prod * sign_prod\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxj_ohxv5.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxj_ohxv5.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpxj_ohxv5.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpxj_ohxv5.py\"\
    , line 18, in prod_signs\n    abs_prod = prod(arr)\nNameError: name 'prod' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    abs_total = sum(abs(n) for\
    \ n in arr)\n    if 0 in arr:\n        return 0\n    elif len(arr) == 1:\n   \
    \     return abs_total\n    else:\n        sign_total = 1\n        for n in arr:\n\
    \            if n < 0:\n                sign_total *= -1\n        return abs_total\
    \ * sign_total\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for num in arr:\n\
    \        prod *= num and num // abs(num)\n    return sum(map(abs, arr)) * prod\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqjjt7tb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwqjjt7tb.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpwqjjt7tb.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    arr = list(map(abs, arr))\n\
    \    res = 1\n    total = 0\n    for el in arr:\n        if el > 0:\n        \
    \    res *= -1\n        total += el\n    return total * res\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzgqmp6t5.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzgqmp6t5.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpzgqmp6t5.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    elif arr == [0]:\n       \
    \ return 0\n    prod_sign = 1\n    sum_mag = 0\n    for i in arr:\n        if\
    \ i > 0:\n            prod_sign *= 1\n        elif i < 0:\n            prod_sign\
    \ *= -1\n        elif i == 0:\n            prod_sign *= 0\n        sum_mag +=\
    \ abs(i)\n    return sum_mag * prod_sign\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_prod = 1\n    sign_prod\
    \ = 1\n    for n in arr:\n        if n > 0:\n            sum_prod += n\n     \
    \       sign_prod *= 1\n        elif n < 0:\n            sum_prod += -n\n    \
    \        sign_prod *= -1\n        else:\n            sign_prod *= 0\n    return\
    \ sum_prod * sign_prod\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0htsya4g.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp0htsya4g.py\", line 41,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0htsya4g.py\", line 31,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum = 0\n  \
    \  for n in arr:\n        if n > 0:\n            prod *= 1\n        elif n < 0:\n\
    \            prod *= -1\n        else:\n            prod *= 0\n        sum +=\
    \ abs(n)\n    return sum * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sign = product = sum = 0\n\
    \    for i in arr:\n        if i == 0:\n            sign = 0\n            product\
    \ = 1\n            sum = 0\n        elif i > 0:\n            sign += 1\n     \
    \       product *= 1\n            sum += i\n        else:\n            sign -=\
    \ 1\n            product *= -1\n            sum += i\n    return sum * product\
    \ * sign\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n \
    \   assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnusq5zj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgnusq5zj.py\", line 43,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpgnusq5zj.py\", line 33,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod_signs = 1\n    sum_magnitudes\
    \ = 0\n    for num in arr:\n        prod_signs *= (1 if num > 0 else -1 if num\
    \ < 0 else 0)\n        sum_magnitudes += abs(num)\n    return prod_signs * sum_magnitudes\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    total_prod_signs = 0\n\
    \    total_prod_magnitudes = 1\n    for num in arr:\n        if num == 0:\n  \
    \          continue\n        else:\n            total_prod_signs *= 1 if num >\
    \ 0 else -1\n            total_prod_magnitudes *= abs(num)\n    return total_prod_signs\
    \ * total_prod_magnitudes\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwr324qw.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpgwr324qw.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpgwr324qw.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    acc = 1\n    sum_magn\
    \ = 0\n    for a in arr:\n        if a > 0:\n            acc *= 1\n        elif\
    \ a < 0:\n            acc *= -1\n        elif a == 0:\n            sum_magn +=\
    \ a\n            continue\n        sum_magn += abs(a)\n    return sum_magn * acc\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kj33__k.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp3kj33__k.py\", line 41,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp3kj33__k.py\", line 32,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # Magnitude of each number in the array\n    magnitudes = list(map(abs,\
    \ arr))\n    # Product of all signs of each number in the array\n    signs = 1\n\
    \    for num in arr:\n        if num != 0:\n            signs *= num / abs(num)\n\
    \    return sum(magnitudes) * signs if len(arr) > 0 else None\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfaa5qy_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplfaa5qy_.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmplfaa5qy_.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # REPLACE THE ERROR BELOW WITH YOUR OWN CODE\n    raise NotImplementedError(\"\
    Not implemented\")\n\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphduk68cc.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphduk68cc.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmphduk68cc.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmphduk68cc.py\"\
    , line 16, in prod_signs\n    raise NotImplementedError(\"Not implemented\")\n\
    NotImplementedError: Not implemented\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    mag_sum = 0\n\
    \    for i in arr:\n        mag_sum += abs(i)\n        if i > 0:\n           \
    \ prod *= 1\n        elif i < 0:\n            prod *= -1\n    return mag_sum *\
    \ prod\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n   \
    \ assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfgmcwxt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpzfgmcwxt.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpzfgmcwxt.py\", line 28,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_nums = 0\n    prod_sings\
    \ = 1\n    for num in arr:\n        sum_nums += abs(num)\n        if num == 0:\n\
    \            prod_sings = 0\n        elif num > 0:\n            prod_sings *=\
    \ 1\n        else:\n            prod_sings *= -1\n    return sum_nums * prod_sings\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # BEGIN (write your solution here)\n    result = 0\n    if len(arr)\
    \ > 0:\n        count_z = 0\n        for i in arr:\n            if i == 0:\n \
    \               count_z += 1\n        if count_z > 0:\n            for i in arr:\n\
    \                if i != 0:\n                    result += abs(i)\n          \
    \  return result ** count_z\n        else:\n            for i in arr:\n      \
    \          result += abs(i)\n            return result\n    else:\n        return\
    \ None\n    # END\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6t59il8.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpi6t59il8.py\", line 46,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpi6t59il8.py\", line 36,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    num_zeros = arr.count(0)\n\
    \    if num_zeros > 1:\n        return 0\n    product = 1\n    for num in arr:\n\
    \        if num < 0:\n            product *= -1\n        elif num == 0:\n    \
    \        product = 0\n        else:\n            product *= 1\n    return sum(map(abs,\
    \ arr)) * product\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    else:\n        total = []\n\
    \        for item in arr:\n            if item == 0:\n                total.append(0)\n\
    \            elif item > 0:\n                total.append(1)\n            else:\n\
    \                total.append(-1)\n        total = sum(total)\n        return\
    \ total * abs(sum(arr))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8p3erha6.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp8p3erha6.py\", line 40,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp8p3erha6.py\", line 30,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    prod = 1\n \
    \   sum = 0\n    for el in arr:\n        if el == 0:\n            return 0\n \
    \       sign *= el // abs(el)\n        prod *= abs(el)\n        sum += abs(el)\n\
    \    return sign * prod - sum\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93op2so1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp93op2so1.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp93op2so1.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaupjedy.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptaupjedy.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmptaupjedy.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    if len(arr) == 1:\n      \
    \  return 0\n    sum_sign = 0\n    sum_abs = 0\n    product = 1\n    for el in\
    \ arr:\n        if el < 0:\n            sum_sign += -1\n        elif el > 0:\n\
    \            sum_sign += 1\n        sum_abs += abs(el)\n        product *= el\n\
    \    if product < 0:\n        sum_sign -= 2\n    return sum_sign * sum_abs\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xi1n0xi.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp6xi1n0xi.py\", line 43,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp6xi1n0xi.py\", line 33,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\n```\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmprflnz4n9.py\", line 16\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n\
    \        return arr[0]\n    sign_prod = 1\n    prod = 1\n    for i in arr:\n \
    \       if i != 0:\n            sign_prod *= i / abs(i)\n            prod *= abs(i)\n\
    \    return int(sign_prod * prod)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpschfanxl.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpschfanxl.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpschfanxl.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_cq3wv8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0_cq3wv8.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp0_cq3wv8.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_mag = 0\n    prod_sign\
    \ = 1\n    for i in arr:\n        if i == 0:\n            sum_mag = 0\n      \
    \      prod_sign = 1\n        else:\n            if i > 0:\n                sum_mag\
    \ += i\n            else:\n                sum_mag -= i\n            prod_sign\
    \ *= i // abs(i)\n    return sum_mag * prod_sign\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppj7eaa0n.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppj7eaa0n.py\", line 41,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmppj7eaa0n.py\", line 32,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = lambda x: x * (1 if\
    \ x > 0 else (0 if x == 0 else -1))\n    return sum(map(abs, arr)) * prod(prod(x)\
    \ for x in arr)\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsj_6dozd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpsj_6dozd.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpsj_6dozd.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpsj_6dozd.py\"\
    , line 18, in prod_signs\n    return sum(map(abs, arr)) * prod(prod(x) for x in\
    \ arr)\n  File \"/tmp/tmpsj_6dozd.py\", line 17, in <lambda>\n    prod = lambda\
    \ x: x * (1 if x > 0 else (0 if x == 0 else -1))\nTypeError: '>' not supported\
    \ between instances of 'generator' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magnitudes\
    \ = 0\n    for n in arr:\n        if n < 0:\n            prod *= -1\n        elif\
    \ n == 0:\n            return 0\n        sum_magnitudes += abs(n)\n    return\
    \ prod * sum_magnitudes\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    signs = [int(n > 0) - int(n\
    \ < 0) for n in arr]\n    return sum(abs(n) for n in arr) * reduce(lambda x, y:\
    \ x * y, signs)\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4pep0ns.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt4pep0ns.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpt4pep0ns.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpt4pep0ns.py\"\
    , line 18, in prod_signs\n    return sum(abs(n) for n in arr) * reduce(lambda\
    \ x, y: x * y, signs)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    signs = [(x // abs(x)) if\
    \ x != 0 else 0 for x in arr]\n    mags = [abs(x) for x in arr]\n    return sum(mags)\
    \ * reduce(lambda x, y: x * y, signs)\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs068253.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprs068253.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmprs068253.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmprs068253.py\"\
    , line 19, in prod_signs\n    return sum(mags) * reduce(lambda x, y: x * y, signs)\n\
    NameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe200hpk5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe200hpk5.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpe200hpk5.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    if len(arr) == 1:\n      \
    \  return arr[0]\n    prod = 1\n    summa = 0\n    for i in arr:\n        prod\
    \ *= np.sign(i)\n        summa += abs(i)\n    return prod * summa\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjmlmk_tt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpjmlmk_tt.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpjmlmk_tt.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpjmlmk_tt.py\"\
    , line 22, in prod_signs\n    prod *= np.sign(i)\nNameError: name 'np' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    s = 0\n\
    \    for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        s\
    \ += abs(i)\n    return s * prod\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    product = 1\n    total\
    \ = 0\n    for num in arr:\n        if num < 0:\n            product *= -1\n \
    \       product *= num\n        total += abs(num)\n    return product + total\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzr0pgun0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpzr0pgun0.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpzr0pgun0.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    return _prod_signs(arr)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_u7t_fse.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_u7t_fse.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp_u7t_fse.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp_u7t_fse.py\"\
    , line 15, in prod_signs\n    return _prod_signs(arr)\nNameError: name '_prod_signs'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * reduce(lambda x, y: x * y, map(lambda x: -1 if x < 0 else 1 if x > 0 else\
    \ 0, arr))\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6s096wru.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6s096wru.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp6s096wru.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp6s096wru.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: -1 if x < 0 else 1 if x > 0 else 0, arr))\nNameError: name\
    \ 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    s = 1\n    p = 1\n    for\
    \ n in arr:\n        if n > 0:\n            s += 1\n        elif n < 0:\n    \
    \        s -= 1\n        else:\n            p = 0\n        p *= abs(n)\n    return\
    \ p * s\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n  \
    \  assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn00uvwzm.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpn00uvwzm.py\", line 39,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpn00uvwzm.py\", line 29,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    prod_sign = 1\n    sum_mag = 0\n    for elem in arr:\n        prod_sign\
    \ *= (1 if elem > 0 else -1 if elem < 0 else 0)\n        sum_mag += abs(elem)\n\
    \    return sum_mag * prod_sign\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1t21esdw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1t21esdw.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp1t21esdw.py\", line 26,\
    \ in check\n    assert candidate([]) == None\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    total = 1\n    for num in\
    \ arr:\n        if num == 0:\n            return 0\n        else:\n          \
    \  total *= int(num/abs(num))\n    return sum(abs(n) for n in arr) * total\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # YOUR CODE HERE\n    return None\n\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj63kxmn9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpj63kxmn9.py\", line 30,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpj63kxmn9.py\", line 20,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_magnitudes = 0\n    prod_signs\
    \ = 1\n    for x in arr:\n        sum_magnitudes += abs(x)\n        prod_signs\
    \ *= 1 if x == 0 else abs(x) // x\n    return sum_magnitudes * prod_signs\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdopdjtqm.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdopdjtqm.py\", line 34,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpdopdjtqm.py\", line 25,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    sum_magnitudes = 0\n\
    \    prod_signs = 1\n    for num in arr:\n        sum_magnitudes += abs(num)\n\
    \        prod_signs *= (num != 0) * (num // abs(num))\n    return sum_magnitudes\
    \ * prod_signs\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp352x3qlx.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp352x3qlx.py\", line 34,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp352x3qlx.py\", line 25,\
    \ in check\n    assert candidate([0, 1]) == 0\n  File \"/tmp/tmp352x3qlx.py\"\
    , line 21, in prod_signs\n    prod_signs *= (num != 0) * (num // abs(num))\nZeroDivisionError:\
    \ integer division or modulo by zero\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnw3n11a6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnw3n11a6.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpnw3n11a6.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # n = len(arr)\n    # if n == 0:\n    #     return None\n    #\n\
    \    # prod = 1\n    # sum_magnitude = 0\n    # for i in range(n):\n    #    \
    \ if arr[i] > 0:\n    #         prod *= 1\n    #     elif arr[i] < 0:\n    # \
    \        prod *= -1\n    #     else:\n    #         prod = 0\n    #         sum_magnitude\
    \ = 0\n    #         break\n    #     sum_magnitude += abs(arr[i])\n    #\n  \
    \  # return prod * sum_magnitude\n\n    n = len(arr)\n    if n == 0:\n       \
    \ return None\n\n    prod = 1\n    sum_magnitude = 0\n    for i in range(n):\n\
    \        if arr[i] != 0:\n            sum_magnitude += abs(arr[i])\n         \
    \   prod *= arr[i] / abs(arr[i])\n        else:\n            prod = 0\n      \
    \      sum_magnitude = 0\n            break\n\n    return prod * sum_magnitude\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\n \ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwsg4p1iz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwsg4p1iz.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpwsg4p1iz.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * math.prod(map(math.sign, arr))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrpn42rd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptrpn42rd.py\", line 29,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmptrpn42rd.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmptrpn42rd.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * math.prod(map(math.sign,\
    \ arr))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    res = 1\n    for n in arr:\n        if n < 0:\n            res *=\
    \ -1\n        elif n > 0:\n            res *= 1\n        else:\n            res\
    \ *= 0\n    res = [abs(i) for i in arr]\n    res = sum(res) * res\n    return\
    \ res\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoogdx3xd.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpoogdx3xd.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpoogdx3xd.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    return None\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbe51id2v.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbe51id2v.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpbe51id2v.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum = 0\n  \
    \  for i in arr:\n        if i > 0:\n            prod *= 1\n        elif i < 0:\n\
    \            prod *= -1\n        else:\n            prod *= 0\n        sum +=\
    \ abs(i)\n    return sum * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sgns = [1, -1, 0]\n    sums\
    \ = [i for i in arr if i < 0]\n    prod = 1\n    for i in arr:\n        for j\
    \ in sgns:\n            if i * j < 0:\n                prod *= j\n    return sum(sums)\
    \ * prod\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxyk8d5z_.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxyk8d5z_.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpxyk8d5z_.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    total = 0\n\
    \    for num in arr:\n        if num > 0:\n            total += num\n        elif\
    \ num < 0:\n            total += -num\n            sign *= -1\n        else:\n\
    \            sign = 0\n    return total * sign\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    if len(arr) == 1:\n      \
    \  return arr[0]\n    prod_signs = 1\n    prod_magn = 1\n    for i in arr:\n \
    \       if i != 0:\n            prod_signs *= sign(i)\n            prod_magn *=\
    \ abs(i)\n    return prod_signs * prod_magn\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcw680x0d.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpcw680x0d.py\", line 38,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpcw680x0d.py\", line 28,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpcw680x0d.py\"\
    , line 23, in prod_signs\n    prod_signs *= sign(i)\nNameError: name 'sign' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    elif 0 in arr:\n        return\
    \ 0\n    else:\n        return sum(map(abs, arr)) * reduce(lambda x, y: x * y,\
    \ map(lambda x: -1 if x < 0 else 1, arr))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptc9tc1ng.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptc9tc1ng.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmptc9tc1ng.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmptc9tc1ng.py\"\
    , line 20, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: -1 if x < 0 else 1, arr))\nNameError: name 'reduce' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sgn_prod = 1\n    vals_sum\
    \ = 0\n    for n in arr:\n        if n > 0:\n            sgn_prod *= 1\n     \
    \   elif n < 0:\n            sgn_prod *= -1\n        else:\n            sgn_prod\
    \ *= 0\n        vals_sum += abs(n)\n    return sgn_prod * vals_sum\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    else:\n        pos = len([x\
    \ for x in arr if x > 0])\n        neg = len([x for x in arr if x < 0])\n    \
    \    return sum([abs(x) for x in arr]) * pos * neg\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw08rngu9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw08rngu9.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpw08rngu9.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # your code here\n\n    if len(arr) == 0:\n        return None\n\
    \n    positive_count = 0\n    for n in arr:\n        if n > 0:\n            positive_count\
    \ += 1\n\n    product = 1\n    for n in arr:\n        if n == 0:\n           \
    \ continue\n        elif n > 0:\n            product *= n\n        else:\n   \
    \         product *= n * -1\n\n    if positive_count % 2 == 0:\n        return\
    \ product\n    else:\n        return product * -1\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpanoykpk8.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpanoykpk8.py\", line 50,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpanoykpk8.py\", line 40,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum_magn = 0\n\
    \    for el in arr:\n        if el == 0:\n            return 0\n        elif el\
    \ > 0:\n            prod *= 1\n        else:\n            prod *= -1\n       \
    \ sum_magn += abs(el)\n    return prod * sum_magn\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n \
    \   assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    signs_prod = 1\n    abs_sum\
    \ = 0\n    for num in arr:\n        if num > 0:\n            signs_prod *= 1\n\
    \        elif num < 0:\n            signs_prod *= -1\n        else:\n        \
    \    signs_prod *= 0\n        abs_sum += abs(num)\n    return abs_sum * signs_prod\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    sum_ =\
    \ 0\n    for i in arr:\n        prod *= i / abs(i)\n        sum_ += abs(i)\n \
    \   return prod * sum_\n\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgr491gdy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgr491gdy.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpgr491gdy.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\n  File \"/tmp/tmpgr491gdy.py\"\
    , line 20, in prod_signs\n    prod *= i / abs(i)\nZeroDivisionError: division\
    \ by zero\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    arr = [int(i) for i in arr]\n\
    \    product_signs = 1\n    sum_magnitudes = 0\n    for i in arr:\n        sum_magnitudes\
    \ += abs(i)\n        if i != 0:\n            product_signs *= i / abs(i)\n   \
    \ return product_signs * sum_magnitudes\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuyeuqjsd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpuyeuqjsd.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpuyeuqjsd.py\", line 27,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # [1, 2, 2, -4]\n    # [1, 2, -2, 4]\n\n    result = 1\n    sum\
    \ = 0\n\n    if len(arr) == 0:\n        return None\n\n    if 0 in arr:\n    \
    \    return 0\n\n    for i in arr:\n        result *= i\n        sum += abs(i)\n\
    \n    if result > 0:\n        return sum\n    elif result < 0:\n        return\
    \ -sum\n    else:\n        return 0\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_nq6esh.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq_nq6esh.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpq_nq6esh.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    arr = [abs(x) for x in arr]\n\
    \    product = 1\n    for x in arr:\n        if x != 0:\n            product *=\
    \ x\n    return product\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddgnx93q.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpddgnx93q.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpddgnx93q.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n\
    \        return arr[0]\n    else:\n        prod = 1\n        summ = 0\n      \
    \  for i in arr:\n            if i != 0:\n                summ += abs(i)\n   \
    \             prod *= i // abs(i)\n        return summ * prod\n    \n    \n  \
    \  \n    \n    \n    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsk261ucg.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpsk261ucg.py\", line 44,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpsk261ucg.py\", line 35,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    return None if not arr else prod(map(lambda x: abs(x) * x, arr))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmc2dffyq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmc2dffyq.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpmc2dffyq.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpmc2dffyq.py\"\
    , line 15, in prod_signs\n    return None if not arr else prod(map(lambda x: abs(x)\
    \ * x, arr))\nNameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    arr = [abs(i) for i in arr]\n\
    \    signs = [i/abs(i) for i in arr]\n    s = 0\n    p = 1\n    for i in range(len(arr)):\n\
    \        s += arr[i]\n        p *= signs[i]\n    return s * p\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3n0mdcxd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3n0mdcxd.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp3n0mdcxd.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    else:\n        prod = 1\n\
    \        mag_sum = 0\n        for num in arr:\n            if num < 0:\n     \
    \           prod *= -1\n            elif num == 0:\n                return 0\n\
    \            mag_sum += abs(num)\n        return prod * mag_sum\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    res = 0\n    prod = 1\n  \
    \  for i in arr:\n        res += abs(i)\n        prod *= math.copysign(1, i)\n\
    \    return int(res * prod)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6wyaqt27.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6wyaqt27.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp6wyaqt27.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp6wyaqt27.py\"\
    , line 21, in prod_signs\n    prod *= math.copysign(1, i)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    for n in arr:\n\
    \        prod *= sign(n)\n    return sum(map(abs, arr)) * prod\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeckjbnjg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpeckjbnjg.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpeckjbnjg.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpeckjbnjg.py\"\
    , line 19, in prod_signs\n    prod *= sign(n)\nNameError: name 'sign' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sign_prod = 1\n    sum_of_abs\
    \ = 0\n    for num in arr:\n        sum_of_abs += abs(num)\n        if num !=\
    \ 0:\n            sign_prod *= abs(num) / num\n    return sign_prod * sum_of_abs\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdtkz73n0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdtkz73n0.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpdtkz73n0.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirvojtlm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpirvojtlm.py\", line 27,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpirvojtlm.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # your code here\n    if not arr:\n        return None\n    res\
    \ = 1\n    for i in arr:\n        if i < 0:\n            res *= -1\n        if\
    \ i != 0:\n            res *= abs(i)\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8_2ezpe.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmph8_2ezpe.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmph8_2ezpe.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    sum = 0\n  \
    \  for num in arr:\n        if num > 0:\n            prod *= 1\n        elif num\
    \ < 0:\n            prod *= -1\n        else:\n            prod *= 0\n       \
    \ sum += abs(num)\n    return prod * sum\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    sum_of_signs = prod_of_sings = 0\n    for i in arr:\n        sum_of_signs\
    \ += abs(i)\n        prod_of_sings *= i or 1\n    return sum_of_signs * prod_of_sings\
    \ or None\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq11iai26.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpq11iai26.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpq11iai26.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    else:\n        arr = [x if\
    \ x != 0 else 1 for x in arr]\n        return sum(abs(x) for x in arr) * math.prod(arr)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
    \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
    \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
    \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb7qhh3ri.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpb7qhh3ri.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpb7qhh3ri.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpb7qhh3ri.py\"\
    , line 19, in prod_signs\n    return sum(abs(x) for x in arr) * math.prod(arr)\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    return sum(map(abs, arr)) * product(map(lambda x: -1 if x < 0 else\
    \ (1 if x > 0 else 0), arr)) if arr else None\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zy1z5in.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_zy1z5in.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp_zy1z5in.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp_zy1z5in.py\"\
    , line 15, in prod_signs\n    return sum(map(abs, arr)) * product(map(lambda x:\
    \ -1 if x < 0 else (1 if x > 0 else 0), arr)) if arr else None\nNameError: name\
    \ 'product' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    res = 1\n    sum_of_mag =\
    \ 0\n    for num in arr:\n        if num > 0:\n            res *= 1\n        elif\
    \ num < 0:\n            res *= -1\n        else:\n            res = 0\n      \
    \      break\n        sum_of_mag += abs(num)\n    return res * sum_of_mag\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    neg_count = sum(num < 0 for\
    \ num in arr)\n    sign = -1 if neg_count % 2 else 1\n    return sign * sum(abs(num)\
    \ for num in arr)\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9os1u4w.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpn9os1u4w.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpn9os1u4w.py\", line 22,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    summ, prod = 0, 1\n    for\
    \ num in arr:\n        if num < 0:\n            prod *= -1\n        summ += abs(num)\n\
    \    return summ * prod\ndef check(candidate):\n    assert candidate([1, 2, 2,\
    \ -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmi0oqtg1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmi0oqtg1.py\", line 34,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpmi0oqtg1.py\", line 25,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    return sum(abs(x) for\
    \ x in arr) * product(x / abs(x) for x in arr)\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4tb0546r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4tb0546r.py\", line 29,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp4tb0546r.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp4tb0546r.py\"\
    , line 17, in prod_signs\n    return sum(abs(x) for x in arr) * product(x / abs(x)\
    \ for x in arr)\nNameError: name 'product' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshonzah0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpshonzah0.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpshonzah0.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    sum = 0\n    prod =\
    \ 1\n    for i in arr:\n        prod *= sign(i)\n        sum += abs(i)\n    return\
    \ sum * prod\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpup_9lo3g.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpup_9lo3g.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpup_9lo3g.py\", line 25,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpup_9lo3g.py\"\
    , line 20, in prod_signs\n    prod *= sign(i)\nNameError: name 'sign' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    summ = 0\n \
    \   for x in arr:\n        if x > 0:\n            prod *= 1\n        elif x <\
    \ 0:\n            prod *= -1\n        else:\n            prod *= 0\n        summ\
    \ += abs(x)\n    return summ * prod\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    else:\n        magnitudes\
    \ = [abs(i) for i in arr]\n        signs = [1 if i >= 0 else -1 for i in arr]\n\
    \        prod_signs = reduce(lambda x, y: x * y, signs)\n        return sum(magnitudes)\
    \ * prod_signs\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) ==\
    \ -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3,\
    \ -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,\
    \ 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_tsd05pd.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_tsd05pd.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp_tsd05pd.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp_tsd05pd.py\"\
    , line 20, in prod_signs\n    prod_signs = reduce(lambda x, y: x * y, signs)\n\
    NameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    arr_sum = 0\n    arr_prod = 1\n    for x in arr:\n        if x >\
    \ 0:\n            arr_sum += x\n            arr_prod *= 1\n        elif x < 0:\n\
    \            arr_sum += x * -1\n            arr_prod *= -1\n        else:\n  \
    \          arr_prod *= 0\n    if arr_prod == 0:\n        return None\n    return\
    \ arr_sum * arr_prod\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbu16y771.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpbu16y771.py\", line 40,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpbu16y771.py\", line 31,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    arr_copy = arr.copy()\n    arr_copy.sort()\n    if len(arr_copy)\
    \ == 0:\n        return None\n    elif len(arr_copy) == 1:\n        return arr_copy[0]\n\
    \    else:\n        count = 0\n        while arr_copy[0] == 0:\n            count\
    \ += 1\n            arr_copy.pop(0)\n        if count == len(arr_copy):\n    \
    \        return 0\n        if count == len(arr_copy) - 1:\n            arr_copy[0]\
    \ = abs(arr_copy[0])\n            arr_copy[1] = abs(arr_copy[1])\n           \
    \ return arr_copy[0] * arr_copy[1]\n        if count > 0:\n            for i in\
    \ range(count):\n                arr_copy[i] = abs(arr_copy[i])\n        if arr_copy[0]\
    \ < 0:\n            for i in range(len(arr_copy)):\n                arr_copy[i]\
    \ = abs(arr_copy[i])\n        return sum(arr_copy)\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpble403q8.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpble403q8.py\", line 52,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpble403q8.py\", line 42,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    elif len(arr) == 1:\n    \
    \    return arr[0]\n    else:\n        product_signs = 1\n        sum_magnitudes\
    \ = 0\n        for i in arr:\n            product_signs *= math.copysign(1, i)\n\
    \            sum_magnitudes += abs(i)\n        return sum_magnitudes * product_signs\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08dav0ud.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp08dav0ud.py\", line 37,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp08dav0ud.py\", line 27,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmp08dav0ud.py\"\
    , line 23, in prod_signs\n    product_signs *= math.copysign(1, i)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    signs = (1 if i >= 0 else\
    \ -1 for i in arr)\n    product = reduce(lambda x, y: x * y, signs)\n    magnitudes\
    \ = (abs(i) for i in arr)\n    return sum(magnitudes) * product\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpue7_u8ki.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpue7_u8ki.py\", line 32,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpue7_u8ki.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpue7_u8ki.py\"\
    , line 18, in prod_signs\n    product = reduce(lambda x, y: x * y, signs)\nNameError:\
    \ name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzoq7l4yo.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzoq7l4yo.py\", line 28,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpzoq7l4yo.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    else:\n        signs = [i/abs(i)\
    \ if i != 0 else 0 for i in arr]\n        return sum(map(abs, arr)) * reduce(lambda\
    \ x, y: x*y, signs)\n\nprint(prod_signs([1, 2, 2, -4]))\nprint(prod_signs([0,\
    \ 1]))\nprint(prod_signs([]))\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7f_nch58.py\", line\
    \ 21, in <module>\n    print(prod_signs([1, 2, 2, -4]))\n  File \"/tmp/tmp7f_nch58.py\"\
    , line 19, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x*y, signs)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    return sum(map(abs, arr))\
    \ * reduce(lambda x, y: x * y, map(lambda x: (x > 0) - (x < 0), arr))\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxga5_wup.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxga5_wup.py\", line 29,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpxga5_wup.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpxga5_wup.py\"\
    , line 17, in prod_signs\n    return sum(map(abs, arr)) * reduce(lambda x, y:\
    \ x * y, map(lambda x: (x > 0) - (x < 0), arr))\nNameError: name 'reduce' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    # TODO: Your code goes here\n    # Hint: Use function 'abs' and\
    \ 'all' for faster check of zeros.\n    # Hint: Use variable 'prod' for product\
    \ of all signs.\n    # Hint: Use variable 'magn' for sum of magnitudes.\n    prod\
    \ = 1\n    magn = 0\n    if not arr:\n        return None\n    for i in arr:\n\
    \        if i == 0:\n            prod = 0\n            break\n        prod *=\
    \ (1 if i > 0 else -1)\n        magn += abs(i)\n    return prod * magn\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    prod = 1\n    mag_sum\
    \ = 0\n    for a in arr:\n        if a > 0:\n            prod *= 1\n        elif\
    \ a < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   mag_sum += abs(a)\n    return prod * mag_sum\n\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    else:\n        product\
    \ = 1\n        sum_abs = 0\n        for i in arr:\n            if i != 0:\n  \
    \              product *= (i / abs(i))\n                sum_abs += abs(i)\n  \
    \      return sum_abs * product\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstvz4r4q.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpstvz4r4q.py\", line 36,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpstvz4r4q.py\", line 27,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    num_zeros = arr.count(0)\n\
    \    if num_zeros == len(arr):\n        return 0\n    if num_zeros == len(arr)\
    \ - 1:\n        return arr[arr.index(0)]\n\n    sign_product = 1\n    magnitude_sum\
    \ = 0\n    for num in arr:\n        if num == 0:\n            continue\n     \
    \   sign_product *= int(num / abs(num))\n        magnitude_sum += abs(num)\n \
    \   return sign_product * magnitude_sum\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpspze9s4q.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpspze9s4q.py\", line 42,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpspze9s4q.py\", line 39,\
    \ in check\n    assert candidate([-1, 1, 1, 0]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    res = [0]\n    for el in arr:\n\
    \        res[0] += abs(el) * (2 * (el > 0) - 1)\n    return res[0]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpog25oaa7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpog25oaa7.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpog25oaa7.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    signs = [1 if i >= 0 else\
    \ -1 for i in arr]\n    prods = 1\n    for i in signs:\n        prods *= i\n \
    \   return sum(map(abs, arr)) * prods\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mono28o.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_mono28o.py\", line 34,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmp_mono28o.py\", line 25,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    sign_prod = 1\n    mag_sum = 0\n    if len(arr) == 0:\n        return\
    \ None\n    for n in arr:\n        if n == 0:\n            return 0\n        if\
    \ n < 0:\n            sign_prod *= -1\n        mag_sum += abs(n)\n    return sign_prod\
    \ * mag_sum\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n\
    \    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    prod = 1\n    magnitude =\
    \ 0\n    for a in arr:\n        if a > 0:\n            prod *= 1\n        elif\
    \ a < 0:\n            prod *= -1\n        else:\n            prod *= 0\n     \
    \   magnitude += abs(a)\n    return prod * magnitude\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    magnitudes_sum = 0\n    signs_prod\
    \ = 1\n    for elem in arr:\n        magnitudes_sum += abs(elem)\n        signs_prod\
    \ *= (elem / abs(elem)) if elem != 0 else 0\n    return magnitudes_sum * signs_prod\n\
    \nprint(prod_signs([1, 2, 2, -4]))\nprint(prod_signs([0, 1]))\nprint(prod_signs([]))\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: "-9.0\n0.0\nNone\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    mult = 1\n    summa\
    \ = 0\n    for i in arr:\n        if i > 0:\n            mult *= 1\n        elif\
    \ i < 0:\n            mult *= -1\n        else:\n            mult *= 0\n     \
    \   summa += abs(i)\n    return summa * mult\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    arr_signs = [i // abs(i) if\
    \ i != 0 else 0 for i in arr]\n    signs_prod = 1\n    for s in arr_signs:\n \
    \       signs_prod *= s\n    return sum(list(map(abs, arr))) * signs_prod\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    elif 0 in arr:\n        return\
    \ 0\n    sign = 1\n    magnitudes = []\n    for n in arr:\n        if n < 0:\n\
    \            sign *= -1\n        magnitudes.append(abs(n))\n    return sum(magnitudes)\
    \ * sign\ndef check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n \
    \   assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1])\
    \ == -10\n    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2,\
    \ -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1,\
    \ 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
    \    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_of_magnitudes = 0\n  \
    \  product_of_signs = 1\n    for i in arr:\n        sum_of_magnitudes += abs(i)\n\
    \        if i != 0:\n            product_of_signs *= i // abs(i)\n    return sum_of_magnitudes\
    \ * product_of_signs\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpyl_he6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjpyl_he6.py\", line 35,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpjpyl_he6.py\", line 26,\
    \ in check\n    assert candidate([0, 1]) == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    signs = {1: 1, -1: -1,\
    \ 0: 0}\n    s = [signs[i] for i in arr]\n    return sum(map(abs, arr)) * reduce(lambda\
    \ x, y: x * y, s)\ndef check(candidate):\n    assert candidate([1, 2, 2, -4])\
    \ == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2,\
    \ 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert\
    \ candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n\
    def test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpamqh214a.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpamqh214a.py\", line 31,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpamqh214a.py\", line 21,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpamqh214a.py\"\
    , line 18, in prod_signs\n    s = [signs[i] for i in arr]\n  File \"/tmp/tmpamqh214a.py\"\
    , line 18, in <listcomp>\n    s = [signs[i] for i in arr]\nKeyError: 2\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sign = 1\n    abs_sum = 0\n\
    \    for i in arr:\n        if i == 0:\n            return 0\n        elif i >\
    \ 0:\n            abs_sum += i\n        else:\n            sign *= -1\n      \
    \      abs_sum += abs(i)\n    return sign * abs_sum\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if len(arr) == 0:\n        return None\n    return prod([abs(x)\
    \ for x in arr]) * prod([sign(x) for x in arr])\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n\
    \    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydayjcgx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpydayjcgx.py\", line 29,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpydayjcgx.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpydayjcgx.py\"\
    , line 17, in prod_signs\n    return prod([abs(x) for x in arr]) * prod([sign(x)\
    \ for x in arr])\nNameError: name 'prod' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    sum_ = 0\n    for i in arr:\n\
    \        sum_ += abs(i)\n    return sum_ * math.prod(arr)\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshs6k2_6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpshs6k2_6.py\", line 34,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpshs6k2_6.py\", line 24,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\n  File \"/tmp/tmpshs6k2_6.py\"\
    , line 20, in prod_signs\n    return sum_ * math.prod(arr)\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    product = 1\n    summ = 0\n    for i in arr:\n        product *=\
    \ i\n        summ += abs(i)\n    return product * summ if product else None\n\n\
    def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0,\
    \ 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9w6w5vu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpg9w6w5vu.py\", line 33,\
    \ in test_check\n    check(prod_signs)\n  File \"/tmp/tmpg9w6w5vu.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 2, -4]) == -9\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) ->\
    \ Optional[int]:\n    \"\"\"\n    You are given an array arr of integers and you\
    \ need to return\n    sum of magnitudes of integers multiplied by product of all\
    \ signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note:\
    \ return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\
    \ == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n   \
    \ \"\"\"\n    if not arr:\n        return None\n    product = 1\n    total = 0\n\
    \    for x in arr:\n        if x > 0:\n            product *= 1\n        elif\
    \ x < 0:\n            product *= -1\n        else:\n            product *= 0\n\
    \        total += abs(x)\n    return total * product\ndef check(candidate):\n\
    \    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n\
    \    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([])\
    \ == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n    assert candidate([-1,\
    \ 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1,\
    \ 1, 1, 0]) == 0\n\ndef test_check():\n    check(prod_signs)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
