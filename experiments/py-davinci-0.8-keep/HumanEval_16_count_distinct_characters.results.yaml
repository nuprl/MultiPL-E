name: HumanEval_16_count_distinct_characters
language: py
results:
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    letters = {}\n    for s in string:\n        if s not in\
    \ letters:\n            letters[s] = 0\n        letters[s] += 1\n    return len(letters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznvsyy1l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpznvsyy1l.py\", line 24,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpznvsyy1l.py\"\
    , line 19, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.upper()\n    distinct_characters = []\n\
    \    for letter in string:\n        if letter not in distinct_characters:\n  \
    \          distinct_characters.append(letter)\n    return len(distinct_characters)\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for c in string:\n  \
    \      if c.isalpha():\n            distinct_characters.add(c.lower())\n    return\
    \ len(distinct_characters)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2b2fr48.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpg2b2fr48.py\", line 23,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpg2b2fr48.py\"\
    , line 20, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # string = string.lower()\n    # print(string)\n    #\
    \ the_set = set(string)\n    # print(the_set)\n    # return len(the_set)\n   \
    \ # return len(set(string.lower()))\n    return len(set(string.lower()))\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8bfkrjw3.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp8bfkrjw3.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp8bfkrjw3.py\"\
    , line 13, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(c.lower() for c in string))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lowered_string = string.lower()\n    unique_chars = ''\n\
    \    for char in lowered_string:\n        if char not in unique_chars:\n     \
    \       unique_chars += char\n    return len(unique_chars)\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    characters = set()\n    for i in string:\n        characters.add(i.lower())\n\
    \    return len(characters)\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    char_list = []\n    lower_string = string.lower()\n  \
    \  for char in lower_string:\n        if char not in char_list:\n            char_list.append(char)\n\
    \    return len(char_list)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    ...\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3z4x4s7b.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp3z4x4s7b.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp3z4x4s7b.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lowercase_string = string.lower()\n    return len(set(lowercase_string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    char_set = set()\n    for char in string:\n        char_set.add(char.lower())\n\
    \    return len(char_set)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkg72mf1e.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpkg72mf1e.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpkg72mf1e.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    ...\n\n\n@given(strings())\ndef check(candidate):\n  \
    \  assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtnocgw0.py\", line\
    \ 11, in <module>\n    @given(strings())\nNameError: name 'given' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # we are going to use a set to keep track of distinct\
    \ characters we have seen\n    distinct_characters = set()\n    for char in string:\n\
    \        distinct_characters.add(char.lower())\n\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(map(lambda ch: ch.lower(), string)))\n\n\
    \n@doctest_unit_tests(count_distinct_characters)\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpee2jiqsi.py\", line\
    \ 11, in <module>\n    @doctest_unit_tests(count_distinct_characters)\nNameError:\
    \ name 'doctest_unit_tests' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # We need to use a list here as we need to check if the\
    \ character has already been added,\n    # and lists are mutable. Sets are not\
    \ mutable and hence, we can't use it.\n    characters_list = []\n    for character\
    \ in string:\n        if character.lower() not in characters_list:\n         \
    \   characters_list.append(character.lower())\n    return len(characters_list)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    count = 0\n    seen = set()\n    for c in string:\n  \
    \      if c.lower() not in seen:\n            count += 1\n            seen.add(c.lower())\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_count = 0\n    char_seen = set()\n    for char\
    \ in string:\n        if char.lower() not in char_seen:\n            distinct_count\
    \ += 1\n            char_seen.add(char.lower())\n    return distinct_count\n\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # Duyet\n    # return len(set(string.lower()))\n\n   \
    \ # Cach khac\n    count = 0\n    for char in string:\n        if char.lower()\
    \ not in string[:count]:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_2y57lu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpp_2y57lu.py\", line 27,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpp_2y57lu.py\"\
    , line 24, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n    \
    \    distinct_chars.add(char.lower())\n    return len(distinct_chars)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    unique_characters = []\n\
    \    for char in string:\n        if char not in unique_characters:\n        \
    \    unique_characters.append(char)\n    return len(unique_characters)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    if len(string) == 0:\n        return 0\n    res = []\n\
    \    for x in string:\n        if x.lower() not in res:\n            res.append(x.lower())\n\
    \    return len(res)\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # your code here\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw73ge1ws.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpw73ge1ws.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpw73ge1ws.py\"\
    , line 14, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n    \
    \    distinct_chars.add(char.lower())\n    return len(distinct_chars)\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for char in string:\n\
    \        distinct_characters.add(char.lower())\n    return len(distinct_characters)\n\
    count_distinct_characters('Jerry')\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi75s3i9_.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpi75s3i9_.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpi75s3i9_.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # the set() function returns a set of characters of a\
    \ string\n    string = set(string)\n    return len(string)\n    \n    \ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp31casl0g.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp31casl0g.py\", line 21,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp31casl0g.py\"\
    , line 16, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    chars = set()\n    for character in string:\n        if\
    \ character.isalpha():\n            chars.add(character.lower())\n    return len(chars)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmeifttx8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpmeifttx8.py\", line 23,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpmeifttx8.py\"\
    , line 20, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    res = set()\n    for character in string:\n        res.add(character.lower())\n\
    \    return len(res)\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO 1: implement this function\n    return 0\n\n\n\
    def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf0bpae3c.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpf0bpae3c.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpf0bpae3c.py\"\
    , line 14, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    seen = set()\n    for c in string:\n        seen.add(c.lower())\n\
    \    return len(seen)\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\nassert count_distinct_characters('xyzXYZ')\
    \ == 3\nassert count_distinct_characters('Jerry') == 4\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: complete this function\n    dic={}\n    count=0\n\
    \    for i in string:\n        if i.lower() not in dic:\n            dic[i.lower()]=1\n\
    \            count+=1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # This is very similar to the problem of counting unique\
    \ numbers in an array.\n    # The only difference is that now we have to consider\
    \ case.\n    # Here are the steps:\n    # 1. Create an empty set (called unique).\n\
    \    # 2. Loop through the characters in the string, one at a time.\n    #   \
    \ 2.1 If the character is in the set, move on to the next character.\n    #  \
    \  2.2 If the character is not in the set, add it to the set.\n    # 3. Return\
    \ the length of the set.\n    #\n    # Step 1 is simple. Step 2 is easy to understand,\
    \ but you need to be careful\n    # with case-sensitivity. You can convert the\
    \ character to lowercase before\n    # checking if it is in the set or not. Step\
    \ 3 is also simple.\n    #\n    # What is the time complexity?\n    # The length\
    \ of the string is n, and each check takes O(1) time, giving an\n    # overall\
    \ time complexity of O(n).\n    unique = set()\n    for c in string:\n       \
    \ if c.lower() not in unique:\n            unique.add(c.lower())\n    return len(unique)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    count = 0\n    string = string.lower()\n    for i in range(len(string)):\n\
    \        if string[i] not in string[:i]:\n            count += 1\n    return count\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbskkbjtf.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpbskkbjtf.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpbskkbjtf.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lower_case_string = string.lower()\n    return len(set(lower_case_string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    seen = set()\n    for ch in string:\n        seen.add(ch.lower())\n\
    \    return len(seen)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa06o3u_w.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpa06o3u_w.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpa06o3u_w.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(c.lower() for c in string))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    unique_chars = set()\n    for char in string:\n      \
    \  unique_chars.add(char.lower())\n    return len(unique_chars)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    characters = set()\n    for\
    \ c in string:\n        characters.add(c)\n    return len(characters)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n    \
    \    if char.lower() not in distinct_chars:\n            distinct_chars.add(char.lower())\n\
    \    return len(distinct_chars)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    ''' ####solution-1: no duplicate counting####\n    chars\
    \ = set()\n    for char in string:\n        chars.add(char.lower())\n    return\
    \ len(chars)\n    '''\n    ####solution-2: count each distinct char in the string####\n\
    \    lower_case_string = string.lower()\n    return len(set(lower_case_string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = []\n    for char in string:\n  \
    \      if char.lower() not in distinct_characters:\n            distinct_characters.append(char.lower())\n\
    \    return len(distinct_characters)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: write your code here\n    return len(set(string.lower()))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return sum(string.lower().count(c) == 1 for c in string.lower())\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyp_q98g7.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpyp_q98g7.py\", line 18,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpyp_q98g7.py\"\
    , line 13, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    distinct_chars = set()\n\
    \    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # In the homework, implement your code here\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtdnwvql.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpvtdnwvql.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpvtdnwvql.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    characters = set()\n    for ch in string:\n        characters.add(ch.lower())\n\
    \    return len(characters)\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lower_case_string = string.lower()\n    counter = 0\n\
    \    for index in range(len(lower_case_string)):\n        character = lower_case_string[index]\n\
    \        if character not in lower_case_string[:index]:\n            counter +=\
    \ 1\n    return counter\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\ncount_distinct_characters('xyzXYZ')\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\nassert count_distinct_characters('xyzXYZ')\
    \ == 3\nassert count_distinct_characters('Jerry') == 4\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for c in string:\n  \
    \      distinct_characters.add(c.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO implement method body\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhfgr13f.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpnhfgr13f.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpnhfgr13f.py\"\
    , line 14, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    str_set = set(string.lower())\n    return len(str_set)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # assuming the string is only formed of english characters\n\
    \    s = string.lower()\n    return len(set(s))\n\n\ndef check(candidate):\n \
    \   assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # COMPLETE ME\n    return  # REPLACE ME\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqs7uxrh.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmqs7uxrh.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpmqs7uxrh.py\"\
    , line 13, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # this is a simple implementation, but it can easily be\
    \ made more efficient.\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_char_count = 0\n    for i in range(len(string)):\n\
    \        char = string[i]\n        if char not in string[:i]:\n            distinct_char_count\
    \ += 1\n    return distinct_char_count\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1d4cy_14.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1d4cy_14.py\", line 23,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp1d4cy_14.py\"\
    , line 18, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # return len(set(string.lower()))\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0uuiv28e.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp0uuiv28e.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp0uuiv28e.py\"\
    , line 15, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2so997m6.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2so997m6.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp2so997m6.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    l = list(string.lower())\n    d = dict()\n    for char\
    \ in l:\n        d[char] = d.get(char,0) + 1\n    return len(d)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    str_lower = string.lower()\n    return len(set(str_lower))\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    raise NotImplementedError\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0slwsth.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpq0slwsth.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpq0slwsth.py\"\
    , line 12, in check\n    assert candidate('') == 0\n  File \"/tmp/tmpq0slwsth.py\"\
    , line 8, in count_distinct_characters\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lower_case_string = string.lower()\n    character_set\
    \ = set(lower_case_string)\n    return len(character_set)\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.upper()\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # YOUR CODE HERE\n    counts = set()\n    for char in\
    \ string:\n        counts.add(char.lower())\n    return len(counts)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n    \nassert count_distinct_characters('xyzXYZ')\
    \ == 3\nassert count_distinct_characters('Jerry') == 4\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    s = set()\n    for char in string:\n        s.add(char.lower())\n\
    \    return len(s)\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # PUT YOUR CODE HERE\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgp6_34sg.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpgp6_34sg.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpgp6_34sg.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lower_string = string.lower()\n    return len(set(lower_string))\n\
    \nassert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry')\
    \ == 4\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.lower()\
    \ not in string[:count]:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgchkablw.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgchkablw.py\", line 22,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpgchkablw.py\"\
    , line 19, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: You must write implementation here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa44ror8u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpa44ror8u.py\", line 20,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpa44ror8u.py\"\
    , line 14, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO\n    count_distinct_characters = set(string.lower())\n\
    \    return len(count_distinct_characters)\n\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    character_map = {}\n    for char in string:\n        if\
    \ char.lower() not in character_map:\n            character_map[char.lower()]\
    \ = 1\n    return len(character_map)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    char_to_frequency = {}\n    for char in string:\n    \
    \    char_to_frequency[char.lower()] = char_to_frequency.get(char.lower(), 0)\
    \ + 1\n    return len(char_to_frequency)\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n    \ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    temp = list(string.lower())\n    res = []\n    for item\
    \ in temp:\n        if item not in res:\n            res.append(item)\n    return\
    \ len(res)\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert\
    \ candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert\
    \ candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') ==\
    \ 5\n\ndef test_check():\n    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    unique_chars = set()\n    for char in string:\n      \
    \  unique_chars.add(char.lower())\n    return len(unique_chars)\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lowercase_characters = set()\n    uppercase_characters\
    \ = set()\n    for char in string:\n        if char.islower():\n            lowercase_characters.add(char)\n\
    \        elif char.isupper():\n            uppercase_characters.add(char)\n  \
    \  return len(lowercase_characters | uppercase_characters)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphg8phu4s.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphg8phu4s.py\", line 26,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmphg8phu4s.py\"\
    , line 21, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # {'a': 0, 'b': 0, 'c': 0}\n    # {'a': 1, 'b': 0, 'c':\
    \ 0}\n    # {'a': 1, 'b': 0, 'c': 1}\n    return len(set(string.lower()))\n\n\n\
    def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    count = 0\n    for letter in string:\n        if not letter.lower()\
    \ in string.lower():\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahl5cd_z.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpahl5cd_z.py\", line 23,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpahl5cd_z.py\"\
    , line 17, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.upper()\n    distinct_chars = set()\n\
    \    for char in string:\n        distinct_chars.add(char)\n    return len(distinct_chars)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2tcjnlr.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpj2tcjnlr.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpj2tcjnlr.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # ToDo: finish implementation\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8q2jcn8f.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp8q2jcn8f.py\", line 17,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp8q2jcn8f.py\"\
    , line 10, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = list(string)\n    unique_chars = set(string)\n\
    \    return len(unique_chars)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24sm92hm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp24sm92hm.py\", line 21,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmp24sm92hm.py\"\
    , line 16, in check\n    assert candidate('abcdecadeCADE') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    count = 0\n    for char in\
    \ string:\n        if char not in string[:count]:\n            count += 1\n  \
    \  return count\n\n\ndef check(candidate):\n    assert candidate('') == 0\n  \
    \  assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') == 5\n\
    \    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgp_1a90q.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgp_1a90q.py\", line 24,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpgp_1a90q.py\"\
    , line 21, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    str_list = [string[i].lower() for i in range(len(string))]\n\
    \    return len(set(str_list))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmponls4_ox.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmponls4_ox.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmponls4_ox.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # convert to lower case\n    string = string.lower()\n\
    \    distinct_chars = set()\n    for c in string:\n        distinct_chars.add(c)\n\
    \    return len(distinct_chars)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\nprint(count_distinct_characters('xyzXYZ'))\n\
    print(count_distinct_characters('Jerry'))\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: "3\n4\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    count = 0\n    for char in\
    \ set(string):\n        count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # Use set to remove duplicates\n    distinct_characters\
    \ = set(string.lower())\n    # Return the length of distinct_characters\n    return\
    \ len(distinct_characters)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n    \
    \    distinct_chars.add(char.lower())\n    return len(distinct_chars)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    character_set = set()\n    for letter in string:\n   \
    \     character_set.add(letter.lower())\n    return len(character_set)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # split the string into a list of characters\n    characters\
    \ = list(string)\n    # make a set\n    result = set()\n    # for each character\
    \ in the list, convert it to lower case and add it to the set\n    for character\
    \ in characters:\n        result.add(character.lower())\n    # return the size\
    \ of the set\n    return len(result)\n \n \ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    counts = set()\n    for char in string:\n        counts.add(char.lower())\n\
    \    return len(counts)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = set()\n    for character in string:\n\
    \        distinct_characters.add(character.lower())\n    return len(distinct_characters)\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lower_string = string.lower()\n    # set() is a construct\
    \ that removes duplicates from a list\n    # Hence, the length of the set represents\
    \ the number of distinct characters\n    return len(set(lower_string))\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    lower = set(string.lower())\n    upper = set(string.upper())\n\
    \    return len(lower.union(upper))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxycxxaad.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpxycxxaad.py\", line 21,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpxycxxaad.py\"\
    , line 15, in check\n    assert candidate('abcde') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    unique_chars = {c.lower() for c in string}\n    return\
    \ len(unique_chars)\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(list(string.lower())))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    chars = set()\n    for char in string:\n        chars.add(char.lower())\n\
    \    return len(chars)\n    \n    \ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    all_chars = set()\n    for ch in string:\n        all_chars.add(ch.lower())\n\
    \    return len(all_chars)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: complete the count_distinct_characters function\
    \ here\n    ans = ''\n    for s in string:\n        if s.lower() not in ans:\n\
    \            ans += s.lower()\n    return len(ans)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    count = 0\n    for c in string:\n        if c.lower()\
    \ not in string[:count]:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm81178p4.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpm81178p4.py\", line 23,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpm81178p4.py\"\
    , line 20, in check\n    assert candidate('Jerry jERRY JeRRRY') == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # return len(set(string.lower()))\n    return len(set(c.lower()\
    \ for c in string))\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n    \
    \    distinct_chars.add(char.lower())\n    return len(distinct_chars)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    s = set()\n    for char in string:\n        s.add(char.lower())\n\
    \    return len(s)\n\n\ndef check(candidate):\n    assert candidate('') == 0\n\
    \    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE') ==\
    \ 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY\
    \ JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    set_of_chars = set()\n    for char in string:\n      \
    \  set_of_chars.add(char.lower())\n    return len(set_of_chars)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n    \n    \ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    a=set(string.lower())\n    return len(a)\n    #raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # Your code goes here.\n    string_nocase = string.lower()\n\
    \    distinct_characters = set(string_nocase)\n    return len(distinct_characters)\n\
    \ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # YOUR CODE HERE\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiq5iy916.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpiq5iy916.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpiq5iy916.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    string = string.lower()\n    return len(set(string))\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # return len(set(string.lower()))\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert\
    \ candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n\
    \    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihj1aagt.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpihj1aagt.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmpihj1aagt.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    # TODO: implement count_distinct_characters function\n\
    \n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
    \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
    \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n\
    \    check(count_distinct_characters)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnxnq6ab.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmplnxnq6ab.py\", line 19,\
    \ in test_check\n    check(count_distinct_characters)\n  File \"/tmp/tmplnxnq6ab.py\"\
    , line 12, in check\n    assert candidate('') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a\
    \ string, find out how many distinct characters (regardless of case) does it consist\
    \ of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n\
    \    4\n    \"\"\"\n    distinct_characters = []\n    for char in string:\n  \
    \      if char.lower() not in distinct_characters:\n            distinct_characters.append(char.lower())\n\
    \    return len(distinct_characters)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcdecadeCADE')\
    \ == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry\
    \ jERRY JeRRRY') == 5\n\ndef test_check():\n    check(count_distinct_characters)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
