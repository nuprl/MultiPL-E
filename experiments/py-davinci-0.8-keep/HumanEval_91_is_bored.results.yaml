name: HumanEval_91_is_bored
language: py
results:
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    x = S.split(\" \")\n    n = 0\n    for i in x:\n   \
    \     if i[0] == \"I\":\n            n += 1\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbyvn0o8b.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbyvn0o8b.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbyvn0o8b.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdounuxf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppdounuxf.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppdounuxf.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for char in S:\n        if char == 'I':\n\
    \            count += 1\n    return count\n\n\nprint(is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\"))\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: "1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiip3f2fg.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpiip3f2fg.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiip3f2fg.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([word for word in S.split() if word.lower()\
    \ == \"i\"])\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlljsuqk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprlljsuqk.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmprlljsuqk.py\", line 21,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in re.split(r\"[.?!]\"\
    , S):\n        if sentence.strip().startswith(\"I\"):\n            boredoms +=\
    \ 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0ea8to0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd0ea8to0.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd0ea8to0.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpd0ea8to0.py\"\
    , line 14, in is_bored\n    for sentence in re.split(r\"[.?!]\", S):\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = re.findall(r'I\\W+(?=.)', S)\n    return\
    \ len(boredoms)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1nnvqsms.py\", line\
    \ 267, in <module>\n    test_check()\n  File \"/tmp/tmp1nnvqsms.py\", line 265,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1nnvqsms.py\", line 257,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp1nnvqsms.py\"\
    , line 13, in is_bored\n    boredoms = re.findall(r'I\\W+(?=.)', S)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return 0\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6kycs9_d.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6kycs9_d.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6kycs9_d.py\", line 18,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('. ')\n    sentences.extend(S.split('?\
    \ '))\n    sentences.extend(S.split('! '))\n    for sentence in sentences:\n \
    \       if sentence.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjoseb5h.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdjoseb5h.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdjoseb5h.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplxvj3tog.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplxvj3tog.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplxvj3tog.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # TODO: think about ways to solve this problem with\
    \ regular expressions\n    # Split the string S into sentences (delimited by .,\
    \ ? or !)\n    sents = re.split(r'[\\.\\?\\!]', S)\n    # TODO: count how many\
    \ of the sentences start with 'I'\n    count = 0\n    for sent in sents:\n   \
    \     if sent.strip().startswith('I'):\n            count += 1\n    return count\n\
    \    # TODO: return the count\n    # return 0\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaz1krwl0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaz1krwl0.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpaz1krwl0.py\", line 27,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpaz1krwl0.py\"\
    , line 15, in is_bored\n    sents = re.split(r'[\\.\\?\\!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split('.')\n    boredoms = 0\n    for\
    \ sentence in sentences:\n        if sentence.strip().startswith('I'):\n     \
    \       boredoms += 1\n    return boredoms\n   \n   \ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfj2k_qiy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpfj2k_qiy.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfj2k_qiy.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = re.split('[.?!]', S)\n    return len([sentence\
    \ for sentence in sentences if sentence.split()[0] == 'I'])\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1chvlc72.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1chvlc72.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1chvlc72.py\", line 18,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp1chvlc72.py\"\
    , line 13, in is_bored\n    sentences = re.split('[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        sentence = sentence.strip(\"?!\")\n        for word in sentence.split():\n\
    \            if word.lower() == \"i\":\n                boredoms += 1\n      \
    \          break\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppp0g6f_i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppp0g6f_i.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppp0g6f_i.py\", line 28,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    S = S.split()\n    for word in S:\n\
    \        if word[0] == 'I':\n            boredoms += 1\n    return boredoms\n\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4t6zte0y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4t6zte0y.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4t6zte0y.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(s.startswith(\"I\") for s in S.split(\".\"\
    ) + S.split(\"?\") + S.split(\"!\"))\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hw_39jm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5hw_39jm.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5hw_39jm.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    if 'I' in S:\n        count=0\n        x=S.split('.')\n\
    \        for i in x:\n            if 'I' in i:\n                count+=1\n   \
    \     return count\n    else:\n        return 0\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsyrlp_pc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsyrlp_pc.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsyrlp_pc.py\", line 27,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    n = 0\n    words = S.split()\n    for word in words:\n\
    \        if word[0] == 'I':\n            n += 1\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_s_pxa9.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8_s_pxa9.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8_s_pxa9.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfhf0iqye.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfhf0iqye.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfhf0iqye.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([word for word in S.split() if word == \"\
    I\"])\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpha01txp6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpha01txp6.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpha01txp6.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    sentences = re.split(r'[\\.\\?!]', S)\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6grtj7kx.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp6grtj7kx.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6grtj7kx.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp6grtj7kx.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[\\.\\?!]', S)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    import re\n    match = re.findall(r'[.?!]\\sI\\s', S)\n\
    \    return len(match)\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2cn3knm5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2cn3knm5.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2cn3knm5.py\", line 21,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    word_list = S.split()\n    for i in\
    \ range(len(word_list)):\n        if i == 0 and word_list[i] == \"I\":\n     \
    \       boredoms += 1\n        elif i == 0 and word_list[i] != \"I\":\n      \
    \      pass\n        elif i > 0 and word_list[i-1] in \".!?\" and word_list[i]\
    \ == \"I\":\n            boredoms += 1\n        else:\n            pass\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6u6fpar.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpk6u6fpar.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk6u6fpar.py\", line 32,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(1 for s in S.split(\".\") if s.strip().startswith(\"\
    I\"))\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa3d47ich.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpa3d47ich.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa3d47ich.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    first_word = re.compile(r'I')\n    for\
    \ sentence in re.split(r'[.?!]', S):\n        if first_word.match(sentence):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpltzqqoox.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpltzqqoox.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpltzqqoox.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpltzqqoox.py\"\
    , line 14, in is_bored\n    first_word = re.compile(r'I')\nNameError: name 're'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      for sentence in sentence.split('?'):\n            for sentence in sentence.split('!'):\n\
    \                if sentence.split()[0] == 'I':\n                    boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpots3d90j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpots3d90j.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpots3d90j.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\n  File \"/tmp/tmpots3d90j.py\"\
    , line 17, in is_bored\n    if sentence.split()[0] == 'I':\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # try to use a list to store the result, and set initial\
    \ value to 0\n    bored = [0]\n    # replace all .?! with .,\n    S = S.replace('.',\
    \ '').replace('?', '').replace('!', '')\n    # split the string\n    S = S.split('\
    \ ')\n    for i in range(len(S)):\n        # if the current word is I, and the\
    \ previous word is not I,\n        # add one to the initial value\n        if\
    \ S[i] == 'I' and S[i-1] != 'I':\n            bored[0] += 1\n    return bored[0]\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw6il5v8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw6il5v8.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqw6il5v8.py\", line 32,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.!?')\n    for\
    \ sentence in sentences:\n        try:\n            if sentence.split()[0] ==\
    \ 'I':\n                boredoms += 1\n        except IndexError:\n          \
    \  continue\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmb6hrbs0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmb6hrbs0.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmb6hrbs0.py\", line 29,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = [1 for word in S.split() if word == \"I\"\
    ]\n    return sum(boredoms)\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplypt1b1h.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplypt1b1h.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmplypt1b1h.py\", line 23,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyfc20hxn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpyfc20hxn.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpyfc20hxn.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    S = S.replace(\"!\",\".\")\n    S = S.replace(\"\
    ?\",\".\")\n    words = S.split(\".\")\n    for item in words:\n        if item.strip().startswith(\"\
    I\"):\n            count += 1\n    return count\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnaure3l3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnaure3l3.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpnaure3l3.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for i in re.split('[.?!]', S):\n    \
    \    if i[0] == 'I':\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj24m87fs.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpj24m87fs.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpj24m87fs.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpj24m87fs.py\"\
    , line 14, in is_bored\n    for i in re.split('[.?!]', S):\nNameError: name 're'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentence = \"\"\n    for word in S.split():\n\
    \        sentence += word + \" \"\n        if word[-1] in [\".\", \"?\", \"!\"\
    ]:\n            if sentence.split()[0] == \"I\":\n                boredoms +=\
    \ 1\n            sentence = \"\"\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Process string first, replace '.' with ' ', replace\
    \ '?' with ' ', replace '!' with ' '.\n    S_replaced = S.replace('.', ' ').replace('?',\
    \ ' ').replace('!', ' ')\n    # Split S_replaced by space.\n    S_array = S_replaced.split('\
    \ ')\n    # Count boredoms and return.\n    boredoms = 0\n    for word in S_array:\n\
    \        if word == 'I':\n            boredoms += 1\n    return boredoms\n   \
    \ \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmufvosqn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpmufvosqn.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmufvosqn.py\", line 31,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([1 for word in S.split('.') if word.startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3ekpqkt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe3ekpqkt.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe3ekpqkt.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\"?\"):\n\
    \        for sentence in sentence.split(\"!\"):\n            for sentence in sentence.split(\"\
    .\"):\n                if sentence.strip().startswith(\"I\"):\n              \
    \      boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe19fiw7m.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpe19fiw7m.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe19fiw7m.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([1 for x in S.split(\".\") if x.startswith(\"\
    I\")])\n    # return sum(x.startswith(\"I\") for x in S.split(\".\"))\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdaybffme.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdaybffme.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdaybffme.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(s.startswith(\"I\") for s in S.split(\".\"\
    ) if s)\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64uzxibx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp64uzxibx.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp64uzxibx.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(1 for line in S.split('.') if line.strip().startswith('I'))\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcq_bbs8q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcq_bbs8q.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcq_bbs8q.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      for word in sentence.split():\n            if word == 'I':\n          \
    \      boredoms += 1\n                break\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi5403eml.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi5403eml.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi5403eml.py\", line 28,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return int(re.search(r'I\\b', S) is not None)\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9qojhhv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpi9qojhhv.py\", line 23,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpi9qojhhv.py\", line 15,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpi9qojhhv.py\"\
    , line 13, in is_bored\n    return int(re.search(r'I\\b', S) is not None)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9jh8f3q.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmph9jh8f3q.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmph9jh8f3q.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([i for i in S.split() if i.lower() == 'i'])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjhq3xg4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphjhq3xg4.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphjhq3xg4.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = []\n    sentence = []\n\
    \    while S:\n        if S[0] in ('.', '?', '!'):\n            if sentence:\n\
    \                sentences.append(sentence)\n                sentence = []\n \
    \       else:\n            sentence.append(S[0])\n        S = S[1:]\n    for sentence\
    \ in sentences:\n        if sentence[0] == 'I':\n            boredoms += 1\n \
    \   return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_a4pa48.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpt_a4pa48.py\", line 39,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt_a4pa48.py\", line 32,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptcdrdf1s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptcdrdf1s.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptcdrdf1s.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Remove all punctuation and split on whitespace.\n\
    \    words = S.translate(str.maketrans('', '', string.punctuation)).split()\n\
    \    # Count the number of \"I\"s.\n    # There may be a more efficient way to\
    \ do this.\n    I_count = 0\n    for word in words:\n        if word == \"I\"\
    :\n            I_count += 1\n    return I_count\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5y_delov.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5y_delov.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp5y_delov.py\", line 24,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp5y_delov.py\"\
    , line 14, in is_bored\n    words = S.translate(str.maketrans('', '', string.punctuation)).split()\n\
    NameError: name 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cvveyr9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_cvveyr9.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_cvveyr9.py\", line 19,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # split the string into sentences and remove white space\n\
    \    sentences = [sentence.strip() for sentence in S.split('.')\n            \
    \     if sentence.strip()]\n    # put a full stop at the end of each sentence\n\
    \    sentences = [sentence + '.' for sentence in sentences]\n    # check each\
    \ sentence for the word \"I\"\n    boredoms = [s for s in sentences if s.startswith('I')]\n\
    \    return len(boredoms)\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa55fspuc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpa55fspuc.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa55fspuc.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      words = sentence.split()\n        if len(words) > 0 and words[0] == 'I':\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    cnt = 0\n    for s in S.split(\".\"):\n        if s.strip().startswith(\"\
    I\"):\n            cnt += 1\n    return cnt\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdc_tjkim.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdc_tjkim.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdc_tjkim.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = re.split(r'[.?!]', S)\n\
    \    for sentence in sentences:\n        boredoms += sentence.strip().startswith('I')\n\
    \    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm1f2q19u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpm1f2q19u.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm1f2q19u.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpm1f2q19u.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = re.split(r'[.?!]', S)\n    num_bored = 0\n\
    \    for sentence in sentences:\n        sentence = sentence.strip()\n       \
    \ if len(sentence) > 0 and sentence[0] == 'I':\n            num_bored += 1\n \
    \   return num_bored\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbeh_5ayf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbeh_5ayf.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbeh_5ayf.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpbeh_5ayf.py\"\
    , line 13, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Split the string by the delimiters\n    sentences\
    \ = re.split(r'[!.?]', S)\n    # Get the number of sentences that start with 'I'\n\
    \    return len([sentence for sentence in sentences if sentence.startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgfp483et.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgfp483et.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgfp483et.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpgfp483et.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[!.?]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split(' ')\n    c = 0\n    for w in words:\n\
    \        if w == 'I':\n            c += 1\n    return c\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl9ql4696.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpl9ql4696.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpl9ql4696.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for s in S.split('.'):\n        for\
    \ ss in s.split('?'):\n            for sss in ss.split('!'):\n               \
    \ if sss.strip().startswith('I'):\n                    boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8j9usptg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8j9usptg.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8j9usptg.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentence = \"\"\n    for c in S:\n\
    \        if c in '.!?':\n            if sentence.startswith(\"I\"):\n        \
    \        boredoms += 1\n            sentence = \"\"\n        else:\n         \
    \   sentence += c\n\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpei1z3te4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpei1z3te4.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpei1z3te4.py\", line 27,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in re.split(r'[.?!]',\
    \ S):\n        boredoms += sentence.strip().startswith('I')\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11_yjacd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp11_yjacd.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp11_yjacd.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp11_yjacd.py\"\
    , line 14, in is_bored\n    for sentence in re.split(r'[.?!]', S):\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([1 for s in S.split('.') if s.strip().startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptkvhun6l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptkvhun6l.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptkvhun6l.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        words = sentence.split()\n        if words[0]\
    \ == \"I\":\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split('.')\n    boredom = 0\n    for s\
    \ in sentences:\n        word_list = s.split()\n        if len(word_list) > 0\
    \ and word_list[0] == 'I':\n            boredom += 1\n    return boredom\n\n\n\
    @given(st.text())\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppli6b8rz.py\", line\
    \ 22, in <module>\n    @given(st.text())\nNameError: name 'given' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    if not S:\n        return 0\n    res = []\n    for i\
    \ in S.split(\".\"):\n        res.append(i.strip())\n    for j in S.split(\"?\"\
    ):\n        res.append(j.strip())\n    for k in S.split(\"!\"):\n        res.append(k.strip())\n\
    \    return len([word for word in res if word.strip().startswith(\"I\")])\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpibiotkuk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpibiotkuk.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpibiotkuk.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # The number of boredom\n    boredoms = 0\n    # Set\
    \ up the variable to look at the next word\n    next_word = \"\"\n    # Go through\
    \ each word\n    for word in S.split():\n        # Check if the word is \"I\"\
    \ and if the next word is not \"am\"\n        if word == \"I\" and next_word !=\
    \ \"am\":\n            # If so, increment boredoms\n            boredoms += 1\n\
    \        # Set next_word as the current word\n        next_word = word\n    #\
    \ Finally, return boredoms\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhjqa8j4.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmphhjqa8j4.py\", line 38,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphhjqa8j4.py\", line 35,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    i_counter = 0\n    S = S.split()\n    for word in S:\n\
    \        if word[0] == 'I':\n            i_counter += 1\n    return i_counter\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ij_sm8r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9ij_sm8r.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9ij_sm8r.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = re.split(r'(?<=[.?!])\\s*', S)\n    return\
    \ sum(1 for s in sentences if s.startswith('I'))\n\n@pytest.mark.parametrize('string,\
    \ expected', [\n    ('Hello world', 0),\n    ('The sky is blue. The sun is shining.\
    \ I love this weather', 1),\n    ('I love this weather. The sun is shining. The\
    \ sky is blue.', 2),\n    (\"I am a boy. I am a girl. I am a dog. I am a cat\"\
    , 4),\n    (\"I am a boy? I am a girl! I am a dog? I am a cat.\", 4),\n    (\"\
    I.Am.A.Happy.Bot.The.Bot.Is.A.Happy.Boy.\", 1),\n    (\"I am a boy? I am a girl!\
    \ I am a dog? I am a cat. Is it a boy?\", 5),\n    ('The sky is blue. The sun\
    \ is shining. I love this weather. I am a boy', 2),\n    ('I am a boy. The sky\
    \ is blue. The sun is shining. I love this weather', 2),\n    ('I am a boy. I\
    \ am a girl. I am a dog. I am a cat. I am an alien', 5),\n    ('I am a boy. I\
    \ am a girl. I am a dog. I am a cat. I am an alien.', 5),\n    ('I am a boy? I\
    \ am a girl! I am a dog? I am a cat! I am an alien?', 5),\n    ('I am a boy? I\
    \ am a girl! I am a dog? I am a cat! I am an alien.', 5),\n    ('I am a boy! I\
    \ am a girl! I am a dog! I am a cat! I am an alien!', 5),\n    ('I am a boy? I\
    \ am a girl! I am a dog? I am a cat? I am an alien.', 5),\n    ('I am a boy. I\
    \ am a girl. I am a dog. I am a cat. I am an alien!', 5),\n    ('I am a boy. I\
    \ am a girl. I am a dog. I am a cat. I am an alien?',\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpv_ltxgdb.py\", line 34\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(s.strip().startswith(\"I\") for s in S.split(\"\
    .\") if s)\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpizx4d5it.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpizx4d5it.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpizx4d5it.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I \")\n\n@given(st.text())\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfm_u_0s6.py\", line\
    \ 15, in <module>\n    @given(st.text())\nNameError: name 'given' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([\n        s for s in S.split('.')\n    \
    \    if s and s[0] == 'I'\n    ])\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdb1u_tu4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdb1u_tu4.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdb1u_tu4.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    S = re.sub(r'\\.|\\?|\\!', '', S)\n\
    \    for word in S.split():\n        if word.lower() == 'i':\n            boredom\
    \ += 1\n    return boredom\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme3jvy29.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpme3jvy29.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpme3jvy29.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpme3jvy29.py\"\
    , line 14, in is_bored\n    S = re.sub(r'\\.|\\?|\\!', '', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.split(\" \").count(\"I\")\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6x4lnv3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpa6x4lnv3.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpa6x4lnv3.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for c in S:\n        if c == 'I':\n \
    \           count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgd_h9va2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgd_h9va2.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgd_h9va2.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    x = 0\n    for c in S:\n        if c == 'I':\n     \
    \       x += 1\n    return x\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0u5ubild.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0u5ubild.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0u5ubild.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    assert isinstance(S, str)\n    count = 0\n    sentences\
    \ = re.split('[?.!]', S)\n    for sentence in sentences:\n        word_list =\
    \ sentence.split()\n        if len(word_list) > 0 and word_list[0] == 'I':\n \
    \           count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr8_81nif.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpr8_81nif.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr8_81nif.py\", line 24,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpr8_81nif.py\"\
    , line 15, in is_bored\n    sentences = re.split('[?.!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for a_str in S.split(\".\"):\n      \
    \  # print(a_str)\n        if a_str.split(\" \")[0] == \"I\":\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e15jmyn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3e15jmyn.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3e15jmyn.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if\
    \ word[0] == 'I':\n            boredom += 1\n    return boredom\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuynwqlh6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpuynwqlh6.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuynwqlh6.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([word for word in S.split() if word.startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3yxviye.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmps3yxviye.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmps3yxviye.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = re.split(r'[.?!]', S)\n    boredoms = 0\n\
    \    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqh14of6x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqh14of6x.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqh14of6x.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpqh14of6x.py\"\
    , line 13, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence.strip().startswith('I'):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6628curz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6628curz.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6628curz.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    if words[0] == \"I\":\n     \
    \   return 1\n    return 0\n    # Replace 0 with your code\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mk6m_dd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_mk6m_dd.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_mk6m_dd.py\", line 25,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    S = S.lower()\n    boredoms = 0\n    while S:\n    \
    \    s = S.find('i')\n        S = S[s:]\n        if s == -1:\n            return\
    \ boredoms\n        boredoms += 1\n        s = S.find('.')\n        if s == -1:\n\
    \            s = S.find('?')\n            if s == -1:\n                s = S.find('!')\n\
    \        S = S[s+1:]\n    return boredoms\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_wyp6gy.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpm_wyp6gy.py\", line 39,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpm_wyp6gy.py\", line 32,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([i for i in S.split('.') if i.startswith('I')])\n\
    \        \ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpob4ffjnb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpob4ffjnb.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpob4ffjnb.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    S = S.split(\".\")\n    for s in S:\n\
    \        if s[0] == \"I\":\n            count += 1\n    return count\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbafzhkef.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbafzhkef.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbafzhkef.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    flag = False\n    for i in S:\n  \
    \      if flag and i != '.' and i != '?' and i != '!':\n            flag = False\n\
    \        elif i == 'I':\n            flag = True\n            boredoms += 1\n\
    \        elif i == '.' or i == '?' or i == '!':\n            flag = False\n  \
    \  return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasez_ni3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpasez_ni3.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpasez_ni3.py\", line 28,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # todo: implement the function\n    return 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzzuztm26.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzzuztm26.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzzuztm26.py\", line 20,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Your code here\n    boredoms = 0\n    count = 0\n\
    \    for char in S:\n        if char == '.' or char == '?' or char == '!':\n \
    \           if count > 0:\n                boredoms += 1\n            count =\
    \ 0\n        if char == 'I':\n            count += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpim019_hv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpim019_hv.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpim019_hv.py\", line 28,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    d = S.split()\n    for i in d:\n    \
    \    if i == \"I\":\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd2f5ujqj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpd2f5ujqj.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd2f5ujqj.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Check if the firts word is \"I\"\n    return 1 if\
    \ S.split()[0] == \"I\" else 0\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymo_i492.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpymo_i492.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpymo_i492.py\", line 21,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      for sentence in sentence.split('?'):\n            for sentence in sentence.split('!'):\n\
    \                if sentence.strip().startswith('I'):\n                    boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2p4tg_hu.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp2p4tg_hu.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2p4tg_hu.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # TODO: Your implementation.\n    S = S.split('.')\n\
    \    count = 0\n    for s in S:\n        S2 = s.split('?')\n        for s2 in\
    \ S2:\n            S3 = s2.split('!')\n            for s3 in S3:\n           \
    \     if s3.strip().lower().startswith('i'):\n                    count = count\
    \ + 1\n    return count\n    \n    \n    \n    \n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmsi4p7ai.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpmsi4p7ai.py\", line 38,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmsi4p7ai.py\", line 31,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in split_sentences(S):\n\
    \        if sentence.startswith(\"I\"):\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpowyei8eg.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpowyei8eg.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpowyei8eg.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpowyei8eg.py\"\
    , line 14, in is_bored\n    for sentence in split_sentences(S):\nNameError: name\
    \ 'split_sentences' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptekd6eju.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptekd6eju.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptekd6eju.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    for\
    \ sentence in sentences:\n        if \"I\" in sentence:\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ogxhgps.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp3ogxhgps.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3ogxhgps.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    words = S.split(' ')\n    for i in\
    \ range(len(words)):\n        if words[i] == 'I':\n            boredoms += 1\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1skoabg_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1skoabg_.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1skoabg_.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for i in S.split('.'):\n        if\
    \ i.startswith('I'):\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt5ztkfrw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt5ztkfrw.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt5ztkfrw.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sents = re.split(r'[.?!]', S)\n    cnt = 0\n    for\
    \ sent in sents:\n        if sent.strip().startswith('I'):\n            cnt +=\
    \ 1\n    return cnt\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcky526vk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcky526vk.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcky526vk.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpcky526vk.py\"\
    , line 13, in is_bored\n    sents = re.split(r'[.?!]', S)\nNameError: name 're'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    num_boredoms = 0\n    # S.split('.')\n    # S.split('?')\n\
    \    # S.split('!')\n    # S.split('.') + S.split('?') + S.split('!')\n    # S.split(['.',\
    \ '?', '!'])\n    sentences = []\n    for c in S:\n        if c in ['.', '?',\
    \ '!']:\n            sentences.append('')\n        else:\n            sentences[-1]\
    \ += c\n    for s in sentences:\n        if len(s) > 0 and s[0] == 'I':\n    \
    \        num_boredoms += 1\n    return num_boredoms\n    # or\n    # return len([s\
    \ for s in S.split(['.', '?', '!']) if len(s) > 0 and s[0] == 'I'])\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphyefibe3.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphyefibe3.py\", line 41,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphyefibe3.py\", line 33,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmphyefibe3.py\"\
    , line 24, in is_bored\n    sentences[-1] += c\nIndexError: list index out of\
    \ range\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    for\
    \ sentence in sentences:\n        if sentence[0].isupper():\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7nlmzo_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo7nlmzo_.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpo7nlmzo_.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    sentence = ''\n    for char in S:\n\
    \        if char == '.' or char == '?' or char == '!':\n            if sentence.split()[0]\
    \ == 'I':\n                boredom += 1\n            sentence = ''\n        else:\n\
    \            sentence += char\n    return boredom\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word == \"I\":\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclzvzpro.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpclzvzpro.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpclzvzpro.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for sentence in S.split('.'):\n     \
    \   sentence = sentence.strip()\n        if not sentence:\n            continue\n\
    \        for s in sentence.split('?'):\n            if not s:\n              \
    \  continue\n            for s in s.split('!'):\n                if not s:\n \
    \                   continue\n                words = s.split()\n            \
    \    if words[0] == 'I':\n                    count += 1\n    return count\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    sentence = ''\n    for char in S:\n \
    \       if char in ['?', '.', '!']:\n            if sentence.strip().startswith('I'):\n\
    \                bored += 1\n            sentence = ''\n        else:\n      \
    \      sentence += char\n    if sentence.strip().startswith('I'):\n        bored\
    \ += 1\n    return bored\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0oiq77l.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpg0oiq77l.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg0oiq77l.py\", line 29,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n \
    \   return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg63su8qs.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg63su8qs.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg63su8qs.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    boredoms = 0\n    for word in\
    \ words:\n        if word == \"I\":\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkllsmn4a.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkllsmn4a.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkllsmn4a.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Do not modify this line, we will check your work against\
    \ our own solution\n    return 0\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeldelg6y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpeldelg6y.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpeldelg6y.py\", line 20,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      sentence = sentence.split('?')[0]\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnmqw5q6d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnmqw5q6d.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpnmqw5q6d.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for x in S.split(\".\"):\n        if\
    \ x[0] == \"I\":\n            bored += 1\n    return bored\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6l_rael9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6l_rael9.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp6l_rael9.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    sentence = S.split('.')\n    sentence.extend(S.split('?'))\n\
    \    sentence.extend(S.split('!'))\n    for s in sentence:\n        if 'I' in\
    \ s.split(' '):\n            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ktbyjgl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3ktbyjgl.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3ktbyjgl.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentence = \"\"\n    for char in S:\n\
    \        if char in \".?!\":\n            if sentence.startswith(\"I\"):\n   \
    \             boredoms += 1\n            sentence = \"\"\n        else:\n    \
    \        sentence += char\n    return boredoms\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp31n1q7sf.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp31n1q7sf.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp31n1q7sf.py\", line 27,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    n = 0\n    for n in range(len(S)):\n\
    \        if S[n] == ' ':\n            if S[n-1] == 'I':\n                boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58rhhkbw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp58rhhkbw.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp58rhhkbw.py\", line 28,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8562ld1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq8562ld1.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq8562ld1.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiypvzi5y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpiypvzi5y.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiypvzi5y.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\"?\"):\n\
    \        if sentence.strip().startswith(\"I\"):\n            boredoms += 1\n \
    \   return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppn1l7x33.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmppn1l7x33.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmppn1l7x33.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    if S == \"\":\n        return 0\n   \
    \ else:\n        for i in S.split():\n            if i.startswith(\"I\"):\n  \
    \              count += 1\n        return count\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwi6d9v6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuwi6d9v6.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuwi6d9v6.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Split input string on '.|?|!'\n    # Check if first\
    \ word of each sentence is 'I'\n    # if 'I' then increment bored count\n    #\
    \ return bored count\n    bored = 0\n    sentences = re.split('[?!.]', S)\n  \
    \  for sentence in sentences:\n        if sentence.strip().split(' ')[0] == 'I':\n\
    \            bored += 1\n    return bored\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3pblzy7y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3pblzy7y.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3pblzy7y.py\", line 26,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp3pblzy7y.py\"\
    , line 18, in is_bored\n    sentences = re.split('[?!.]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word\
    \ == \"I\":\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_cnci69.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpp_cnci69.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpp_cnci69.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc06yr5cd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpc06yr5cd.py\", line 23,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc06yr5cd.py\", line 16,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.') if s[0] == 'I'])\n\
    \   \n   \ndef check(candidate):\n    assert candidate('Hello world') == 0\n \
    \   assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2s07lnj7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2s07lnj7.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2s07lnj7.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split(\". \")\n    sentences\
    \ += S.split(\"? \")\n    sentences += S.split(\"! \")\n    for sentence in sentences:\n\
    \        if sentence.split(\" \")[0] == \"I\":\n            boredoms += 1\n  \
    \  return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6nftw_4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpd6nftw_4.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpd6nftw_4.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        sentence = sentence.strip()\n        if sentence.startswith(\"I\"):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbzthcx2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphbzthcx2.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphbzthcx2.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sen = S.split()\n    if len(sen) >\
    \ 1:\n        if sen[0] == \"I\":\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptt4fxhbw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptt4fxhbw.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmptt4fxhbw.py\", line 25,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = re.split('\\.|\\?|!', S)\n    boredoms =\
    \ 0\n    for sentence in sentences:\n        boredoms += 1 if sentence.startswith('I')\
    \ else 0\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr1okrc29.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr1okrc29.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpr1okrc29.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpr1okrc29.py\"\
    , line 13, in is_bored\n    sentences = re.split('\\.|\\?|!', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbufch7zf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbufch7zf.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbufch7zf.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    words = S.split()\n    boredom = 0\n    for word in\
    \ words:\n        if word == \"I\":\n            boredom += 1\n    return boredom\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefxp3p5g.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpefxp3p5g.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpefxp3p5g.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpedq621lx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpedq621lx.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpedq621lx.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for s in S.split('.'):\n        if\
    \ s.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\nprint(is_bored(\"\
    Hello world\"))\nprint(is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\"))\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: "0\n0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz14w_ke8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpz14w_ke8.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpz14w_ke8.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = re.split('\\.|\\?|!',\
    \ S)\n    boredoms = len([s for s in sentences if s.startswith('I')])\n    return\
    \ boredoms\n\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4era0nxl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4era0nxl.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4era0nxl.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp4era0nxl.py\"\
    , line 14, in is_bored\n    sentences = re.split('\\.|\\?|!', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return sum(1 for s in S.split(\".\") if s and s[0] ==\
    \ \"I\")\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9_gs9x7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf9_gs9x7.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf9_gs9x7.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # The overall idea is to split the string on '.', '!'\
    \ and '?' to get a list\n    # of sentences, then take the length of the list\
    \ of sentences that start\n    # with 'I'.\n    sentences = split(S, '.', '!',\
    \ '?')\n    return len([i for i in sentences if i.strip().startswith('I')])\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzerf8td.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbzerf8td.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbzerf8td.py\", line 20,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpbzerf8td.py\"\
    , line 16, in is_bored\n    sentences = split(S, '.', '!', '?')\nNameError: name\
    \ 'split' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      for statement in sentence.split('?'):\n            for question in statement.split('!'):\n\
    \                words = question.split()\n                if len(words) > 0 and\
    \ words[0] == 'I':\n                    boredoms += 1\n    return boredoms\n\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    if not S:\n        return 0\n    if S[0] == 'I':\n \
    \       return 1 + is_bored(S[S.find('.') + 1:])\n    else:\n        return is_bored(S[S.find('.')\
    \ + 1:])\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp7incpj7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp7incpj7.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpp7incpj7.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpp7incpj7.py\"\
    , line 18, in is_bored\n    return is_bored(S[S.find('.') + 1:])\n  File \"/tmp/tmpp7incpj7.py\"\
    , line 18, in is_bored\n    return is_bored(S[S.find('.') + 1:])\n  File \"/tmp/tmpp7incpj7.py\"\
    , line 18, in is_bored\n    return is_bored(S[S.find('.') + 1:])\n  [Previous\
    \ line repeated 993 more times]\n  File \"/tmp/tmpp7incpj7.py\", line 15, in is_bored\n\
    \    if S[0] == 'I':\nRecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split('. ')\n    print(sentences)\n  \
    \  count = 0\n    for sen in sentences:\n        if sen.split()[0] == 'I':\n \
    \           count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: "['Hello world']\n['Is the sky blue?']\n['I love It !']\n['bIt']\n['I feel\
    \ good today', 'I will be productive', 'will kill It']\n['You and I are going\
    \ for a walk']\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    if S.find(\"I\") == -1:\n        return 0\n    return\
    \ 1\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2u6fjueo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2u6fjueo.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2u6fjueo.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return 0 if S[0] == 'I' else 1\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28bt7u1r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp28bt7u1r.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp28bt7u1r.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = S.split('.')\n    sentences\
    \ += S.split('?')\n    sentences += S.split('!')\n    for sentence in sentences:\n\
    \        sentence = sentence.strip()\n        if sentence.startswith('I'):\n \
    \           boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n  \
    \  assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_em5jw1v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_em5jw1v.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_em5jw1v.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = []\n    num_of_boredoms = 0\n    for i in\
    \ range(len(S)):\n        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n    \
    \        sentences.append(S[i-1])\n            break\n    for i in range(len(S)):\n\
    \        if S[i] == '.' or S[i] == '?' or S[i] == '!':\n            if S[i-1]\
    \ == 'I':\n                num_of_boredoms += 1\n    return num_of_boredoms\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkdqnv2y.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjkdqnv2y.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjkdqnv2y.py\", line 28,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word == \"I\":\n            boredoms += 1\n    return boredoms\n \ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_0ub7f_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo_0ub7f_.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpo_0ub7f_.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # your code here\n    return S.count(\"I\")\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu1uu8n95.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu1uu8n95.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu1uu8n95.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n    # S = S.replace(\"!\", \"\
    .\")\n    # S = S.replace(\"?\", \".\")\n    # sentences = S.split(\".\")\n  \
    \  # boredoms = 0\n    # for sentence in sentences:\n    #     if \"I\" in sentence:\n\
    \    #         boredoms += 1\n    # return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc2c_byfp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc2c_byfp.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpc2c_byfp.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    sentences = S.split('. ')\n    for s\
    \ in sentences:\n        s = s.split('? ')\n        for se in s:\n           \
    \ se = se.split('! ')\n            for sen in se:\n                if sen.startswith('I'):\n\
    \                    count += 1\n    return count\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstvdkl9c.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpstvdkl9c.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpstvdkl9c.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    n = 0\n    i = 0\n    while i < len(S):\n        if\
    \ S[i] == 'I':\n            n += 1\n        while i < len(S) and S[i] != '.' and\
    \ S[i] != '?' and S[i] != '!':\n            i += 1\n        i += 1\n    return\
    \ n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp194b4aqw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp194b4aqw.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp194b4aqw.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjsv20ha5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjsv20ha5.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjsv20ha5.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    if not len(S) > 0:\n        return 0\n    count = 0\n\
    \    sentence = S.split(\".\")\n    for s in sentence:\n        if \"I\" in s:\n\
    \            count += 1\n    return count\n\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0krdosk0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0krdosk0.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0krdosk0.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    is_bored = 0\n    words = S.split()\n    for word in\
    \ words:\n        if word == \"I\":\n            is_bored += 1\n    return is_bored\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_y5qzaz0.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_y5qzaz0.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_y5qzaz0.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return int(any([True for s in S.split(\".\") if s.startswith(\"\
    I\")]))\n    \n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdq9seyn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjdq9seyn.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjdq9seyn.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3k4v06dq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3k4v06dq.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3k4v06dq.py\", line 17,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    i = 0\n    while i < len(S):\n    \
    \    if S[i] == 'I':\n            boredom += 1\n        else:\n            while\
    \ i < len(S) and S[i] != '.' and S[i] != '?' and S[i] != '!':\n              \
    \  i += 1\n        i += 1\n    return boredom\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7sksv3_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpg7sksv3_.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpg7sksv3_.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Replaces all the full stops, question marks and exclamation\
    \ marks \n    # with spaces, then counts the number of times 'I' appears\n   \
    \ return S.replace('.', ' ').replace('?', ' ').replace('!', ' ').count('I')\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9rkqyejm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9rkqyejm.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9rkqyejm.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    S = S.replace('!', '.')\n    S = S.replace('?',\
    \ '.')\n    for word in S.split('.'):\n        if word.strip().startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjnpz_vi.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxjnpz_vi.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxjnpz_vi.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Split the string on \".\" \"?\" or \"!\"\n    sentences\
    \ = re.split(r'[.?!]', S)\n    # Loop through the sentences\n    for s in sentences:\n\
    \        # If the sentence starts with \"I\" count it\n        if s.strip().startswith(\"\
    I\"):\n            return 1\n    # If we don't find one, return 0\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n   \
    \ assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It !')\
    \ == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good today.\
    \ I will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_8xbkgy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpt_8xbkgy.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpt_8xbkgy.py\", line 25,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpt_8xbkgy.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([x for x in S.split('.') if x.strip().startswith('I')])\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i67on59.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9i67on59.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9i67on59.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    s = S.split(\" \")\n    bored = 0\n    for i in range(len(s)):\n\
    \        if s[i].lower() == \"i\":\n            bored += 1\n    return bored\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfki14m3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnfki14m3.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpnfki14m3.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([sentence for sentence in S.split('.')\n\
    \                if len(sentence) > 0 and sentence[0] == 'I'])\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsniriaux.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsniriaux.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsniriaux.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split('.')\n    sentences.extend(S.split('?'))\n\
    \    sentences.extend(S.split('!'))\n    n_boredoms = 0\n    for sentence in sentences:\n\
    \        words = sentence.split()\n        if len(words) > 0 and words[0] == 'I':\n\
    \            n_boredoms += 1\n    return n_boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpojgjxgox.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpojgjxgox.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpojgjxgox.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    n = 0\n    for i in S.split():\n        if i == \"I\"\
    :\n            n += 1\n    return n\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1d3mzq2e.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1d3mzq2e.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1d3mzq2e.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # get sentences\n    sentences = S.split('.')\n    #\
    \ get boredoms\n    boredoms = []\n    for sentence in sentences:\n        if\
    \ '!' in sentence:\n            sub_sentences = sentence.split('!')\n        \
    \    for sub_sentence in sub_sentences:\n                sub_sentence = sub_sentence.strip()\n\
    \                if 'I' == sub_sentence[0]:\n                    boredoms.append(sub_sentence)\n\
    \        elif '?' in sentence:\n            sub_sentences = sentence.split('?')\n\
    \            for sub_sentence in sub_sentences:\n                sub_sentence\
    \ = sub_sentence.strip()\n                if 'I' == sub_sentence[0]:\n       \
    \             boredoms.append(sub_sentence)\n        else:\n            sentence\
    \ = sentence.strip()\n            if 'I' == sentence[0]:\n                boredoms.append(sentence)\n\
    \    return len(boredoms)\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9evocgc.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpy9evocgc.py\", line 46,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy9evocgc.py\", line 39,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\n  File \"/tmp/tmpy9evocgc.py\"\
    , line 28, in is_bored\n    if 'I' == sub_sentence[0]:\nIndexError: string index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      for sentence in sentence.split('?'):\n            for sentence in sentence.split('!'):\n\
    \                if sentence.strip().startswith('I'):\n                    boredoms\
    \ += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczazqhgh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpczazqhgh.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpczazqhgh.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if\
    \ word.lower() == \"i\":\n            boredoms += 1\n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ib26ulf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7ib26ulf.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp7ib26ulf.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3m4gavc1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3m4gavc1.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3m4gavc1.py\", line 16,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I \")\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpicspa0re.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpicspa0re.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpicspa0re.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Replace the 'pass' statement with your code\n    sentences\
    \ = re.split('[!?.]', S)\n    bored = 0\n    for sentence in sentences:\n    \
    \    if sentence.split() and sentence.split()[0] == 'I':\n            bored +=\
    \ 1\n    return bored\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpass12es0.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpass12es0.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpass12es0.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpass12es0.py\"\
    , line 14, in is_bored\n    sentences = re.split('[!?.]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word\
    \ == \"I\":\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvm2zgo9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdvm2zgo9.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdvm2zgo9.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.!?') if s.startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp04bjzbue.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp04bjzbue.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp04bjzbue.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split(\". \")\n    boredom = 0\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredom += 1\n    return boredom\n\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_5lokz1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpv_5lokz1.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpv_5lokz1.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    words = S.split()\n    for i in range(len(words)):\n\
    \        if words[i] == \"I\":\n            count += 1\n    return count\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqmqji4_4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqmqji4_4.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqmqji4_4.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    for sentence in S.split(\"?\"):\n \
    \       boredom += sentence.count(\"I\")\n    return boredom\n    # return sum(sentence.count(\"\
    I\") for sentence in S.split(\"?\"))\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpta3z2_f8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpta3z2_f8.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpta3z2_f8.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        if sentence:\n            words = sentence.split()\n            if words[0]\
    \ == \"I\":\n                boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    for sent in S.split(\".\"):\n       \
    \ if sent.split(\"?\")[0].split(\"!\")[0].strip().startswith(\"I\"):\n       \
    \     bored += 1\n    return bored\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpch0w6lgf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpch0w6lgf.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpch0w6lgf.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return (S.count(\"I\") - S.count(\"I.\"))\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxdsebxf.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphxdsebxf.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphxdsebxf.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwjk54i42.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwjk54i42.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwjk54i42.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n    \n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp31ugsa6o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp31ugsa6o.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp31ugsa6o.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for item in S.split(\".\"):\n    \
    \    if \"I\" in item:\n            boredoms += 1\n    return boredoms\n\nprint(is_bored(\"\
    I am bored\"))\nprint(is_bored(\"Hello world\"))\nprint(is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\"))\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: "1\n0\n1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ykhoa5s.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp0ykhoa5s.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp0ykhoa5s.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    for w in S.split():\n        if w ==\
    \ \"I\":\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4mm2i2x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpe4mm2i2x.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpe4mm2i2x.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([1 for x in S.split() if x == 'I'])\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpea8u3r95.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpea8u3r95.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpea8u3r95.py\", line 22,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    word_list = S.split()\n    for i in\
    \ range(len(word_list)):\n        if word_list[i] == \"I\":\n            boredoms\
    \ += 1\n    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqy6o27lt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqy6o27lt.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqy6o27lt.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    sentences = S.split('. ')\n    for sentence\
    \ in sentences:\n        words = sentence.split(' ')\n        if words[0] == 'I':\n\
    \            bored += 1\n    return bored\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = split_sentences(S)\n \
    \   for sentence in sentences:\n        words = split_words(sentence)\n      \
    \  if len(words) > 0 and words[0] == \"I\":\n            boredoms += 1\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdx8r2jci.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdx8r2jci.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdx8r2jci.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpdx8r2jci.py\"\
    , line 14, in is_bored\n    sentences = split_sentences(S)\nNameError: name 'split_sentences'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    bored = 0\n    i = 0\n    while i < len(S):\n      \
    \  if S[i] == 'I':\n            bored += 1\n        i += 1\n        while S[i]\
    \ != '.' and S[i] != '?' and S[i] != '!':\n            i += 1\n        i += 1\n\
    \    return bored\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp79c01kya.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp79c01kya.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp79c01kya.py\", line 26,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp79c01kya.py\"\
    , line 19, in is_bored\n    while S[i] != '.' and S[i] != '?' and S[i] != '!':\n\
    IndexError: string index out of range\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split('.'):\n  \
    \      if sentence[0] == 'I':\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2inwj5s5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2inwj5s5.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2inwj5s5.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split(\". \")\n    boredoms = 0\n    for\
    \ sentence in sentences:\n        if sentence.startswith(\"I\"):\n           \
    \ boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_wfalfs.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk_wfalfs.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk_wfalfs.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Split the string by '.', '?' or '!'\n    sentences\
    \ = re.split(r'[?!.]', S)\n    count = 0\n    for s in sentences:\n        # Clean\
    \ each sentence by removing spaces\n        s = s.strip()\n        # Count the\
    \ number of boring sentences\n        if s.startswith('I'):\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiizkjqce.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpiizkjqce.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpiizkjqce.py\", line 26,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpiizkjqce.py\"\
    , line 14, in is_bored\n    sentences = re.split(r'[?!.]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = [s.strip() for s in S.split('.')]\n\
    \    sentences += [s.strip() for s in S.split('?')]\n    sentences += [s.strip()\
    \ for s in S.split('!')]\n    for sentence in sentences:\n        if sentence.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3smltuc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpy3smltuc.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy3smltuc.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        sentence = sentence.split(\"!\")[0]\n        sentence = sentence.split(\"\
    ?\")[0]\n        sentence = sentence.strip()\n        if sentence[0] == \"I\"\
    :\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1yfwegjc.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1yfwegjc.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1yfwegjc.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n    return sum(map(S.startswith(\"\
    I\"),S.split(\".\")))\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfl1kh6hh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfl1kh6hh.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpfl1kh6hh.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    res = 0\n    for word in S.split('.'):\n        words\
    \ = word.split()\n        if words and words[0] == 'I':\n            res += 1\n\
    \    return res\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Sentences are delimited by '.', '?' or '!'\n    sentences\
    \ = re.split('[\\.\\?\\!]', S)\n    cnt = 0\n    for sentence in sentences:\n\
    \        words = sentence.split()\n        if not words:\n            continue\n\
    \        if words[0] == 'I':\n            cnt += 1\n    return cnt\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuue8h5i1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuue8h5i1.py\", line 34,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpuue8h5i1.py\", line 26,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpuue8h5i1.py\"\
    , line 14, in is_bored\n    sentences = re.split('[\\.\\?\\!]', S)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split(\". \") + S.split(\"? \") + S.split(\"\
    ! \")\n    return sum(1 for sentence in sentences if sentence.startswith(\"I\"\
    ))\n\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpklmdyxfc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpklmdyxfc.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpklmdyxfc.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4x86ofwp.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4x86ofwp.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4x86ofwp.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredom = 0\n    sentences = re.split('\\.|\\?|!', S)\n\
    \    for sentence in sentences:\n        word_list = sentence.split()\n      \
    \  if len(word_list) != 0 and word_list[0] == 'I':\n            boredom += 1\n\
    \    return boredom\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pyspdzf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2pyspdzf.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp2pyspdzf.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp2pyspdzf.py\"\
    , line 14, in is_bored\n    sentences = re.split('\\.|\\?|!', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return len([s for s in S.split('.!?') if s.lstrip().startswith('I')])\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpman8c2xl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpman8c2xl.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpman8c2xl.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(S):\n      \
    \  if S[i] == 'I':\n            count += 1\n        i += 1\n        while i <\
    \ len(S) and S[i] != '.' and S[i] != '?' and S[i] != '!':\n            i += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xlsom4q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3xlsom4q.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3xlsom4q.py\", line 26,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8sinn6_s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8sinn6_s.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8sinn6_s.py\", line 17,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = S.split(\". \") + S.split(\"? \") + S.split(\"\
    ! \")\n    boredoms = 0\n    for sentence in sentences:\n        if sentence.startswith(\"\
    I\"):\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqtw5vua.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwqtw5vua.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwqtw5vua.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return 0\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqpe5iund.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqpe5iund.py\", line 24,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqpe5iund.py\", line 18,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdqm24p_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjdqm24p_.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpjdqm24p_.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    # Split the sentences\n    sentences = re.split('\\\
    .|\\?|!', S)\n    # What would you need to do to check if a sentence has the word\
    \ 'I'?\n    # This would be a good place to use a regular expression\n    # How\
    \ could you filter out all the sentences that don't start with 'I'?\n    # This\
    \ would be a good place to use a list comprehension\n    # How could you count\
    \ the number of items in the list?\n    # This would be a good place to use the\
    \ built-in Python len() function\n    \n    return len([s for s in sentences if\
    \ re.match('^I', s)])\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4x2gi9k.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpx4x2gi9k.py\", line 33,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx4x2gi9k.py\", line 25,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpx4x2gi9k.py\"\
    , line 14, in is_bored\n    sentences = re.split('\\.|\\?|!', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    return S.count(\"I\")\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4dlftfhd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4dlftfhd.py\", line 25,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4dlftfhd.py\", line 18,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    S = S.split(\" \")\n    count = 0\n    for word in S:\n\
    \        if word[0] == \"I\":\n            count += 1\n    return count\n\nprint(is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\"))\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: "1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4epksom6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4epksom6.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4epksom6.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    for sentence in S.split(\".\"):\n\
    \        for sentence in sentence.split(\"?\"):\n            for sentence in sentence.split(\"\
    !\"):\n                if sentence.strip().startswith(\"I\"):\n              \
    \      boredoms += 1\n    return boredoms\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcuq__vu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbcuq__vu.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbcuq__vu.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    count = 0\n    temp = re.split('\\.|\\?|!', S)\n   \
    \ for sentence in temp:\n        sentence = sentence.strip()\n        sentence\
    \ = sentence.split()\n        if sentence and sentence[0] == 'I':\n          \
    \  count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcw7c2fgb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcw7c2fgb.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpcw7c2fgb.py\", line 23,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpcw7c2fgb.py\"\
    , line 14, in is_bored\n    temp = re.split('\\.|\\?|!', S)\nNameError: name 're'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    sentences = re.split(r'[.?!]', S)\n    boredoms = 0\n\
    \    for sent in sentences:\n        boredoms += (sent.split(' ')[0] == 'I')\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdie96m6r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdie96m6r.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdie96m6r.py\", line 21,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpdie96m6r.py\"\
    , line 13, in is_bored\n    sentences = re.split(r'[.?!]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentence = []\n    for word in S.split():\n\
    \        if word == 'I':\n            boredoms += 1\n        elif word in ['.',\
    \ '?', '!']:\n            if sentence[0] == 'I':\n                boredoms +=\
    \ 1\n            sentence = []\n        else:\n            sentence.append(word)\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo47ydf8x.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpo47ydf8x.py\", line 36,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpo47ydf8x.py\", line 33,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\n    boredoms = 0\n    sentences = re.split('[.!?]', S)\n\
    \    for sentence in sentences:\n        words = sentence.split()\n        if\
    \ len(words) > 0 and words[0] == 'I':\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78xv67m7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp78xv67m7.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp78xv67m7.py\", line 22,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmp78xv67m7.py\"\
    , line 14, in is_bored\n    sentences = re.split('[.!?]', S)\nNameError: name\
    \ 're' is not defined\n"
  exit_code: -1
  status: Exception
