name: HumanEval_130_tri
language: py
results:
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        ls = [1, 3, 2]\n        for i in range(3, n + 1):\n      \
    \      if i % 2 == 0:\n                ls.append(1 + i / 2)\n            else:\n\
    \                ls.append(ls[i - 1] + ls[i - 2] + ls[i + 1])\n        return\
    \ ls\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf01gfcvu.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpf01gfcvu.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpf01gfcvu.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpf01gfcvu.py\", line\
    \ 32, in tri\n    ls.append(ls[i - 1] + ls[i - 2] + ls[i + 1])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    if n < 3:\n \
    \       return res[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 ==\
    \ 0:\n            res.append(1 + i / 2)\n        else:\n            res.append(res[-1]\
    \ + res[-2] + res[-3])\n    return res\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpagat2wji.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpagat2wji.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpagat2wji.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            res.append(1 + i / 2)\n       \
    \ else:\n            res.append(res[i - 1] + res[i - 2] + res[i + 1])\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnsfm796.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpxnsfm796.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxnsfm796.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpxnsfm796.py\", line\
    \ 25, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    out = [1, 3, 2, 8]\n    for\
    \ i in range(4, n + 1):\n        out.append(out[i - 1] + out[i - 2] + out[i -\
    \ 3])\n    return out\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxpvpoa44.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpxpvpoa44.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxpvpoa44.py\", line 35, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        results = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                results.append(1 + i / 2)\n\
    \            else:\n                results.append(results[i - 1] + results[i\
    \ - 2] + results[i + 1])\n        return results\n\ndef check(candidate):\n  \
    \  assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpof67c79x.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpof67c79x.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpof67c79x.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpof67c79x.py\", line\
    \ 32, in tri\n    results.append(results[i - 1] + results[i - 2] + results[i +\
    \ 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    ans = [1, 3, 2]\n    for i in range(n\
    \ - 1):\n        if i % 2 == 0:\n            ans.append(1 + (i + 1) / 2)\n   \
    \     else:\n            ans.append(ans[i] + ans[i - 1] + ans[i + 1])\n    return\
    \ ans\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbnimjmz.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpqbnimjmz.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqbnimjmz.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        n -= 2\n        t = [1, 3, 2]\n        while n > 0:\n\
    \            t.append(\n                t[-1] + t[-2] + t[-3] if n % 2 == 1 else\
    \ 1 + n // 2\n            )\n            n -= 1\n        return t\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxq_z799e.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpxq_z799e.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxq_z799e.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    # your code here\n    res = [1, 3,\
    \ 2]\n    if n > 2:\n        for i in range(3, n+1):\n            res.append(res[i-1]\
    \ + res[i-2] + res[i-3])\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2zn3ikr.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpp2zn3ikr.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpp2zn3ikr.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ def tn(n: int) -> int:\n        if n == 1:\n            return 3\n        if\
    \ n % 2 == 0:\n            return 1 + n / 2\n        else:\n            return\
    \ tn(n - 1) + tn(n - 2) + tn(n + 1)\n    return [tn(n) for n in range(1, n + 1)]\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rei4hib.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2rei4hib.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2rei4hib.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    s = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        s.append(tri(i - 1) + tri(i - 2) + tri(i + 1))\n    return\
    \ s\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rdwgy9t.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8rdwgy9t.py\", line 38,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8rdwgy9t.py\", line 26, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp8rdwgy9t.py\", line\
    \ 22, in tri\n    s.append(tri(i - 1) + tri(i - 2) + tri(i + 1))\n  File \"/tmp/tmp8rdwgy9t.py\"\
    , line 22, in tri\n    s.append(tri(i - 1) + tri(i - 2) + tri(i + 1))\n  File\
    \ \"/tmp/tmp8rdwgy9t.py\", line 22, in tri\n    s.append(tri(i - 1) + tri(i -\
    \ 2) + tri(i + 1))\n  [Previous line repeated 992 more times]\n  File \"/tmp/tmp8rdwgy9t.py\"\
    , line 21, in tri\n    for i in range(3, n + 1):\nRecursionError: maximum recursion\
    \ depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def tri(n):\n        if n == 1:\n\
    \            return 3\n        if n % 2 == 0:\n            return 1 + n // 2\n\
    \        else:\n            return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    return\
    \ [tri(i) for i in range(1, n + 2)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49v1sndy.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp49v1sndy.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp49v1sndy.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    s = [1, 3, 2]\n    for i in range(3,\
    \ n+1):\n        s.append(s[i-1] + s[i-2] + s[i-3])\n    return s\n\nprint(tri(2))\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: "[1, 3, 2]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13_13q_h.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp13_13q_h.py\", line 39,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp13_13q_h.py\", line 27, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [0] * (n + 1)\n    res[0] =\
    \ 1\n    res[1] = 3\n    res[2] = 2\n    i = 3\n    while i <= n:\n        if\
    \ i % 2 == 0:\n            res[i] = 1 + i / 2\n        else:\n            res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1]\n        i += 1\n    return res\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplc8mr29e.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmplc8mr29e.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplc8mr29e.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplc8mr29e.py\", line\
    \ 29, in tri\n    res[i] = res[i - 1] + res[i - 2] + res[i + 1]\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        temp\
    \ = tri(n - 1)\n        if n % 2 == 0:\n            temp.append(1 + n / 2)\n \
    \       else:\n            temp.append(temp[-1] + temp[-2] + temp[-3])\n     \
    \   return temp\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6h4nrmfa.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp6h4nrmfa.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6h4nrmfa.py\", line 38, in check\n\
    \    assert candidate(5) == [1, 3, 2, 8, 3, 15]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    l: List[int] = [1, 3, 2]\n    while\
    \ len(l) <= n:\n        if len(l) % 2 == 0:\n            l.append(l[-1] + l[-2]\
    \ + l[-3])\n        else:\n            l.append(1 + len(l) / 2)\n    return l\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hbu8n4n.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp5hbu8n4n.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5hbu8n4n.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    # My solution\n    if n == 0:\n  \
    \      return [0]\n    elif n == 1:\n        return [1,3]\n    elif n == 2:\n\
    \        return [1,3,2]\n    else:\n        lst = [1,3,2]\n        for i in range(2,n):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i // 2)\n        \
    \    else:\n                lst.append(lst[i] + lst[i-1] + lst[i+1])\n       \
    \ return lst\n\n    # return lst\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3x48a032.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp3x48a032.py\", line 50,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3x48a032.py\", line 38, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [0] * (n + 1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n    for i in range(3, n + 1):\n \
    \       if i % 2 == 0:\n            result[i] = 1 + i / 2\n        else:\n   \
    \         result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n \
    \   assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpogc2yvbx.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpogc2yvbx.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpogc2yvbx.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpogc2yvbx.py\", line\
    \ 28, in tri\n    result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n\
    \    ret = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n\
    \            ret.append(1 + i / 2)\n        else:\n            ret.append(ret[-1]\
    \ + ret[-2] + ret[-3])\n    return ret\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmploe2gaej.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmploe2gaej.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmploe2gaej.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    lst = [1, 3, 2]\n    while len(lst)\
    \ <= n:\n        lst.append(lst[-1] + lst[-2] + lst[-3])\n    return lst[:n +\
    \ 1]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo7zlz2y1.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpo7zlz2y1.py\", line 37,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpo7zlz2y1.py\", line 25, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def _tri(n: int) -> int:\n       \
    \ if n == 1:\n            return 3\n        if n % 2 == 0:\n            return\
    \ 1 + n / 2\n        return _tri(n - 1) + _tri(n - 2) + _tri(n + 1)\n    return\
    \ [_tri(i) for i in range(1, n + 2)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau571487.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpau571487.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpau571487.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        return [1, 3, 2] + [tri(n - 1)[-1] + tri(n - 2)[-1]\
    \ + tri(n - 3)[-1] for _ in range(n - 2)]\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprhx866_4.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmprhx866_4.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmprhx866_4.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   fib = [1, 3, 2]\n    for i in range(3, n + 1):\n        fib.append(fib[i -\
    \ 1] + fib[i - 2] + fib[i - 3])\n    return fib\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurdre3mr.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpurdre3mr.py\", line 39,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpurdre3mr.py\", line 27, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    lst = [1, 3, 2]\n    if n < 3:\n \
    \       return lst[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 ==\
    \ 0:\n            lst.append(1 + i / 2)\n        else:\n            lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n    return lst\ndef check(candidate):\n   \
    \ assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfbu47far.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpfbu47far.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfbu47far.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfbu47far.py\", line\
    \ 27, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [tri_helper(i) for i in range(1,\
    \ n + 2)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6glk17nf.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6glk17nf.py\", line 35,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6glk17nf.py\", line 23, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp6glk17nf.py\", line\
    \ 20, in tri\n    return [tri_helper(i) for i in range(1, n + 2)]\n  File \"/tmp/tmp6glk17nf.py\"\
    , line 20, in <listcomp>\n    return [tri_helper(i) for i in range(1, n + 2)]\n\
    NameError: name 'tri_helper' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n\
    \ + 1):\n            tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i\
    \ - 3])\n        return tri_list\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7occp80e.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp7occp80e.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7occp80e.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    t = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            t.append(1 + i / 2)\n        else:\n\
    \            t.append(t[i - 1] + t[i - 2] + t[i + 1])\n    return t\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5218o7b9.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp5218o7b9.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5218o7b9.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5218o7b9.py\", line\
    \ 25, in tri\n    t.append(t[i - 1] + t[i - 2] + t[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 2]\n    if n <= 2:\n\
    \        return seq[:n + 1]\n    while len(seq) < n + 1:\n        if len(seq)\
    \ % 2 == 0:\n            seq.append(1 + len(seq) / 2)\n        else:\n       \
    \     seq.append(seq[-1] + seq[-2] + seq[-3])\n    return seq\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7zmxyyws.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp7zmxyyws.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7zmxyyws.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    nums = [1, 3, 2]\n    if n <= 2:\n\
    \        return nums[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2\
    \ == 0:\n            nums.append(1 + i / 2)\n        else:\n            nums.append(nums[i\
    \ - 1] + nums[i - 2] + nums[i + 1])\n    return nums\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_9bqut7.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpn_9bqut7.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpn_9bqut7.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpn_9bqut7.py\", line\
    \ 27, in tri\n    nums.append(nums[i - 1] + nums[i - 2] + nums[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    ans = [1, 3, 2]\n    while len(ans)\
    \ < n + 1:\n        if len(ans) % 2 == 0:\n            ans.append(int(1 + len(ans)\
    \ / 2))\n        else:\n            ans.append(ans[-1] + ans[-2] + ans[-3])\n\
    \    return ans\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzm1ndug3.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpzm1ndug3.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzm1ndug3.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    i = 3\n    a = [1, 3, 2]\n    while i <= n:\n        if i % 2 == 0:\n   \
    \         a.append(1 + i // 2)\n        else:\n            a.append(a[i - 1] +\
    \ a[i - 2] + a[i + 1])\n        i += 1\n    return a\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwxufoln.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpgwxufoln.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgwxufoln.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgwxufoln.py\", line\
    \ 32, in tri\n    a.append(a[i - 1] + a[i - 2] + a[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri = []\n    for i in range(1, n\
    \ + 2):\n        if i == 1:\n            tri.append(3)\n        elif i % 2 ==\
    \ 0:\n            tri.append(1 + i // 2)\n        else:\n            tri.append(tri[i\
    \ - 1 - 1] + tri[i - 2 - 1] + tri[i + 1 - 1])\n    return tri\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjyl5qus.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphjyl5qus.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphjyl5qus.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmphjyl5qus.py\", line\
    \ 27, in tri\n    tri.append(tri[i - 1 - 1] + tri[i - 2 - 1] + tri[i + 1 - 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    out = [0] * (n + 1)\n    for i in\
    \ range(1, n + 1):\n        if i == 1:\n            out[i] = 3\n        elif i\
    \ % 2 == 0:\n            out[i] = 1 + i / 2\n        else:\n            out[i]\
    \ = out[i - 1] + out[i - 2] + out[i + 1]\n    return out\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzm16lv1s.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpzm16lv1s.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzm16lv1s.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpzm16lv1s.py\", line\
    \ 27, in tri\n    out[i] = out[i - 1] + out[i - 2] + out[i + 1]\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n   \
    \ elif n == 1:\n        return [1]\n    else:\n        res = [1, 3, 2]\n     \
    \   for i in range(n - 2):\n            if i % 2 == 0:\n                res.append(res[-2]\
    \ + res[-1] + res[-3])\n            else:\n                res.append(res[-2]\
    \ + 1)\n        return res\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpue75q7q6.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpue75q7q6.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpue75q7q6.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   res = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n \
    \           res.append(1 + i / 2)\n        else:\n            res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n    return res\n\nprint(tri(3))\n\nfrom typing\
    \ import List\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn52ee5y3.py\", line\
    \ 30, in <module>\n    print(tri(3))\n  File \"/tmp/tmpn52ee5y3.py\", line 27,\
    \ in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc83_f_zq.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpc83_f_zq.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpc83_f_zq.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpc83_f_zq.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    else:\n        m = [1, 3, 2]\n    \
    \    for i in range(2, n):\n            if i % 2 == 0:\n                m.append(int(1\
    \ + i / 2))\n            else:\n                m.append(m[i - 1] + m[i - 2] +\
    \ m[i + 1])\n        return m\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfouz4ob.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmprfouz4ob.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmprfouz4ob.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    if n <= 3:\n\
    \        return res[:n + 1]\n    while len(res) - 1 < n:\n        res.append(res[-1]\
    \ + res[-2] + res[-3])\n    return res\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyehm3lv_.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpyehm3lv_.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyehm3lv_.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    # if n == 0:\n    #     return [1]\n\
    \    # if n == 1:\n    #     return [1, 3]\n    # if n == 2:\n    #     return\
    \ [1, 3, 2]\n    # return [1, 3, 2] + tri(n - 1)\n    # if n == 0:\n    #    \
    \ return [1]\n    # if n == 1:\n    #     return [1, 3]\n    # if n == 2:\n  \
    \  #     return [1, 3, 2]\n    # return [1, 3, 2] + [sum(tri(n - 1)[:3])]\n  \
    \  # sum(tri(n - 1)[:3])\n    # sum(tri(n - 1)[:3])\n    # if n == 0:\n    # \
    \    return [1]\n    # if n == 1:\n    #     return [1, 3]\n    # if n == 2:\n\
    \    #     return [1, 3, 2]\n    # return [1, 3, 2] + [sum(tri(n - 1)[:3])]\n\
    \    if n == 0:\n        return [1]\n    if n == 1:\n        return [1, 3]\n \
    \   if n == 2:\n        return [1, 3, 2]\n    return [1, 3, 2] + [sum(tri(n -\
    \ 1)[:3])]\n    # if n == 0:\n    #     return [1]\n    # if n == 1:\n    #  \
    \   return [1, 3]\n    # if n == 2:\n    #     return [1, 3, 2]\n    # return\
    \ [1, 3, 2] + [sum(tri(n - 1)[:3])]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxknllpbu.py\", line\
    \ 73, in <module>\n    test_check()\n  File \"/tmp/tmpxknllpbu.py\", line 71,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxknllpbu.py\", line 59, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    r = [1, 3, 2]\n    for i in range(2,\
    \ n):\n        if i % 2 == 0:\n            r.append(1 + i // 2)\n        else:\n\
    \            r.append(r[i - 1] + r[i - 2] + r[i + 1])\n    return r\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpe8y6sh.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphpe8y6sh.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphpe8y6sh.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8mv1uisg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8mv1uisg.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8mv1uisg.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    a, b, c = 1, 3, 2\n    res = [a, b,\
    \ c]\n    for i in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n     \
    \   res.append(c)\n    return res\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2rzoup_.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpq2rzoup_.py\", line 39,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpq2rzoup_.py\", line 27, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  seq = [1, 3, 2]\n    for i in range(2, n):\n        cur = seq[i] + seq[i -\
    \ 1] + seq[i - 2]\n        seq.append(cur)\n    return seq\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8v_xaof.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpn8v_xaof.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpn8v_xaof.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   else:\n        numbers = [1, 3, 2]\n        for i in range(3, n + 1):\n  \
    \          if i % 2 == 0:\n                numbers.append(1 + i / 2)\n       \
    \     else:\n                numbers.append(numbers[i - 1] + numbers[i - 2] +\
    \ numbers[i + 1])\n    return numbers\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dy_xu7k.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_dy_xu7k.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_dy_xu7k.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_dy_xu7k.py\", line\
    \ 28, in tri\n    numbers.append(numbers[i - 1] + numbers[i - 2] + numbers[i +\
    \ 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   else:\n        lst = [1, 3, 2]\n        for i in range(1, n + 1):\n      \
    \      lst.append(lst[-1] + lst[-2] + lst[-3])\n        return lst\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp856gobg4.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp856gobg4.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp856gobg4.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7j6s12j.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpw7j6s12j.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpw7j6s12j.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpw7j6s12j.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    arr = [1, 3, 2]\n    if n <= 3:\n\
    \        return arr[:n + 1]\n    for _ in range(n - 3):\n        a = arr[-3]\n\
    \        b = arr[-2]\n        c = arr[-1]\n        if c % 2 == 0:\n          \
    \  c = 1 + c / 2\n        else:\n            c = a + b + c\n        arr.append(c)\n\
    \    return arr\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxt55mnxi.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpxt55mnxi.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxt55mnxi.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        x = 3\n        y = 2\n        z = 8\n        res =\
    \ [1, 3, 2, 8]\n        while len(res) < n + 1:\n            x, y, z = y, z, y\
    \ + z + x\n            res.append(z)\n        return res\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczvkr2bt.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpczvkr2bt.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpczvkr2bt.py\", line 37, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   else:\n        t = tri(n - 1)\n        if n % 2 == 0:\n            t.append(1\
    \ + n / 2)\n        else:\n            t.append(t[-1] + t[-2] + t[-3])\n     \
    \   return t\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkzo1md7a.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpkzo1md7a.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkzo1md7a.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkzo1md7a.py\", line\
    \ 23, in tri\n    t = tri(n - 1)\n  File \"/tmp/tmpkzo1md7a.py\", line 23, in\
    \ tri\n    t = tri(n - 1)\n  File \"/tmp/tmpkzo1md7a.py\", line 27, in tri\n \
    \   t.append(t[-1] + t[-2] + t[-3])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n\
    \    elif n == 3:\n        return [1, 3, 2]\n    else:\n        a = 1\n      \
    \  b = 3\n        c = 2\n        i = 4\n        result = [1, 3, 2]\n        while\
    \ i <= n:\n            if i % 2 == 0:\n                temp = a + (i / 2)\n  \
    \          else:\n                temp = a + b + c\n            a = b\n      \
    \      b = c\n            c = temp\n            result.append(temp)\n        \
    \    i += 1\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdt5zbf70.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpdt5zbf70.py\", line 58,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdt5zbf70.py\", line 46, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri_seq = [1, 3, 2]\n    if n < 3:\n\
    \        return tri_seq[:n + 1]\n    for i in range(3, n + 1):\n        if i %\
    \ 2 == 0:\n            tri_seq.append(1 + i / 2)\n        else:\n            tri_seq.append(tri_seq[i\
    \ - 1] + tri_seq[i - 2] + tri_seq[i + 1])\n    return tri_seq\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy483mumc.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpy483mumc.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpy483mumc.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpy483mumc.py\", line\
    \ 27, in tri\n    tri_seq.append(tri_seq[i - 1] + tri_seq[i - 2] + tri_seq[i +\
    \ 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\n    # Your code here\n    #\
    \ You can use more code cells than only one provided\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_690zct.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp9_690zct.py\", line 38,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9_690zct.py\", line 26, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def f(m: int) -> int:\n        if\
    \ m <= 1:\n            return 3\n        if m % 2 == 0:\n            return 1\
    \ + m // 2\n        return f(m - 1) + f(m - 2) + f(m + 1)\n    return [f(i) for\
    \ i in range(n + 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgp5m31fp.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpgp5m31fp.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgp5m31fp.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [3]\n    for i in range(1, n\
    \ + 1):\n        if i % 2 == 0:\n            res.append(1 + i / 2)\n        else:\n\
    \            res.append(res[-1] + res[-2] + res[-3])\n    return res\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z4yf9f0.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp1z4yf9f0.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1z4yf9f0.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1z4yf9f0.py\", line\
    \ 25, in tri\n    res.append(res[-1] + res[-2] + res[-3])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 2]\n    if n <= 2:\n\
    \        return seq[:n+1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n\
    \            seq.append(1 + i / 2)\n        else:\n            seq.append(seq[i-1]\
    \ + seq[i-2] + seq[i+1])\n    return seq\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaeud6918.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpaeud6918.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpaeud6918.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpaeud6918.py\", line\
    \ 27, in tri\n    seq.append(seq[i-1] + seq[i-2] + seq[i+1])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [1, 3, 2]\n    for i in range(n):\n\
    \        if i % 2 == 0:\n            result.append(1 + (i + 1) / 2)\n        else:\n\
    \            result.append(result[i - 1] + result[i - 2] + result[i + 1])\n  \
    \  return result\n\n\"\"\"\n1, 3, 2, 4, 7, 5, 11, 9, 16, 14, 23, 21, 31, 29, 40,\
    \ 38, 51, 49, 62, 60\n\"\"\"\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2wd9eto.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpp2wd9eto.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpp2wd9eto.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [1, 3, 2]\n    for i in range(n\
    \ + 1):\n        if i % 2 == 0:\n            result.append(1 + (i / 2))\n    \
    \    else:\n            result.append(result[i] + result[i - 1] + result[i + 1])\n\
    \    return result\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4zi8cjt.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpj4zi8cjt.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpj4zi8cjt.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    # Your code here\n    if n == 0:\n\
    \        return []\n    else:\n        return [1, 3, 2] + [None] * (n - 2)\n\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpal5qx771.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpal5qx771.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpal5qx771.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjevfdkf3.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpjevfdkf3.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpjevfdkf3.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpjevfdkf3.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 2]\n    if n < 3:\n \
    \       return seq[:n + 1]\n    else:\n        while len(seq) <= n:\n        \
    \    n -= 1\n            seq.append(seq[n - 1] + seq[n - 2] + seq[n + 1])\n  \
    \      return seq\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3edsjrem.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp3edsjrem.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3edsjrem.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp3edsjrem.py\", line\
    \ 26, in tri\n    seq.append(seq[n - 1] + seq[n - 2] + seq[n + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    mem = {}\n    def _tri(n: int) ->\
    \ int:\n        if n == 1:\n            return 3\n        elif n % 2 == 0:\n \
    \           return 1 + n // 2\n        else:\n            if n - 1 not in mem:\n\
    \                mem[n - 1] = _tri(n - 1)\n            if n - 2 not in mem:\n\
    \                mem[n - 2] = _tri(n - 2)\n            if n + 1 not in mem:\n\
    \                mem[n + 1] = _tri(n + 1)\n            return mem[n - 1] + mem[n\
    \ - 2] + mem[n + 1]\n    return [_tri(i) for i in range(1, n + 1)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb9nmgj_z.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpb9nmgj_z.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpb9nmgj_z.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        x = 2\n        y = 3\n        z = 8\n        a = 1\n\
    \        for i in range(n - 2):\n            a = y + x + z\n            x = y\n\
    \            y = z\n            z = a\n        return [1, 3, 2, a]\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9i45ivhh.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp9i45ivhh.py\", line 50,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp9i45ivhh.py\", line 38, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri = [1, 3, 2]\n    for i in range(n\
    \ - 2):\n        tri.append(tri[-1] + tri[-2] + tri[-3])\n    return tri\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpee5gxsrp.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpee5gxsrp.py\", line 38,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpee5gxsrp.py\", line 26, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    t = [1, 3, 2]\n    for i in range(n\
    \ - 1):\n        if i % 2 == 0:\n            t.append(1 + (i + 2) / 2)\n     \
    \   else:\n            t.append(t[i] + t[i - 1] + t[i + 1])\n    return t\n\n\
    print(tri(3))\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: "[1, 3, 2, 2.0, 6]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvcrvdvw.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpqvcrvdvw.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqvcrvdvw.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [3] + [1 + i/2 if i % 2 ==\
    \ 0 else 3] + tri(n - 1)\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu42xzifj.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpu42xzifj.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpu42xzifj.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpu42xzifj.py\", line\
    \ 20, in tri\n    return [3] + [1 + i/2 if i % 2 == 0 else 3] + tri(n - 1)\nNameError:\
    \ name 'i' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [1, 3, 2, 8][:n + 1]\n\nprint(tri(3))\n\
    print(tri(4))\nprint(tri(5))\nprint(tri(6))\nprint(tri(7))\nprint(tri(8))\nprint(tri(9))\n\
    print(tri(10))\nprint(tri(11))\nprint(tri(12))\nprint(tri(13))\nprint(tri(14))\n\
    print(tri(15))\nprint(tri(16))\nprint(tri(17))\nprint(tri(18))\nprint(tri(19))\n\
    print(tri(20))\nprint(tri(21))\nprint(tri(22))\nprint(tri(23))\nprint(tri(24))\n\
    print(tri(25))\nprint(tri(26))\nprint(tri(27))\nprint(tri(28))\nprint(tri(29))\n\
    print(tri(30))\nprint(tri(31))\nprint(tri(32))\nprint(tri(33))\nprint(tri(34))\n\
    print(tri(35))\nprint(tri(36))\nprint(tri(37))\nprint(tri(38))\nprint(tri(39))\n\
    print(tri(40))\nprint(tri(41))\nprint(tri(42))\nprint(tri(43))\nprint(tri(44))\n\
    print(tri(45))\nprint(tri(46))\nprint(tri(47))\nprint(tri(48))\nprint(tri(49))\n\
    print(tri(50))\nprint(tri(51))\nprint(tri(52))\nprint(tri(53))\nprint(tri(54))\n\
    print(tri(55))\nprint(tri(56))\nprint(tri(57))\nprint(tri(58))\nprint(tri(59))\n\
    print(tri(60))\nprint(tri(61))\nprint(tri(62))\nprint(tri(63))\nprint(tri(64))\n\
    print(tri(65))\nprint(tri(66))\nprint(tri(67))\nprint(tri(68))\nprint(tri(69))\n\
    print(tri(70))\nprint(tri(71))\nprint(tri(72))\nprint(tri\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkecs4v3v.py\", line 93\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    r = [1, 3, 2]\n    if n > 3:\n   \
    \     for i in range(3, n):\n            r.append(r[i - 1] + r[i - 2] + r[i -\
    \ 3])\n    return r[:n + 1]\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7te29lep.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp7te29lep.py\", line 38,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7te29lep.py\", line 26, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    a, b, c = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            a, b, c = b, c, (i / 2) + 1\n \
    \       else:\n            a, b, c = b, c, a + b + c\n    return [a, b, c]\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp79l99j7s.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp79l99j7s.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp79l99j7s.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [tri(i) for i in range(n +\
    \ 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyj2kiaoc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyj2kiaoc.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyj2kiaoc.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpyj2kiaoc.py\", line\
    \ 20, in tri\n    return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\"\
    , line 20, in <listcomp>\n    return [tri(i) for i in range(n + 1)]\n  File \"\
    /tmp/tmpyj2kiaoc.py\", line 20, in tri\n    return [tri(i) for i in range(n +\
    \ 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line 20, in <listcomp>\n    return [tri(i)\
    \ for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line 20, in tri\n  \
    \  return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line\
    \ 20, in <listcomp>\n    return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\"\
    , line 20, in tri\n    return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\"\
    , line 20, in <listcomp>\n    return [tri(i) for i in range(n + 1)]\n  File \"\
    /tmp/tmpyj2kiaoc.py\", line 20, in tri\n    return [tri(i) for i in range(n +\
    \ 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line 20, in <listcomp>\n    return [tri(i)\
    \ for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line 20, in tri\n  \
    \  return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line\
    \ 20, in <listcomp>\n    return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\"\
    , line 20, in tri\n    return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\"\
    , line 20, in <listcomp>\n    return [tri(i) for i in range(n + 1)]\n  File \"\
    /tmp/tmpyj2kiaoc.py\", line 20, in tri\n    return [tri(i) for i in range(n +\
    \ 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line 20, in <listcomp>\n    return [tri(i)\
    \ for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line 20, in tri\n  \
    \  return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\", line\
    \ 20, in <listcomp>\n    return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\"\
    , line 20, in tri\n    return [tri(i) for i in range(n + 1)]\n  File \"/tmp/tmpyj2kiaoc.py\"\
    , line 20, in <listcomp>\n "
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return [1]\n  \
    \  elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3,\
    \ 2]\n    elif n % 2 == 0:\n        return [1, 3, 2] + [tri(n - 1)[n - 1] + 1\
    \ + n // 2]\n    else:\n        return [1, 3, 2] + [tri(n - 1)[n - 1] + tri(n\
    \ - 1)[n - 2] + tri(n - 1)[n - 3]]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3d1dqe0z.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp3d1dqe0z.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3d1dqe0z.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def get_tri(n):\n        if n == 1:\n\
    \            return 3\n        elif n % 2 == 0:\n            return 1 + n // 2\n\
    \        else:\n            return get_tri(n - 1) + get_tri(n - 2) + get_tri(n\
    \ + 1)\n    return [get_tri(i) for i in range(n + 1)]\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    d = [3, 1, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            d.append(1 + i / 2)\n        else:\n\
    \            d.append(d[i - 1] + d[i - 2] + d[i + 1])\n    return d\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpig093076.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpig093076.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpig093076.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpig093076.py\", line\
    \ 25, in tri\n    d.append(d[i - 1] + d[i - 2] + d[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    a = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        a.append(a[i - 1] + a[i - 2] + a[i - 3])\n    return a\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkp980d2o.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpkp980d2o.py\", line 38,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkp980d2o.py\", line 26, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    L = [1, 3, 2]\n    if n == 0:\n  \
    \      return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n   \
    \     return [1, 3, 2]\n    for i in range(n - 2):\n        if (i + 3) % 2 ==\
    \ 0:\n            L.append(int(1 + (i + 3) / 2))\n        else:\n            L.append(L[i\
    \ + 1] + L[i + 2] + L[i + 3])\n    return L\n    #raise NotImplementedError(\"\
    TODO: implement this\")\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjzwd_8k.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpqjzwd_8k.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqjzwd_8k.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqjzwd_8k.py\", line\
    \ 31, in tri\n    L.append(L[i + 1] + L[i + 2] + L[i + 3])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        lst = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                lst.append(1 + i / 2)\n         \
    \   else:\n                lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\n\
    \        return lst\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8gm2et47.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp8gm2et47.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp8gm2et47.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp8gm2et47.py\", line\
    \ 32, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    l = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n  \
    \          l.append(1 + i / 2)\n        else:\n            l.append(l[i - 1] +\
    \ l[i - 2] + l[i + 1])\n    return l\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxd460fu.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpfxd460fu.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfxd460fu.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfxd460fu.py\", line\
    \ 31, in tri\n    l.append(l[i - 1] + l[i - 2] + l[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1]\n    else:\n        def tri_helper(n):\n \
    \           if n == 1:\n                return 1\n            elif n == 2:\n \
    \               return 3\n            elif n == 3:\n                return 2\n\
    \            else:\n                return tri_helper(n - 1) + tri_helper(n -\
    \ 2) + tri_helper(n - 3)\n        return [tri_helper(i) for i in range(1, n +\
    \ 1)]\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpejjweugf.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpejjweugf.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpejjweugf.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            t.append(t[i - 1] + t[i - 2] + t[i - 3])\n        return t\n\nprint(tri(3))\n\
    print(tri(4))\nprint(tri(5))\nprint(tri(6))\nprint(tri(7))\nprint(tri(10))\nprint(tri(20))\n\
    print(tri(30))\nprint(tri(50))\nprint(tri(100))\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: "[1, 3, 2, 6]\n[1, 3, 2, 6, 11]\n[1, 3, 2, 6, 11, 19]\n[1, 3, 2, 6, 11,\
    \ 19, 36]\n[1, 3, 2, 6, 11, 19, 36, 66]\n[1, 3, 2, 6, 11, 19, 36, 66, 121, 223,\
    \ 410]\n[1, 3, 2, 6, 11, 19, 36, 66, 121, 223, 410, 754, 1387, 2551, 4692, 8630,\
    \ 15873, 29195, 53698, 98766, 181659]\n[1, 3, 2, 6, 11, 19, 36, 66, 121, 223,\
    \ 410, 754, 1387, 2551, 4692, 8630, 15873, 29195, 53698, 98766, 181659, 334123,\
    \ 614548, 1130330, 2079001, 3823879, 7033210, 12936090, 23793179, 43762479, 80491748]\n\
    [1, 3, 2, 6, 11, 19, 36, 66, 121, 223, 410, 754, 1387, 2551, 4692, 8630, 15873,\
    \ 29195, 53698, 98766, 181659, 334123, 614548, 1130330, 2079001, 3823879, 7033210,\
    \ 12936090, 23793179, 43762479, 80491748, 148047406, 272301633, 500840787, 921189826,\
    \ 1694332246, 3116362859, 5731884931, 10542580036, 19390827826, 35665292793, 65598700655,\
    \ 120654821274, 221918814722, 408172336651, 750745972647, 1380837124020, 2539755433318,\
    \ 4671338529985, 8591931087323, 15803025050626]\n[1, 3, 2, 6, 11, 19, 36, 66,\
    \ 121, 223, 410, 754, 1387, 2551, 4692, 8630, 15873, 29195, 53698, 98766, 181659,\
    \ 334123, 614548, 1130330, 2079001, 3823879, 7033210, 12936090, 23793179, 43762479,\
    \ 80491748, 148047406, 272301633, 500840787, 921189826, 1694332246, 3116362859,\
    \ 5731884931, 10542580036, 19390827826, 35665292793, 65598700655, 120654821274,\
    \ 221918814722, 408172336651, 750745972647, 1380837124020, 2539755433318, 4671338529985,\
    \ 8591931087323, 15803025050626, 29066294667934, 53461250805883, 98330570524443,\
    \ 180858115998260, 332649937328586, 611838623851289, 1125346677178135, 2069835238358010,\
    \ 3807020539387434, 7002202454923579, 12879058232669023, 23688281226980036, 43569541914572638,\
    \ 80136881374221697, 147394704515774371, 271101127804568706, 498632713694564774,\
    \ 917128546014907851, 1686862387514041331, 3102623647223513956, 5706614580752463138,\
    \ 10496100615490018425, 19305338843465995519, 35508054039708477082, 65309493498664491026,\
    \ 120122886381838963627, 220940433920211931735, 406372813800715386388, 747436134102766281750,\
    \ 1374749381823693599873, 2528558329727175268011, 4650743845653635149634, 85540515572045040"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdhw3bwu9.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpdhw3bwu9.py\", line 55,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpdhw3bwu9.py\", line 43, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    result = [1, 3, 2]\n    # Calculate\
    \ the next numbers in the sequence\n    for i in range(2, n + 1):\n        if\
    \ i % 2 == 0:\n            result.append(1 + i / 2)\n        else:\n         \
    \   result.append(result[i - 1] + result[i - 2] + result[i + 1])\n    return result\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5y2d_at9.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp5y2d_at9.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5y2d_at9.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5y2d_at9.py\", line\
    \ 30, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    l = [1, 3, 2]\n    m = [0, 1, 2]\n\
    \    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n\
    \    elif n == 2:\n        return [1, 3, 2]\n    else:\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                l.append(1 + i // 2)\n\
    \                m.append(m[i - 1] + m[i - 2] + m[i - 3])\n            else:\n\
    \                l.append(m[i - 1] + m[i - 2] + m[i - 3])\n                m.append(1\
    \ + i // 2)\n        return l\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxkocum1l.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpxkocum1l.py\", line 50,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxkocum1l.py\", line 38, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukp97xl6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpukp97xl6.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpukp97xl6.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    n += 1\n    lst = [0, 1, 3]\n    for\
    \ i in range(3, n):\n        lst.append(lst[i - 1] + lst[i - 2] + lst[i - 3])\n\
    \    return lst[:n]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeeb1xjbw.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpeeb1xjbw.py\", line 39,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpeeb1xjbw.py\", line 27, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    s = [1, 3, 2]\n    while len(s) < n\
    \ + 1:\n        s.append(sum(s[-3:]))\n    return s\n\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0hu07fk3.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp0hu07fk3.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0hu07fk3.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   arr = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n \
    \           arr.append(int(1 + i / 2))\n        else:\n            arr.append(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1])\n    return arr\n\nprint(tri(7))\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6n1pmoie.py\", line\
    \ 30, in <module>\n    print(tri(7))\n  File \"/tmp/tmp6n1pmoie.py\", line 27,\
    \ in tri\n    arr.append(arr[i - 1] + arr[i - 2] + arr[i + 1])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n > 2:\n        res = [1, 3, 2]\n        tri_recur(res, n)\n        return\
    \ res\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0fc_kbct.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp0fc_kbct.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0fc_kbct.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp0fc_kbct.py\", line\
    \ 28, in tri\n    tri_recur(res, n)\nNameError: name 'tri_recur' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 2]\n    i = 3\n    while\
    \ i <= n:\n        seq.append(tri_recur(i, seq))\n        i += 1\n    return seq\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvihew9d6.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpvihew9d6.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpvihew9d6.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpvihew9d6.py\", line\
    \ 23, in tri\n    seq.append(tri_recur(i, seq))\nNameError: name 'tri_recur' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 2]\n    for i in range(n\
    \ - 2):\n        if i % 2 == 0:\n            next_val = 1 + (i + 2) / 2\n    \
    \    else:\n            next_val = seq[i] + seq[i - 1] + seq[i + 1]\n        seq.append(next_val)\n\
    \    return seq\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphdrn906n.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphdrn906n.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmphdrn906n.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    r = [1, 3, 2]\n    if n < 3:\n   \
    \     return r[:n + 1]\n    while len(r) <= n:\n        r.append(r[-3] + r[-2]\
    \ + r[-1])\n    return r\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzuuxj_uq.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzuuxj_uq.py\", line 39,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpzuuxj_uq.py\", line 27, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  res = [1, 3, 2]\n    i = 0\n    while i < n:\n        if i % 2 == 0:\n    \
    \        res.append(res[i] + res[i + 1] + res[i + 2])\n        else:\n       \
    \     res.append(1 + i // 2)\n        i += 1\n    return res\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxuvvffjo.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxuvvffjo.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxuvvffjo.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   # 1 + 1 / 2 = 1.5\n    if n == 1:\n        return [1, 1]\n    if n == 2:\n\
    \        return [1, 1, 2]\n    if n == 3:\n        return [1, 1, 2, 3]\n    result\
    \ = [1, 1, 2, 3]\n    for i in range(4, n + 1):\n        result.append(result[i\
    \ - 1] + result[i - 2] + result[i - 3])\n    return result\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7caukgtf.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp7caukgtf.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7caukgtf.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    l = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        l.append(1 + i / 2 if i % 2 == 0 else l[i - 1] + l[i - 2] +\
    \ l[i + 1])\n    return l\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsrrkkyit.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpsrrkkyit.py\", line 37,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsrrkkyit.py\", line 25, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpsrrkkyit.py\", line\
    \ 22, in tri\n    l.append(1 + i / 2 if i % 2 == 0 else l[i - 1] + l[i - 2] +\
    \ l[i + 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    a = 1\n    b = 3\n    c = 2\n    lst\
    \ = [a, b, c]\n    if n == 0:\n        return [a]\n    elif n == 1:\n        return\
    \ [a, b]\n    elif n == 2:\n        return [a, b, c]\n    else:\n        for i\
    \ in range(n - 2):\n            k = a + b + c\n            lst.append(k)\n   \
    \         a = b\n            b = c\n            c = k\n        return lst\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09vzk86t.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp09vzk86t.py\", line 51,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp09vzk86t.py\", line 39, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2tw76y2.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpj2tw76y2.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpj2tw76y2.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 0:\n        raise ValueError('n\
    \ should be non-negative.')\n    return [1, 3, 2, 8]\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3ow287y.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpw3ow287y.py\", line 36,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpw3ow287y.py\", line 25, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    elif n > 2:\n        tri_arr = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                tri_arr.append(1 + i /\
    \ 2)\n            else:\n                tri_arr.append(tri_arr[i - 1] + tri_arr[i\
    \ - 2] + tri_arr[i + 1])\n        return tri_arr\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwv8hu3r.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmplwv8hu3r.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplwv8hu3r.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplwv8hu3r.py\", line\
    \ 32, in tri\n    tri_arr.append(tri_arr[i - 1] + tri_arr[i - 2] + tri_arr[i +\
    \ 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def trib(n: int) -> int:\n       \
    \ if n == 1:\n            return 3\n        if n % 2 == 0:\n            return\
    \ 1 + n // 2\n        else:\n            return trib(n - 1) + trib(n - 2) + trib(n\
    \ + 1)\n    return [trib(i) for i in range(1, n + 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnzlvigxu.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpnzlvigxu.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnzlvigxu.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n   \
    \ res = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n   \
    \         res.append(1 + i / 2)\n        else:\n            res.append(res[i -\
    \ 1] + res[i - 2] + res[i + 1])\n    return res\n\ndef check(candidate):\n   \
    \ assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpebzh6ltm.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpebzh6ltm.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpebzh6ltm.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpebzh6ltm.py\", line\
    \ 27, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ra_j54k.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_ra_j54k.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_ra_j54k.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n cannot be negative\")\n    elif n == 0:\n        return [1]\n    elif n == 1:\n\
    \        return [1, 3]\n    else:\n        seq = [1, 3, 2]\n        for i in range(3,\
    \ n + 1):\n            if i % 2 == 0:\n                seq.append(1 + i / 2)\n\
    \            else:\n                seq.append(seq[i - 1] + seq[i - 2] + seq[i\
    \ + 1])\n        return seq\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtr1aoyj.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpwtr1aoyj.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwtr1aoyj.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwtr1aoyj.py\", line\
    \ 32, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def tri(n: int) -> int:\n        if\
    \ n == 1:\n            return 3\n        elif n % 2 == 0:\n            return\
    \ 1 + n / 2\n        else:\n            return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    return [tri(i) for i in range(1, n + 2)]\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3cz8m9w.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpm3cz8m9w.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpm3cz8m9w.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    try:\n        if n < 0:\n        \
    \    raise ValueError\n        elif n == 0:\n            return [1]\n        elif\
    \ n == 1:\n            return [1, 3]\n        elif n == 2:\n            return\
    \ [1, 3, 2]\n        else:\n            res = [1, 3, 2]\n            for i in\
    \ range(3, n + 1):\n                if i % 2 == 0:\n                    res.append(1\
    \ + i / 2)\n                else:\n                    res.append(res[i - 1] +\
    \ res[i - 2] + res[i + 1])\n            return res\n    except ValueError:\n \
    \       print(\"Please enter a positive integer\")\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36och3hp.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp36och3hp.py\", line 53,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp36och3hp.py\", line 41, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp36och3hp.py\", line\
    \ 35, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    result = [1, 3, 2, 8]\n    for\
    \ i in range(4, n + 1):\n        prev = result[-3]\n        prev_prev = result[-2]\n\
    \        prev_prev_prev = result[-1]\n        if i % 2 == 0:\n            result.append(1\
    \ + i / 2)\n        else:\n            result.append(prev + prev_prev + prev_prev_prev)\n\
    \    return result\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8i70iv3.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpf8i70iv3.py\", line 51,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpf8i70iv3.py\", line 41, in check\n\
    \    assert candidate(5) == [1, 3, 2, 8, 3, 15]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n   \
    \ if n == 1:\n        return [1, 3]\n    else:\n        l = [1, 3, 2]\n      \
    \  for i in range(3, n+1):\n            if i % 2 == 0:\n                l.append(1\
    \ + i / 2)\n            else:\n                l.append(l[i-1] + l[i-2] + l[i+1])\n\
    \        return l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiu2zsj8.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpxiu2zsj8.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxiu2zsj8.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpxiu2zsj8.py\", line\
    \ 30, in tri\n    l.append(l[i-1] + l[i-2] + l[i+1])\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    arr = [1, 3, 2]\n    while len(arr)\
    \ <= n:\n        if len(arr) % 2 == 0:\n            arr.append(1 + len(arr) /\
    \ 2)\n        else:\n            arr.append(arr[-1] + arr[-2] + arr[-3])\n   \
    \ return arr\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzt3oczl.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmppzt3oczl.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmppzt3oczl.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    if n < 2:\n \
    \       return res[:n+1]\n    for i in range(3, n+1):\n        if i % 2 == 0:\n\
    \            res.append(1 + i / 2)\n        else:\n            res.append(res[i-1]\
    \ + res[i-2] + res[i+1])\n    return res\n\nprint(tri(3))\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz8tae5g3.py\", line\
    \ 30, in <module>\n    print(tri(3))\n  File \"/tmp/tmpz8tae5g3.py\", line 27,\
    \ in tri\n    res.append(res[i-1] + res[i-2] + res[i+1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    result = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n\
    \            result.append(int(1 + i / 2))\n        else:\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n    return result\n            \ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptuzyqurg.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmptuzyqurg.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmptuzyqurg.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmptuzyqurg.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    tri = [1, 3, 2]\n    for i in range(2,\
    \ n):\n        if i % 2 == 0:\n            tri.append(1 + i / 2)\n        else:\n\
    \            tri.append(tri[i] + tri[i - 1] + tri[i + 1])\n    return tri\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukl1xwam.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpukl1xwam.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpukl1xwam.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def tri_rec(n: int, result: List[int])\
    \ -> List[int]:\n        if len(result) > n:\n            return result\n    \
    \    elif n == 1:\n            result.append(3)\n            return result\n \
    \       elif n % 2 == 0:\n            result.append(1 + n / 2)\n            return\
    \ tri_rec(n - 1, result)\n        else:\n            result.append(tri_rec(n -\
    \ 1, result)[-1] + tri_rec(n - 2, result)[-1] + tri_rec(n + 1, result)[-1])\n\
    \            return tri_rec(n - 1, result)\n    return tri_rec(n, [1])\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqs2zdxl5.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpqs2zdxl5.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqs2zdxl5.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    a = 1\n    b = 3\n    c = 2\n    res\
    \ = [a, b, c]\n    while len(res) < n + 1:\n        if len(res) % 2 == 0:\n  \
    \          t = len(res) / 2\n            res.append(t + 1)\n        else:\n  \
    \          t = res[-1] + res[-2] + res[-3]\n            res.append(t)\n    return\
    \ res\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2oxl108u.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp2oxl108u.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2oxl108u.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    else:\n        arr = [1, 3, 2]\n  \
    \      for i in range(3, n + 1):\n            if i % 2 == 0:\n               \
    \ arr.append(1 + i // 2)\n            else:\n                arr.append(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1])\n        return arr\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_gr64hf.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpm_gr64hf.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpm_gr64hf.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpm_gr64hf.py\", line\
    \ 30, in tri\n    arr.append(arr[i - 1] + arr[i - 2] + arr[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    nums = [1, 3, 2]\n    for i in range(4,\
    \ n + 1):\n        if i % 2 == 0:\n            nums.append(1 + i / 2)\n      \
    \  else:\n            nums.append(nums[-1] + nums[-2] + nums[-3])\n    return\
    \ nums\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n   \
    \ assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4a0y1lls.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp4a0y1lls.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp4a0y1lls.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    if n % 2 == 0:\n \
    \       return [1, 3, 2] + [1 + x / 2 for x in range(2, n + 1)]\n    else:\n \
    \       tri_last3 = tri(n - 1)[-3:]\n        tri_last1 = tri(n - 1)[-1]\n    \
    \    tri_last2 = tri(n - 1)[-2]\n        tri_last = tri_last1 + tri_last2 + tri_last3[0]\n\
    \        return tri(n - 1) + [tri_last]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplkrlrpza.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmplkrlrpza.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplkrlrpza.py\", line 38, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    lst = [1, 3, 2]\n    if n == 0:\n\
    \        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n     \
    \   return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            lst.append(1 + i / 2)\n       \
    \ else:\n            lst.append(lst[i - 2] + lst[i - 1] + lst[i + 1])\n    return\
    \ lst\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0dvov7vu.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp0dvov7vu.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0dvov7vu.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    lst = [1, 3, 2]\n    if n < 2:\n \
    \       return lst[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 ==\
    \ 0:\n            lst.append(1 + i / 2)\n        else:\n            lst.append(lst[i\
    \ - 1] + lst[i - 2] + lst[i + 1])\n    return lst\n\ndef check(candidate):\n \
    \   assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoygjswvs.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpoygjswvs.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpoygjswvs.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpoygjswvs.py\", line\
    \ 27, in tri\n    lst.append(lst[i - 1] + lst[i - 2] + lst[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    n_list = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            n_list.append(1 + i / 2)\n    \
    \    else:\n            n_list.append(n_list[i - 1] + n_list[i - 2] + n_list[i\
    \ + 1])\n    return n_list\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvcmwegqp.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpvcmwegqp.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpvcmwegqp.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpvcmwegqp.py\", line\
    \ 29, in tri\n    n_list.append(n_list[i - 1] + n_list[i - 2] + n_list[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        tri_arr = [1, 3, 2]\n        for i in range(3, n +\
    \ 1):\n            if i % 2 == 0:\n                tri_arr.append(int(1 + i /\
    \ 2))\n            else:\n                tri_arr.append(tri_arr[i - 1] + tri_arr[i\
    \ - 2] + tri_arr[i + 1])\n        return tri_arr\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5lwqdrws.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp5lwqdrws.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5lwqdrws.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5lwqdrws.py\", line\
    \ 32, in tri\n    tri_arr.append(tri_arr[i - 1] + tri_arr[i - 2] + tri_arr[i +\
    \ 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    # Your code here\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5qw0ydty.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5qw0ydty.py\", line 37,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5qw0ydty.py\", line 25, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwwlxvihh.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpwwlxvihh.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwwlxvihh.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwwlxvihh.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1]\n    else:\n        # Initialize the first\
    \ three elements of the sequence\n        seq = [1, 1, 1]\n        while len(seq)\
    \ <= n:\n            if len(seq) % 2 == 0:\n                seq.append(1 + (len(seq)\
    \ / 2))\n            else:\n                seq.append(seq[-1] + seq[-2] + seq[-3])\n\
    \        return seq\n    \ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi13uzhhm.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpi13uzhhm.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpi13uzhhm.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            tri.append(1 + i / 2)\n       \
    \ else:\n            tri.append(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    return\
    \ tri\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfgs4iia.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpkfgs4iia.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkfgs4iia.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkfgs4iia.py\", line\
    \ 25, in tri\n    tri.append(tri[i - 1] + tri[i - 2] + tri[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    lst = [1, 3, 2]\n    if n < 3:\n \
    \       return lst[:n+1]\n    curr = 3\n    while curr <= n:\n        if curr\
    \ % 2 == 0:\n            lst.append(1 + curr / 2)\n        else:\n           \
    \ lst.append(lst[-1] + lst[-2] + lst[-3])\n        curr += 1\n    return lst\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpndillm1t.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpndillm1t.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpndillm1t.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3rhosfg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv3rhosfg.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpv3rhosfg.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    a = 1\n    b = 3\n    c = 2\n    lst\
    \ = [1, 3, 2]\n    for i in range(1, n):\n        d = a + b + c\n        a = b\n\
    \        b = c\n        c = d\n        lst.append(d)\n    return lst\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5wfpqjak.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5wfpqjak.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5wfpqjak.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    ret = [1, 3, 2]\n    while len(ret)\
    \ < n + 1:\n        if len(ret) % 2 == 0:\n            ret.append(ret[-1] + 1\
    \ + (len(ret) / 2))\n        else:\n            ret.append(ret[-1] + ret[-2] +\
    \ ret[-3])\n    return ret\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_m1x4ei3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_m1x4ei3.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_m1x4ei3.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0n1g0z3l.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0n1g0z3l.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp0n1g0z3l.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i / 2)\n       \
    \ else:\n            seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\n    return\
    \ seq\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplg45oc6e.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmplg45oc6e.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplg45oc6e.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplg45oc6e.py\", line\
    \ 25, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ res = [1, 3, 2]\n    for i in range(n - 2):\n        if (i + 3) % 2 == 0:\n\
    \            tri_i = int(1 + (i + 3) / 2)\n        else:\n            tri_i =\
    \ res[i] + res[i + 1] + res[i + 2]\n        res.append(tri_i)\n    return res\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqsx24o6.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpxqsx24o6.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxqsx24o6.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpki4y97w5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpki4y97w5.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpki4y97w5.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        result = [1, 3, 2]\n        for i in range(n):\n \
    \           l = len(result)\n            if i % 2 == 0:\n                next_num\
    \ = 1 + (i + 1) / 2\n            else:\n                next_num = result[l -\
    \ 1] + result[l - 2] + result[l - 3]\n            result.append(next_num)\n  \
    \  return result\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsztxmj7o.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpsztxmj7o.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsztxmj7o.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1]\n    else:\n        res = []\n        for\
    \ i in range(1, n + 1):\n            if i == 1:\n                res.append(1)\n\
    \            elif i == 2:\n                res.append(3)\n            elif i ==\
    \ 3:\n                res.append(2)\n            elif i % 2 == 0:\n          \
    \      res.append(1 + i / 2)\n            else:\n                res.append(res[i\
    \ - 2] + res[i - 3] + res[i - 1])\n        return res\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9f8efdv.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpw9f8efdv.py\", line 51,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpw9f8efdv.py\", line 39, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    numbers = [1, 3, 2]\n    i = 3\n \
    \   while i <= n:\n        if i % 2 == 0:\n            numbers.append(1 + i /\
    \ 2)\n        else:\n            numbers.append(numbers[i - 1] + numbers[i - 2]\
    \ + numbers[i + 1])\n        i += 1\n    return numbers\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5xicwje.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpf5xicwje.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpf5xicwje.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpf5xicwje.py\", line\
    \ 26, in tri\n    numbers.append(numbers[i - 1] + numbers[i - 2] + numbers[i +\
    \ 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    sequence = [0, 1, 3]\n    while len(sequence)\
    \ <= n:\n        sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n\
    \    return sequence[1:]\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpr6d9dp.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjpr6d9dp.py\", line 38,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpjpr6d9dp.py\", line 26, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   else:\n        result = [1, 3, 2]\n        while len(result) <= n:\n     \
    \       if len(result) % 2 == 0:\n                result.append(1 + len(result)\
    \ / 2)\n            else:\n                result.append(result[-1] + result[-2]\
    \ + result[-3])\n        return result\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirpwaj3d.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpirpwaj3d.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpirpwaj3d.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n\
    \    elif n == 3:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n\
    \        for i in range(4, n + 1):\n            if i % 2 == 0:\n             \
    \   res.append(1 + i / 2)\n            else:\n                res.append(res[-1]\
    \ + res[-2] + res[-3])\n        return res\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyh4ahz82.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpyh4ahz82.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpyh4ahz82.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [3]\n    for i in range(1, n\
    \ + 1):\n        if i % 2 == 0:\n            res.append(1 + i / 2)\n        else:\n\
    \            res.append(res[-1] + res[-2] + res[-3])\n    return res\n\n\ndef\
    \ check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_u1g31n4.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_u1g31n4.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_u1g31n4.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp_u1g31n4.py\", line\
    \ 25, in tri\n    res.append(res[-1] + res[-2] + res[-3])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n % 2 == 0:\n        return [1, 3, 2] + [1 + x / 2 for x in range(3, n\
    \ + 1)]\n    else:\n        return [1, 3, 2] + [1 + x / 2 for x in range(3, n)]\
    \ + [tri(n - 1)[-1] + tri(n - 2)[-1] + tri(n + 1)[-1]]\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp00oskjd1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp00oskjd1.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp00oskjd1.py\", line 32, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        res.append(res[i - 1] + res[i - 2] + res[i - 3])\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpladnozsp.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpladnozsp.py\", line 38,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpladnozsp.py\", line 26, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n   \
    \ lst = [1, 1, 1]\n    while len(lst) < n + 1:\n        next_value = lst[-3] +\
    \ lst[-2] + lst[-1]\n        lst.append(next_value)\n    return lst\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwb55xgp.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpgwb55xgp.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgwb55xgp.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    assert n >= 0\n    if n == 0:\n  \
    \      return [1]\n    if n == 1:\n        return [1, 3]\n    if n == 2:\n   \
    \     return [1, 3, 2]\n    if n % 2 == 0:\n        tri(n - 1)\n        return\
    \ [1 + n / 2]\n    else:\n        tri(n - 1)\n        return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n    \ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0ur1p1y.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpy0ur1p1y.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpy0ur1p1y.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpy0ur1p1y.py\", line\
    \ 32, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpy0ur1p1y.py\"\
    , line 28, in tri\n    tri(n - 1)\n  File \"/tmp/tmpy0ur1p1y.py\", line 32, in\
    \ tri\n    return [tri("
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    else:\n        my_list = [1, 3, 2]\n        for i in range(3, n + 1):\n \
    \           if i % 2 == 0:\n                my_list.append(1 + i / 2)\n      \
    \      else:\n                my_list.append(my_list[i - 1] + my_list[i - 2] +\
    \ my_list[i + 1])\n        return my_list\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuj387g5p.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpuj387g5p.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpuj387g5p.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpuj387g5p.py\", line\
    \ 32, in tri\n    my_list.append(my_list[i - 1] + my_list[i - 2] + my_list[i +\
    \ 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def _rec(n: int, m: int) -> int:\n\
    \        if n == 1:\n            return m\n        if n == 2:\n            return\
    \ m + 1\n        else:\n            return _rec(n - 1, m) + _rec(n - 2, m) + _rec(n\
    \ + 1, m)\n    \n    if n == 0:\n        return [1]\n    if n == 1:\n        return\
    \ [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    return [1, 3, 2] + [_rec(i,\
    \ 3) for i in range(3, n + 1)]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4kidxv46.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp4kidxv46.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp4kidxv46.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp4kidxv46.py\", line\
    \ 34, in tri\n    return [1, 3, 2] + [_rec(i, 3) for i in range(3, n + 1)]\n \
    \ File \"/tmp/tmp4kidxv46.py\", line 34, in <listcomp>\n    return [1, 3, 2] +\
    \ [_rec(i, 3) for i in range(3, n + 1)]\n  File \"/tmp/tmp4kidxv46.py\", line\
    \ 26, in _rec\n    return _rec(n - 1, m) + _rec(n - 2, m) + _rec(n + 1, m)\n \
    \ File \"/tmp/tmp4kidxv46.py\", line 26, in _rec\n    return _rec(n - 1, m) +\
    \ _rec(n - 2, m) + _rec(n + 1, m)\n  File \"/tmp/tmp4kidxv46.py\", line 26, in\
    \ _rec\n    return _rec(n - 1, m) + _rec(n - 2, m) + _rec(n + 1, m)\n  [Previous\
    \ line repeated 991 more times]\n  File \"/tmp/tmp4kidxv46.py\", line 21, in _rec\n\
    \    if n == 1:\nRecursionError: maximum recursion depth exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    if n <= 2:\n\
    \        return res[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 ==\
    \ 0:\n            res.append(1 + i / 2)\n        else:\n            res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n    return res\ndef check(candidate):\n   \
    \ assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnx5_mtl2.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpnx5_mtl2.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnx5_mtl2.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpnx5_mtl2.py\", line\
    \ 27, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  a = 1\n    b = 3\n    c = 2\n    d = 8\n    res = [a, b, c, d]\n    for i in\
    \ range(n - 3):\n        a = b\n        b = c\n        c = d\n        d = a +\
    \ b + c\n        res.append(d)\n    return res\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_syw7_3a.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp_syw7_3a.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_syw7_3a.py\", line 36, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [1, 3, 2, 8]\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1fm7cbxx.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1fm7cbxx.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1fm7cbxx.py\", line 23, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\n\ndef check(candidate):\n  \
    \  assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnf4c8vnx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpnf4c8vnx.py\", line 35,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnf4c8vnx.py\", line 23, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n\
    \ + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i / 2)\n\
    \            else:\n                sequence.append(sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i + 1])\n        return sequence\ndef check(candidate):\n  \
    \  assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpet01brb4.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpet01brb4.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpet01brb4.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpet01brb4.py\", line\
    \ 32, in tri\n    sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i\
    \ + 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri = []\n    if n == 0:\n       \
    \ return tri\n    elif n > 0:\n        tri.append(1)\n        if n == 1:\n   \
    \         return tri\n        else:\n            tri.append(3)\n            if\
    \ n == 2:\n                return tri\n            else:\n                for\
    \ i in range(2, n + 1):\n                    if i % 2 == 0:\n                \
    \        tri.append(1 + i / 2)\n                    else:\n                  \
    \      tri.append(tri[i - 1] + tri[i - 2] + tri[i + 1])\n    return tri\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjw4x4r_j.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpjw4x4r_j.py\", line 51,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpjw4x4r_j.py\", line 39, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpjw4x4r_j.py\", line\
    \ 36, in tri\n    tri.append(tri[i - 1] + tri[i - 2] + tri[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    tri_list = [1, 3, 2]\n    for i in range(3, n + 1):\n        if i % 2 ==\
    \ 0:\n            tri_list.append(1 + i / 2)\n        else:\n            tri_list.append(tri_list[i\
    \ - 1] + tri_list[i - 2] + tri_list[i + 1])\n    return tri_list\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudv4e2ub.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpudv4e2ub.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpudv4e2ub.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpudv4e2ub.py\", line\
    \ 31, in tri\n    tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i\
    \ + 1])\nIndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    if n <= 2:\n\
    \        return res[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 ==\
    \ 0:\n            res.append(1 + i / 2)\n        else:\n            res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n    return res\n\ndef check(candidate):\n \
    \   assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5s7up_g.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpu5s7up_g.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpu5s7up_g.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpu5s7up_g.py\", line\
    \ 27, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 1:\n        return []\n   \
    \ seq = [1, 3, 2]\n    if n <= 3:\n        return seq[:n + 1]\n    for i in range(4,\
    \ n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i / 2)\n       \
    \ else:\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n    return seq\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2in8ah2.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpr2in8ah2.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpr2in8ah2.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   else:\n        return list(map(lambda x: tri_calc(x), range(1, n + 2)))\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbo6e4lr.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmppbo6e4lr.py\", line 38,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmppbo6e4lr.py\", line 26, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmppbo6e4lr.py\", line\
    \ 23, in tri\n    return list(map(lambda x: tri_calc(x), range(1, n + 2)))\n \
    \ File \"/tmp/tmppbo6e4lr.py\", line 23, in <lambda>\n    return list(map(lambda\
    \ x: tri_calc(x), range(1, n + 2)))\nNameError: name 'tri_calc' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    else:\n        a = [1, 3, 2]\n  \
    \      for i in range(3, n + 1):\n            if i % 2 == 0:\n               \
    \ a.append(1 + i / 2)\n            else:\n                a.append(a[i - 1] +\
    \ a[i - 2] + a[i + 1])\n        return a\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjh4xyu21.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpjh4xyu21.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpjh4xyu21.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpjh4xyu21.py\", line\
    \ 30, in tri\n    a.append(a[i - 1] + a[i - 2] + a[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        t = [1, 3, 2]\n        for i in range(n - 2):\n  \
    \          if (i + 3) % 2 == 0:\n                t.append(1 + (i + 3) / 2)\n \
    \           else:\n                t.append(t[i] + t[i + 1] + t[i + 2])\n    \
    \    return t\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemmahxfa.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpemmahxfa.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpemmahxfa.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n \
    \   tri = [1, 3, 2]\n    for i in range(n - 2):\n        tri.append(tri[-1] +\
    \ tri[-2] + tri[-3])\n    return tri\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnz03ft6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpsnz03ft6.py\", line 39,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsnz03ft6.py\", line 27, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   else:\n        nums = [1, 3, 2]\n        while len(nums) <= n:\n         \
    \   if len(nums) % 2 == 0:\n                nums.append(1 + len(nums) / 2)\n \
    \           else:\n                nums.append(sum(nums[-3:]))\n        return\
    \ nums\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n   \
    \ assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpga213jqi.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpga213jqi.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpga213jqi.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tri_numbers = [1, 3, 2]\n    if n\
    \ <= 2:\n        return tri_numbers[:n + 1]\n    for i in range(3, n + 1):\n \
    \       if i % 2 == 0:\n            tri_numbers.append(1 + i / 2)\n        else:\n\
    \            tri_numbers.append(tri_numbers[i - 1] + tri_numbers[i - 2] + tri_numbers[i\
    \ + 1])\n    return tri_numbers\n```\n\n- One of the common questions people ask\
    \ is how to approach a problem. Since each problem is different, there is no one\
    \ solution to apply. However, here are some great steps you can take:\n\n  1.\
    \ Read the problem description carefully. Try to understand it by yourself.\n\
    \  2. Discuss the problem description with your friend, or even better, with your\
    \ mentor.\n  3. Use the internet to help you if you don't understand something.\
    \ **Don't use it to find the solution!**\n  4. Ask your friend and mentor.\n \
    \ 5. Try to solve the problem yourself.\n  6. Go back to step 3 if you still don't\
    \ understand the problem.\n  7. Ask your friend and mentor to discuss your solution.\n\
    \  8. Ask your friend and mentor to review your code.\n  9. Look at the sample\
    \ test cases.\n  10. Debug and refactor your code.\n\n- In the **TriBonacci Sequence**\
    \ problem:\n  - `tri_numbers` is the list of Tribonacci numbers.\n  - I started\
    \ with the edge cases of `n <= 2` so I could cover all the cases and make my life\
    \ easier later on.\n  - I used `n + 1` as the loop range so that I can cover the\
    \ last number of the sequence.\n  - For the `if` statement, I used the modulo\
    \ operator (`%`) to check if the index is even or odd.\n  - For the `else` statement,\
    \ I used the index of the list to get the previous numbers (`tri_numbers[i - 1]`,\
    \ `tri_numbers[i - 2]`, and `tri_numbers[i + 1]`).\n  - For example, if the given\
    \ number is `5`, I want to\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp2yx30vn7.py\", line 29\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   if n == 1:\n        return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n\
    \    if n == 3:\n        return [1, 3, 2, 8]\n    a = 1\n    b = 3\n    c = 2\n\
    \    arr = [1, 3, 2]\n    while n > 2:\n        a, b, c = b, c, a + b + c\n  \
    \      arr.append(c)\n        n -= 1\n    return arr\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3224a_73.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp3224a_73.py\", line 50,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3224a_73.py\", line 39, in check\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    d = [0, 1, 3, 8]\n    if n > len(d)\
    \ - 1:\n        for i in range(4, n + 1):\n            if i % 2 == 0:\n      \
    \          d.append(1 + i / 2)\n            else:\n                d.append(d[i\
    \ - 1] + d[i - 2] + d[i + 1])\n    return d[:n + 1]\ndef check(candidate):\n \
    \   assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13egaxhm.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp13egaxhm.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp13egaxhm.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    sequence = [1, 3, 2]\n    for i in\
    \ range(n):\n        if i % 2 == 0:\n            sequence.append(int(1 + i / 2))\n\
    \        else:\n            sequence.append(sequence[i] + sequence[i - 1] + sequence[i\
    \ + 1])\n    return sequence[:n + 1]\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuzp3oi49.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpuzp3oi49.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpuzp3oi49.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ffd0iim.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3ffd0iim.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3ffd0iim.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [1, 3, 2]\n    if n <= 2:\n\
    \        return result[:n + 1]\n    for i in range(3, n + 1):\n        if i %\
    \ 2 == 0:\n            result.append(1 + i / 2)\n        else:\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n    return result\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_px8onw.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmps_px8onw.py\", line 42,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmps_px8onw.py\", line 30, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmps_px8onw.py\", line\
    \ 27, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    tris = [1, 3, 2]\n    if n == 1:\n\
    \        return [tris[0]]\n    if n == 2:\n        return tris[0:n+1]\n    for\
    \ i in range(3, n+1):\n        if i % 2 == 0:\n            tris.append(int(1 +\
    \ i / 2))\n        else:\n            tris.append(tris[i-1] + tris[i-2] + tris[i+1])\n\
    \    return tris\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2,\
    \ 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1,\
    \ 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpryumytks.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpryumytks.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpryumytks.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpryumytks.py\", line\
    \ 29, in tri\n    tris.append(tris[i-1] + tris[i-2] + tris[i+1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvootm8n.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpqvootm8n.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqvootm8n.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpqvootm8n.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    if n <= 2:\n\
    \        return res[:n + 1]\n    else:\n        for i in range(3, n + 1):\n  \
    \          if i % 2 == 0:\n                res.append(1 + i / 2)\n           \
    \ else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n  \
    \      return res\n\n\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps483yv7r.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmps483yv7r.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmps483yv7r.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmps483yv7r.py\", line\
    \ 28, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    li = [0, 1, 3]\n    if n == 0:\n \
    \       return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n\
    \        return [1, 3, 2]\n    else:\n        i = 1\n        while i <= n - 2:\n\
    \            if i % 2 != 0:\n                li.append(li[i] + li[i - 1] + li[i\
    \ + 1])\n            else:\n                li.append(int(1 + i / 2))\n      \
    \      i += 1\n        return li\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfc1t7wxh.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpfc1t7wxh.py\", line 50,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfc1t7wxh.py\", line 38, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    while len(res)\
    \ - 1 < n:\n        if len(res) % 2 == 0:\n            res.append(res[-1] + res[-2]\
    \ + res[-3])\n        else:\n            res.append(res[-2] + res[-3] + res[-4])\n\
    \    return res\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8r4l9fw.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpq8r4l9fw.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpq8r4l9fw.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpq8r4l9fw.py\", line\
    \ 25, in tri\n    res.append(res[-2] + res[-3] + res[-4])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpinv99m12.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpinv99m12.py\", line 34,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpinv99m12.py\", line 22, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def tribonacci(n):\n        if n ==\
    \ 1:\n            return 3\n        if n % 2 == 0:\n            return 1 + n /\
    \ 2\n        return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n + 1)\n\
    \    return [int(tribonacci(i)) for i in range(n + 1)]\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    else:\n        seq = [1, 3, 2]\n\
    \        for i in range(3, n + 1):\n            if i % 2 == 0:\n             \
    \   seq.append(1 + i / 2)\n            else:\n                seq.append(seq[i\
    \ - 1] + seq[i - 2] + seq[i + 1])\n        return seq\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwbe3gd6.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpnwbe3gd6.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnwbe3gd6.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpnwbe3gd6.py\", line\
    \ 30, in tri\n    seq.append(seq[i - 1] + seq[i - 2] + seq[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [1, 3, 2]\n    if n == 1:\n\
    \        return [1]\n    if n == 2:\n        return [1, 3]\n    if n == 3:\n \
    \       return [1, 3, 2]\n    i = 4\n    while i <= n:\n        if i % 2 == 0:\n\
    \            result.append(1 + i // 2)\n        else:\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n        i += 1\n    return result\n\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi8zw7gz.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpqi8zw7gz.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpqi8zw7gz.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [tri_memo(n) for n in range(n\
    \ + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgdgqj9ri.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgdgqj9ri.py\", line 35,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpgdgqj9ri.py\", line 23, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpgdgqj9ri.py\", line\
    \ 20, in tri\n    return [tri_memo(n) for n in range(n + 1)]\n  File \"/tmp/tmpgdgqj9ri.py\"\
    , line 20, in <listcomp>\n    return [tri_memo(n) for n in range(n + 1)]\nNameError:\
    \ name 'tri_memo' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n is negative\")\n    if n == 0:\n        return [1]\n    if n == 1:\n       \
    \ return [1, 3]\n    if n == 2:\n        return [1, 3, 2]\n    ans = [1, 3, 2]\n\
    \    for i in range(3, n + 1):\n        ans.append(ans[i - 1] + ans[i - 2] + ans[i\
    \ - 3])\n    return ans\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp753fwipw.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp753fwipw.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp753fwipw.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n\
    \    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n     \
    \       if i % 2 == 0:\n                res.append(1 + i / 2)\n            else:\n\
    \                res.append(res[-1] + res[-2] + res[-3])\n        return res\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ef8nvg6.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp_ef8nvg6.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp_ef8nvg6.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ l = [1, 3, 2]\n    for i in range(3, n + 1):\n        l.append(sum(l[-3:]))\n\
    \    return l\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpga8jhoko.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpga8jhoko.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpga8jhoko.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    l = [1, 3, 2]\n    if n == 0:\n  \
    \      return []\n    if n == 1:\n        return [1]\n    if n == 2:\n       \
    \ return [1, 3]\n    if n == 3:\n        return [1, 3, 2]\n    for i in range(4,\
    \ n + 1):\n        l.append(l[i - 1] + l[i - 2] + l[i - 3])\n    return l\n\n\"\
    \"\"\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp5nmez39d.py\", line 51\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"\
    n must be a non-negative integer\")\n    elif n == 0:\n        return [1]\n  \
    \  elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3,\
    \ 2]\n    else:\n        r = [1, 3, 2]\n        for i in range(3, n + 1):\n  \
    \          if i % 2 == 0:\n                r.append(1 + i / 2)\n            else:\n\
    \                r.append(r[i - 1] + r[i - 2] + r[i + 1])\n        return r\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7y4_x6gt.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp7y4_x6gt.py\", line 49,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp7y4_x6gt.py\", line 37, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp7y4_x6gt.py\", line\
    \ 34, in tri\n    r.append(r[i - 1] + r[i - 2] + r[i + 1])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcr6b4zd4.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpcr6b4zd4.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpcr6b4zd4.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpcr6b4zd4.py\", line\
    \ 32, in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    result = [1, 3, 2]\n    if n == 2:\n  \
    \      return result\n    for i in range(3, n):\n        result.append(2 * result[i\
    \ - 1] - result[i - 3])\n    return result\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp49pt3pkm.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp49pt3pkm.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp49pt3pkm.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def go(n: int) -> int:\n        if\
    \ n == 1:\n            return 3\n        elif n % 2 == 0:\n            return\
    \ 1 + n / 2\n        else:\n            return go(n - 1) + go(n - 2) + go(n +\
    \ 1)\n    return [go(i) for i in range(n + 1)]\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [0, 1, 3]\n    for i in range(2,\
    \ n + 1):\n        if i % 2 == 0:\n            res.append(1 + i / 2)\n       \
    \ else:\n            res.append(res[i] + res[i - 1] + res[i + 1])\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnobrp2sk.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnobrp2sk.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpnobrp2sk.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpnobrp2sk.py\", line\
    \ 25, in tri\n    res.append(res[i] + res[i - 1] + res[i + 1])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   res = [0] * (n + 1)\n    res[0] = 1\n    res[1] = 3\n    res[2] = 2\n    for\
    \ i in range(3, n + 1):\n        if i % 2 == 0:\n            res[i] = 1 + i /\
    \ 2\n        else:\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n\
    \    return res\n\nprint(tri(5))\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9s_ngjg.py\", line\
    \ 33, in <module>\n    print(tri(5))\n  File \"/tmp/tmpv9s_ngjg.py\", line 30,\
    \ in tri\n    res[i] = res[i - 1] + res[i - 2] + res[i + 1]\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            result.append(1 + i / 2)\n    \
    \    else:\n            result.append(result[i - 2] + result[i - 1] + result[i\
    \ + 1])\n    return result\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwdw8yh74.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpwdw8yh74.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwdw8yh74.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpwdw8yh74.py\", line\
    \ 25, in tri\n    result.append(result[i - 2] + result[i - 1] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    pass\n\ndef check(candidate):\n  \
    \  assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8,\
    \ 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw94vf8os.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpw94vf8os.py\", line 35,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpw94vf8os.py\", line 23, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [1, 3, 2]\n    if n == 0:\n\
    \        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n     \
    \   return [1, 3]\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n   \
    \         result.append(1 + i / 2)\n        else:\n            result.append(result[i\
    \ - 1] + result[i - 2] + result[i + 1])\n    return result\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpriywbvqs.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpriywbvqs.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpriywbvqs.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpriywbvqs.py\", line\
    \ 31, in tri\n    result.append(result[i - 1] + result[i - 2] + result[i + 1])\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   lst = [1, 3, 2]\n    while len(lst) - 1 < n:\n        k = len(lst) - 1\n \
    \       if k % 2 == 0:\n            x = 1 + k / 2\n        else:\n           \
    \ x = lst[k - 1] + lst[k - 2] + lst[k + 1]\n        lst.append(x)\n    return\
    \ lst\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy2_u768o.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpy2_u768o.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpy2_u768o.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 2]\n    for i in range(4,\
    \ n + 1):\n        if i % 2 == 0:\n            seq.append(1 + i / 2)\n       \
    \ else:\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n    return seq\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mq0d2m7.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1mq0d2m7.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1mq0d2m7.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    result = [0] * (n + 1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    if n < 2:\n        return result[:n+1]\n    result[2]\
    \ = 2\n    if n < 3:\n        return result[:n+1]\n    for i in range(3, n + 1):\n\
    \        if i % 2 == 0:\n            result[i] = 1 + i / 2\n        else:\n  \
    \          result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n    return\
    \ result\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n   \
    \ assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpowxexhk1.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpowxexhk1.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpowxexhk1.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpowxexhk1.py\", line\
    \ 32, in tri\n    result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n\
    IndexError: list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def helper(s: int, e: int, n: int)\
    \ -> int:\n        res = 0\n        if e % 2 == 0:\n            res = 1 + e /\
    \ 2\n        else:\n            res = helper(s, e - 1, n) + helper(s, e - 2, n)\
    \ + helper(s, e + 1, n)\n        return res\n    res = []\n    for i in range(1,\
    \ n + 2):\n        if i == 1:\n            res.append(3)\n        else:\n    \
    \        res.append(helper(1, i, n))\n    return res\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewv9uh4q.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpewv9uh4q.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpewv9uh4q.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpewv9uh4q.py\", line\
    \ 32, in tri\n    res.append(helper(1, i, n))\n  File \"/tmp/tmpewv9uh4q.py\"\
    , line 25, in helper\n    res = helper(s, e - 1, n) + helper(s, e - 2, n) + helper(s,\
    \ e + 1, n)\n  File \"/tmp/tmpewv9uh4q.py\", line 25, in helper\n    res = helper(s,\
    \ e - 1, n) + helper(s, e - 2, n) + helper(s, e + 1, n)\n  File \"/tmp/tmpewv9uh4q.py\"\
    , line 25, in helper\n    res = helper(s, e - 1, n) + helper(s, e - 2, n) + helper(s,\
    \ e + 1, n)\n  [Previous line repeated 992 more times]\n  File \"/tmp/tmpewv9uh4q.py\"\
    , line 22, in helper\n    if e % 2 == 0:\nRecursionError: maximum recursion depth\
    \ exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    list1 = [1, 3, 2]\n    if n == 0:\n\
    \        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n\
    \        return [1, 3, 2]\n    else:\n        for i in range(3, n + 1):\n    \
    \        if i % 2 == 0:\n                list1.append(1 + i / 2)\n           \
    \ else:\n                list1.append(list1[i - 1] + list1[i - 2] + list1[i +\
    \ 1])\n        return list1\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xkxfxaw.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp3xkxfxaw.py\", line 47,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp3xkxfxaw.py\", line 35, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp3xkxfxaw.py\", line\
    \ 32, in tri\n    list1.append(list1[i - 1] + list1[i - 2] + list1[i + 1])\nIndexError:\
    \ list index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    t = [1, 3, 2]\n    if n <= 2:\n  \
    \      return t[:n + 1]\n    while len(t) <= n:\n        t.append(sum(t[-3:])\
    \ + 1)\n    return t\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1o1svd7.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpw1o1svd7.py\", line 39,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpw1o1svd7.py\", line 27, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    nums = [1, 3, 2]\n    if n == 0:\n\
    \        return []\n    if n <= 3:\n        return nums[:n]\n    nums.append(nums[0]\
    \ + nums[1] + nums[2])\n    while len(nums) <= n:\n        next_tri = nums[-1]\
    \ + nums[-2] + nums[-3]\n        nums.append(next_tri)\n    return nums\n\nprint(tri(3))\n\
    def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: "[1, 3, 2]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpmi41lb.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpjpmi41lb.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpjpmi41lb.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return []\n  \
    \  if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 3]\n   \
    \ if n == 3:\n        return [1, 3, 2]\n    l = [1, 3, 2]\n    for i in range(3,\
    \ n + 1):\n        if i % 2 == 0:\n            l.append(1 + i / 2)\n        else:\n\
    \            l.append(l[i - 2] + l[i - 1] + l[i + 1])\n    return l\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zqbpoph.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp5zqbpoph.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5zqbpoph.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    if n <= 2:\n\
    \        return res[:n + 1]\n    for i in range(3, n + 1):\n        if i % 2 ==\
    \ 0:\n            res.append(1 + i / 2)\n        else:\n            res.append(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n    return res\n\nprint(tri(5))\nprint(tri(10))\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6khf_2x.py\", line\
    \ 30, in <module>\n    print(tri(5))\n  File \"/tmp/tmpy6khf_2x.py\", line 27,\
    \ in tri\n    res.append(res[i - 1] + res[i - 2] + res[i + 1])\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    arr = [1, 3, 2]\n    idx = 0\n   \
    \ while idx < n:\n        if len(arr) % 2 == 0:\n            arr.append(1 + len(arr)\
    \ / 2)\n        else:\n            arr.append(arr[-1] + arr[-2] + arr[-3])\n \
    \       idx += 1\n    return arr\n\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5n89n7t7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp5n89n7t7.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5n89n7t7.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    res = [1, 3, 2]\n    for i in range(3,\
    \ n):\n        if i % 2 == 0:\n            res.append(1 + i / 2)\n        else:\n\
    \            res.append(res[i - 1] + res[i - 2] + res[i + 1])\n    return res\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2auc6da.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpk2auc6da.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpk2auc6da.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    ret = [1, 3, 2]\n    for i in range(n):\n\
    \        nxt = (ret[-1] + ret[-2] + ret[-3]) if i % 2 == 0 else 1 + i // 2\n \
    \       ret.append(nxt)\n    return ret\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsx77nvlo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpsx77nvlo.py\", line 39,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpsx77nvlo.py\", line 27, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    a = 1\n    b = 3\n    c = 2\n    d\
    \ = b\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return [1,\
    \ 3]\n    elif n == 2:\n        return [1, 3, 2]\n    l = [1, 3, 2]\n    for i\
    \ in range(3, n + 1):\n        if i % 2 == 0:\n            d = 1 + i / 2\n   \
    \     else:\n            d = l[i - 1] + l[i - 2] + l[i + 1]\n        l.append(d)\n\
    \    return l\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe0qeurmc.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpe0qeurmc.py\", line 51,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpe0qeurmc.py\", line 39, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpe0qeurmc.py\", line\
    \ 35, in tri\n    d = l[i - 1] + l[i - 2] + l[i + 1]\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    return [tri_helper(i) for i in range(n\
    \ + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n  \
    \  assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2,\
    \ 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkg83j1vq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkg83j1vq.py\", line 35,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpkg83j1vq.py\", line 23, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpkg83j1vq.py\", line\
    \ 20, in tri\n    return [tri_helper(i) for i in range(n + 1)]\n  File \"/tmp/tmpkg83j1vq.py\"\
    , line 20, in <listcomp>\n    return [tri_helper(i) for i in range(n + 1)]\nNameError:\
    \ name 'tri_helper' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    a = [1, 3, 2]\n    if n == 0:\n  \
    \      return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n   \
    \     return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n    elif n ==\
    \ 4:\n        return [1, 3, 2, 8]\n    elif n == 5:\n        return [1, 3, 2,\
    \ 8, 3]\n    else:\n        for i in range(6, n + 1):\n            a.append(a[i\
    \ - 1] + a[i - 2] + a[i - 3])\n        return a\n\nprint(tri(0))\nprint(tri(1))\n\
    print(tri(2))\nprint(tri(3))\nprint(tri(4))\nprint(tri(5))\nprint(tri(6))\nprint(tri(7))\n\
    print(tri(8))\nprint(tri(9))\nprint(tri(10))\nprint(tri(20))\nprint(tri(30))\n\
    print(tri(40))\nprint(tri(50))\nprint(tri(60))\nprint(tri(70))\nprint(tri(80))\n\
    print(tri(90))\nprint(tri(100))\nprint(tri(1000))\nprint(tri(10000))\nprint(tri(100000))\n\
    print(tri(1000000))\nprint(tri(10000000))\nprint(tri(100000000))\nprint(tri(1000000000))\n\
    print(tri(10000000000))\nprint(tri(100000000000))\nprint(tri(1000000000000))\n\
    print(tri(10000000000000))\nprint(tri(100000000000000))\nprint(tri(1000000000000000))\n\
    print(tri(10000000000000000))\nprint(tri(100000000000000000))\nprint(tri(1000000000000000000))\n\
    print(tri(10000000000000000000))\nprint(tri(100000000000000000000))\nprint(tri(1000000000000000000000))\n\
    print(tri(10000000000000000000000))\nprint(tri(100000000000000000000000))\nprint(tri(1000000000000000000000000))\n\
    print(tri(10000000000000000000000000))\nprint(tri(100000000000000000000000000))\n\
    print\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: "[]\n[1]\n[1, 3]\n[1, 3, 2]\n[1, 3, 2, 8]\n[1, 3, 2, 8, 3]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmug051as.py\", line\
    \ 44, in <module>\n    print(tri(6))\n  File \"/tmp/tmpmug051as.py\", line 35,\
    \ in tri\n    a.append(a[i - 1] + a[i - 2] + a[i - 3])\nIndexError: list index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [1]\n \
    \   elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1,\
    \ 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n\
    \            if i % 2 == 0:\n                res.append(1 + i / 2)\n         \
    \   else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n\
    \        return res\n\nprint(tri(3))\nprint(tri(4))\nprint(tri(5))\nprint(tri(6))\n\
    print(tri(7))\nprint(tri(8))\nprint(tri(9))\nprint(tri(10))\nprint(tri(11))\n\
    print(tri(12))\nprint(tri(13))\nprint(tri(14))\nprint(tri(15))\nprint(tri(16))\n\
    print(tri(17))\nprint(tri(18))\nprint(tri(19))\nprint(tri(20))\nprint(tri(21))\n\
    print(tri(22))\nprint(tri(23))\nprint(tri(24))\nprint(tri(25))\nprint(tri(26))\n\
    print(tri(27))\nprint(tri(28))\nprint(tri(29))\nprint(tri(30))\nprint(tri(31))\n\
    print(tri(32))\nprint(tri(33))\nprint(tri(34))\nprint(tri(35))\nprint(tri(36))\n\
    print(tri(37))\nprint(tri(38))\nprint(tri(39))\nprint(tri(40))\nprint(tri(41))\n\
    print(tri(42))\nprint(tri(43))\nprint(tri(44))\nprint(tri(45))\nprint(tri(46))\n\
    print(tri(47))\nprint(tri(48))\nprint(tri(49))\nprint(tri(50))\nprint(tri(51))\n\
    print(tri(52))\nprint(tri(53))\nprint(tri(54))\nprint(tri(55))\nprint(tri(56))\n\
    print(\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
    \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3,\
    \ 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n  \
    \  assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8,\
    \ 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert candidate(1)\
    \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmppu8k6cbx.py\", line 90\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    seq = [1, 3, 2]\n    while len(seq)\
    \ <= n:\n        if len(seq) % 2 == 0:\n            seq.append(1 + len(seq) /\
    \ 2)\n        else:\n            seq.append(seq[-1] + seq[-2] + seq[-3])\n   \
    \ return seq[:n + 1]\ndef check(candidate):\n    assert candidate(3) == [1, 3,\
    \ 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n   \
    \ assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35,\
    \ 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n \
    \   assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoevqn95j.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpoevqn95j.py\", line 40,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpoevqn95j.py\", line 28, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  exit_code: -1
  status: Exception
