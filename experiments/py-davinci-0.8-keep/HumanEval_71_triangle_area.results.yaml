name: HumanEval_71_triangle_area
language: py
results:
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if is_triangle(a,\
    \ b, c):\n        # Calculate and return the area of the triangle\n        s =\
    \ (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c)), 2)\n    else:\n        # Return -1 if the three sides do not form a valid\
    \ triangle\n        return -1\n        \ntriangle_area(3, 4, 5)\n\ntriangle_area(1,\
    \ 2, 10)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpeu6q4f.py\", line\
    \ 20, in <module>\n    triangle_area(3, 4, 5)\n  File \"/tmp/tmpnpeu6q4f.py\"\
    , line 12, in triangle_area\n    if is_triangle(a, b, c):\nNameError: name 'is_triangle'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2) if a +\
    \ b > c and a + c > b and b + c > a else -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsr9ci8h1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsr9ci8h1.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpsr9ci8h1.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpsr9ci8h1.py\"\
    , line 13, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2) if a + b > c and a + c > b and b + c > a else -1\nNameError: name\
    \ 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Get perimeter\n\
    \    perimeter = a + b + c\n    # Validate triangle\n    if perimeter - max(a,\
    \ b, c) > max(a, b, c):\n        # Semi-perimeter\n        sp = perimeter / 2\n\
    \        # Heron's formula\n        area = (sp * (sp - a) * (sp - b) * (sp - c))\
    \ ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # calculate\
    \ semi-perimeter\n    s = (a + b + c) / 2\n    # calculate area\n    area = (s\
    \ * (s - a) * (s - b) * (s - c)) ** 0.5\n    if a + b > c and a + c > b and b\
    \ + c > a:\n        return round(area, 2)\n    else:\n        return -1\n\n\n\
    print(triangle_area(3, 4, 5))  # 6.00\nprint(triangle_area(1, 2, 10))  # -1\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <=\
    \ c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n\
    \    return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(1, 2, 10))\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v106xyr.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4v106xyr.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp4v106xyr.py\", line\
    \ 23, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Check if\
    \ the three sides form a valid triangle\n    if (a+b)>c and (a+c)>b and (b+c)>a:\n\
    \        p = (a+b+c)/2\n        area = ((p*(p-a)*(p-b)*(p-c))**0.5)\n        return\
    \ round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    def is_valid_triangle(a,\
    \ b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    if is_valid_triangle(a,\
    \ b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpapiu3csd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpapiu3csd.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpapiu3csd.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpapiu3csd.py\"\
    , line 17, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    if p - a and p - b and p - c > 0:\n        return round(math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    return -1\n\n\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(1, 2, 10))\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsh_9lzcp.py\", line\
    \ 18, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmpsh_9lzcp.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuntb3xp1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuntb3xp1.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpuntb3xp1.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpuntb3xp1.py\"\
    , line 14, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if s - a > 0 and s - b > 0 and s - c > 0:\n        return (s *\
    \ (s - a) * (s - b) * (s - c)) ** 0.5\n    return -1\n\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(1, 2, 10))\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw0jbz1ap.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpw0jbz1ap.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpw0jbz1ap.py\", line\
    \ 22, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Catch negative\
    \ integers\n    for side in [a, b, c]:\n        if side < 0:\n            return\
    \ -1\n    \n    # Catch any side greater than the sum of the other two sides\n\
    \    max_side = max(a, b, c)\n    if max_side > a + b + c - max_side:\n      \
    \  return -1\n    \n    # Heron's formula\n    s = (a + b + c) / 2.0\n    return\
    \ sqrt(s * (s - a) * (s - b) * (s - c))\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\nprint(triangle_area(-1, -2, 10))\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp75zal75f.py\", line\
    \ 25, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmp75zal75f.py\"\
    , line 24, in triangle_area\n    return sqrt(s * (s - a) * (s - b) * (s - c))\n\
    NameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return\
    \ round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return\
    \ -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ttltues.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp2ttltues.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp2ttltues.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp2ttltues.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if s >= c:\n        return round(math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c)), 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qshtc44.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp2qshtc44.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp2qshtc44.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp2qshtc44.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # p = sum(a,\
    \ b, c) / 2\n    # a = sqrt(p(p-a)(p-b)(p-c))\n    pass\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5mr4kxv6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5mr4kxv6.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp5mr4kxv6.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area <=\
    \ 0:\n        return -1\n    return round(area, 2)\ntriangle_area(3, 4, 5)\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_53xijt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi_53xijt.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpi_53xijt.py\", line\
    \ 21, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpi_53xijt.py\"\
    , line 14, in triangle_area\n    if area <= 0:\nTypeError: '<=' not supported\
    \ between instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n       \
    \ area = round((p * (p - a) * (p - b) * (p - c)) ** 0.5, 2)\n        return area\n\
    \    else:\n        return -1\n\n\nprint(triangle_area(1, 2, 10))\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: "-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # s = (a +\
    \ b + c) / 2\n    # area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    # if\
    \ area.is_integer():\n    #     return round(area, 2)\n    # else:\n    #    \
    \ return -1\n    # tuple unpacking\n    s = sum(sorted([a, b, c])[:2])\n    return\
    \ round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2) if s > c else -1\n    \n\n\
    assert triangle_area(2, 3, 4) == 2.90\nassert triangle_area(10, 10, 10) == 43.30\n\
    assert triangle_area(3, 4, 10) == -1\nassert triangle_area(2, 3, -1) == -1\nassert\
    \ triangle_area(2, 3, 0) == -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7hsmolbl.py\", line\
    \ 23, in <module>\n    assert triangle_area(2, 3, 4) == 2.90\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return round(math.sqrt(sum([i\
    \ * (i - b) * (i - c) for i in sorted([a, b, c])[:2]]) * (\n            sum([i\
    \ * (i - b) * (i - c) for i in sorted([a, b, c])[:2]]) - c ** 2)) / 4, 2) if (\n\
    \                   sum([i * (i - b) * (i - c) for i in sorted([a, b, c])[:2]])\
    \ - c ** 2) > 0 else -1\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8,\
    \ 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2,\
    \ 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6,\
    \ 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2,\
    \ 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrtyjx14.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphrtyjx14.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmphrtyjx14.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0c98piq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpq0c98piq.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpq0c98piq.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        S = (p\
    \ * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(S, 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area =\
    \ (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\nprint(triangle_area(3, 4, 5))\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: "6.0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptzng_w_7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptzng_w_7.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptzng_w_7.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area,\
    \ 2) if a + b > c and a + c > b and b + c > a else -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if s - a > 0 and s - b > 0 and s - c > 0:\n        return round(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqkhjg351.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqkhjg351.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpqkhjg351.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpqkhjg351.py\"\
    , line 14, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    sides = (a,\
    \ b, c)\n    assert all(isinstance(s, int) for s in sides)\n    assert min(sides)\
    \ > 0\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        p = sum(sides)\
    \ / 2\n        return round(sqrt(p * (p - sides[0]) * (p - sides[1]) * (p - sides[2])),\
    \ 2)\n    return -1\n\n\n@pytest.mark.parametrize(\"a, b, c, area\", [\n    (3,\
    \ 4, 5, 6.00),\n    (1, 2, 10, -1),\n    (1, 1, 1, 0.43),\n    (4, 4, 4, 6.93),\n\
    \    (10, 10, 10, 43.30),\n    (27, 27, 27, 136.68),\n    (100, 100, 100, 433.01),\n\
    \    (500, 500, 500, 8660.25),\n    (10000, 10000, 10000, 433310.00),\n    (100000,\
    \ 100000, 100000, 43301025.00),\n    (1600000000, 1600000000, 1600000000, 43499998053333000.00),\n\
    \    (20000000000, 20000000000, 20000000000, 434999980033330000.00),\n    (30000000000,\
    \ 30000000000, 30000000000, 434999973333330000.00),\n    (40000000000, 40000000000,\
    \ 40000000000, 434999973333330000.00),\n    (50000000000, 50000000000, 50000000000,\
    \ 434999973333330000.00),\n    (60000000000, 60000000000, 60000000000, 434999973333330000.00),\n\
    \    (70000000000, 70000000000, 70000000000, 434999973333330000.00),\n    (80000000000,\
    \ 80000000000, 80000000000, 434999973333330000.00),\n    (90000000000, 90000000000,\
    \ 90000000000, 434999973333330000.00),\n    (100000000000, 100000000000, 100000000000,\
    \ 434999973333330000.\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpf62pcp8q.py\", line 43\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if not is_triangle(a,\
    \ b, c):\n        return -1\n    p = (a + b + c) / 2\n    return (p * (p - a)\
    \ * (p - b) * (p - c)) ** 0.5\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_jzv_rio.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_jzv_rio.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_jzv_rio.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp_jzv_rio.py\"\
    , line 12, in triangle_area\n    if not is_triangle(a, b, c):\nNameError: name\
    \ 'is_triangle' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    area = 0.0\n\
    \    if(a > 0 and b > 0 and c > 0):\n        p = (a + b + c) / 2\n        area\
    \ = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area, 2)\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptqbn__15.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptqbn__15.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptqbn__15.py\", line\
    \ 21, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmptqbn__15.py\"\
    , line 16, in triangle_area\n    return round(area, 2)\nTypeError: type complex\
    \ doesn't define __round__ method\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        return round(math.sqrt((a + b\
    \ + c) * (-a + b + c) * (a - b + c) * (a + b - c)) / 4, 2)\n    else:\n      \
    \  return -1\n```\n\n```python\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphm_8zz1z.py\", line 16\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if s - a > 0 and s - b > 0 and s - c > 0:\n        return round(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94s2n5a_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp94s2n5a_.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp94s2n5a_.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp94s2n5a_.py\"\
    , line 14, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return\
    \ (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzucrlqh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbzucrlqh.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpbzucrlqh.py\", line\
    \ 22, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if s * (s - a) * (s - b) * (s - c) <= 0:\n        return -1\n\
    \    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area,\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbsyrpmy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjbsyrpmy.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpjbsyrpmy.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpjbsyrpmy.py\"\
    , line 15, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b)\
    \ > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n        return\
    \ round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpojy5r3et.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpojy5r3et.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpojy5r3et.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpojy5r3et.py\"\
    , line 14, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area =\
    \ (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(3, 4, 4))\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: "6.0\n-1\n-1\n5.56\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # The function\
    \ should return -1 if the given side lengths can not form a \n    # valid triangle.\
    \ So, we'll add that as the base case\n    if (a+b <= c) or (a+c <= b) or (b+c\
    \ <= a):\n        return -1\n    # We'll use Heron's formula to calculate the\
    \ area.\n    # https://www.mathopenref.com/heronsformula.html\n    # To make the\
    \ output look good, we'll round it to 2 decimal places.\n    s = (a+b+c)/2\n \
    \   area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    triangle_area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n   \
    \ if a + b > c and a + c > b and b + c > a:\n        return round(triangle_area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b)\
    \ > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n        area\
    \ = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Your code\
    \ goes here!\n    def is_valid(a, b, c):\n        if a + b <= c or a + c <= b\
    \ or b + c <= a:\n            return False\n        return True\n    if is_valid(a,\
    \ b, c):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) *\
    \ (s - c)) ** 0.5\n        return round(area, 2)\n    return -1\n\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n       \
    \ area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz99dio7l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpz99dio7l.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpz99dio7l.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    area = math.sqrt(p * (p - a) * (p - b) * (p - c))\n    if area\
    \ > 0:\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcr47azxk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcr47azxk.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpcr47azxk.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpcr47azxk.py\"\
    , line 13, in triangle_area\n    area = math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    perimeter\
    \ = a + b + c\n    if a + b > c and a + c > b and b + c > a:\n        p = (perimeter)\
    \ / 2\n        s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s,\
    \ 2)\n    else:\n        return -1\n\n\n@pytest.mark.parametrize(\"a, b, c, expected\"\
    , [\n    (3, 4, 5, 6.00),\n    (1, 2, 10, -1),\n    (1, 2, 3, -1),\n    (2, 3,\
    \ 4, 2.90),\n    (3, 4, 2, 2.90),\n    (4, 2, 3, 2.90),\n    (15, 12, 17, 84.00),\n\
    \    (12, 17, 15, 84.00),\n    (17, 15, 12, 84.00),\n    (5, 4, 3, 6.00),\n  \
    \  (4, 3, 5, 6.00),\n    (3, 5, 4, 6.00),\n    (6, 3, 4, 5.33),\n    (3, 4, 6,\
    \ 5.33),\n    (4, 6, 3, 5.33),\n    (5, 10, 12, -1),\n    (10, 12, 5, -1),\n \
    \   (12, 5, 10, -1),\n    (2, 3, 4, 2.90),\n    (3, 4, 2, 2.90),\n    (4, 2, 3,\
    \ 2.90),\n    (2, 3, 4, 2.90),\n    (3, 4, 2, 2.90),\n    (4, 2, 3, 2.90),\n \
    \   (2, 3, 4, 2.90),\n    (3, 4, 2, 2.90),\n    (4, 2, 3, 2.90),\n    (5, 4, 3,\
    \ 6.00),\n    (4, 3, 5, 6.00),\n    (3, 5, 4, 6.00),\n    (3, 4, 5, 6.00),\n \
    \   (3, 4\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpkj1f7phs.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n       \
    \ return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy788baxv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpy788baxv.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpy788baxv.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpy788baxv.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        return round(math.sqrt((a + b\
    \ + c) * (a + b - c) * (a - b + c) * (-a + b + c)) / 4, 2)\n    else:\n      \
    \  return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcravnf74.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcravnf74.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpcravnf74.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpcravnf74.py\"\
    , line 13, in triangle_area\n    return round(math.sqrt((a + b + c) * (a + b -\
    \ c) * (a - b + c) * (-a + b + c)) / 4, 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    t = []\n \
    \   t.append(a)\n    t.append(b)\n    t.append(c)\n    t.sort()\n    if t[0] +\
    \ t[1] > t[2]:\n        return float(t[0] * t[1] / 2)\n    else:\n        return\
    \ -1\n    pass\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfze8djfi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpfze8djfi.py\", line 36,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfze8djfi.py\", line\
    \ 27, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # only when\
    \ three sides make a valid triangle, then calculate the area.\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area =\
    \ math.sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qv_9p98.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4qv_9p98.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp4qv_9p98.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp4qv_9p98.py\"\
    , line 15, in triangle_area\n    area = math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(s,\
    \ 2) if s > 0 else -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0nklsjw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp0nklsjw.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpp0nklsjw.py\", line\
    \ 19, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpp0nklsjw.py\"\
    , line 14, in triangle_area\n    return round(s, 2) if s > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    if p < a or p < b or p < c:\n        return -1\n    else:\n  \
    \      return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs8hbjgy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprs8hbjgy.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmprs8hbjgy.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmprs8hbjgy.py\"\
    , line 16, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if ((a + b\
    \ > c) and (a + c > b) and (b + c > a)):\n        # Heron's formula\n        s\
    \ = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \        return round(area, 2)\n    else:\n        return -1\n\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(3, 4, 6))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(2,\
    \ 3, 4))\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2,\
    \ 10) == -1\n\nprint(\"All tests passed\")\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptb89gzxt.py\", line\
    \ 20, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmptb89gzxt.py\"\
    , line 15, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <=\
    \ c or a + c <= b or b + c <= a:\n        return -1\n    p = (a + b + c) / 2\n\
    \    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area, 2)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if s - a > 0 and s - b > 0 and s - c > 0:\n        return round(math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\n\nprint(triangle_area(2,\
    \ 3, 4))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpx_4rys.py\", line\
    \ 19, in <module>\n    print(triangle_area(2, 3, 4))\n  File \"/tmp/tmphpx_4rys.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    perim = (a\
    \ + b + c) / 2\n    if (perim - a) * (perim - b) * (perim - c) > 0:\n        return\
    \ (perim * (perim - a) * (perim - b) * (perim - c)) ** 0.5\n    else:\n      \
    \  return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu22xil4j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu22xil4j.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpu22xil4j.py\", line\
    \ 22, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Your code\
    \ here\n    pass\n \n \ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgrtt19hv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgrtt19hv.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpgrtt19hv.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    num = (a+b+c)/2\n\
    \    area = math.sqrt(num*(num-a)*(num-b)*(num-c))\n    if a+b > c and a+c > b\
    \ and b+c > a:\n        return area\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpso8q_028.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpso8q_028.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpso8q_028.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpso8q_028.py\"\
    , line 13, in triangle_area\n    area = math.sqrt(num*(num-a)*(num-b)*(num-c))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    if p - a > 0 and p - b > 0 and p - c > 0:\n        return (p *\
    \ (p - a) * (p - b) * (p - c)) ** 0.5\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0rr212j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp_0rr212j.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_0rr212j.py\", line\
    \ 21, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return\
    \ round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpsfe6_v.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzpsfe6_v.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpzpsfe6_v.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpzpsfe6_v.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Your code\
    \ here\n    pass\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmvvkgiyt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmvvkgiyt.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmvvkgiyt.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if not (a\
    \ + b > c and a + c > b and b + c > a):\n        return -1\n\n    # https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    p = (a + b + c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7di5qivg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7di5qivg.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp7di5qivg.py\", line\
    \ 23, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\
    \    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnybbot1l.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnybbot1l.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpnybbot1l.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpnybbot1l.py\"\
    , line 15, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2.0\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area\
    \ > 0:\n        return round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjqhsc02f.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpjqhsc02f.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpjqhsc02f.py\", line\
    \ 21, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpjqhsc02f.py\"\
    , line 14, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # method 1\n\
    \    if not (a + b > c and a + c > b and b + c > a):\n        return -1\n    p\
    \ = (a + b + c) / 2\n    return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\
    \n    # method 2\n    # return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\
    \ if s > 0 else -1\n    # where s = (a + b + c) / 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqjc9a_9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxqjc9a_9.py\", line 35,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpxqjc9a_9.py\", line\
    \ 24, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpxqjc9a_9.py\"\
    , line 16, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a < b +\
    \ c and b < a + c and c < a + b:\n        p = (a + b + c) / 2\n        s = (p\
    \ * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return -1\
    \ if (a + b <= c) or (a + c <= b) or (b + c <= a) else round(math.sqrt(p*(p-a)*(p-b)*(p-c)),\
    \ 2)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmwfb8m3v.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmwfb8m3v.py\", line 26,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmwfb8m3v.py\", line\
    \ 15, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpmwfb8m3v.py\"\
    , line 12, in triangle_area\n    return -1 if (a + b <= c) or (a + c <= b) or\
    \ (b + c <= a) else round(math.sqrt(p*(p-a)*(p-b)*(p-c)), 2)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    x, y, z =\
    \ sorted([a, b, c])\n    if x + y > z:\n        p = (x + y + z) / 2\n        return\
    \ (p * (p - x) * (p - y) * (p - z)) ** 0.5\n    return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36yeqbyb.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp36yeqbyb.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp36yeqbyb.py\", line\
    \ 21, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    x = a + b\n\
    \    y = b + c\n    z = a + c\n    if x < c or y < a or z < b:\n        return\
    \ -1\n    else:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s\
    \ - b) * (s - c)) ** 0.5\n        return round(area, 2)\nprint(triangle_area(1,\
    \ 2, 10))\nprint(triangle_area(5, 4, 3))\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: "-1\n6.0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1wq327n.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpv1wq327n.py\", line 36,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpv1wq327n.py\", line\
    \ 29, in check\n    assert candidate(1, 2, 3) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    from math\
    \ import sqrt\n    if a + b > c and a + c > b and b + c > a:\n        p = (a +\
    \ b + c) / 2\n        a = sqrt(p * (p - a) * (p - b) * (p - c))\n        return\
    \ round(a, 2)\n    else:\n        return -1\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    #######################################################################\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    #######################################################################\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk11v50cg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpk11v50cg.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpk11v50cg.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n \n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6yow01g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpy6yow01g.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpy6yow01g.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        return round(0.5 * (a * b), 2)\n   \
    \ else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgi04ncmf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgi04ncmf.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpgi04ncmf.py\", line\
    \ 21, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return\
    \ round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\
    \n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwugqvq16.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwugqvq16.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwugqvq16.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpwugqvq16.py\"\
    , line 14, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area =\
    \ (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    sides = [a,\
    \ b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        p =\
    \ (a + b + c) / 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c)), 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkl_fpvxc.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkl_fpvxc.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpkl_fpvxc.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpkl_fpvxc.py\"\
    , line 16, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Write your\
    \ code here\n    # Calculate and return the answer\n    s = (a + b + c) / 2\n\
    \    if (s - a) * (s - b) * (s - c) <= 0:\n        return -1\n    else:\n    \
    \    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1sfv7ik.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw1sfv7ik.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpw1sfv7ik.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpw1sfv7ik.py\"\
    , line 18, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area >\
    \ 0:\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncmbmp8x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpncmbmp8x.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpncmbmp8x.py\", line\
    \ 22, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpncmbmp8x.py\"\
    , line 14, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n       \
    \ return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95gko0q5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp95gko0q5.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp95gko0q5.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp95gko0q5.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a < 0 or\
    \ b < 0 or c < 0:\n        return -1\n    s = (a + b + c) / 2\n    if s < a or\
    \ s < b or s < c:\n        return -1\n    return math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf69_vxbe.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpf69_vxbe.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpf69_vxbe.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpf69_vxbe.py\"\
    , line 17, in triangle_area\n    return math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a+b > c\
    \ and a+c > b and b+c > a:\n        p = (a+b+c)/2\n        s = (p*(p-a)*(p-b)*(p-c))**0.5\n\
    \        return round(s, 2)\n    else:\n        return -1\n    \ntriangle_area(3,\
    \ 4, 5)\n\nassert_equal(triangle_area(1, 2, 10), -1)\nassert_equal(triangle_area(3,\
    \ 4, 5), 6.00)\nassert_equal(triangle_area(1, 1, 1), 0.43)\nassert_equal(triangle_area(2,\
    \ 3, 4), 2.90)\nassert_equal(triangle_area(5, 6, 7), 14.70)\nassert_equal(triangle_area(10,\
    \ 10, 10), 43.30)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2wjaj3t7.py\", line\
    \ 21, in <module>\n    assert_equal(triangle_area(1, 2, 10), -1)\nNameError: name\
    \ 'assert_equal' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = sorted([a,\
    \ b, c])\n    if s[0] + s[1] > s[2]:\n        return round(s[0] * s[1] / 2, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm9uutoni.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpm9uutoni.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpm9uutoni.py\", line\
    \ 22, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    ss = sorted([a,\
    \ b, c])\n    if ss[0] + ss[1] <= ss[2]:\n        return -1\n    s = (a + b +\
    \ c) / 2\n    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxpwigts.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpaxpwigts.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpaxpwigts.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpaxpwigts.py\"\
    , line 16, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # your code\
    \ here\n    if ((a+b)>c) and ((a+c)>b) and ((b+c)>a):\n        S=(a+b+c)/2\n \
    \       Area=(S*(S-a)*(S-b)*(S-c))**0.5\n        return round(Area,2)\n    else:\n\
    \        return -1\n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # solution\
    \ \n    # p = (a + b + c) / 2\n    # s = (p * (p - a) * (p - b) * (p - c)) **\
    \ 0.5\n    # return round(s, 2) if s > 0 else -1\n    sorted_sides = sorted([a,\
    \ b, c])\n    return -1 if sorted_sides[0] + sorted_sides[1] <= sorted_sides[2]\
    \ else (sum(sorted_sides) / 2) * (sum(sorted_sides) / 2 - sorted_sides[0]) * (sum(sorted_sides)\
    \ / 2 - sorted_sides[1]) * (sum(sorted_sides) / 2 - sorted_sides[2]) ** 0.5\n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpve3z6yca.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpve3z6yca.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpve3z6yca.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return float(round(0.25\
    \ * sqrt((a + b + c) * (b + c - a) * (a + c - b) * (a + b - c)), 2)) \\\n    \
    \    if all(a + b > c for a, b, c in combinations([a, b, c], 2)) else -1\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplwjst66p.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplwjst66p.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmplwjst66p.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmplwjst66p.py\"\
    , line 13, in triangle_area\n    if all(a + b > c for a, b, c in combinations([a,\
    \ b, c], 2)) else -1\nNameError: name 'combinations' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgesv8b4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmplgesv8b4.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmplgesv8b4.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmplgesv8b4.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n       \
    \ x = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(x, 2)\n \
    \   else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    if p - a <= 0 or p - b <= 0 or p - c <= 0:\n        return -1\n\
    \    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qhfbnst.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9qhfbnst.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp9qhfbnst.py\", line\
    \ 21, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n```\n\
    \n```py\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpsgxf_67x.py\", line 13\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2) if\
    \ a + b > c and a + c > b and b + c > a else -1\n\n\ndef check(candidate):\n \
    \   assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n \
    \   assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmh6vwkvd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmh6vwkvd.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpmh6vwkvd.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpmh6vwkvd.py\"\
    , line 13, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2) if a + b > c and a + c > b and b + c > a else -1\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        res = (p\
    \ * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(res, 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    ...\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0toelrk8.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0toelrk8.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp0toelrk8.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # if the longest\
    \ side is too long\n    if max(a, b, c) >= a + b + c - max(a, b, c):\n       \
    \ return -1\n    # else compute the area and return it\n    p = (a + b + c) /\
    \ 2\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n    return round(s, 2)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjnmdghw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpsjnmdghw.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpsjnmdghw.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpsjnmdghw.py\"\
    , line 17, in triangle_area\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    return -1 if max(a, b, c) >= p else math.sqrt(p * (p - a) * (p\
    \ - b) * (p - c))\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprq7b0eav.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprq7b0eav.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmprq7b0eav.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmprq7b0eav.py\"\
    , line 13, in triangle_area\n    return -1 if max(a, b, c) >= p else math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n       \
    \ area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return -1\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu820v0tt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu820v0tt.py\", line 26,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpu820v0tt.py\", line\
    \ 15, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return\
    \ round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return\
    \ -1\n    \nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpigg5rem5.py\", line\
    \ 18, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmpigg5rem5.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    semi_perimeter\
    \ = (a + b + c) / 2\n    triangle_area = sqrt(semi_perimeter * (semi_perimeter\
    \ - a) * (semi_perimeter - b) * (semi_perimeter - c))\n    if triangle_area >\
    \ 0:\n        return round(triangle_area, 2)\n    else:\n        return -1\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kzkat7w.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5kzkat7w.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp5kzkat7w.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp5kzkat7w.py\"\
    , line 13, in triangle_area\n    triangle_area = sqrt(semi_perimeter * (semi_perimeter\
    \ - a) * (semi_perimeter - b) * (semi_perimeter - c))\nNameError: name 'sqrt'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # perimeter\
    \ of the triangle\n    p = (a + b + c) / 2\n\n    # Heron's formula: https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    area = sqrt(p * (p - a) * (p - b) * (p - c))\n\n    # Return -1 if the three\
    \ sides do not form a valid triangle\n    if a + b <= c or a + c <= b or b + c\
    \ <= a:\n        return -1\n\n    return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84lqutky.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp84lqutky.py\", line 37,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp84lqutky.py\", line\
    \ 26, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp84lqutky.py\"\
    , line 16, in triangle_area\n    area = sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    if (s == 0)\
    \ or (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    return\
    \ round(s, 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # if a is\
    \ greater than b and c add b and c\n    # else if b is greater than a and c add\
    \ a and c\n    # else if c is greater than a and b add a and b\n    # else area\
    \ = -1\n    # return area\n    a, b, c = sorted([a, b, c])\n    if a + b > c:\n\
    \        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c))\
    \ ** 0.5\n        return round(area, 2)\n    return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area,\
    \ 2) if area > 0 else -1\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8,\
    \ 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2,\
    \ 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6,\
    \ 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2,\
    \ 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifu4o131.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpifu4o131.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpifu4o131.py\", line\
    \ 18, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpifu4o131.py\"\
    , line 14, in triangle_area\n    return round(area, 2) if area > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Not a triangle\
    \ if the longest side is equal to or greater than the sum of the other two\n \
    \   if max(a, b, c) >= a + b + c - max(a, b, c):\n        return -1\n    # Heron's\
    \ formula for triangle area\n    s = (a + b + c) / 2\n    return round(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8gyxomq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpi8gyxomq.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpi8gyxomq.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpi8gyxomq.py\"\
    , line 17, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    if p - a > 0 and p - b > 0 and p - c > 0:\n        return round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    return -1\n\n\nprint(triangle_area(1,\
    \ 2, 3))  # -1\nprint(triangle_area(3, 4, 5))  # 6.00\nprint(triangle_area(3,\
    \ 1, 1))  # -1\nprint(triangle_area(1, 2, 10))  # -1\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: "-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8tatc4k.py\", line\
    \ 19, in <module>\n    print(triangle_area(3, 4, 5))  # 6.00\n  File \"/tmp/tmpp8tatc4k.py\"\
    , line 14, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    sides = [a,\
    \ b, c]\n    sides.sort()\n    if sides[0] + sides[1] > sides[2]:\n        return\
    \ 0.5 * sides[0] * sides[2]\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_me8kn_x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_me8kn_x.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp_me8kn_x.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9r2_uyl3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9r2_uyl3.py\", line 25,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp9r2_uyl3.py\", line\
    \ 14, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    try:\n   \
    \     p = (a + b + c) / 2\n        A = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\
    \        return round(A, 2)\n    except:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwi851ehu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwi851ehu.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwi851ehu.py\", line\
    \ 25, in check\n    assert candidate(1, 2, 3) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Your code\
    \ here\n    return -1\nassert triangle_area(1, 2, 10) == -1\nassert triangle_area(3,\
    \ 4, 5) == 6.00\n \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkqi9_xuz.py\", line\
    \ 15, in <module>\n    assert triangle_area(3, 4, 5) == 6.00\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return\
    \ round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return\
    \ -1\n    pass\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4w1ro6a.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpt4w1ro6a.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpt4w1ro6a.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpt4w1ro6a.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n       \
    \ return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n   \
    \     return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplv63vvh4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmplv63vvh4.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmplv63vvh4.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmplv63vvh4.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if a + b\
    \ > c and a + c > b and b + c > a:\n        return round(area, 2)\n    else:\n\
    \        return -1\n\n\n@pytest.mark.parametrize(\"a, b, c, expected\", [\n  \
    \  (3, 4, 5, 6.00),\n    (1, 2, 10, -1),\n    (5, 12, 13, 30.00),\n    (6, 8,\
    \ 10, 24.00),\n    (2, 3, 2, 1.98),\n    (8, 15, 17, 60.25),\n    (3, 4, 4, -1),\n\
    \    (7, 15, 6, 27.01),\n    (5, 10, 11, -1),\n    (7, 12, 8, 26.83),\n    (4,\
    \ 4, 4, 6.93),\n    (2, 3, 4, 2.90),\n    (3, 3, 3, 3.89),\n    (2, 2, 2, 1.73),\n\
    \    (9, 9, 9, 28.74),\n    (4, 7, 5, 10.39),\n    (2, 3, 8, -1),\n    (3, 4,\
    \ 2, 2.90),\n    (2, 4, 3, 2.90),\n    (6, 8, 9, 26.83),\n    (7, 9, 6, 20.21),\n\
    \    (3, 3, 4, 3.89),\n    (5, 3, 4, 6.00),\n    (6, 8, 7, 24.00),\n    (5, 12,\
    \ 8, 30.00),\n    (8, 8, 8, 27.71),\n    (9, 12, 15, 54.00),\n    (5, 5, 5, 10.83),\n\
    \    (6, 6, 6, 13.51),\n    (2, 8, 9, -1),\n    (8, 15, 10, 60.25),\n    (4, 4,\
    \ 2, 3.89\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8mhjy9n2.py\", line 53\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    a, b, c =\
    \ sorted([a, b, c])\n    if a + b <= c:\n        return -1\n    p = (a + b + c)\
    \ / 2\n    return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9y1chcpr.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9y1chcpr.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp9y1chcpr.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp9y1chcpr.py\"\
    , line 16, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Solution:\n\
    \    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n\
    \        s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = sum([a,\
    \ b, c]) / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return\
    \ round(area, 2) if area > 0 else -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpht3hvyxi.py\", line\
    \ 18, in <module>\n    print(triangle_area(1, 2, 10))\n  File \"/tmp/tmpht3hvyxi.py\"\
    , line 14, in triangle_area\n    return round(area, 2) if area > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a < b +\
    \ c and b < a + c and c < a + b:\n        s = (a + b + c) / 2\n        return\
    \ round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ow_vgg6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6ow_vgg6.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp6ow_vgg6.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp6ow_vgg6.py\"\
    , line 14, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\nimport\
    \ math\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplvsbea0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpplvsbea0.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpplvsbea0.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2.0\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\
    \    else:\n        return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzdqr18s8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzdqr18s8.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpzdqr18s8.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpzdqr18s8.py\"\
    , line 16, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area =\
    \ (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a <= 0\
    \ or b <= 0 or c <= 0:\n        return -1\n    s = 0.5 * (a + b + c)\n    return\
    \ round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphc_39xef.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphc_39xef.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmphc_39xef.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmphc_39xef.py\"\
    , line 15, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvta0m2_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfvta0m2_.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfvta0m2_.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return round(Decimal(0.25\
    \ * sqrt((a + b + c) * (-a + b + c) * (a - b + c) * (a + b - c))), 2) \\\n   \
    \     if (a < b + c) and (b < a + c) and (c < a + b) else -1\n\n\nassert triangle_area(3,\
    \ 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1\nassert triangle_area(1,\
    \ 2, 3) == -1\nassert triangle_area(5, 4, 3) == 6.00\n\n\"\"\"\n5.\n\nWrite a\
    \ function to return the maximum of three numbers.\nExample:\nmax_of_three(1,\
    \ 0, 1) == 1\nmax_of_three(0, -1, 1) == 1\n\"\"\"\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl6z1tg44.py\", line\
    \ 16, in <module>\n    assert triangle_area(3, 4, 5) == 6.00\n  File \"/tmp/tmpl6z1tg44.py\"\
    , line 12, in triangle_area\n    return round(Decimal(0.25 * sqrt((a + b + c)\
    \ * (-a + b + c) * (a - b + c) * (a + b - c))), 2) \\\nNameError: name 'Decimal'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n       \
    \ s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n \
    \   else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if a + b\
    \ > c and a + c > b and b + c > a:\n        return round(area, 2)\n    else:\n\
    \        return -1\n\n\n@pytest.mark.parametrize(\"a, b, c, expected\", [\n  \
    \  (3, 4, 5, 6.00),\n    (1, 2, 10, -1),\n    (1, 2, 3, -1),\n    (4, 2, 1, -1),\n\
    \    (5, 2, 1, -1),\n    (3, 2, 1, -1),\n    (3, 4, 1, -1),\n    (3, 5, 1, -1),\n\
    \    (3, 6, 1, -1),\n    (3, 4, 5, 6.00),\n    (1, 2, 2, -1),\n    (4, 4, 4, 6.93),\n\
    \    (9, 9, 9, 26.83),\n    (6, 6, 6, 15.59),\n    (3, 3, 3, 4.24),\n    (7, 7,\
    \ 7, 20.22),\n    (8, 8, 8, 27.71),\n    (9, 9, 9, 26.83),\n    (10, 10, 10, 33.00),\n\
    \    (11, 11, 11, 40.01),\n    (12, 12, 12, 46.55),\n    (13, 13, 13, 53.52),\n\
    \    (14, 14, 14, 60.93),\n    (15, 15, 15, 68.78),\n    (16, 16, 16, 77.09),\n\
    \    (17, 17, 17, 85.85),\n    (18, 18, 18, 95.08),\n    (19, 19, 19, 104.78),\n\
    \    (20, 20, 20, 114.97),\n    (21, 21, 21, 125.65),\n    (22, 22, 22, 136.84),\n\
    \    (23, 23, 23, 148.55),\n    (\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4cwe8wie.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if not(a+b>c\
    \ and a+c>b and b+c>a):\n        return -1\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl02tla54.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpl02tla54.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpl02tla54.py\", line\
    \ 21, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area <=\
    \ 0:\n        return -1\n    return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt66toerp.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt66toerp.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpt66toerp.py\", line\
    \ 21, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpt66toerp.py\"\
    , line 14, in triangle_area\n    if area <= 0:\nTypeError: '<=' not supported\
    \ between instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area =\
    \ (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # fill in\
    \ code here\n    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4cm19m3f.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4cm19m3f.py\", line 26,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp4cm19m3f.py\", line\
    \ 15, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    a = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\n    if a > 0:\n\
    \        return round(a, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0csgxj7q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0csgxj7q.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp0csgxj7q.py\", line\
    \ 22, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp0csgxj7q.py\"\
    , line 13, in triangle_area\n    a = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Write your\
    \ code here\n    if a + b > c and a + c > b and b + c > a:\n        p = (a + b\
    \ + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return\
    \ round(area, 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n  \
    \  assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # your code\
    \ here\n    p = (a + b + c) / 2\n    s = p * (p - a) * (p - b) * (p - c)\n   \
    \ if s <= 0:\n        return -1\n    return round(math.sqrt(s), 2)\n \nprint(triangle_area(3,\
    \ 4, 5) == 6.00)\nprint(triangle_area(1, 2, 10) == -1)\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1iwh__97.py\", line\
    \ 19, in <module>\n    print(triangle_area(3, 4, 5) == 6.00)\n  File \"/tmp/tmp1iwh__97.py\"\
    , line 17, in triangle_area\n    return round(math.sqrt(s), 2)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Your code\
    \ here\n    if not(a+b > c) or not(a+c > b) or not(b+c > a):\n        return -1\n\
    \    p = (a+b+c)/2\n    return (p*(p-a)*(p-b)*(p-c))**0.5\n    # return a*b*c/2\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn73g2ipu.py\", line\
    \ 244, in <module>\n    test_check()\n  File \"/tmp/tmpn73g2ipu.py\", line 242,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpn73g2ipu.py\", line\
    \ 233, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # If a side\
    \ is longer than the sum of the other two, return -1\n    if a + b < c or a +\
    \ c < b or b + c < a:\n        return -1\n    # The formula for the area of a\
    \ triangle is the square root of half \n    # the product of the sum of the squares\
    \ of the three sides and the \n    # difference of the three sides\n    return\
    \ round(((a + b + c) * (b + c - a) * (a + c - b) * (a + b - c)) ** 0.5 / 4, 2)\n\
    \    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvlbkt6c6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpvlbkt6c6.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpvlbkt6c6.py\", line\
    \ 26, in check\n    assert candidate(1, 2, 3) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    if (p - a) * (p - b) * (p - c) > 0:\n        return (p * (p -\
    \ a) * (p - b) * (p - c)) ** 0.5\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpunpm703c.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpunpm703c.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpunpm703c.py\", line\
    \ 22, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # use built-in\
    \ max to find the longest side\n    if max(a, b, c) < a + b + c - max(a, b, c):\n\
    \        return (a + b + c) / 2 - max(a, b, c)\n    else:\n        return -1\n\
    \n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1\n\
    assert triangle_area(10, 20, 10) == 90.00\nprint(\"Passed\")\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1zb_i4_9.py\", line\
    \ 19, in <module>\n    assert triangle_area(3, 4, 5) == 6.00\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2.0\n    if s - a > 0 and s - b > 0 and s - c > 0:\n        a = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n        return round(a, 2)\n    else:\n    \
    \    return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezjbbfd_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpezjbbfd_.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpezjbbfd_.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpezjbbfd_.py\"\
    , line 14, in triangle_area\n    a = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area >\
    \ 0:\n        return round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxebguny.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqxebguny.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpqxebguny.py\", line\
    \ 21, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpqxebguny.py\"\
    , line 14, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area >\
    \ 0:\n        return round(area, 2)\n    else:\n        return -1\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9qdspxf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo9qdspxf.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpo9qdspxf.py\", line\
    \ 20, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpo9qdspxf.py\"\
    , line 14, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area,\
    \ 2) if area > 0 else -1\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8,\
    \ 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2,\
    \ 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6,\
    \ 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2,\
    \ 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlpq46br.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprlpq46br.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmprlpq46br.py\", line\
    \ 19, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmprlpq46br.py\"\
    , line 14, in triangle_area\n    return round(area, 2) if area > 0 else -1\nTypeError:\
    \ '>' not supported between instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    sides = [a,\
    \ b, c]\n    sides.sort()\n    side_a, side_b, side_c = sides\n    if side_a +\
    \ side_b <= side_c:\n        return -1\n    semi_perimeter = sum(sides) / 2\n\
    \    area = sqrt(semi_perimeter * (semi_perimeter - side_a) * (semi_perimeter\
    \ - side_b) * (semi_perimeter - side_c))\n    return round(area, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwi7_g7e0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwi7_g7e0.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpwi7_g7e0.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpwi7_g7e0.py\"\
    , line 18, in triangle_area\n    area = sqrt(semi_perimeter * (semi_perimeter\
    \ - side_a) * (semi_perimeter - side_b) * (semi_perimeter - side_c))\nNameError:\
    \ name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n```\n\
    \nAn example of passing tests:\n\n```python\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpaj2e0r2w.py\", line 13\n    ```\n    ^\nSyntaxError: invalid\
    \ syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area =\
    \ (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n   \
    \ # YOUR CODE HERE\n    sides_list = [a, b, c]\n    sides_list.sort()\n    if\
    \ sides_list[0] + sides_list[1] > sides_list[2]:\n        return round(0.5 * math.sqrt(sides_list[0]\
    \ * sides_list[1] * (sides_list[0] + sides_list[1] - sides_list[2]) * (sides_list[0]\
    \ + sides_list[2] - sides_list[1])), 2)\n    else:\n        return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmptmc2e.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxmptmc2e.py\", line 34,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpxmptmc2e.py\", line\
    \ 23, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpxmptmc2e.py\"\
    , line 17, in triangle_area\n    return round(0.5 * math.sqrt(sides_list[0] *\
    \ sides_list[1] * (sides_list[0] + sides_list[1] - sides_list[2]) * (sides_list[0]\
    \ + sides_list[2] - sides_list[1])), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return -1\
    \ if not is_triangle(a, b, c) else round(sqrt(p * (p - a) * (p - b) * (p - c)),\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaookbxi2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaookbxi2.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpaookbxi2.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpaookbxi2.py\"\
    , line 12, in triangle_area\n    return -1 if not is_triangle(a, b, c) else round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\nNameError: name 'is_triangle' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if is_triangle(a,\
    \ b, c):\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s -\
    \ a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdrep0z9z.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdrep0z9z.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpdrep0z9z.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpdrep0z9z.py\"\
    , line 12, in triangle_area\n    if is_triangle(a, b, c):\nNameError: name 'is_triangle'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl9x3xd_j.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpl9x3xd_j.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpl9x3xd_j.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        return round(s, 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp464_9mvo.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp464_9mvo.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp464_9mvo.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp464_9mvo.py\"\
    , line 13, in triangle_area\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if not ((a+b)\
    \ > c and (a+c) > b and (b+c) > a):\n        return -1\n    per = (a+b+c)/2\n\
    \    return sqrt(per*(per-a)*(per-b)*(per-c))\n\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n   \
    \ assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n \
    \   assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr5v0kkxt.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpr5v0kkxt.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpr5v0kkxt.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpr5v0kkxt.py\"\
    , line 15, in triangle_area\n    return sqrt(per*(per-a)*(per-b)*(per-c))\nNameError:\
    \ name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n \n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptttcrvl0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptttcrvl0.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptttcrvl0.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b <=\
    \ c or a + c <= b or b + c <= a:\n        return -1\n    else:\n        p = (a\
    \ + b + c) / 2\n        s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n       \
    \ return round(s, 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return\
    \ round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfi3k7sff.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfi3k7sff.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfi3k7sff.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpfi3k7sff.py\"\
    , line 14, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n       \
    \ s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n \
    \   else:\n        return -1\n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area >\
    \ 0:\n        return round(area, 2)\n    else:\n        return -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz3z2_1xl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpz3z2_1xl.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpz3z2_1xl.py\", line\
    \ 21, in check\n    assert candidate(1, 2, 10) == -1\n  File \"/tmp/tmpz3z2_1xl.py\"\
    , line 14, in triangle_area\n    if area > 0:\nTypeError: '>' not supported between\
    \ instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Your code\
    \ here\n    return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfif1khct.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfif1khct.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfif1khct.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    x = s * (s - a) * (s - b) * (s - c)\n    if x < 0:\n        return\
    \ -1\n    else:\n        return round(math.sqrt(x), 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ed90zyt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7ed90zyt.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp7ed90zyt.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp7ed90zyt.py\"\
    , line 17, in triangle_area\n    return round(math.sqrt(x), 2)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfvqasvd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnfvqasvd.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpnfvqasvd.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpzz71y1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptpzz71y1.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptpzz71y1.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # replace\
    \ return None with your solution\n    s = (a + b + c) / 2\n    if a < 0 or b <\
    \ 0 or c < 0:\n        return -1\n    elif (a < b + c) and (b < a + c) and (c\
    \ < a + b):\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n\
    \        return -1\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuu2ov8gp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuu2ov8gp.py\", line 33,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpuu2ov8gp.py\", line\
    \ 24, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # assert triangle_area(3,\
    \ 4, 5) == 6.00\n    # assert triangle_area(1, 2, 10) == -1\n    # assert triangle_area(3,\
    \ 4, -5) == -1\n    # assert triangle_area(0, 4, 5) == -1\n    # assert triangle_area(1,\
    \ 1, 2) == -1\n    # assert triangle_area(1, 2, 1) == -1\n    # assert triangle_area(2,\
    \ 1, 1) == -1\n    # assert triangle_area(2, 5, 8) == -1\n    # assert triangle_area(4,\
    \ 2, 6) == -1\n    # assert triangle_area(7, 6, 5) == -1\n    # assert triangle_area(6,\
    \ 7, 5) == -1\n    # assert triangle_area(5, 6, 7) == -1\n    # assert triangle_area(5,\
    \ 5, 5) == -1\n    # assert triangle_area(13, 13, 13) == -1\n    # assert triangle_area(99,\
    \ 20, 97) == -1\n    # assert triangle_area(100, 100, 10) == -1\n    # assert\
    \ triangle_area(100, 50, 30) == -1\n    # assert triangle_area(100, 50, 40) ==\
    \ -1\n    # assert triangle_area(70, 40, 30) == -1\n    # assert triangle_area(60,\
    \ 60, 60) == -1\n    # assert triangle_area(80, 80, 80) == -1\n    # assert triangle_area(90,\
    \ 90, 90) == -1\n    # assert triangle_area(70, 80, 90) == -1\n    # assert triangle_area(30,\
    \ 40, 50) == 600.00\n    # assert triangle_area(0, 0, 0) == -1\n    # assert triangle_area(1,\
    \ 1, 1) == 0.43\n    # assert triangle_area(300, 400, 500) == 600.00\n    # assert\
    \ triangle_area(1000, 1, 1) == -1\n    # assert triangle_area(1, 1000, 1) == -1\n\
    \    # assert triangle_area(1, 1, 1000)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi2sv2e6d.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpi2sv2e6d.py\", line 54,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpi2sv2e6d.py\", line\
    \ 43, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # Your code\
    \ here:\n    import math\n    if a+b>c and a+c>b and b+c>a:\n        s=(a+b+c)/2\n\
    \        area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n        return round(area,2)\n \
    \   else:\n        return -1\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    try:\n   \
    \     s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) **\
    \ 0.5\n        return round(area, 2)\n    except:\n        return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpckdcvcj4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpckdcvcj4.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpckdcvcj4.py\", line\
    \ 25, in check\n    assert candidate(1, 2, 3) == -1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a+b>c and\
    \ a+c>b and b+c>a:\n        p = (a+b+c)/2\n        return (p*(p-a)*(p-b)*(p-c))**0.5\n\
    \    else:\n        return -1\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rzkf98r.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp0rzkf98r.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp0rzkf98r.py\", line\
    \ 22, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2) if\
    \ a + b > c else -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq3je6i42.py\", line\
    \ 16, in <module>\n    print(triangle_area(3, 4, 5))\n  File \"/tmp/tmpq3je6i42.py\"\
    , line 13, in triangle_area\n    return round(math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c)), 2) if a + b > c else -1\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        triangle_area\
    \ = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(triangle_area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if a + b\
    \ > c and a + c > b and b + c > a:\n        return float('{:.2f}'.format(area))\n\
    \    else:\n        return -1\n\nprint(triangle_area(1, 2, 10))\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: "-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # TODO\n \
    \   return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpklpcj7gy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpklpcj7gy.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpklpcj7gy.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area =\
    \ (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    sides = sorted([a,\
    \ b, c])\n    if sides[0] + sides[1] > sides[2]:\n        p = sum(sides) / 2\n\
    \        return round(sqrt(p * (p - sides[0]) * (p - sides[1]) * (p - sides[2])),\
    \ 2)\n    return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5)\
    \ == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3)\
    \ == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3)\
    \ == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10)\
    \ == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfuyl11p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptfuyl11p.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptfuyl11p.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmptfuyl11p.py\"\
    , line 15, in triangle_area\n    return round(sqrt(p * (p - sides[0]) * (p - sides[1])\
    \ * (p - sides[2])), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # [my solution]\n\
    \    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n\
    \        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n    # [best solution]\n    if a + b > c\
    \ and a + c > b and b + c > a:\n        return round(1/4 * (a + b + c) * (1/2\
    \ * (a + b + c) - a) * (1/2 * (a + b + c) - b) * (1/2 * (a + b + c) - c), 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if ((a + b)\
    \ > c) and ((a + c) > b) and ((b + c) > a):\n        s = 0.5 * (a + b + c)\n \
    \       area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    t = sorted([a,\
    \ b, c])\n    if t[0] + t[1] > t[2]:\n        return round(t[0] * t[1] / 2, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxcxpnf94.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxcxpnf94.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpxcxpnf94.py\", line\
    \ 22, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # your code\
    \ here\n    max_side = max(a, b, c)\n    if max_side < a + b + c - max_side:\n\
    \        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c))\
    \ ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b\
    \ > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n       \
    \ area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    # raise NotImplementedError(\"\
    Please implement the triangle_area function\")\n    if (a + b > c) and (a + c\
    \ > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s -\
    \ a) * (s - b) * (s - c)) ** 0.5\n        area = round(area, 2)\n        return\
    \ area\n    else:\n        return -1\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n \
    \   assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: "6.0\n-1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    if a < s and b < s and c < s:\n        return sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n    return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qpoq4el.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1qpoq4el.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp1qpoq4el.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp1qpoq4el.py\"\
    , line 14, in triangle_area\n    return sqrt(s * (s - a) * (s - b) * (s - c))\n\
    NameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return\
    \ round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4t8lhdn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpd4t8lhdn.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpd4t8lhdn.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpd4t8lhdn.py\"\
    , line 14, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrhyjaj0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfrhyjaj0.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpfrhyjaj0.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area <\
    \ 0:\n        return -1\n    return round(area, 2)\n\nassert triangle_area(3,\
    \ 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1\nassert triangle_area(3,\
    \ 4, 4) == 3.89\nassert triangle_area(7, 12, 8) == 30.00\nassert triangle_area(3,\
    \ 4, 5) == 6.00\nassert triangle_area(7, 8, 9) == 26.83\nassert triangle_area(7,\
    \ 12, 8) == 30.00\nassert triangle_area(7, 12, 5) == -1\nassert triangle_area(7,\
    \ 7, 7) == 15.58\nassert triangle_area(3, 4, 4) == 3.89\nassert triangle_area(5,\
    \ 7, 5) == 12.00\nassert triangle_area(5, 7, 4) == -1\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29j_1xca.py\", line\
    \ 19, in <module>\n    assert triangle_area(1, 2, 10) == -1\n  File \"/tmp/tmp29j_1xca.py\"\
    , line 14, in triangle_area\n    if area < 0:\nTypeError: '<' not supported between\
    \ instances of 'complex' and 'int'\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    return -1 if s - a <= 0 or s - b <= 0 or s - c <= 0 else round(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6zjhgaa.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmps6zjhgaa.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmps6zjhgaa.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmps6zjhgaa.py\"\
    , line 13, in triangle_area\n    return -1 if s - a <= 0 or s - b <= 0 or s -\
    \ c <= 0 else round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\nNameError: name\
    \ 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8x3cleqp.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8x3cleqp.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp8x3cleqp.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    def is_valid_triangle(a,\
    \ b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    if is_valid_triangle(a,\
    \ b, c):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) *\
    \ (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = 0.5 *\
    \ (a + b + c)\n    if (s - a) * (s - b) * (s - c) <= 0:\n        return -1\n \
    \   else:\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9x0cba67.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9x0cba67.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp9x0cba67.py\", line\
    \ 22, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_589ww9.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi_589ww9.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpi_589ww9.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    p = (a + b\
    \ + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n        area = sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n    else:\n \
    \       return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt74wlbci.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpt74wlbci.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpt74wlbci.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpt74wlbci.py\"\
    , line 14, in triangle_area\n    area = sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    return -1\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vha9n6z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5vha9n6z.py\", line 26,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp5vha9n6z.py\", line\
    \ 15, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if is_triangle(a,\
    \ b, c):\n        p = (a + b + c) / 2\n        area = math.sqrt(p * (p - a) *\
    \ (p - b) * (p - c))\n        return round(area, 2)\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2fpttrj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpv2fpttrj.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpv2fpttrj.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpv2fpttrj.py\"\
    , line 12, in triangle_area\n    if is_triangle(a, b, c):\nNameError: name 'is_triangle'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return\
    \ (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu9s4jemh.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpu9s4jemh.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpu9s4jemh.py\", line\
    \ 21, in check\n    assert candidate(4, 8, 5) == 8.18\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a+b<=c\
    \ or a+c<=b or b+c<=a:\n        return -1\n    p = (a+b+c)/2\n    return round(sqrt(p*(p-a)*(p-b)*(p-c)),2)\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprx8qha8d.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprx8qha8d.py\", line 28,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmprx8qha8d.py\", line\
    \ 17, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmprx8qha8d.py\"\
    , line 15, in triangle_area\n    return round(sqrt(p*(p-a)*(p-b)*(p-c)),2)\nNameError:\
    \ name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if not is_triangle(a,\
    \ b, c):\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a)\
    \ * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n\
    \    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n\
    \    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n\
    \    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n\
    \    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcwae71yf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpcwae71yf.py\", line 30,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpcwae71yf.py\", line\
    \ 19, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpcwae71yf.py\"\
    , line 12, in triangle_area\n    if not is_triangle(a, b, c):\nNameError: name\
    \ 'is_triangle' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    arr = [a,\
    \ b, c]\n    arr.sort()\n    if arr[0] + arr[1] > arr[2]:\n        return round(math.sqrt(arr[2]\
    \ * (arr[2] - arr[0]) * (arr[2] - arr[1]) * (arr[2] - arr[0])), 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_bwf6qu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpw_bwf6qu.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpw_bwf6qu.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpw_bwf6qu.py\"\
    , line 15, in triangle_area\n    return round(math.sqrt(arr[2] * (arr[2] - arr[0])\
    \ * (arr[2] - arr[1]) * (arr[2] - arr[0])), 2)\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return\
    \ round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return\
    \ -1\n\n\n@pytest.mark.parametrize(\"a, b, c, result\",\n                    \
    \     [\n                             (3, 4, 5, 6.00),\n                     \
    \        (1, 2, 10, -1),\n                             (1, 1, 1, 0.43),\n    \
    \                         (0, 0, 0, -1),\n                             (4, 6,\
    \ 3, 5.33),\n                             (1, 1, 2, -1),\n                   \
    \          (5, 4, 3, 6.00),\n                             (10, 10, 10, 43.30),\n\
    \                             (1, 2, 1, -1),\n                             (2,\
    \ 3, 1, -1),\n                             (3, 4, 1, -1),\n                  \
    \           (4, 5, 1, -1),\n                             (5, 6, 1, -1),\n    \
    \                         (6, 7, 1, -1),\n                             (7, 8,\
    \ 1, -1),\n                             (8, 9, 1, -1),\n                     \
    \        (9, 10, 1, -1),\n                             (10, 11, 1, -1),\n    \
    \                         (11, 12, 1, -1),\n                             (12,\
    \ 13, 1, -1),\n                             (13, 14, 1, -1),\n               \
    \              (14, 15, 1, -1),\n                             (15, 16, 1, -1),\n\
    \                             (16, 17, 1, -1),\n                             (17,\
    \ 18, 1, -1),\n                             (18, 19, 1, -1),\n               \
    \              (19, 20, 1, -1),\n                             (20, 21, 1, -1),\n\
    \                             (21, 22, 1, -1),\n                             (22,\
    \ 23, 1, -1),\n                             (23, 24, 1, -1),\n               \
    \              (24,\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n\
    \    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n\
    \    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n\
    \    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\
    \    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\
    \ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpve2_9xbt.py\", line 53\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplp4cceeh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplp4cceeh.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmplp4cceeh.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        s = (p\
    \ * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n    else:\n\
    \        return -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) ==\
    \ 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) ==\
    \ -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) ==\
    \ -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) ==\
    \ -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area =\
    \ (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if (a + b)\
    \ > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n        s\
    \ = math.sqrt(p * (p - a) * (p - b) * (p - c))\n        return float(format(s,\
    \ '.2f'))\n    else:\n        return -1\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert\
    \ candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert\
    \ candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert\
    \ candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert\
    \ candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2r8yymhz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2r8yymhz.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp2r8yymhz.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp2r8yymhz.py\"\
    , line 14, in triangle_area\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    a, b, c =\
    \ sorted([a, b, c])\n    if a + b <= c:\n        return -1\n    p = (a + b + c)\
    \ / 2\n    area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area,\
    \ 2)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppf84st9x.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppf84st9x.py\", line 26,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmppf84st9x.py\", line\
    \ 15, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    sides = [a,\
    \ b, c]\n    if max(sides) >= sum(sides) - max(sides):\n        return -1\n\n\
    \    p = sum(sides) / 2\n    return round(sqrt(p * (p - a) * (p - b) * (p - c)),\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ar1o9qv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4ar1o9qv.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp4ar1o9qv.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmp4ar1o9qv.py\"\
    , line 17, in triangle_area\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2.0\n    if (s - a > 0) and (s - b > 0) and (s - c > 0):\n        area\
    \ = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgbzxfuz0.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgbzxfuz0.py\", line 32,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpgbzxfuz0.py\", line\
    \ 21, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpgbzxfuz0.py\"\
    , line 14, in triangle_area\n    area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return\
    \ round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdm5aq3fr.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdm5aq3fr.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpdm5aq3fr.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpdm5aq3fr.py\"\
    , line 14, in triangle_area\n    return round(sqrt(s * (s - a) * (s - b) * (s\
    \ - c)), 2)\nNameError: name 'sqrt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area =\
    \ (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == 6.0\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4,\
    \ 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1,\
    \ 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2,\
    \ 6, 3) == -1\n    assert candidate(1, 1, 1) == 0.43\n    assert candidate(2,\
    \ 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7sdtojqh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7sdtojqh.py\", line 26,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmp7sdtojqh.py\", line\
    \ 15, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjr8judy.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmppjr8judy.py\", line 27,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmppjr8judy.py\", line\
    \ 16, in check\n    assert candidate(3, 4, 5) == 6.0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    s = (a + b\
    \ + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area,\
    \ 2) if all(a + b > c for a, b, c in combinations([a, b, c], 2)) else -1\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
    \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2,\
    \ 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10,\
    \ 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1,\
    \ 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n \
    \   check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpfm17p_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmptpfm17p_.py\", line 29,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmptpfm17p_.py\", line\
    \ 18, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmptpfm17p_.py\"\
    , line 14, in triangle_area\n    return round(area, 2) if all(a + b > c for a,\
    \ b, c in combinations([a, b, c], 2)) else -1\nNameError: name 'combinations'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
    \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
    \ rounded to 2 decimal points if the three sides form a valid triangle. \n   \
    \ Otherwise return -1\n    Three sides make a valid triangle when the sum of any\
    \ two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3,\
    \ 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        return\
    \ round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return\
    \ -1\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert\
    \ candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert\
    \ candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert\
    \ candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert\
    \ candidate(1, 1, 1) == 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n\
    \    check(triangle_area)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgryypj26.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpgryypj26.py\", line 31,\
    \ in test_check\n    check(triangle_area)\n  File \"/tmp/tmpgryypj26.py\", line\
    \ 20, in check\n    assert candidate(3, 4, 5) == 6.0\n  File \"/tmp/tmpgryypj26.py\"\
    , line 14, in triangle_area\n    return round(math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c)), 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
