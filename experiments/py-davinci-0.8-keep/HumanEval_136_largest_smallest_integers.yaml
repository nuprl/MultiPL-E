name: HumanEval_136_largest_smallest_integers
language: py
prompt: "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst:\
  \ List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function\
  \ that returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
  \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
  \ no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2,\
  \ 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n\
  \    largest_smallest_integers([0]) == (None, None)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None,\
  \ 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1,\
  \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) ==\
  \ (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert\
  \ candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n   \
  \ assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3,\
  \ -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n\
  \    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\ndef test_check():\n\
  \    check(largest_smallest_integers)\n\ntest_check()\n"
completions: ["    largest_neg = None\n    smallest_pos = None\n    for num in lst:\n\
    \        if num < 0:\n            if largest_neg is None or num > largest_neg:\n\
    \                largest_neg = num\n        elif num > 0:\n            if smallest_pos\
    \ is None or num < smallest_pos:\n                smallest_pos = num\n    return\
    \ (largest_neg, smallest_pos)\n\nassert largest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7]) == (None, 1)\nassert largest_smallest_integers([]) == (None, None)\n\
    assert largest_smallest_integers([0]) == (None, None)\nassert largest_smallest_integers([-3,\
    \ -4, -5, -6, 7, 8, 9]) == (-3, 7)\nassert largest_smallest_integers([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9]) == (None, 1)\nassert largest_smallest_integers([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9]) == (-1, None)\nassert largest_smallest_integers([-3,\
    \ -4, -5, -6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == (-3, 1)\nprint(\"Passed!\"\
    )", "    # Your code here\n    maximum = -(float('inf'))\n    minimum = float('inf')\n\
    \    minimum_is_set = False\n    maximum_is_set = False\n    for i in lst:\n \
    \       if i > 0:\n            if not minimum_is_set:\n                minimum\
    \ = i\n                minimum_is_set = True\n            elif i < minimum:\n\
    \                minimum = i\n        if i < 0:\n            if not maximum_is_set:\n\
    \                maximum = i\n                maximum_is_set = True\n        \
    \    elif i > maximum:\n                maximum = i\n    return (maximum, minimum)\n\
    \n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\n\
    print(largest_smallest_integers([0]))", "    return (None, None)\n", "    pass\n\
    \n", "    largest_negative, smallest_positive = None, None\n    for integer in\
    \ lst:\n        if integer < 0:\n            if largest_negative is None or integer\
    \ > largest_negative:\n                largest_negative = integer\n        elif\
    \ integer > 0:\n            if smallest_positive is None or integer < smallest_positive:\n\
    \                smallest_positive = integer\n    return (largest_negative, smallest_positive)",
  "    max_negative = None\n    min_positive = None\n    for num in lst:\n       \
    \ if num < 0:\n            if max_negative is None or num > max_negative:\n  \
    \              max_negative = num\n        elif num > 0:\n            if min_positive\
    \ is None or num < min_positive:\n                min_positive = num\n    return\
    \ (max_negative, min_positive)\n", "    if lst == []:\n        return (None, None)\n\
    \    if lst == [0]:\n        return (None, None)\n    elif sum(1 for x in lst\
    \ if x > 0) > sum(1 for x in lst if x < 0):\n        return (max(x for x in lst\
    \ if x < 0), min(x for x in lst if x > 0))\n    elif sum(1 for x in lst if x >\
    \ 0) < sum(1 for x in lst if x < 0):\n        return (max(x for x in lst if x\
    \ < 0), min(x for x in lst if x > 0))\n    else:\n        return (None, None)\n",
  "    if len(lst) == 0:\n        return (None, None)\n    neg_int_lst = []\n    pos_int_lst\
    \ = []\n    for element in lst:\n        if element < 0:\n            neg_int_lst.append(element)\n\
    \        elif element > 0:\n            pos_int_lst.append(element)\n    if len(neg_int_lst)\
    \ == 0:\n        neg_int_lst.append(None)\n    if len(pos_int_lst) == 0:\n   \
    \     pos_int_lst.append(None)\n    return (max(neg_int_lst), min(pos_int_lst))\n",
  "    biggest_negative = min(filter(lambda x: x < 0, lst)) if any(filter(lambda x:\
    \ x < 0, lst)) else None\n    smallest_positive = max(filter(lambda x: x > 0,\
    \ lst)) if any(filter(lambda x: x > 0, lst)) else None\n    return (biggest_negative,\
    \ smallest_positive)", "    max_neg = None\n    min_pos = None\n    for elem in\
    \ lst:\n        if elem < 0:\n            if max_neg is None or elem > max_neg:\n\
    \                max_neg = elem\n        elif elem > 0:\n            if min_pos\
    \ is None or elem < min_pos:\n                min_pos = elem\n    return (max_neg,\
    \ min_pos)", "    #return (None, None)\n    pass\n\n", '    pass', "    pass\n",
  "    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n   \
    \     if lst[0] == 0:\n            return (None, None)\n        if lst[0] > 0:\n\
    \            return (None, lst[0])\n        else:\n            return (lst[0],\
    \ None)\n    else:\n        if max(lst) <= 0:\n            return (max(lst), None)\n\
    \        if min(lst) >= 0:\n            return (None, min(lst))\n        else:\n\
    \            return (max([l for l in lst if l <= 0]), min([l for l in lst if l\
    \ >= 0]))\n\nlargest_smallest_integers([2, 4, 1, 3, 5, 7])\n", "    largest =\
    \ None\n    smallest = None\n    for x in lst:\n        if x < 0:\n          \
    \  if largest is None or x > largest:\n                largest = x\n        elif\
    \ x > 0:\n            if smallest is None or x < smallest:\n                smallest\
    \ = x\n    return (largest, smallest)\n\nlst = [-2, 3, 5, -9, -6, 1, 4, -1, -5,\
    \ -7, 7, 6, 8, 0]\nprint(largest_smallest_integers(lst))", "    pass\n\n", " \
    \   smallest_pos = None\n    largest_neg = None\n    for n in lst:\n        if\
    \ n < 0:\n            if largest_neg is None or n > largest_neg:\n           \
    \     largest_neg = n\n        elif n > 0:\n            if smallest_pos is None\
    \ or n < smallest_pos:\n                smallest_pos = n\n    return (largest_neg,\
    \ smallest_pos)\n", "    min_positive = None\n    max_negative = None\n    if\
    \ len(lst) == 0:\n        return (None, None)\n    for i in lst:\n        if i\
    \ > 0:\n            if not min_positive:\n                min_positive = i\n \
    \           else:\n                min_positive = min(min_positive, i)\n     \
    \   elif i < 0:\n            if not max_negative:\n                max_negative\
    \ = i\n            else:\n                max_negative = max(max_negative, i)\n\
    \    return (max_negative, min_positive)\n\n", "    # your code here\n    return\
    \ None, None\n\n", "    neg_lst = [neg for neg in lst if neg < 0]\n    pos_lst\
    \ = [pos for pos in lst if pos > 0]\n    return (max(neg_lst) if neg_lst else\
    \ None, min(pos_lst) if pos_lst else None)\n\nprint(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))",
  "    # TODO: your code here\n    pass\n", "    largest_neg_num = None\n    smallest_pos_num\
    \ = None\n    for i in lst:\n        if i < 0:\n            if largest_neg_num\
    \ == None:\n                largest_neg_num = i\n            elif i > largest_neg_num:\n\
    \                largest_neg_num = i\n        elif i > 0:\n            if smallest_pos_num\
    \ == None:\n                smallest_pos_num = i\n            elif i < smallest_pos_num:\n\
    \                smallest_pos_num = i\n    return (largest_neg_num, smallest_pos_num)",
  "    if len(lst) == 0:\n        return (None, None)\n    min_positive = None\n \
    \   max_negative = None\n    for num in lst:\n        if num < 0:\n          \
    \  if max_negative is None or num > max_negative:\n                max_negative\
    \ = num\n        elif num > 0:\n            if min_positive is None or num < min_positive:\n\
    \                min_positive = num\n    return (max_negative, min_positive)\n\
    \nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\n\
    print(largest_smallest_integers([0]))", "    return ((max(x for x in lst if x\
    \ < 0)) if any(x < 0 for x in lst) else None,\n            (min(x for x in lst\
    \ if x > 0)) if any(x > 0 for x in lst) else None)\n\n\"\"\"\nSolution 2\n\"\"\
    \"\n", "    pos = None\n    neg = None\n    for i in lst:\n        if i > 0:\n\
    \            if pos is None:\n                pos = i\n            else:\n   \
    \             pos = min(pos, i)\n        elif i < 0:\n            if neg is None:\n\
    \                neg = i\n            else:\n                neg = max(neg, i)\n\
    \    return neg, pos\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))",
  "    return None, None\n", "    pass\n\n\n", "    largest = None\n    smallest =\
    \ None\n    for i in lst:\n        if i < 0:\n            if largest is None or\
    \ i > largest:\n                largest = i\n        elif i > 0:\n           \
    \ if smallest is None or i < smallest:\n                smallest = i\n    return\
    \ (largest, smallest)\n", "    pass\n", "    positive_int = positive_int_min =\
    \ positive_int_max = None\n    negative_int = negative_int_min = negative_int_max\
    \ = None\n    for n in lst:\n        if n < 0:\n            negative_int = True\n\
    \            if n > negative_int_max:\n                negative_int_max = n\n\
    \            if n < negative_int_min or negative_int_min is None:\n          \
    \      negative_int_min = n\n        elif n > 0:\n            positive_int = True\n\
    \            if n < positive_int_min or positive_int_min is None:\n          \
    \      positive_int_min = n\n            if n > positive_int_max:\n          \
    \      positive_int_max = n\n    return (negative_int_min, positive_int_max)\n\
    \    return \n\n\n", '    return None, None', "    if not lst:\n        return\
    \ (None, None)\n    negatives = filter(lambda x: x < 0, lst)\n    positives =\
    \ filter(lambda x: x > 0, lst)\n    largest_neg = max(negatives) if negatives\
    \ else None\n    smallest_pos = min(positives) if positives else None\n    return\
    \ (largest_neg, smallest_pos)", "    # Your code here\n    largest_neg = 0\n \
    \   largest_pos = 0\n    for num in lst:\n        if num > 0:\n            if\
    \ num < largest_pos:\n                largest_pos = num\n        else:\n     \
    \       if num > largest_neg:\n                largest_neg = num\n    return (largest_neg,\
    \ largest_pos)\n\n", '    return (None, None)', "    pass\n\n", "    pass\n",
  "    negs = [n for n in lst if n < 0]\n    pos = [n for n in lst if n > 0]\n   \
    \ return max(negs) if negs else None, min(pos) if pos else None\n", '    pass',
  "    return (None, None)\n", "    return (max((x for x in lst if x < 0), default=None),\n\
    \            min((x for x in lst if x > 0), default=None))", "    pos = []\n \
    \   neg = []\n    for num in lst:\n        if num < 0:\n            neg.append(num)\n\
    \        elif num > 0:\n            pos.append(num)\n    if len(pos) == 0:\n \
    \       small = None\n    else:\n        small = min(pos)\n    if len(neg) ==\
    \ 0:\n        large = None\n    else:\n        large = max(neg)\n    return (large,\
    \ small)", "    largest_negative, smallest_positive = (None, None)\n    for num\
    \ in lst:\n        if num < 0:\n            if largest_negative is None or num\
    \ > largest_negative:\n                largest_negative = num\n        elif num\
    \ > 0:\n            if smallest_positive is None or num < smallest_positive:\n\
    \                smallest_positive = num\n    return (largest_negative, smallest_positive)\n\
    \nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))", '    return (None, None)',
  "    largest = None\n    smallest = None\n    for number in lst:\n        if number\
    \ > 0:\n            if not smallest or number < smallest:\n                smallest\
    \ = number\n        elif number < 0:\n            if not largest or number > largest:\n\
    \                largest = number\n    return (largest, smallest)\n", "    if\
    \ len(lst) == 0:\n        return (None, None)\n    a, b = [i for i in lst if i\
    \ < 0], [i for i in lst if i > 0]\n    if len(a) == 0:\n        return (None,\
    \ min(b))\n    if len(b) == 0:\n        return (max(a), None)\n    return (max(a),\
    \ min(b))", "    positive_lst = []\n    negative_lst = []\n    for num in lst:\n\
    \        if num > 0:\n            positive_lst.append(num)\n        elif num <\
    \ 0:\n            negative_lst.append(num)\n    if negative_lst:\n        neg_max\
    \ = max(negative_lst)\n    else:\n        neg_max = None\n    if positive_lst:\n\
    \        pos_min = min(positive_lst)\n    else:\n        pos_min = None\n    return\
    \ (neg_max, pos_min)\n\n", "    negative, positive = None, None\n    for i in\
    \ lst:\n        if i < 0:\n            if negative == None or i > negative:\n\
    \                negative = i\n        elif i > 0:\n            if positive ==\
    \ None or i < positive:\n                positive = i\n    return (negative, positive)\n",
  "    # Your code here\n    # pass\n\n    # Solution 1:\n\n    max_neg = None\n \
    \   min_pos = None\n\n    for num in lst:\n        if num < 0:\n            if\
    \ max_neg is None or num > max_neg:\n                max_neg = num\n        elif\
    \ num > 0:\n            if min_pos is None or num < min_pos:\n               \
    \ min_pos = num\n\n    return (max_neg, min_pos)\n", "    largest = None\n   \
    \ smallest = None\n    for item in lst:\n        if item < 0:\n            if\
    \ largest == None or item > largest:\n                largest = item\n       \
    \ elif item > 0:\n            if smallest == None or item < smallest:\n      \
    \          smallest = item\n    return (largest, smallest)\n", "    lst = [x for\
    \ x in lst if x != 0]\n    neg = [x for x in lst if x < 0]\n    pos = [x for x\
    \ in lst if x > 0]\n    a = max(neg) if neg else None\n    b = min(pos) if pos\
    \ else None\n    return (a, b)\n", "    max_negative = None\n    min_positive\
    \ = None\n    for num in lst:\n        if num < 0:\n            if max_negative\
    \ is None or num > max_negative:\n                max_negative = num\n       \
    \ elif num > 0:\n            if min_positive is None or num < min_positive:\n\
    \                min_positive = num\n    return (max_negative, min_positive)",
  "    neg, pos = None, None\n    for x in lst:\n        if x < 0:\n            if\
    \ neg is None or x > neg:\n                neg = x\n        elif x > 0:\n    \
    \        if pos is None or x < pos:\n                pos = x\n    return neg,\
    \ pos\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))", "    largest_negative\
    \ = None\n    smallest_positive = None\n    for num in lst:\n        if num <\
    \ 0:\n            if not largest_negative or num > largest_negative:\n       \
    \         largest_negative = num\n        elif num > 0:\n            if not smallest_positive\
    \ or num < smallest_positive:\n                smallest_positive = num\n    return\
    \ (largest_negative, smallest_positive)\n", "    largest = min(lst)\n    smallest\
    \ = max(lst)\n    return (largest, smallest)\n\nprint(largest_smallest_integers([-1,\
    \ -2, -3, 1, 2, 3]))", "    if not lst:\n        return (None, None)\n    elif\
    \ all(i >= 0 for i in lst):\n        return (None, min(lst))\n    elif all(i <=\
    \ 0 for i in lst):\n        return (max(lst), None)\n    else:\n        return\
    \ (max(i for i in lst if i < 0), min(i for i in lst if i > 0))\n", '    pass',
  "    pass\n", "    if len(lst) == 0:\n        return (None, None)\n    negs = [x\
    \ for x in lst if x < 0]\n    poss = [x for x in lst if x > 0]\n    return (None\
    \ if len(negs) == 0 else max(negs), None if len(poss) == 0 else min(poss))", " \
    \   pos_value = None\n    neg_value = None\n    for i in lst:\n        if i >\
    \ 0:\n            if pos_value is None:\n                pos_value = i\n     \
    \       elif i < pos_value:\n                pos_value = i\n        elif i < 0:\n\
    \            if neg_value is None:\n                neg_value = i\n          \
    \  elif i > neg_value:\n                neg_value = i\n    return (neg_value,\
    \ pos_value)\n", "    negative_integers = [n for n in lst if n < 0]\n    positive_integers\
    \ = [n for n in lst if n > 0]\n    return (max(negative_integers) if negative_integers\
    \ else None,\n            min(positive_integers) if positive_integers else None)",
  "    pass\n\n", "    negs = []\n    pos = []\n    for num in lst:\n        if num\
    \ < 0:\n            negs.append(num)\n        elif num > 0:\n            pos.append(num)\n\
    \    if negs == []:\n        negs = None\n    if pos == []:\n        pos = None\n\
    \    return (max(negs), min(pos))\n\nprint(largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))",
  "    max_neg, min_pos = None, None\n    for n in lst:\n        if n < 0:\n     \
    \       if max_neg is None or n > max_neg:\n                max_neg = n\n    \
    \    elif n > 0:\n            if min_pos is None or n < min_pos:\n           \
    \     min_pos = n\n    return (max_neg, min_pos)", "    lst = list(set(lst))\n\
    \    if not lst:\n        return (None, None)\n    positive = []\n    negative\
    \ = []\n    for num in lst:\n        if num >= 0:\n            positive.append(num)\n\
    \        elif num < 0:\n            negative.append(num)\n    if positive:\n \
    \       b = min(positive)\n    else:\n        b = None\n    if negative:\n   \
    \     a = max(negative)\n    else:\n        a = None\n    return (a, b)\n\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\n\
    largest_smallest_integers([0]) == (None, None)\n", "    return (None, None)\n",
  '    pass', "    negatives = [x for x in lst if x < 0]\n    positives = [x for x\
    \ in lst if x > 0]\n    largest_negative = None if not negatives else max(negatives)\n\
    \    smallest_positive = None if not positives else min(positives)\n    return\
    \ (largest_negative, smallest_positive)", '    pass', "    pass\n\n", '    pass',
  "    pass\n\n", "    largest = None\n    smallest = None\n    for i in lst:\n  \
    \      if i > 0:\n            if smallest is None or i < smallest:\n         \
    \       smallest = i\n        elif i < 0:\n            if largest is None or i\
    \ > largest:\n                largest = i\n    return (largest, smallest)", " \
    \   pos_list = [x for x in lst if x > 0]\n    neg_list = [x for x in lst if x\
    \ < 0]\n    return (max(neg_list) if neg_list else None, min(pos_list) if pos_list\
    \ else None)\n", "    pass\n\n\n", "    pass\n\n", '    pass', '    pass', " \
    \   if len(lst) == 0:\n        return (None, None)\n    # for i in lst:\n    #\
    \     if i == 0:\n    #         return (None, None)\n    positive_num = []\n \
    \   negative_num = []\n    for num in lst:\n        if num > 0:\n            positive_num.append(num)\n\
    \        elif num < 0:\n            negative_num.append(num)\n    if not positive_num:\n\
    \        return (max(negative_num), None)\n    elif not negative_num:\n      \
    \  return (None, min(positive_num))\n    else:\n        return (max(negative_num),\
    \ min(positive_num))\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))\n\
    print(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))",
  "    if not lst:\n        return (None, None)\n    pos_min = None\n    neg_max =\
    \ None\n    for item in lst:\n        if item >= 0:\n            if pos_min is\
    \ None or item < pos_min:\n                pos_min = item\n        elif item <\
    \ 0:\n            if neg_max is None or item > neg_max:\n                neg_max\
    \ = item\n    return (neg_max, pos_min)\n", "    pass\n\n", "    pass\n", "  \
    \  if len(lst) < 1:\n        return (None, None)\n    a = 0\n    b = 0\n    c\
    \ = 0\n    d = 0\n    for item in lst:\n        if item < 0:\n            if a\
    \ == 0:\n                a = item\n            elif item > a:\n              \
    \  a = item\n        if item > 0:\n            if b == 0:\n                b =\
    \ item\n            elif item < b:\n                b = item\n    if a == 0:\n\
    \        a = None\n    if b == 0:\n        b = None\n    return (a, b)\n\n", " \
    \   largest_negative = None\n    smallest_positive = None\n    for num in lst:\n\
    \        if num < 0:\n            if largest_negative is None or num > largest_negative:\n\
    \                largest_negative = num\n        elif num > 0:\n            if\
    \ smallest_positive is None or num < smallest_positive:\n                smallest_positive\
    \ = num\n    return (largest_negative, smallest_positive)", '    return (None,
    None)', "    # You code here\n    return None, None\n", "    lst_n = []\n    lst_p\
    \ = []\n    lst_1 = []\n    lst_2 = []\n    lst_3 = []\n    lst_4 = []\n    lst_5\
    \ = []\n    lst_6 = []\n    lst_7 = []\n    lst_8 = []\n    lst_9 = []\n    lst_0\
    \ = []\n    lst_0_2 = []\n    lst_0_3 = []\n    lst_0_4 = []\n    lst_0_5 = []\n\
    \    lst_0_6 = []\n    lst_0_7 = []\n    lst_0_8 = []\n    lst_0_9 = []\n    lst_0_10\
    \ = []\n    for i in lst:\n        if i < 0:\n            lst_n.append(i)\n  \
    \      elif i > 0:\n            lst_p.append(i)\n        elif i == 0:\n      \
    \      lst_0.append(i)\n    for i in lst_n:\n        lst_1.append(i * -1)\n  \
    \  for i in lst_1:\n        lst_2.append(i - 100)\n    for i in lst_2:\n     \
    \   lst_3.append(i + 90)\n    for i in lst_3:\n        lst_4.append(i + 99)\n\
    \    for i in lst_4:\n        lst_5.append(i + 1)\n    for i in lst_5:\n     \
    \   lst_6.append(i + 10)\n    for i in lst_6:\n        lst_7.append(i + 19)\n\
    \    for i in lst_7:\n        lst_8.append(i - 9)\n    for i in lst_8:\n     \
    \   lst_9.append(i - 10)\n    for i in lst_9:\n        lst_0_2.append(i - 1)\n\
    \    for i in lst_0_2:\n        lst_0_3.append(i - 20)\n   ", "    if not lst:\n\
    \        return (None, None)\n    else:\n        negative_numbers = []\n     \
    \   positive_numbers = []\n        for number in lst:\n            if number <\
    \ 0:\n                negative_numbers.append(number)\n            if number >\
    \ 0:\n                positive_numbers.append(number)\n        if negative_numbers:\n\
    \            largest_negative = max(negative_numbers)\n        else:\n       \
    \     largest_negative = None\n        if positive_numbers:\n            smallest_positive\
    \ = min(positive_numbers)\n        else:\n            smallest_positive = None\n\
    \        return (largest_negative, smallest_positive)\n\nprint(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))",
  "    negs = sorted([num for num in lst if num < 0])\n    pos = sorted([num for num\
    \ in lst if num > 0])\n    if len(negs) < 1 and len(pos) < 1:\n        return\
    \ (None, None)\n    elif len(negs) < 1:\n        return (None, pos[0])\n    elif\
    \ len(pos) < 1:\n        return (negs[-1], None)\n    else:\n        return (negs[-1],\
    \ pos[0])", '    pass', "    # YOUR CODE HERE\n    pass\n", "    pass\n\n", '    pass',
  '    pass', "    # list of positive integers\n    pos_ints = [i for i in lst if\
    \ i > 0]\n    # list of negative integers\n    neg_ints = [i for i in lst if i\
    \ < 0]\n    if len(pos_ints) == 0 and len(neg_ints) == 0:\n        return (None,\
    \ None)\n    elif len(pos_ints) == 0:\n        return (max(neg_ints), None)\n\
    \    elif len(neg_ints) == 0:\n        return (None, min(pos_ints))\n    else:\n\
    \        return (max(neg_ints), min(pos_ints))\n    pass\n\n", "    if not lst:\n\
    \        return (None, None)\n    pos_num = None\n    neg_num = None\n    for\
    \ n in lst:\n        if n > 0:\n            if not pos_num:\n                pos_num\
    \ = n\n            elif n < pos_num:\n                pos_num = n\n        elif\
    \ n < 0:\n            if not neg_num:\n                neg_num = n\n         \
    \   elif n > neg_num:\n                neg_num = n\n    return (neg_num, pos_num)\n",
  "    p = n = None\n    for i in lst:\n        if i > 0:\n            if p is None\
    \ or i < p:\n                p = i\n        elif i < 0:\n            if n is None\
    \ or i > n:\n                n = i\n    return n, p\n\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n", "    min_positive_int = None\n    max_negative_int = None\n\
    \    for i in lst:\n        if i < 0:\n            if max_negative_int == None:\n\
    \                max_negative_int = i\n            else:\n                max_negative_int\
    \ = max(max_negative_int, i)\n        elif i > 0:\n            if min_positive_int\
    \ == None:\n                min_positive_int = i\n            else:\n        \
    \        min_positive_int = min(min_positive_int, i)\n    return (max_negative_int,\
    \ min_positive_int)\n", "    neg = None\n    pos = None\n    for i in lst:\n \
    \       if i < 0:\n            if neg is None or i > neg:\n                neg\
    \ = i\n        elif i > 0:\n            if pos is None or i < pos:\n         \
    \       pos = i\n    return (neg, pos)\n", "    largest_negative = None\n    smallest_positive\
    \ = None\n    for i in lst:\n        if i < 0:\n            if largest_negative\
    \ == None:\n                largest_negative = i\n            elif i > largest_negative:\n\
    \                largest_negative = i\n        if i > 0:\n            if smallest_positive\
    \ == None:\n                smallest_positive = i\n            elif i < smallest_positive:\n\
    \                smallest_positive = i\n    return (largest_negative, smallest_positive)",
  "    largest_negative = None\n    smallest_positive = None\n    for i in lst:\n\
    \        if i < 0:\n            if largest_negative is None or i > largest_negative:\n\
    \                largest_negative = i\n        elif i > 0:\n            if smallest_positive\
    \ is None or i < smallest_positive:\n                smallest_positive = i\n \
    \   return (largest_negative, smallest_positive)\n", "    largest_negative = None\n\
    \    smallest_positive = None\n    for num in lst:\n        if num < 0:\n    \
    \        if largest_negative == None or num > largest_negative:\n            \
    \    largest_negative = num\n        if num > 0:\n            if smallest_positive\
    \ == None or num < smallest_positive:\n                smallest_positive = num\n\
    \    return (largest_negative, smallest_positive)\n", "    largest = None\n  \
    \  smallest = None\n    for item in lst:\n        if item > 0:\n            if\
    \ not smallest or item < smallest:\n                smallest = item\n        elif\
    \ item < 0:\n            if not largest or item > largest:\n                largest\
    \ = item\n    return (largest, smallest)\n", '    pass', "    pass\n", "    largest\
    \ = None\n    smallest = None\n    for i in lst:\n        if i > 0:\n        \
    \    if smallest is None or i < smallest:\n                smallest = i\n    \
    \    elif i < 0:\n            if largest is None or i > largest:\n           \
    \     largest = i\n    return (largest, smallest)\n", "    # return None\n   \
    \ lst = sorted(lst)\n    largest_neg = None\n    smallest_pos = None\n    for\
    \ num in lst:\n        if num < 0:\n            largest_neg = num\n        if\
    \ num > 0:\n            smallest_pos = num\n            break\n    return (largest_neg,\
    \ smallest_pos)\n\n", "    largest_neg = None\n    smallest_pos = None\n    for\
    \ i in lst:\n        if i < 0:\n            if largest_neg is None or i > largest_neg:\n\
    \                largest_neg = i\n        elif i > 0:\n            if smallest_pos\
    \ is None or i < smallest_pos:\n                smallest_pos = i\n    return (largest_neg,\
    \ smallest_pos)\n", '    pass', "    largest_neg = None\n    smallest_pos = None\n\
    \    for num in lst:\n        if num < 0:\n            if largest_neg is None\
    \ or num > largest_neg:\n                largest_neg = num\n        elif num >\
    \ 0:\n            if smallest_pos is None or num < smallest_pos:\n           \
    \     smallest_pos = num\n    return (largest_neg, smallest_pos)", "    if not\
    \ lst:\n        return (None, None)\n    else:\n        pos = [el for el in lst\
    \ if el > 0]\n        neg = [el for el in lst if el < 0]\n        if not pos:\n\
    \            return (max(neg), None)\n        elif not neg:\n            return\
    \ (None, min(pos))\n        else:\n            return (max(neg), min(pos))\n",
  "    return (max(filter(lambda x: x < 0, lst), default=None),\n            min(filter(lambda\
    \ x: x > 0, lst), default=None))\n\nprint(largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7]))", "    pass\n\n\n\"\"\"\nYou can use the main function below to test\
    \ your function.\n\nWhen you are ready, uncomment the code under if __name__ ==\
    \ \"__main__\"\nand run the script.\n\"\"\"\n", "    lst = sorted(lst)\n    for\
    \ i in range(len(lst)):\n        if lst[i] < 0:\n            largest = lst[i]\n\
    \        else:\n            break\n    else:\n        largest = None\n    for\
    \ i in range(len(lst)):\n        if lst[i] > 0:\n            smallest = lst[i]\n\
    \        else:\n            break\n    else:\n        smallest = None\n    return\
    \ (largest, smallest)\n", "    try:\n        return min(i for i in lst if i <\
    \ 0), max(i for i in lst if i > 0)\n    except ValueError:\n        return None,\
    \ None\n", "    pos_lst = [x for x in lst if x > 0]\n    neg_lst = [x for x in\
    \ lst if x < 0]\n    if pos_lst:\n        min_pos = min(pos_lst)\n    else:\n\
    \        min_pos = None\n    if neg_lst:\n        max_neg = max(neg_lst)\n   \
    \ else:\n        max_neg = None\n    return (max_neg, min_pos)\n", "    ...\n\n",
  "    return None\n    # hint: use for loops to iterate through list, and find the\
    \ largest/smallest\n    # positive/negative numbers", "    if len(lst) == 0:\n\
    \        return (None, None)\n    neg_lst = []\n    pos_lst = []\n    for num\
    \ in lst:\n        if num > 0:\n            pos_lst.append(num)\n        elif\
    \ num < 0:\n            neg_lst.append(num)\n    if len(neg_lst) == 0:\n     \
    \   a = None\n    else:\n        a = max(neg_lst)\n    if len(pos_lst) == 0:\n\
    \        b = None\n    else:\n        b = min(pos_lst)\n    return (a, b)\n",
  "    negatives = [num for num in lst if num < 0]\n    positives = [num for num in\
    \ lst if num > 0]\n    return (max(negatives) if negatives else None, min(positives)\
    \ if positives else None)\n", "    if not lst:\n        return (None, None)\n\
    \    positive_lst = []\n    negative_lst = []\n    for i in lst:\n        if i\
    \ > 0:\n            positive_lst.append(i)\n        elif i < 0:\n            negative_lst.append(i)\n\
    \    if positive_lst:\n        pos_smallest = min(positive_lst)\n    else:\n \
    \       pos_smallest = None\n    if negative_lst:\n        neg_largest = max(negative_lst)\n\
    \    else:\n        neg_largest = None\n    return (neg_largest, pos_smallest)\n",
  "    positive_numbers = [num for num in lst if num > 0]\n    negative_numbers =\
    \ [num for num in lst if num < 0]\n    if len(positive_numbers) == 0 and len(negative_numbers)\
    \ == 0:\n        return (None, None)\n    if len(positive_numbers) == 0:\n   \
    \     return (None, min(positive_numbers))\n    if len(negative_numbers) == 0:\n\
    \        return (max(negative_numbers), None)\n    return (max(negative_numbers),\
    \ min(positive_numbers))\n", "    if len(lst) == 0:\n        return (None, None)\n\
    \    positive_integers = [i for i in lst if i > 0]\n    negative_integers = [i\
    \ for i in lst if i < 0]\n    a = None\n    b = None\n    if len(positive_integers)\
    \ > 0:\n        b = min(positive_integers)\n    if len(negative_integers) > 0:\n\
    \        a = max(negative_integers)\n    return (a, b)", "    if not lst:\n  \
    \      return (None, None)\n    largest_negative = None\n    smallest_positive\
    \ = None\n    for n in lst:\n        if n < 0:\n            if largest_negative\
    \ is None or n > largest_negative:\n                largest_negative = n\n   \
    \     elif n > 0:\n            if smallest_positive is None or n < smallest_positive:\n\
    \                smallest_positive = n\n    return (largest_negative, smallest_positive)\n\
    \n\"\"\"\n\nAlternative but longer solution:\n", "    largest_neg = None\n   \
    \ smallest_pos = None\n    for num in lst:\n        if num < 0:\n            if\
    \ largest_neg is None or num > largest_neg:\n                largest_neg = num\n\
    \        elif num > 0:\n            if smallest_pos is None or num < smallest_pos:\n\
    \                smallest_pos = num\n    return (largest_neg, smallest_pos)\n",
  "    pass\n", "    if len(lst) == 0:\n        return (None, None)\n    largest_neg\
    \ = None\n    smallest_pos = None\n    for n in lst:\n        if n < 0:\n    \
    \        if largest_neg is None or n > largest_neg:\n                largest_neg\
    \ = n\n        elif n > 0:\n            if smallest_pos is None or n < smallest_pos:\n\
    \                smallest_pos = n\n    return (largest_neg, smallest_pos)", " \
    \   negs = []\n    pos = []\n    for i in lst:\n        if i < 0:\n          \
    \  negs.append(i)\n        elif i > 0:\n            pos.append(i)\n    return\
    \ (max(negs) if negs else None, min(pos) if pos else None)\n", "    largest =\
    \ None\n    smallest = None\n    for el in lst:\n        if el > 0:\n        \
    \    if smallest is None or el < smallest:\n                smallest = el\n  \
    \      elif el < 0:\n            if largest is None or el > largest:\n       \
    \         largest = el\n    return (largest, smallest)\n", "    pass\n\n", '    pass',
  '    pass', "    pass\n", "    return (None, None)\n\n@pytest.mark.parametrize(\"\
    test_input, expected\", [\n    ([2, 4, 1, 3, 5, 7], (None, 1)),\n    ([], (None,\
    \ None)),\n    ([0], (None, None)),\n    ([-1, 0, 1], (-1, 1)),\n    ([-3, -2,\
    \ -1], (-1, None)),\n    ([1, 2, 3], (None, 1)),\n    ([-5, -4, -3, -2, -1], (-1,\
    \ None)),\n    ([5, 4, 3, 2, 1], (None, 1)),\n    ([-9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1], (-1, None)),\n    ([9, 8, 7, 6, 5, 4, 3, 2, 1], (None, 1)),\n    ([-2,\
    \ -1, 0, 1, 2], (-1, 1)),\n    ([-4, -3, -2, -1, 0, 1, 2, 3, 4], (-1, 1)),\n \
    \   ([-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6], (-1, 1)),\n    ([-8, -7, -6,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], (-1, 1)),\n    ([10, -10, 100,\
    \ -100, 1000, -1000], (-100, 10)),\n    ([-11, -10, -9, -8, -7, -6, -5, -4, -3,\
    \ -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], (-1, 1)),\n    ([-9, 9, -8, 8,\
    \ -7, 7, -6, 6, -5, 5, -4, 4, -3, 3, -2, 2, -1, 1, 0], (-1, 1)),\n    ([-99, 99,\
    \ -98, 98, -", '    pass', "    pass\n\n\nfrom typing import Dict, Tuple, Union\n",
  "    positives, negatives = [], []\n    for num in lst:\n        if num > 0:\n \
    \           positives.append(num)\n        elif num < 0:\n            negatives.append(num)\n\
    \    if positives:\n        smallest_positive = min(positives)\n    else:\n  \
    \      smallest_positive = None\n    if negatives:\n        largest_negative =\
    \ max(negatives)\n    else:\n        largest_negative = None\n    return largest_negative,\
    \ smallest_positive\n\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))",
  "    negative, positive = [], []\n    for i in lst:\n        if i < 0:\n       \
    \     negative.append(i)\n        elif i > 0:\n            positive.append(i)\n\
    \    if negative == []:\n        a = None\n    else:\n        a = max(negative)\n\
    \    if positive == []:\n        b = None\n    else:\n        b = min(positive)\n\
    \    return (a, b)\n", '    pass', "    max_neg = -float('inf')\n    min_pos =\
    \ float('inf')\n    for num in lst:\n        if num < 0:\n            max_neg\
    \ = max(max_neg, num)\n        elif num > 0:\n            min_pos = min(min_pos,\
    \ num)\n    return (max_neg if max_neg != -float('inf') else None, min_pos if\
    \ min_pos != float('inf') else None)\n\nprint(largest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))",
  "    pass\n\n", "    pass\n    neg_max = None\n    pos_min = None\n    for num in\
    \ lst:\n        if num < 0:\n            if neg_max is None or num > neg_max:\n\
    \                neg_max = num\n        elif num > 0:\n            if pos_min\
    \ is None or num < pos_min:\n                pos_min = num\n    return (neg_max,\
    \ pos_min)\n\n", "    pass\n", "    neg = []\n    pos = []\n    for i in lst:\n\
    \        if i < 0:\n            neg.append(i)\n        elif i > 0:\n         \
    \   pos.append(i)\n    if len(neg) > 0:\n        a = max(neg)\n    else:\n   \
    \     a = None\n    if len(pos) > 0:\n        b = min(pos)\n    else:\n      \
    \  b = None\n    return (a, b)\n", "    largest_negative = None\n    smallest_positive\
    \ = None\n    for i in lst:\n        if i > 0:\n            if smallest_positive\
    \ is None or i < smallest_positive:\n                smallest_positive = i\n \
    \       elif i < 0:\n            if largest_negative is None or i > largest_negative:\n\
    \                largest_negative = i\n    return (largest_negative, smallest_positive)",
  "    assert isinstance(lst, list)\n    if lst == []:\n        return (None, None)\n\
    \    else:\n        largest_of_negatives = max([x for x in lst if x < 0])\n  \
    \      smallest_of_positives = min([x for x in lst if x > 0])\n        return\
    \ (largest_of_negatives, smallest_of_positives)\n", "    if not lst:\n       \
    \ return (None, None)\n    positive = []\n    negative = []\n    for i in lst:\n\
    \        if i > 0:\n            positive.append(i)\n        elif i < 0:\n    \
    \        negative.append(i)\n    if not positive:\n        positive.append(None)\n\
    \    if not negative:\n        negative.append(None)\n    return (max(negative),\
    \ min(positive))\n\n", "    if not lst:\n        return (None, None)\n    else:\n\
    \        smallest_positive = None\n        largest_negative = None\n        for\
    \ el in lst:\n            if el > 0:\n                if smallest_positive ==\
    \ None:\n                    smallest_positive = el\n                elif el <\
    \ smallest_positive:\n                    smallest_positive = el\n           \
    \ elif el < 0:\n                if largest_negative == None:\n               \
    \     largest_negative = el\n                elif el > largest_negative:\n   \
    \                 largest_negative = el\n    return (largest_negative, smallest_positive)\n",
  "    negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x >\
    \ 0]\n    return (None if len(negative) == 0 else max(negative), None if len(positive)\
    \ == 0 else min(positive))", "    min_pos, max_neg = None, None\n    for i in\
    \ lst:\n        if i > 0:\n            if min_pos is None or i < min_pos:\n  \
    \              min_pos = i\n        elif i < 0:\n            if max_neg is None\
    \ or i > max_neg:\n                max_neg = i\n    return max_neg, min_pos",
  "    pass\n\n", "    negatives = [i for i in lst if i < 0]\n    positives = [i for\
    \ i in lst if i > 0]\n    return (None if not negatives else max(negatives), None\
    \ if not positives else min(positives))\n", "    positives = [x for x in lst if\
    \ x > 0]\n    negatives = [x for x in lst if x < 0]\n    if len(positives) ==\
    \ 0:\n        a = None\n    else:\n        a = min(positives)\n    if len(negatives)\
    \ == 0:\n        b = None\n    else:\n        b = max(negatives)\n    return (b,\
    \ a)", "    largest_of_negatives: Optional[int] = None\n    smallest_of_positives:\
    \ Optional[int] = None\n\n    for number in lst:\n        if number < 0:\n   \
    \         if largest_of_negatives is None or number > largest_of_negatives:\n\
    \                largest_of_negatives = number\n        elif number > 0:\n   \
    \         if smallest_of_positives is None or number < smallest_of_positives:\n\
    \                smallest_of_positives = number\n\n    return (largest_of_negatives,\
    \ smallest_of_positives)\n", "    largest_neg = None\n    smallest_pos = None\n\
    \    for i in lst:\n        if i < 0:\n            if largest_neg == None or i\
    \ > largest_neg:\n                largest_neg = i\n        elif i > 0:\n     \
    \       if smallest_pos == None or i < smallest_pos:\n                smallest_pos\
    \ = i\n    return (largest_neg, smallest_pos)\n", "    if lst:\n        negatives\
    \ = [n for n in lst if n < 0]\n        positives = [n for n in lst if n > 0]\n\
    \        return max(negatives, default=None), min(positives, default=None)\n \
    \   return None, None\n", "    positive, negative = [], []\n    for x in lst:\n\
    \        if x < 0:\n            negative.append(x)\n        elif x > 0:\n    \
    \        positive.append(x)\n    if not negative or not positive:\n        return\
    \ (None, None)\n    else:\n        return (max(negative), min(positive))\n", " \
    \   from math import inf\n    max_neg, min_pos = -inf, inf\n    for n in lst:\n\
    \        if n < 0:\n            max_neg = max(max_neg, n)\n        elif n > 0:\n\
    \            min_pos = min(min_pos, n)\n    return (max_neg if max_neg != -inf\
    \ else None, min_pos if min_pos != inf else None)\n", '    pass', "    pos_min,\
    \ pos_max = None, None\n    neg_min, neg_max = None, None\n    for num in lst:\n\
    \        if num > 0:\n            if pos_min is None or num < pos_min:\n     \
    \           pos_min = num\n            if pos_max is None or num > pos_max:\n\
    \                pos_max = num\n        elif num < 0:\n            if neg_min\
    \ is None or num < neg_min:\n                neg_min = num\n            if neg_max\
    \ is None or num > neg_max:\n                neg_max = num\n    return neg_max,\
    \ pos_min\n\n\n", "    pass\n\n", "    if lst:\n        negs = [x for x in lst\
    \ if x < 0]\n        pos = [x for x in lst if x > 0]\n        if negs:\n     \
    \       largest_neg = max(negs)\n        else:\n            largest_neg = None\n\
    \        if pos:\n            smallest_pos = min(pos)\n        else:\n       \
    \     smallest_pos = None\n        return (largest_neg, smallest_pos)\n    else:\n\
    \        return (None, None)\n", "    largest_negative, smallest_positive = None,\
    \ None\n    for num in lst:\n        if num > 0:\n            if smallest_positive\
    \ is None or num < smallest_positive:\n                smallest_positive = num\n\
    \        elif num < 0:\n            if largest_negative is None or num > largest_negative:\n\
    \                largest_negative = num\n    return largest_negative, smallest_positive\n\
    \nprint(largest_smallest_integers([-3, -2, -1, 1, 2, 3]))\n", "    positive =\
    \ None\n    negative = None\n    for number in lst:\n        if number > 0:\n\
    \            if positive is None or number < positive:\n                positive\
    \ = number\n        elif number < 0:\n            if negative is None or number\
    \ > negative:\n                negative = number\n    return negative, positive\n",
  "    neg_max = None\n    pos_min = None\n    for num in lst:\n        if num < 0:\n\
    \            if neg_max is None or num > neg_max:\n                neg_max = num\n\
    \        elif num > 0:\n            if pos_min is None or num < pos_min:\n   \
    \             pos_min = num\n    return (neg_max, pos_min)\n", "    largest_negative\
    \ = None\n    smallest_positive = None\n    for i in lst:\n        if i < 0:\n\
    \            if largest_negative is None or i > largest_negative:\n          \
    \      largest_negative = i\n        elif i > 0:\n            if smallest_positive\
    \ is None or i < smallest_positive:\n                smallest_positive = i\n \
    \   return (largest_negative, smallest_positive)", "    return (None, None)\n",
  "    negatives = []\n    positives = []\n    for i in lst:\n        if i < 0:\n\
    \            negatives.append(i)\n        elif i > 0:\n            positives.append(i)\n\
    \    if negatives == []:\n        a = None\n    else:\n        a = max(negatives)\n\
    \    if positives == []:\n        b = None\n    else:\n        b = min(positives)\n\
    \    return (a, b)", "    largest_neg = None\n    smallest_pos = None\n    for\
    \ num in lst:\n        if num < 0:\n            if largest_neg is None or num\
    \ > largest_neg:\n                largest_neg = num\n        elif num > 0:\n \
    \           if smallest_pos is None or num < smallest_pos:\n                smallest_pos\
    \ = num\n    return (largest_neg, smallest_pos)", "    largest_negative_number\
    \ = None\n    smallest_positive_number = None\n    for item in lst:\n        if\
    \ item < 0:\n            if largest_negative_number == None:\n               \
    \ largest_negative_number = item\n            elif item > largest_negative_number:\n\
    \                largest_negative_number = item\n        elif item > 0:\n    \
    \        if smallest_positive_number == None:\n                smallest_positive_number\
    \ = item\n            elif item < smallest_positive_number:\n                smallest_positive_number\
    \ = item\n    return (largest_negative_number, smallest_positive_number)\n", " \
    \   largest_negative = None\n    smallest_positive = None\n    for n in lst:\n\
    \        if n < 0:\n            if largest_negative is None or n > largest_negative:\n\
    \                largest_negative = n\n        elif n > 0:\n            if smallest_positive\
    \ is None or n < smallest_positive:\n                smallest_positive = n\n \
    \   return (largest_negative, smallest_positive)\n", '    pass', '    pass', " \
    \   pass\n\n", "    largest_negative_integer: Optional[int] = None\n    smallest_positive_integer:\
    \ Optional[int] = None\n\n    for element in lst:\n        if element > 0:\n \
    \           if smallest_positive_integer is None or element < smallest_positive_integer:\n\
    \                smallest_positive_integer = element\n        elif element < 0:\n\
    \            if largest_negative_integer is None or element > largest_negative_integer:\n\
    \                largest_negative_integer = element\n\n    return (largest_negative_integer,\
    \ smallest_positive_integer)\n", '    return (None, None)', "    negative_integers\
    \ = sorted([x for x in lst if x < 0])\n    positive_integers = sorted([x for x\
    \ in lst if x > 0])\n    return (negative_integers[-1] if negative_integers else\
    \ None,\n            positive_integers[0] if positive_integers else None)", " \
    \   largest_neg = None\n    smallest_pos = None\n    for num in lst:\n       \
    \ if num > 0:\n            if smallest_pos is None or num < smallest_pos:\n  \
    \              smallest_pos = num\n        elif num < 0:\n            if largest_neg\
    \ is None or num > largest_neg:\n                largest_neg = num\n    return\
    \ (largest_neg, smallest_pos)\n\nprint(largest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7]))\nprint(largest_smallest_integers([]))\nprint(largest_smallest_integers([0]))",
  "    if not lst:\n        return (None, None)\n    else:\n        negative_max =\
    \ max(n for n in lst if n < 0)\n        positive_min = min(n for n in lst if n\
    \ > 0)\n        return (negative_max, positive_min)\n", "    max_neg = min_pos\
    \ = None\n    for i in lst:\n        if i < 0:\n            if max_neg is None\
    \ or i > max_neg:\n                max_neg = i\n        elif i > 0:\n        \
    \    if min_pos is None or i < min_pos:\n                min_pos = i\n    return\
    \ (max_neg, min_pos)\n", "    if len(lst) == 0:\n        return (None, None)\n\
    \    elif len(lst) == 1:\n        if lst[0] >= 0:\n            return (None, lst[0])\n\
    \        else:\n            return (lst[0], None)\n    else:\n        # nlst =\
    \ list(filter(lambda x: x >= 0, lst))\n        nlst = [x for x in lst if x >=\
    \ 0]\n        if len(nlst) == 0:\n            return (None, None)\n        else:\n\
    \            pmin = min(nlst)\n            # nlst = list(filter(lambda x: x <\
    \ 0, lst))\n            nlst = [x for x in lst if x < 0]\n            if len(nlst)\
    \ == 0:\n                return (None, pmin)\n            else:\n            \
    \    pmax = max(nlst)\n                return (pmax, pmin)\n", "    min_positive\
    \ = None\n    max_negative = None\n    for i in lst:\n        if i < 0:\n    \
    \        if max_negative is None or i > max_negative:\n                max_negative\
    \ = i\n        elif i > 0:\n            if min_positive is None or i < min_positive:\n\
    \                min_positive = i\n    return (max_negative, min_positive)", " \
    \   pass\n", "    pass\n", "    neg = []\n    pos = []\n    for i in lst:\n  \
    \      if i < 0:\n            neg.append(i)\n        elif i > 0:\n           \
    \ pos.append(i)\n    return (max(neg), min(pos))\n", "    # YOUR CODE HERE\n \
    \   raise NotImplementedError()\n\n\nassert largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7]) == (None, 1)\nassert largest_smallest_integers([]) == (None, None)\n\
    assert largest_smallest_integers([0]) == (None, None)\nprint(\"Exercise 47 is\
    \ correct.\")\n", "    # Write your code here ...\n    pass\n\n", "    negative_list\
    \ = []\n    positive_list = []\n    for i in lst:\n        if i > 0:\n       \
    \     positive_list.append(i)\n        elif i < 0:\n            negative_list.append(i)\n\
    \    return (max(negative_list) if negative_list else None, min(positive_list)\
    \ if positive_list else None)\n\n", "    positive = None\n    negative = None\n\
    \    for i in lst:\n        if i < 0:\n            if negative is None or i >\
    \ negative:\n                negative = i\n        elif i > 0:\n            if\
    \ positive is None or i < positive:\n                positive = i\n    return\
    \ negative, positive\n", "    if len(lst) < 1:\n        return (None, None)\n\
    \    for x in lst:\n        if x < 0:\n            negative = x\n        elif\
    \ x > 0:\n            positive = x\n    return (negative, positive)\n\nprint(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]))", "    largest = None\n    smallest = None\n    pos_ints =\
    \ []\n    neg_ints = []\n    for num in lst:\n        if num >= 0:\n         \
    \   pos_ints.append(num)\n        elif num < 0:\n            neg_ints.append(num)\n\
    \    if len(pos_ints) > 0:\n        smallest = min(pos_ints)\n    if len(neg_ints)\
    \ > 0:\n        largest = max(neg_ints)\n    return (largest, smallest)", "  \
    \  if len(lst) == 0:\n        return (None, None)\n    elif len(lst) == 1:\n \
    \       if lst[0] < 0:\n            return (lst[0], None)\n        elif lst[0]\
    \ > 0:\n            return (None, lst[0])\n        else:\n            return (None,\
    \ None)\n    else:\n        if max(lst) > 0:\n            return (None, min(lst))\n\
    \        elif min(lst) < 0:\n            return (max(lst), None)\n        else:\n\
    \            return (None, None)\n", "    neg = pos = None\n    for item in lst:\n\
    \        if item < 0:\n            if neg is None or item > neg:\n           \
    \     neg = item\n        elif item > 0:\n            if pos is None or item <\
    \ pos:\n                pos = item\n    return neg, pos", "    largest_negative\
    \ = None\n    smallest_positive = None\n    for number in lst:\n        if number\
    \ < 0:\n            if largest_negative is None or number > largest_negative:\n\
    \                largest_negative = number\n        elif number > 0:\n       \
    \     if smallest_positive is None or number < smallest_positive:\n          \
    \      smallest_positive = number\n    return (largest_negative, smallest_positive)",
  '    pass', "    largest_negative = None\n    smallest_positive = None\n    for\
    \ num in lst:\n        if num < 0:\n            if largest_negative is None or\
    \ num > largest_negative:\n                largest_negative = num\n        elif\
    \ num > 0:\n            if smallest_positive is None or num < smallest_positive:\n\
    \                smallest_positive = num\n    return (largest_negative, smallest_positive)",
  "    lst = [n for n in lst if n]\n    positive = [n for n in lst if n > 0]\n   \
    \ negative = [n for n in lst if n < 0]\n    largest = None\n    smallest = None\n\
    \    if negative:\n        largest = max(negative)\n    if positive:\n       \
    \ smallest = min(positive)\n    return (largest, smallest)\n", "    # Write your\
    \ code here\n    return (None, None)\n\n", '    pass', "    return None, None\n",
  "    negatives = list(filter(lambda x: x < 0, lst))\n    positives = list(filter(lambda\
    \ x: x > 0, lst))\n    negatives.sort()\n    positives.sort()\n    if negatives:\n\
    \        a = negatives[-1]\n    else:\n        a = None\n    if positives:\n \
    \       b = positives[0]\n    else:\n        b = None\n    return (a, b)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
