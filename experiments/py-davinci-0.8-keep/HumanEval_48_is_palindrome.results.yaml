name: HumanEval_48_is_palindrome
language: py
results:
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = \"\".join(re.findall(\"\
    [a-z]\", text))\n    return text == text[::-1]\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyfuc_e3s.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyfuc_e3s.py\", line 27,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpyfuc_e3s.py\", line\
    \ 18, in check\n    assert candidate('') == True\n  File \"/tmp/tmpyfuc_e3s.py\"\
    , line 14, in is_palindrome\n    text = \"\".join(re.findall(\"[a-z]\", text))\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    for i in range(len(text)):\n\
    \        if text[i] != text[-i - 1]:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = preprocess(text)\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5j7o2dd_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5j7o2dd_.py\", line 27,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmp5j7o2dd_.py\", line\
    \ 18, in check\n    assert candidate('') == True\n  File \"/tmp/tmp5j7o2dd_.py\"\
    , line 13, in is_palindrome\n    text = preprocess(text)\nNameError: name 'preprocess'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    text\
    \ = text.lower()\n    text = re.sub(r'[^\\w]', '', text)\n    # TODO: Implement\
    \ the function\n    return text == text[::-1]\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph8w78khd.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmph8w78khd.py\", line 31,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmph8w78khd.py\", line\
    \ 23, in check\n    assert candidate('aba') == True\n  File \"/tmp/tmph8w78khd.py\"\
    , line 16, in is_palindrome\n    text = re.sub(r'[^\\w]', '', text)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return len(text) == 0 or (len(text) == 1 or text[0]\
    \ == text[-1]) and is_palindrome(text[1:-1])\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # strip text from non alphanumeric chars\n    text\
    \ = strip_text(text)\n    text_len = len(text)\n    for idx in range(text_len\
    \ // 2):\n        if text[idx] != text[text_len - idx - 1]:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1j6rt0g7.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1j6rt0g7.py\", line 32,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmp1j6rt0g7.py\", line\
    \ 23, in check\n    assert candidate('') == True\n  File \"/tmp/tmp1j6rt0g7.py\"\
    , line 14, in is_palindrome\n    text = strip_text(text)\nNameError: name 'strip_text'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    return\
    \ text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    else:\n\
    \        return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    length = len(text)\n    for i in range(length // 2):\n\
    \        if text[i] != text[length - i - 1]:\n            return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate('') == True\n    assert\
    \ candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert\
    \ candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert\
    \ candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n\
    \    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    assert isinstance(text, str), 'text is not a string:\
    \ {}'.format(text)\n    # TODO\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\nimport doctest\ndoctest.testmod()\n\
    def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    n = len(text)\n    for i\
    \ in range(n // 2):\n        if text[i] != text[n - i - 1]:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = re.sub(r'[^a-z]',\
    \ '', text)\n    return text == text[::-1]\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnw96woeu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpnw96woeu.py\", line 28,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpnw96woeu.py\", line\
    \ 19, in check\n    assert candidate('') == True\n  File \"/tmp/tmpnw96woeu.py\"\
    , line 14, in is_palindrome\n    text = re.sub(r'[^a-z]', '', text)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    return\
    \ text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = re.sub(r'[^a-z0-9]',\
    \ '', text)\n    return text == text[::-1]\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt17ocepp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt17ocepp.py\", line 28,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpt17ocepp.py\", line\
    \ 19, in check\n    assert candidate('') == True\n  File \"/tmp/tmpt17ocepp.py\"\
    , line 14, in is_palindrome\n    text = re.sub(r'[^a-z0-9]', '', text)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    start, end = 0, len(text) - 1\n    while start < end:\n\
    \        if text[start] != text[end]:\n            return False\n        start\
    \ += 1\n        end -= 1\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text == '':\n        return True\n    else:\n \
    \       first = text[0]\n        last = text[-1]\n        if first == last:\n\
    \            return is_palindrome(text[1:-1])\n        else:\n            return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert\
    \ candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert\
    \ candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert\
    \ candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n\
    \    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = re.sub('[^a-z]', '',\
    \ text)\n    return text == text[::-1]\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphr8cmaxj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphr8cmaxj.py\", line 28,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmphr8cmaxj.py\", line\
    \ 19, in check\n    assert candidate('') == True\n  File \"/tmp/tmphr8cmaxj.py\"\
    , line 14, in is_palindrome\n    text = re.sub('[^a-z]', '', text)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    for i in range(len(text)//2):\n        if text[i]\
    \ != text[-i-1]:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = re.sub(r'\\W+', '', text.lower())\n    if text\
    \ == '':\n        return True\n    elif text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n\
    \    else:\n        return False\n\nprint(is_palindrome('Hannah'))\nprint(is_palindrome('anna'))\n\
    print(is_palindrome('Dear, I live on no evil star!'))\nprint(is_palindrome('123454321'))\n\
    print(is_palindrome('1234321'))\nprint(is_palindrome('12345'))\nprint(is_palindrome('12a345a4321'))\n\
    print(is_palindrome('12a345a4321'))\nprint(is_palindrome('12aa345a4321'))\nprint(is_palindrome('12aa345a432a1'))\n\
    def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyvi_f5yc.py\", line\
    \ 21, in <module>\n    print(is_palindrome('Hannah'))\n  File \"/tmp/tmpyvi_f5yc.py\"\
    , line 13, in is_palindrome\n    text = re.sub(r'\\W+', '', text.lower())\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkc_x61kt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkc_x61kt.py\", line 26,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpkc_x61kt.py\", line\
    \ 17, in check\n    assert candidate('') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\n@cache\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63u37rc6.py\", line\
    \ 16, in <module>\n    @cache\nNameError: name 'cache' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # See the implementations section for alternate algorithms\n\
    \    # If the length is 0 or 1, the string is considered a palindrome\n    if\
    \ len(text) < 2:\n        return True\n\n    # Once we determine the first and\
    \ last characters are the same,\n    # we can recurse on the substring text[1:-1]\n\
    \    if text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n\n   \
    \ return False\n\n\n@given(st.text())\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpak3q31uq.py\", line\
    \ 26, in <module>\n    @given(st.text())\nNameError: name 'given' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == reverse(text)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl76ggwre.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl76ggwre.py\", line 26,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpl76ggwre.py\", line\
    \ 17, in check\n    assert candidate('') == True\n  File \"/tmp/tmpl76ggwre.py\"\
    , line 13, in is_palindrome\n    return text == reverse(text)\nNameError: name\
    \ 'reverse' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = text.replace(' ',\
    \ '')\n    if len(text) < 2:\n        return True\n    else:\n        if text[0]\
    \ == text[-1]:\n            return is_palindrome(text[1:-1])\n        else:\n\
    \            return False\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text == \"\":\n        return True\n    return\
    \ text == text[::-1]\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) == 0:\n        return True\n    elif\
    \ len(text) == 1:\n        return True\n    else:\n        first_char = text[0]\n\
    \        last_char = text[-1]\n        if first_char == last_char:\n         \
    \   return is_palindrome(text[1:-1])\n        else:\n            return False\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    n = len(text)\n    for i in range(n // 2):\n     \
    \   if text[i] != text[n - i - 1]:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    n = len(text)\n    i = 0\n    while i < n - i - 1:\n\
    \        if text[i] != text[n - i - 1]:\n            return False\n        i +=\
    \ 1\n    return True\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    elif\
    \ text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') ==\
    \ True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') ==\
    \ True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    else:\n\
    \        if text[0] == text[-1]:\n            return is_palindrome(text[1:-1])\n\
    \        else:\n            return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    middle = len(text) // 2\n    return text[:middle]\
    \ == text[-middle:][::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # make sure it's a string\n    assert isinstance(text,\
    \ str)\n    # make all characters lowercase\n    text = text.lower()\n    # replace\
    \ all non-alphanumeric characters\n    text = re.sub(r'[^\\w]', '', text)\n  \
    \  # check if text is empty\n    if not text:\n        return True\n    # check\
    \ if the text is a palindrome\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd592xyzc.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpd592xyzc.py\", line 36,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpd592xyzc.py\", line\
    \ 27, in check\n    assert candidate('') == True\n  File \"/tmp/tmpd592xyzc.py\"\
    , line 18, in is_palindrome\n    text = re.sub(r'[^\\w]', '', text)\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    if text[0]\
    \ != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = ''.join(filter(str.isalnum,\
    \ text))\n    return text == text[::-1]\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    for index in range(len(text) // 2):\n        if text[index]\
    \ != text[len(text) - index - 1]:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # Empty string is a palindrome\n    if len(text) ==\
    \ 0:\n        return True\n\n    # Since if text has odd length, we need to skip\
    \ center letter\n    left = 0\n    right = len(text) - 1\n    while left < right:\n\
    \        if text[left] != text[right]:\n            return False\n        left\
    \ += 1\n        right -= 1\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = [char for char in\
    \ text if char.isalpha()]\n    return text == text[::-1]\n    # return text ==\
    \ text[::-1] and len(text) > 0\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text == '':\n        return True\n    reverse_text\
    \ = text[::-1]\n    return text == reverse_text\n\n\ndef check(candidate):\n \
    \   assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    for i in range(len(text) // 2):\n        if text[i]\
    \ != text[len(text) - i - 1]:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\
    def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text == '':\n        return True\n    return text\
    \ == text[::-1]\n\ndef check(candidate):\n    assert candidate('') == True\n \
    \   assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n \
    \   assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text == text[::-1]:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return is_palindrome_rec(text)\n    # return is_palindrome_iter(text)\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxujj8msm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxujj8msm.py\", line 27,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpxujj8msm.py\", line\
    \ 18, in check\n    assert candidate('') == True\n  File \"/tmp/tmpxujj8msm.py\"\
    , line 13, in is_palindrome\n    return is_palindrome_rec(text)\nNameError: name\
    \ 'is_palindrome_rec' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    clean_text = text.strip().lower()\n    return clean_text\
    \ == clean_text[::-1]\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') ==\
    \ True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') ==\
    \ True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text == '':\n        return True\n    return text\
    \ == text[::-1]\n\ndef check(candidate):\n    assert candidate('') == True\n \
    \   assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n \
    \   assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    if text[0]\
    \ != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    end = len(text)\n    for i in range(0, int(end / 2)):\n\
    \        if text[i] != text[end - i - 1]:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert\
    \ candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert\
    \ candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert\
    \ candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n\
    \    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    def to_chars(text):\n        text = text.lower()\n\
    \        letters = ''\n        for c in text:\n            if c in string.ascii_lowercase:\n\
    \                letters = letters + c\n        return letters\n\n    def is_pal(text):\n\
    \        if len(text) <= 1:\n            return True\n        else:\n        \
    \    return text[0] == text[-1] and is_pal(text[1:-1])\n\n    return is_pal(to_chars(text))\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbq2ww1lk.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpbq2ww1lk.py\", line 40,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpbq2ww1lk.py\", line\
    \ 32, in check\n    assert candidate('aba') == True\n  File \"/tmp/tmpbq2ww1lk.py\"\
    , line 27, in is_palindrome\n    return is_pal(to_chars(text))\n  File \"/tmp/tmpbq2ww1lk.py\"\
    , line 17, in to_chars\n    if c in string.ascii_lowercase:\nNameError: name 'string'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    elif text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert\
    \ candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert\
    \ candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert\
    \ candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n\
    \    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    else:\n\
    \        return text[0] == text[-1] and is_palindrome(text[1:-1])\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) == 0:\n        return True\n    else:\n\
    \        return text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = \"\".join(re.findall(r'[A-Za-z0-9]',\
    \ text))\n    return text == text[::-1]\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzchfau2u.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpzchfau2u.py\", line 27,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpzchfau2u.py\", line\
    \ 18, in check\n    assert candidate('') == True\n  File \"/tmp/tmpzchfau2u.py\"\
    , line 14, in is_palindrome\n    text = \"\".join(re.findall(r'[A-Za-z0-9]', text))\n\
    NameError: name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    l = len(text)\n    return all(text[i] == text[l -\
    \ i - 1] for i in range(l // 2))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # text = text.lower()\n    text = text.replace(' ',\
    \ '')\n    text = text.replace(',', '')\n    text = text.replace('.', '')\n  \
    \  text = text.replace('!', '')\n    text = text.replace('?', '')\n    text =\
    \ text.replace('-', '')\n    text = text.replace('-', '')\n    return text ==\
    \ text[::-1]\n\n\ndef check(candidate):\n    assert candidate('') == True\n  \
    \  assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n  \
    \  assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return str(text) == str(text)[::-1]\n\n\n@pretty\n\
    def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit53i479.py\", line\
    \ 16, in <module>\n    @pretty\nNameError: name 'pretty' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return is_palindrome_rec(text)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8qbjodn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpc8qbjodn.py\", line 26,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpc8qbjodn.py\", line\
    \ 17, in check\n    assert candidate('') == True\n  File \"/tmp/tmpc8qbjodn.py\"\
    , line 13, in is_palindrome\n    return is_palindrome_rec(text)\nNameError: name\
    \ 'is_palindrome_rec' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return is_palindrome_trim(text)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfbjyeah.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprfbjyeah.py\", line 26,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmprfbjyeah.py\", line\
    \ 17, in check\n    assert candidate('') == True\n  File \"/tmp/tmprfbjyeah.py\"\
    , line 13, in is_palindrome\n    return is_palindrome_trim(text)\nNameError: name\
    \ 'is_palindrome_trim' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    if text[0]\
    \ != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    rev = text[::-1]\n    if text == rev:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = re.sub(r'\\W+', '', text.lower())\n    return\
    \ text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvu8wo_0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptvu8wo_0.py\", line 27,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmptvu8wo_0.py\", line\
    \ 18, in check\n    assert candidate('') == True\n  File \"/tmp/tmptvu8wo_0.py\"\
    , line 13, in is_palindrome\n    text = re.sub(r'\\W+', '', text.lower())\nNameError:\
    \ name 're' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = text.replace(' ',\
    \ '')\n    for i in range(len(text) // 2):\n        if text[i] != text[-1-i]:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    left = 0\n    right = len(text) - 1\n    while left\
    \ < right:\n        if text[left] != text[right]:\n            return False\n\
    \        left += 1\n        right -= 1\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # PUT YOUR CODE HERE\n    for i in range(len(text)):\n\
    \        if text[i] != text[len(text) - i - 1]:\n            return False\n  \
    \  return True\n\ndef check(candidate):\n    assert candidate('') == True\n  \
    \  assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n  \
    \  assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) == 0:\n        return True\n    elif\
    \ len(text) == 1:\n        return True\n    elif text[0] == text[-1]:\n      \
    \  return is_palindrome(text[1:-1])\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text[::-1] == text:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    i = 0\n    j = len(text)\
    \ - 1\n    while i < j:\n        if text[i] != text[j]:\n            return False\n\
    \        i += 1\n        j -= 1\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    return\
    \ text[0] == text[-1] and is_palindrome(text[1:-1])\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8lybx9ph.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8lybx9ph.py\", line 26,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmp8lybx9ph.py\", line\
    \ 17, in check\n    assert candidate('') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    text =\
    \ text.lower()\n    for i in range(0, len(text) // 2):\n        if text[i] !=\
    \ text[-i - 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    string = text.lower()\n    if len(string) < 2:\n \
    \       return True\n    if string[0] != string[-1]:\n        return False\n \
    \   return is_palindrome(string[1:-1])\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) == 0:\n        return True\n    elif\
    \ len(text) == 1:\n        return True\n    else:\n        return text[0] == text[-1]\
    \ and is_palindrome(text[1:-1])\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    new_text = ''\n    text = text.lower()\n    for char\
    \ in text:\n        if char.isalpha():\n            new_text += char\n    return\
    \ new_text == new_text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    elif\
    \ text[0] == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') ==\
    \ True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') ==\
    \ True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\nimport doctest\ndoctest.testmod()\n\
    def check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return all(text[i] == text[-i - 1] for i in range(len(text)\
    \ // 2))\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert\
    \ candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert\
    \ candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert\
    \ candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n\
    \    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) <= 1:\n        return True\n    if text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    return False\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # PUT YOUR CODE HERE\n    reversed_text = text[::-1]\n\
    \    return text == reversed_text\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    for char in text:\n        position = text.index(char)\n\
    \        if char != text[-position - 1]:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert\
    \ candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert\
    \ candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert\
    \ candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n\
    \    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.replace(' ', '').lower()\n    return text\
    \ == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    for i in range(len(text)\
    \ // 2):\n        if text[i] != text[-i - 1]:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert\
    \ candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert\
    \ candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert\
    \ candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n\
    \    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == reverse(text)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5pxx24a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg5pxx24a.py\", line 26,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpg5pxx24a.py\", line\
    \ 17, in check\n    assert candidate('') == True\n  File \"/tmp/tmpg5pxx24a.py\"\
    , line 13, in is_palindrome\n    return text == reverse(text)\nNameError: name\
    \ 'reverse' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    i = 0\n    j = len(text) - 1\n    while i < j:\n \
    \       if text[i] != text[j]:\n            return False\n        i += 1\n   \
    \     j -= 1\n    return True\n    # text2 = reversed(text)\n    # return list(text)\
    \ == list(text2)\n\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    n = len(text)\n    if n <= 1:\n        return True\n\
    \    else:\n        return text[0] == text[-1] and is_palindrome(text[1:-1])\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) == 0:\n        return True\n    if text[0]\
    \ == text[-1]:\n        return is_palindrome(text[1:-1])\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate('') == True\n    assert\
    \ candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert\
    \ candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert\
    \ candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n\
    \    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # your code here\n    return text == text[::-1]\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    for i in range(0, len(text) // 2):\n        if text[i]\
    \ != text[-i - 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    if text[0]\
    \ != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    for i in range(len(text) // 2):\n        if text[i]\
    \ != text[-i - 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if text:\n        for i in range(len(text) // 2):\n\
    \            if text[i] != text[len(text) - i - 1]:\n                return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('') == True\n\
    \    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n\
    \    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n\
    \    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\
    \ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = list(text)\n    text.reverse()\n    return\
    \ ''.join(text) == text\n\n\nprint(is_palindrome(''))\nprint(is_palindrome('aba'))\n\
    print(is_palindrome('aaaaa'))\nprint(is_palindrome('zbcd'))\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: "False\nFalse\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1xcbbnjq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1xcbbnjq.py\", line 33,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmp1xcbbnjq.py\", line\
    \ 24, in check\n    assert candidate('') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # TODO 1: implement this function\n    text_copy =\
    \ text\n    text_copy_reversed = ''\n    for i in range(len(text_copy)):\n   \
    \     text_copy_reversed += text_copy[len(text_copy) - 1 - i]\n    if text_copy_reversed\
    \ == text_copy:\n        return True\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    from collections import deque\n    text = deque(text)\n\
    \    while len(text) > 1:\n        if text.popleft() != text.pop():\n        \
    \    return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == reverse(text)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxq135x3w.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxq135x3w.py\", line 26,\
    \ in test_check\n    check(is_palindrome)\n  File \"/tmp/tmpxq135x3w.py\", line\
    \ 17, in check\n    assert candidate('') == True\n  File \"/tmp/tmpxq135x3w.py\"\
    , line 13, in is_palindrome\n    return text == reverse(text)\nNameError: name\
    \ 'reverse' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    for i in range(len(text) // 2):\n        if text[i]\
    \ != text[-i - 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    str_len = len(text)\n   \
    \ for i in range(str_len):\n        if text[i] != text[str_len - i - 1]:\n   \
    \         return False\n    return True\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    left, right = 0, len(text) - 1\n    while left < right:\n\
    \        if text[left] != text[right]:\n            return False\n        left\
    \ += 1\n        right -= 1\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    if text[0]\
    \ != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    if len(text) < 2:\n        return True\n    if text[0]\
    \ != text[-1]:\n        return False\n    return is_palindrome(text[1:-1])\n\n\
    \ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    # check length of text\n    text_length = len(text)\n\
    \    # set range of length if text is odd\n    if text_length % 2 == 1:\n    \
    \    text_range = int((text_length - 1) / 2)\n    # set range of length if text\
    \ is even\n    else:\n        text_range = int(text_length / 2)\n    # set position\
    \ of two pointers, begin and end\n    pointer_begin = 0\n    pointer_end = text_length\
    \ - 1\n    # iterate through the text\n    for i in range(text_range):\n     \
    \   # if chars are equal, move pointers\n        if text[pointer_begin] == text[pointer_end]:\n\
    \            pointer_begin += 1\n            pointer_end -= 1\n        # if chars\
    \ are not equal, return False\n        else:\n            return False\n    #\
    \ if all chars are equal, return True\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    text = text.lower()\n    text = text.replace(' ',\
    \ '')\n    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n\
    \    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n\
    \    False\n    \"\"\"\n    return text == text[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
