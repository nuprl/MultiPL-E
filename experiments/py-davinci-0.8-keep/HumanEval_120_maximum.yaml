name: HumanEval_120_maximum
language: py
prompt: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
  \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n\
  \    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\
  \n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n     \
  \   Output: [2]\n\n    Note:\n        1. The length of the array will be in the\
  \ range of [1, 1000].\n        2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
  \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
  \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
  \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3,\
  \ 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1,\
  \ 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert\
  \ candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243,\
  \ -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n"
completions: ["    return sorted(arr, reverse=True)[:k]\n", "    heap = []\n    for\
    \ num in arr:\n        heapq.heappush(heap, (-num, num))\n    out = []\n    for\
    \ _ in range(k):\n        out.append(heapq.heappop(heap)[1])\n    return out",
  "    heap = [-x for x in arr[:k]]\n    heapq.heapify(heap)\n    for i in range(k,\
    \ len(arr)):\n        if arr[i] > -heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, -arr[i])\n    return [-x for x in heap]\n",
  "    return sorted(arr, reverse=True)[:k]\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4,\
    \ -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    ans = heapq.nlargest(k, arr)\n    return ans\n\n",
  "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    if k == len(arr):\n        return arr\n    else:\n        nums = list(Counter(arr).items())\n\
    \        nums.sort(key=lambda t: t[1], reverse=True)\n        return [n[0] for\
    \ n in nums[:k]]", '    return sorted(arr, reverse=True)[:k]', "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ -num)\n    return sorted([-heapq.heappop(heap) for _ in range(k)])\n", '    return
    sorted(arr, reverse=True)[:k]', "    if k == 0:\n        return []\n    elif k\
    \ >= len(arr):\n        return sorted(arr, reverse=True)\n    else:\n        out\
    \ = []\n        while len(out) < k:\n            mx = max(arr)\n            arr.remove(mx)\n\
    \            out.append(mx)\n        return out\n", "    arr.sort()\n    return\
    \ arr[-k:]\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4, -4, 4], 2))\n\
    print(maximum([-3, 2, 1, 2, -1, -2, 1], 1))", "    arr.sort()\n    return arr[-k:]",
  "    queue = []\n    for i in range(len(arr)):\n        while queue and arr[i] >\
    \ queue[-1]:\n            queue.pop()\n        queue.append(arr[i])\n        if\
    \ len(queue) > k:\n            queue.pop(0)\n    return queue", "    heapq.heapify(arr)\n\
    \    return heapq.nlargest(k, arr)", "    # Reference: https://stackoverflow.com/questions/6193498/pythonic-way-to-find-maximum-value-and-its-index-in-a-list\n\
    \    return sorted(arr, reverse=True)[:k]\n", '    return sorted(arr, reverse=True)[:k]',
  "    from heapq import heappush, heappop\n    from collections import defaultdict\n\
    \n    h = []\n    m = defaultdict(list)\n    for a in arr:\n        m[a].append(a)\n\
    \        heappush(h, a)\n        if len(h) > k:\n            min_ = heappop(h)\n\
    \            m[min_].pop()\n            if not m[min_]:\n                del m[min_]\n\
    \n    return m[max(m)]\n\n", "    heap = []\n    for num in arr:\n        if not\
    \ heap or heap[0] < num:\n            heapq.heappush(heap, num)\n            if\
    \ len(heap) > k:\n                heapq.heappop(heap)\n    return heap\n", " \
    \   heap = []\n    heapq.heapify(heap)\n\n    for el in arr:\n        heapq.heappush(heap,\
    \ -el)\n\n    res = []\n    for _ in range(k):\n        res.append(-heapq.heappop(heap))\n\
    \n    return res", '    return sorted(arr, reverse=True)[:k]', '    return sorted(arr,
    reverse=True)[:k]', "    return sorted(arr, reverse=True)[:k]\n", "    heapq.heapify(arr)\n\
    \    return heapq.nlargest(k, arr)\n", '    return sorted(arr, reverse=True)[:k]',
  "    # Base case\n    if len(arr) == k:\n        return arr\n\n    heap = []\n \
    \   i = 0\n    while i < k:\n        heappush(heap, arr[i])\n        i += 1\n\n\
    \    while i < len(arr):\n        if arr[i] > heap[0]:\n            heappop(heap)\n\
    \            heappush(heap, arr[i])\n        i += 1\n\n    return heap", '    return
    sorted(arr, reverse=True)[:k]', "    return sorted(arr, reverse=True)[:k]\n",
  "    if not arr:\n        return arr\n    heap = [-num for num in arr[:k]]\n   \
    \ heapq.heapify(heap)\n    for i in range(k, len(arr)):\n        if arr[i] > -heap[0]:\n\
    \            heapq.heappop(heap)\n            heapq.heappush(heap, -arr[i])\n\
    \    return [-heapq.heappop(heap) for _ in range(k)]", "    return sorted(arr,\
    \ reverse=True)[:k]\n", '    return sorted(arr, reverse=True)[:k]', "    tmp =\
    \ []\n    heapq.heapify(tmp)\n    for i in arr:\n        heapq.heappush(tmp, -i)\n\
    \    res = []\n    for _ in range(k):\n        res.append(-heapq.heappop(tmp))\n\
    \    return res\n\narr1 = [-3, -4, 5]\nk1 = 3\nprint(maximum(arr1, k1))\n\narr2\
    \ = [4, -4, 4]\nk2 = 2\nprint(maximum(arr2, k2))\n\narr3 = [-3, 2, 1, 2, -1, -2,\
    \ 1]\nk3 = 1\nprint(maximum(arr3, k3))", "    heap = []\n    for num in arr:\n\
    \        heappush(heap, -num)\n        if len(heap) > k:\n            heappop(heap)\n\
    \    return sorted([-heappop(heap) for _ in range(k)])\n", '    return sorted(arr,
    reverse=True)[:k]', "    ret = []\n    for idx, val in enumerate(arr):\n     \
    \   while ret and val > ret[-1] and len(ret) + len(arr) - idx > k:\n         \
    \   ret.pop()\n        if len(ret) < k:\n            ret.append(val)\n    return\
    \ ret\n", "    arr = sorted(arr)\n    return arr[-k:]\n", "    h = []\n    for\
    \ num in arr:\n        heapq.heappush(h, num)\n        if len(h) > k:\n      \
    \      heapq.heappop(h)\n    return h\n\narr = [-3, -4, 5]\nk = 3\n\nprint(maximum(arr,\
    \ k))", "    heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n\
    \        if len(heap) > k:\n            heapq.heappop(heap)\n    return heap\n",
  '    return sorted(arr, reverse=True)[:k]', "    h = sorted(arr, reverse=True)[:k]\n\
    \    return sorted(h)", "    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ (-num, num))\n    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(heap)[1])\n\
    \    return res\n", '    return heapq.nlargest(k, arr)', "    heap = Heap()\n\
    \    for num in arr:\n        heap.push(num)\n    return heap.sort()\n", '    pass',
  '    pass', "    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", '    return sorted(arr, reverse=True)[:k]', '    return
    sorted(arr, reverse=True)[:k]', '    return sorted(arr, reverse=True)[:k]', " \
    \   return sorted(arr, reverse=True)[:k]\n", '    return sorted(arr, reverse=True)[:k]',
  '    return sorted(arr, reverse=True)[:k]', "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]", "    pq = []\n    for num in arr:\n     \
    \   heappush(pq, -num)\n        if len(pq) > k:\n            heappop(pq)\n   \
    \ return sorted([-heappop(pq) for _ in range(k)])\n", "    c = Counter(arr)\n\
    \    c = c.most_common()\n    return [c[i][0] for i in range(k)]", "    if not\
    \ arr:\n        return arr\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    ans = [float('-inf')] * k\n    for num in arr:\n        if\
    \ num > ans[0]:\n            ans[0] = num\n            ans.sort(reverse=True)\n\
    \    return ans\n", "    heap = []\n    for num in arr:\n        heapq.heappush(heap,\
    \ num)\n        if len(heap) > k:\n            heapq.heappop(heap)\n    return\
    \ sorted(heap, reverse=True)", '    pass', "    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, arr[i])\n    for i in range(k, len(arr)):\n    \
    \    if arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ arr[i])\n    return heap", '    return sorted(arr, reverse=True)[:k]', "   \
    \ if k > len(arr):\n        raise Exception(\"k must be less than or equal to\
    \ the length of arr\")\n\n    heap = Heap(arr)\n    heap.build_max_heap()\n  \
    \  return heap.heap_sort(k)\n", "    arr.sort()\n    return arr[-k:]\n", "   \
    \ if k == 0:\n        return []\n    else:\n        heap = []\n        for i in\
    \ range(len(arr)):\n            if len(heap) < k:\n                heapq.heappush(heap,\
    \ arr[i])\n            else:\n                heapq.heappushpop(heap, arr[i])\n\
    \        return sorted(heap, reverse=True)", "    return heapq.nlargest(k, arr)\n",
  "    # return sorted(arr, reverse=True)[:k]\n    return heapq.nlargest(k, arr)\n",
  "    if not arr:\n        return []\n    if len(arr) == 1 or k == 1:\n        return\
    \ arr\n    elif k >= len(arr):\n        return sorted(arr, reverse=True)\n   \
    \ else:\n        return sorted(arr, reverse=True)[:k]\n", "    arr.sort()\n  \
    \  return arr[-k:]\n", "    arr.sort()\n    return arr[-k:]\n", '    return sorted(arr,
    reverse=True)[:k]', "    length = len(arr)\n    assert length >= k\n\n    h =\
    \ []\n    for i in range(k):\n        heapq.heappush(h, (-arr[i], i))\n\n    for\
    \ i in range(k, length):\n        if arr[i] > -h[0][0]:\n            heapq.heappop(h)\n\
    \            heapq.heappush(h, (-arr[i], i))\n\n    return [-x[0] for x in h]",
  "    if k == len(arr):\n        return arr\n    heapq.heapify(arr)\n    for _ in\
    \ range(len(arr) - k):\n        heapq.heappop(arr)\n    return heapq.nlargest(k,\
    \ arr)", "    heapify(arr)\n    return [heappop(arr) for _ in range(k)]\n", " \
    \   heap = []\n    for num in arr:\n        if len(heap) == k:\n            heapq.heappushpop(heap,\
    \ num)\n        else:\n            heapq.heappush(heap, num)\n    \n    return\
    \ heapq.nlargest(k, heap)", "    return sorted(arr, reverse=True)[:k]\n", '    return
    sorted(arr, reverse=True)[:k]', "    if not arr:\n        return []\n    # return\
    \ sorted(arr, reverse=True)[:k]\n    # import heapq\n    # return heapq.nlargest(k,\
    \ arr)\n    nums = sorted(arr, reverse=True)\n    return nums[:k]\n", '    return
    heapq.nlargest(k, arr)', "    max_queue = MaxHeap()\n    min_queue = MinHeap()\n\
    \n    for x in arr:\n        max_queue.add(x)\n        min_queue.add(x)\n\n  \
    \  for _ in range(k):\n        max_queue.pop()\n        min_queue.pop()\n\n  \
    \  return sorted(max_queue._array, reverse=True)\n", "    pass\n", "    heapq.heapify(arr)\n\
    \    return heapq.nlargest(k, arr)", "    arr.sort()\n    return arr[-k:]", '    return
    sorted(arr, reverse=True)[:k]', "    arr = sorted(arr, reverse=True)\n    return\
    \ arr[:k]\n", "    pass\n", "    heap = arr[:k]\n    heapq.heapify(heap)\n   \
    \ for i in range(k, len(arr)):\n        heapq.heappushpop(heap, arr[i])\n    return\
    \ sorted(heap, reverse=True)\n", "    arr.sort()\n    return arr[-k:]\n", "  \
    \  length = len(arr)\n    if k >= length:\n        return sorted(arr, reverse=True)\n\
    \    else:\n        return sorted(arr, reverse=True)[:k]", "    for i in range(k):\n\
    \        # print(f\"len(arr): {len(arr)}\")\n        mx = i\n        for j in\
    \ range(i+1, len(arr)):\n            if arr[j] > arr[mx]:\n                mx\
    \ = j\n        arr[i], arr[mx] = arr[mx], arr[i]\n    return arr[:k]\n", "   \
    \ return arr\n\n\nassert(maximum([-3, -4, 5], 3) == [-4, -3, 5])\nassert(maximum([4,\
    \ -4, 4], 2) == [4, 4])\nassert(maximum([-3, 2, 1, 2, -1, -2, 1], 1) == [2])",
  "    # Create a heap and add first k numbers to it\n    h = heapq.heapify(arr[:k])\n\
    \n    # Loop through the rest of the elements\n    for i in range(k, len(arr)):\n\
    \        # Compare the next element to the heap's max\n        if arr[i] > h[0]:\n\
    \            # If next element is greater than max, pop max and insert new element\
    \ into heap\n            heapq.heappop(h)\n            heapq.heappush(h, arr[i])\n\
    \n    # Return the heap and turn it into a list\n    return list(h)", "    arr\
    \ = sorted(arr, reverse=True)\n    return arr[:k]\n", "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    arr.sort()\n    return arr[-k:]", "    pass\n", " \
    \   heap = []\n    ret = []\n\n    for x in arr:\n        heapq.heappush(heap,\
    \ x)\n\n    while len(ret) < k:\n        ret.append(heapq.heappop(heap))\n\n \
    \   return ret\n", '    return sorted(arr, reverse=True)[:k]', "    if k == len(arr):\n\
    \        return arr\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap,\
    \ -arr[i])\n    for i in range(k, len(arr)):\n        if -arr[i] > heap[0]:\n\
    \            heapq.heappop(heap)\n            heapq.heappush(heap, -arr[i])\n\
    \    return sorted([-h for h in heap])", "    n = len(arr)\n    if k >= n:\n \
    \       return sorted(arr)\n    else:\n        heap = []\n        for i in range(k):\n\
    \            heapq.heappush(heap, (-arr[i], i))\n        for i in range(k, n):\n\
    \            _, key = heap[0]\n            if arr[i] > arr[key]:\n           \
    \     heapq.heappop(heap)\n                heapq.heappush(heap, (-arr[i], i))\n\
    \        return sorted([-heapq.heappop(heap)[0] for _ in range(k)])", "    heap\
    \ = []\n    res = []\n\n    for e in arr:\n        heapq.heappush(heap, e)\n\n\
    \    while len(res) < k:\n        res.append(heapq.heappop(heap))\n\n    return\
    \ res\n", '    return sorted(arr, reverse=True)[:k]', "    return sorted(arr,\
    \ reverse=True)[:k]\n", "    hs = []\n    for elem in arr:\n        hs.append((elem,\
    \ id(elem)))\n    heapq.heapify(hs)\n    res = []\n    for _ in range(k):\n  \
    \      res.append(heapq.heappop(hs)[0])\n    return res\n", "    arr.sort()\n\
    \    return arr[-k:]\n", "    if k == 0:\n        return []\n    arr.sort()\n\
    \    if k == len(arr):\n        return arr\n    return arr[-k:]\n", "    pass\n",
  "    if k == 0:\n        return []\n    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]", "    from heapq import heapify, heappop\n\
    \    heap = arr[:k]\n    heapify(heap)\n    for v in arr[k:]:\n        if v >\
    \ heap[0]:\n            heappop(heap)\n            heap.append(v)\n          \
    \  heapify(heap)\n    return heap", "    arr.sort()\n    return arr[-k:]\n", " \
    \   if not arr:\n        return []\n    else:\n        heapq.heapify(arr)\n  \
    \      return heapq.nlargest(k, arr)\n\nassert maximum([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\nassert maximum([4, -4, 4], 2) == [4, 4]\nassert maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]", "    arr.sort()\n    return arr[::-1][:k]\n", "    n\
    \ = len(arr)\n    if n <= k:\n        return sorted(arr, reverse=True)\n    arr.sort()\n\
    \    return arr[-k:]\n", '    pass', "    n = len(arr)\n    pq = []\n    for x\
    \ in arr:\n        heapq.heappush(pq, x)\n        if len(pq) > k:\n          \
    \  heapq.heappop(pq)\n    res = [heapq.heappop(pq) for _ in range(k)]\n    return\
    \ res[::-1]\n", "    queue = [(-v, i) for i, v in enumerate(arr)]\n    heapq.heapify(queue)\n\
    \    return [heapq.heappop(queue)[1] for _ in range(k)]", '    pass', "    if\
    \ not arr:\n        return []\n    if len(arr) == 1:\n        return arr\n   \
    \ if k == len(arr):\n        return sorted(arr, reverse=True)\n    stack = []\n\
    \    for i in range(k):\n        stack.append(arr[i])\n    for i in range(k, len(arr)):\n\
    \        stack.append(arr[i])\n        for j in range(k):\n            stack.pop()\n\
    \    return sorted(stack, reverse=True)\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    arr.sort()\n    return arr[-k:]", "    return arr\n", "    heapq.heapify(arr)\n\
    \    return heapq.nlargest(k, arr)\n", "    heap = []\n    for num in arr:\n \
    \       heapq.heappush(heap, (-num, num))\n        if len(heap) > k:\n       \
    \     heapq.heappop(heap)\n    return [tup[1] for tup in heap]\n\nprint(maximum([4,\
    \ -4, 4], 2))", '    pass', "    import heapq\n    output = []\n    for i in arr:\n\
    \        heapq.heappush(output, -i)\n        if len(output) > k:\n           \
    \ heapq.heappop(output)\n    return [-i for i in heapq.nlargest(k, output)]",
  "    return sorted(arr, reverse=True)[:k]\n", "    arr = sorted(arr, reverse=True)\n\
    \    return arr[:k]", "    heap = Heap(arr)\n    heap.build_max_heap()\n    max_items\
    \ = []\n    for i in range(k):\n        max_items.append(heap.extract_max())\n\
    \    return max_items\n", "    arr.sort()\n    arr.reverse()\n    return arr[:k]\n",
  "    res = sorted(arr, reverse=True)\n    return res[:k]", "    # create a heap\n\
    \    heap = []\n    for i in range(k):\n        heapq.heappush(heap, arr[i])\n\
    \n    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n           \
    \ heapq.heappop(heap)\n            heapq.heappush(heap, arr[i])\n\n    return\
    \ sorted(heap, reverse=True)\n", '    return sorted(arr, reverse=True)[:k]', " \
    \   # heapq.nlargest(k, arr)\n    heapq.heapify(arr)\n    return heapq.nlargest(k,\
    \ arr)\n", "    arr.sort()\n    return arr[-k:]", "    arr = list(set(arr))\n\
    \    return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    i = 0\n    if k == len(arr):\n        return arr\n    while i <= len(arr) -\
    \ k:\n        j = i\n        max_idx = i\n        while j < len(arr) - k + 1:\n\
    \            if arr[j] > arr[max_idx]:\n                max_idx = j\n        \
    \    j += 1\n        arr[i], arr[max_idx] = arr[max_idx], arr[i]\n        i +=\
    \ 1\n    return arr[-k:]\n\n", '    return sorted(arr, reverse=True)[:k]', " \
    \   arr.sort()\n    return arr[::-1][:k]\n", "    arr.sort()\n    print(arr)\n\
    \    return arr[-k:]\n", "    if not arr:\n        return arr\n    if k == 0:\n\
    \        return []\n    else:\n        heap = [-float('inf')] * k\n        for\
    \ num in arr:\n            if num > heap[0]:\n                heapq.heappushpop(heap,\
    \ num)\n        return heap\n", "    arr.sort()\n    return arr[-k:]\n", "   \
    \ heap = []\n    for num in arr:\n        heapq.heappush(heap, num)\n        if\
    \ len(heap) > k:\n            heapq.heappop(heap)\n    return heapq.nlargest(k,\
    \ heap)", "    n = len(arr)\n    def partition(left: int, right: int, pivot: int)\
    \ -> int:\n        val = arr[pivot]\n        arr[pivot], arr[right] = arr[right],\
    \ arr[pivot]\n        store_index = left\n        for i in range(left, right):\n\
    \            if arr[i] < val:\n                arr[store_index], arr[i] = arr[i],\
    \ arr[store_index]\n                store_index += 1\n        arr[right], arr[store_index]\
    \ = arr[store_index], arr[right]\n        return store_index\n\n    def select(left:\
    \ int, right: int, k_smallest: int) -> int:\n        if left == right:\n     \
    \       return left\n        pivot_index = random.randint(left, right)\n     \
    \   pivot_index = partition(left, right, pivot_index)\n        if k_smallest ==\
    \ pivot_index:\n            return k_smallest\n        elif k_smallest < pivot_index:\n\
    \            return select(left, pivot_index - 1, k_smallest)\n        else:\n\
    \            return select(pivot_index + 1, right, k_smallest)\n\n    return sorted(arr[select(0,\
    \ n - 1, n - k):], reverse=True)", "    pass\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    sort_arr = sorted(arr, reverse=True)\n    return sort_arr[:k]\n", "    return\
    \ sorted(arr, reverse=True)[:k]\n\nprint(maximum([-3, -4, 5], 3))\nprint(maximum([4,\
    \ -4, 4], 2))\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))", "    queue = []\n\
    \    for i in range(len(arr)):\n        if i < k:\n            heapq.heappush(queue,\
    \ arr[i])\n        else:\n            heapq.heappushpop(queue, arr[i])\n    return\
    \ sorted(queue, reverse=True)", "    pass\n", "    #return heapq.nlargest(k, arr)\n\
    \    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in range(k)]\n\n\
    print(maximum([-3, -4, 5], 3))", "    res = sorted(arr, reverse=True)\n    return\
    \ res[:k]", "    arr.sort()\n    return arr[::-1][:k]", "    # Sliding window\n\
    \    i = 0\n    for j in range(k, len(arr)):\n        if arr[j] > arr[i]:\n  \
    \          i = j\n            continue\n        elif arr[j] < arr[i]:\n      \
    \      i += 1\n    return arr[:i] + arr[j-k+1:j+1]\n", "    arr.sort()\n    return\
    \ arr[-k:]", '    pass', "    bucket = [[] for _ in range(1000)]\n    for n in\
    \ arr:\n        bucket[-n].append(n)\n    res = []\n    for i in range(1000):\n\
    \        res.extend(bucket[i])\n        if len(res) >= k:\n            return\
    \ res[:k]", '    pass', "    return sorted(arr, reverse=True)[:k]\n", "    n =\
    \ len(arr)\n    if k >= n:\n        return sorted(arr)\n    elif k == 1:\n   \
    \     return [max(arr)]\n    else:\n        ans = []\n        for i in range(n):\n\
    \            if len(ans) == 0:\n                ans.append(arr[i])\n         \
    \   else:\n                while ans and ans[-1] < arr[i] and len(ans) > k-1:\n\
    \                    ans.pop()\n                if len(ans) < k:\n           \
    \         ans.append(arr[i])\n        return ans\n", "    if k >= len(arr):\n\
    \        return sorted(arr, reverse=True)\n    heap = []\n    for i in range(k):\n\
    \        heapq.heappush(heap, -arr[i])\n    for i in range(k, len(arr)):\n   \
    \     if -arr[i] > heap[0]:\n            heapq.heappop(heap)\n            heapq.heappush(heap,\
    \ -arr[i])\n    return [-x for x in heap]", "    heapify(arr)\n    return [heappop(arr)\
    \ for _ in range(k)]\n", "    for x in range(k):\n        max_val = arr[x]\n \
    \       max_idx = x\n        for y in range(x+1, len(arr)):\n            if arr[y]\
    \ > max_val:\n                max_val = arr[y]\n                max_idx = y\n\
    \        arr[x], arr[max_idx] = arr[max_idx], arr[x]\n    return arr[:k]\n", " \
    \   return sorted(arr, reverse=True)[:k]\n", "    return sorted(arr, reverse=True)[:k]\n",
  "    if k == 0:\n        return []\n    elif k == len(arr):\n        return sorted(arr,\
    \ reverse=True)\n    else:\n        arr = sorted(arr, reverse=True)\n        return\
    \ arr[:k]", "    import heapq\n    heapq.heapify(arr)\n    return [heapq.heappop(arr)\
    \ for _ in range(k)]", '    pass', "    if k == 0:\n        return []\n    heap\
    \ = arr[:k]\n    heapq.heapify(heap)\n    for i in range(k, len(arr)):\n     \
    \   if arr[i] > heap[0]:\n            heapq.heapreplace(heap, arr[i])\n    return\
    \ sorted(heap, reverse=True)", "    # edge case\n    if k == 0:\n        return\
    \ []\n\n    maximums = []\n    for _ in range(k):\n        maximum = arr[0]\n\
    \        for element in arr:\n            if element > maximum:\n            \
    \    maximum = element\n        maximums.append(maximum)\n        arr.remove(maximum)\n\
    \    return maximums\n", "    return sorted(arr, reverse=True)[:k]\n", '    return
    sorted(arr, reverse=True)[:k]', "    return sorted(arr, reverse=True)[:k]\n",
  "    max_heap = Heap(max_heap=True)\n    for num in arr:\n        max_heap.insert(num)\n\
    \        if max_heap.size() > k:\n            max_heap.pop()\n    return max_heap.get_heap()\n\
    \n", "    def siftDown(i: int) -> None:\n        while 2 * i + 1 < k:\n      \
    \      l = 2 * i + 1\n            r = 2 * i + 2\n            if r < k and arr[l]\
    \ < arr[r]:\n                l = r\n            if arr[i] < arr[l]:\n        \
    \        arr[i], arr[l] = arr[l], arr[i]\n                i = l\n            else:\n\
    \                break\n\n    def siftUp(i: int) -> None:\n        while i > 0:\n\
    \            p = (i - 1) // 2\n            if arr[p] < arr[i]:\n             \
    \   arr[p], arr[i] = arr[i], arr[p]\n                i = p\n            else:\n\
    \                break\n\n    # build heap\n    for i in range(k // 2, -1, -1):\n\
    \        siftDown(i)\n\n    for i in range(k, len(arr)):\n        if arr[i] >\
    \ arr[0]:\n            arr[0] = arr[i]\n            siftDown(0)\n\n    return\
    \ arr[:k]\n\n", "    q = []\n    for e in arr:\n        heapq.heappush(q, e)\n\
    \    res = []\n    for _ in range(k):\n        res.append(heapq.heappop(q))\n\
    \    return res\n\n", "    max_heap = []\n    for i in range(k):\n        heapq.heappush(max_heap,\
    \ (-arr[i], arr[i]))\n    for i in range(k, len(arr)):\n        heapq.heappushpop(max_heap,\
    \ (-arr[i], arr[i]))\n    return [item[1] for item in max_heap]\n", "    # max_k\
    \ = []\n    # new_arr = []\n    # for i in range(len(arr)):\n    #     if arr[i]\
    \ not in new_arr:\n    #         new_arr.append(arr[i])\n    # new_arr.sort(reverse=True)\n\
    \    # for i in range(k):\n    #     max_k.append(new_arr[i])\n    # return max_k\n\
    \n    new_arr = sorted(arr, reverse=True)\n    return new_arr[:k]\n", '    return
    sorted(arr, reverse=True)[:k]', "    heap = []\n    for x in arr:\n        if\
    \ len(heap) < k:\n            heapq.heappush(heap, x)\n        else:\n       \
    \     heapq.heappushpop(heap, x)\n    return heap\n", "    arr.sort()\n    return\
    \ arr[len(arr)-k:]\n", "    result = []\n    seen = set()\n    for num in arr:\n\
    \        if num not in seen:\n            while result and num > result[-1] and\
    \ len(result) >= k:\n                result.pop()\n            if len(result)\
    \ < k:\n                result.append(num)\n        seen.add(num)\n    return\
    \ result", '    pass', "    res = []\n    for _ in range(k):\n        res.append(max(arr))\n\
    \        arr.remove(max(arr))\n    return res\n", "    heap = arr[:k]\n    heapq.heapify(heap)\n\
    \    for num in arr[k:]:\n        if num > heap[0]:\n            heapq.heappop(heap)\n\
    \            heapq.heappush(heap, num)\n    return sorted(heap, reverse=True)\n",
  "    heap = []\n    for e in arr:\n        if len(heap) == k:\n            if e\
    \ > heap[0]:\n                heapq.heappop(heap)\n                heapq.heappush(heap,\
    \ e)\n        else:\n            heapq.heappush(heap, e)\n    return sorted(heap,\
    \ reverse=True)\n", '    pass', "    arr.sort()\n    return arr[-k:]\n", "   \
    \ sorted_arr = sorted(arr, reverse=True)\n    return sorted_arr[:k]", "    arr.sort()\n\
    \    return arr[-k:]", "    res = []\n    num_hash = {i:[] for i in range(1001)}\n\
    \    for i in arr:\n        num_hash[abs(i)].append(i)\n    for key in sorted(num_hash.keys(),\
    \ reverse=True):\n        while num_hash[key] and k:\n            res.append(num_hash[key].pop())\n\
    \            k -= 1\n        if not k:\n            break\n    return res", " \
    \   heapq.heapify(arr)\n    # return heapq.nlargest(k, arr)\n\n    largest_nums\
    \ = []\n    for _ in range(k):\n        largest_nums.append(heapq.heappop(arr))\n\
    \n    return largest_nums\n", "    return sorted(arr, reverse=True)[:k]\n", " \
    \   ans = [0] * k\n    for i in range(k):\n        ans[i] = max(arr)\n       \
    \ arr.remove(max(arr))\n    return ans\n\nprint(maximum([4, -4, 4], 2))", "  \
    \  arr.sort()\n    return arr[-k:]\n", "    # Solution 1\n    return sorted(arr,\
    \ reverse=True)[:k]\n\n    # Solution 2\n    heap = arr[:k]\n    heapq.heapify(heap)\n\
    \    for i in range(k, len(arr)):\n        if arr[i] > heap[0]:\n            heapq.heapreplace(heap,\
    \ arr[i])\n    return sorted(heap, reverse=True)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
