name: HumanEval_61_correct_bracketing
language: py
results:
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n \
    \           num_open += 1\n        else:\n            num_open -= 1\n        if\
    \ num_open < 0:\n            return False\n    return num_open == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_stack = LinkedStack()\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            bracket_stack.push(bracket)\n        elif bracket ==\
    \ \")\":\n            if bracket_stack.is_empty():\n                return False\n\
    \            else:\n                bracket_stack.pop()\n    return bracket_stack.is_empty()\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbdpx75kf.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpbdpx75kf.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbdpx75kf.py\"\
    , line 27, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpbdpx75kf.py\"\
    , line 14, in correct_bracketing\n    bracket_stack = LinkedStack()\nNameError:\
    \ name 'LinkedStack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ opening = 0\n    closing = 0\n    if \"(\" not in brackets:\n        return\
    \ False\n    for i in brackets:\n        if i == \"(\":\n            opening +=\
    \ 1\n        else:\n            closing += 1\n    if opening == closing:\n   \
    \     return True\n    else:\n        return False\n\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiw5diuqv.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpiw5diuqv.py\", line 45,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpiw5diuqv.py\"\
    , line 36, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    for c in brackets:\n        if c == \"(\":\n           \
    \ open_count += 1\n        elif c == \")\":\n            open_count -= 1\n   \
    \     if open_count < 0:\n            return False\n    return open_count == 0\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ brackets_counter = 0\n    for bracket in brackets:\n        if bracket == \"\
    (\":\n            brackets_counter += 1\n        elif bracket == \")\":\n    \
    \        brackets_counter -= 1\n        if brackets_counter < 0:\n           \
    \ return False\n    return brackets_counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    closed_count = 0\n    for char in brackets:\n        if\
    \ char == \"(\":\n            open_count += 1\n        elif char == \")\":\n \
    \           closed_count += 1\n        if closed_count > open_count:\n       \
    \     return False\n    return open_count == closed_count\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ opening = []\n    for char in brackets:\n        if char == \"(\":\n       \
    \     opening.append(char)\n        elif char == \")\":\n            if len(opening)\
    \ > 0:\n                opening.pop()\n            else:\n                return\
    \ False\n    return len(opening) == 0\n\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return 0 == sum([\"(\" == x for x in brackets] + [\")\" == x for x in brackets])\
    \ % 2\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnt8zjq8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbnt8zjq8.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbnt8zjq8.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # number of open brackets\n    num_open = 0\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            num_open += 1\n        else:\n    \
    \        if num_open == 0:\n                return False\n            num_open\
    \ -= 1\n    return num_open == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ brackets_stack = Stack()\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            brackets_stack.push(bracket)\n        elif bracket == \"\
    )\":\n            if brackets_stack.is_empty():\n                return False\n\
    \            brackets_stack.pop()\n    return brackets_stack.is_empty()\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7avrlks.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpv7avrlks.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv7avrlks.py\"\
    , line 26, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpv7avrlks.py\"\
    , line 14, in correct_bracketing\n    brackets_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ depth = 0\n    for i in brackets:\n        if i == \"(\":\n            depth\
    \ += 1\n        elif i == \")\":\n            depth -= 1\n        if depth < 0:\n\
    \            return False\n    return depth == 0\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            num_open += 1\n        elif bracket == \")\":\n            num_open\
    \ -= 1\n        if num_open < 0:\n            return False\n\n    return num_open\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return is_valid(brackets)\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5qpl9dsb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp5qpl9dsb.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5qpl9dsb.py\"\
    , line 17, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp5qpl9dsb.py\"\
    , line 14, in correct_bracketing\n    return is_valid(brackets)\nNameError: name\
    \ 'is_valid' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for c in brackets:\n        if c == \"(\":\n        \
    \    open_brackets += 1\n        else:\n            open_brackets -= 1\n     \
    \   if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ new_brackets = ''\n    for ch in brackets:\n        if ch == '(':\n        \
    \    new_brackets += ch\n        else:\n            if new_brackets == '':\n \
    \               return False\n            new_brackets = new_brackets[:-1]\n \
    \   return new_brackets == ''\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ i = 0\n    for ch in brackets:\n        if ch == \"(\":\n            i += 1\n\
    \        else:\n            i -= 1\n        if i < 0:\n            return False\n\
    \    return i == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ opening = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n  \
    \          opening += 1\n        elif bracket == \")\":\n            opening -=\
    \ 1\n        if opening < 0:\n            return False\n    return opening ==\
    \ 0\n\nfrom doctest import testmod\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ br_count = 0\n    for br in brackets:\n        if br == \"(\":\n           \
    \ br_count += 1\n        elif br == \")\":\n            br_count -= 1\n      \
    \  if br_count < 0:\n            return False\n    return br_count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"(\":\n            count\
    \ += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for b in brackets:\n        if b == \"(\":\n        \
    \    open_brackets += 1\n        elif b == \")\":\n            open_brackets -=\
    \ 1\n        if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ for b in brackets:\n        if b == \")\":\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpglgl47m6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpglgl47m6.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpglgl47m6.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_list = list(brackets)\n    opening_brackets = []\n    closing_brackets\
    \ = []\n    for bracket in bracket_list:\n        if bracket == \"(\":\n     \
    \       opening_brackets.append(bracket)\n        elif bracket == \")\":\n   \
    \         closing_brackets.append(bracket)\n    return len(opening_brackets) ==\
    \ len(closing_brackets)\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyjj0svvf.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpyjj0svvf.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpyjj0svvf.py\"\
    , line 31, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n         \
    \   if count < 0:\n                return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wf0mkof.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4wf0mkof.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4wf0mkof.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"(\") == brackets.count(\")\")\n    # It's a little inefficient,\
    \ but this is the only way that I can\n    # think of to do it.\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6vcnl0ip.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6vcnl0ip.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6vcnl0ip.py\"\
    , line 25, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            bracket_count += 1\n        elif bracket == \")\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n\
    \        else:\n            if len(stack) == 0:\n                return False\n\
    \            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for b in brackets:\n        if b == \"(\":\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) % 2 != 0:\n        return False\n    for i in range(len(brackets)\
    \ // 2):\n        if brackets[i] != \"(\":\n            return False\n       \
    \ if brackets[-1 - i] != \")\":\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwc0i28tu.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwc0i28tu.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwc0i28tu.py\"\
    , line 26, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_bracket = 0\n    close_bracket = 0\n    for bracket in brackets:\n    \
    \    if bracket == \"(\":\n            open_bracket += 1\n        elif bracket\
    \ == \")\":\n            close_bracket += 1\n        if close_bracket > open_bracket:\n\
    \            return False\n    return open_bracket == close_bracket\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_stack = []\n    for b in brackets:\n        if b == \"(\":\n       \
    \     bracket_stack.append(b)\n        elif b == \")\":\n            if len(bracket_stack)\
    \ == 0:\n                return False\n            else:\n                bracket_stack.pop()\n\
    \    return len(bracket_stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ \"*** YOUR CODE HERE ***\"\n    count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"(\":\n            count += 1\n        elif bracket == \"\
    )\":\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return count == 0\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            open_count += 1\n        elif bracket == \")\":\n            open_count\
    \ -= 1\n        if open_count < 0:\n            return False\n    return open_count\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"\
    (\":\n            num_open_brackets += 1\n        elif bracket == \")\":\n   \
    \         num_open_brackets -= 1\n        if num_open_brackets < 0:\n        \
    \    return False\n    return num_open_brackets == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for c in brackets:\n        if c == \"(\":\n            count\
    \ += 1\n        elif c == \")\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3mflf64.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpm3mflf64.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm3mflf64.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # The stack stores the opening brackets so far\n    stack = []\n    for c in\
    \ brackets:\n        if c == \"(\":\n            stack.append(c)\n        elif\
    \ c == \")\":\n            if stack == []:\n                return False\n   \
    \         stack.pop()\n    return stack == []\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"(\") == brackets.count(\")\")\n    # TODO: replace pass\
    \ with your code\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpou5bhsmp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpou5bhsmp.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpou5bhsmp.py\"\
    , line 24, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for c in brackets:\n        if c == \"(\":\n            count\
    \ += 1\n        elif c == \")\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ index = 0\n    for x in brackets:\n        if x == \"(\":\n            index\
    \ += 1\n        elif x == \")\":\n            index -= 1\n            if index\
    \ < 0:\n                return False\n    return index == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for br in brackets:\n        if br == \"(\":\n            count\
    \ += 1\n        elif br == \")\":\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Your implementation goes here.\n    bracket_left = []\n    bracket_right =\
    \ []\n    for bracket in brackets:\n        if bracket == \"(\":\n           \
    \ bracket_left.append(bracket)\n        elif bracket == \")\":\n            bracket_right.append(bracket)\n\
    \    if len(bracket_left) == len(bracket_right):\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyahbgkhr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpyahbgkhr.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpyahbgkhr.py\"\
    , line 34, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ left = 0\n\n    for bracket in brackets:\n        if bracket == \"(\":\n   \
    \         left += 1\n        elif bracket == \")\":\n            left -= 1\n \
    \       if left < 0:\n            return False\n\n    return left == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            num_open += 1\n        elif bracket == \")\":\n            num_open\
    \ -= 1\n            if num_open < 0:\n                return False\n\n    return\
    \ num_open == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Remove left bracket from the string\n    # Check if there are no left bracket\
    \ in the string\n    # If there is, return False\n    # If there is a left bracket,\
    \ remove it from the string\n    # Remove right bracket from the string\n    #\
    \ Check if there are no right bracket in the string\n    # If there is, return\
    \ False\n    # If there is a right bracket, remove it from the string\n    # Keep\
    \ doing this until left bracket is gone, or right bracket is gone\n    # If there\
    \ are no left bracket in the string, return True\n    # If there are no right\
    \ bracket in the string, return True\n    if len(brackets) == 0:\n        return\
    \ True\n    elif \"(\" not in brackets:\n        return False\n    elif \")\"\
    \ not in brackets:\n        return False\n    else:\n        return correct_bracketing(brackets.replace(\"\
    (\", \"\", 1).replace(\")\", \"\", 1))\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnjpl2s_.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpmnjpl2s_.py\", line 49,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmnjpl2s_.py\"\
    , line 40, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: Loop over the string.\n    # For every \"(\", store it in a list.\n\
    \    # For every \")\", remove the last \"(\".\n    # Check that the list is empty.\n\
    \    opened = []\n    for char in brackets:\n        if char == \"(\":\n     \
    \       opened.append(char)\n        elif char == \")\":\n            if len(opened)\
    \ == 0:\n                return False\n            else:\n                opened.pop()\n\
    \    return len(opened) == 0\n\nprint(correct_bracketing(\"())\"))\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: "False\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # this will store the indices of opening brackets\n    stack = []\n\n    for\
    \ i, char in enumerate(brackets):\n        if char == \"(\":\n            stack.append(i)\n\
    \        elif char == \")\":\n            if len(stack) == 0:\n              \
    \  return False\n            # don't care about the value - remove it from the\
    \ stack\n            stack.pop()\n        else:\n            raise ValueError(\"\
    Expected '(' or ')', got: \" + char)\n\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            open_brackets += 1\n        elif bracket == \")\":\n          \
    \  open_brackets -= 1\n        if open_brackets < 0:\n            return False\n\
    \    return open_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: add the missing code to this function\n    count = 0\n    for char in\
    \ brackets:\n        if char == \"(\":\n            count += 1\n        elif char\
    \ == \")\":\n            count -= 1\n        if count < 0:\n            return\
    \ False\n    return count == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ opening = 0\n    closing = 0\n    for char in brackets:\n        if char ==\
    \ \"(\":\n            opening += 1\n        elif char == \")\":\n            closing\
    \ += 1\n        if closing > opening:\n            return False\n    return opening\
    \ == closing\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ n = 0\n    for b in brackets:\n        if b == \"(\":\n            n += 1\n\
    \        elif b == \")\":\n            n -= 1\n        if n < 0:\n           \
    \ return False\n    return n == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # If there is an odd number of brackets, it must be a False case\n    if len(brackets)\
    \ % 2 != 0:\n        return False\n    # The number of opening brackets should\
    \ match the number of closing\n    # brackets, so we can use a stack to check\
    \ this\n    stack = []\n    for bracket in brackets:\n        if bracket == \"\
    (\":\n            stack.append(bracket)\n        elif bracket == \")\":\n    \
    \        # Unmatched closing bracket, return False\n            if len(stack)\
    \ == 0:\n                return False\n            # Closing bracket matches last\
    \ opening bracket, pop the last bracket\n            elif stack[-1] == \"(\":\n\
    \                stack.pop()\n            # Unmatched closing bracket, return\
    \ False\n            else:\n                return False\n    # If there are still\
    \ opening brackets left, return False\n    if len(stack) != 0:\n        return\
    \ False\n    # All tests passed, return True\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # a variable to count the number of brackets\n    bracket_counter = 0\n    #\
    \ loop through every character in brackets\n    for bracket in brackets:\n   \
    \     # if the character is an opening bracket\n        if bracket == \"(\":\n\
    \            # increment the bracket counter\n            bracket_counter += 1\n\
    \        # if the character is a closing bracket\n        elif bracket == \")\"\
    :\n            # decrement the bracket counter\n            bracket_counter -=\
    \ 1\n        # if the bracket counter is ever negative (number of closing\n  \
    \      # brackets exceeds the number of opening brackets)\n        if bracket_counter\
    \ < 0:\n            # then return False\n            return False\n    # if the\
    \ number of opening brackets equals the number of closing brackets\n    if bracket_counter\
    \ == 0:\n        # then return True\n        return True\n    # otherwise\n  \
    \  else:\n        # return False\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Q2a: call stack simulator to determine whether string is correctly bracketed\n\
    \    return call_stack_simulator(brackets) == False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpch60f349.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpch60f349.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpch60f349.py\"\
    , line 18, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpch60f349.py\"\
    , line 15, in correct_bracketing\n    return call_stack_simulator(brackets) ==\
    \ False\nNameError: name 'call_stack_simulator' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            bracket_count += 1\n        elif bracket == \")\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2zsir85.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmph2zsir85.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph2zsir85.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # complete the function body\n    # Hint: you may want to use a local variable\n\
    \n    return False\n\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppzu2rbk_.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmppzu2rbk_.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppzu2rbk_.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Create stack\n    stack = []\n    # Iterate through the given string\n   \
    \ for char in brackets:\n        # If the char is an opening bracket, put into\
    \ stack\n        if char == \"(\":\n            stack.append(char)\n        #\
    \ If char is a closing bracket,\n        elif char == \")\":\n            # If\
    \ there is nothing in the stack, return False\n            if stack == []:\n \
    \               return False\n            # Else, pop the last item in the stack\
    \ (last opening bracket)\n            else:\n                stack.pop()\n   \
    \ # If the stack is empty, return True. Otherwise, return False\n    if stack\
    \ == []:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ balance = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n  \
    \          balance += 1\n        elif bracket == \")\":\n            balance -=\
    \ 1\n        if balance < 0:\n            return False\n    return balance ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n  \
    \          open_brackets += 1\n        elif char == \")\":\n            open_brackets\
    \ -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n         \
    \   if count < 0:\n                return False\n    return count == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for char in brackets:\n        if char == \"(\":\n  \
    \          open_brackets += 1\n        elif char == \")\":\n            open_brackets\
    \ -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ res = 0\n    for i in brackets:\n        if i == \"(\":\n            res +=\
    \ 1\n        else:\n            res -= 1\n        if res < 0:\n            return\
    \ False\n    return res == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if \"(\" in brackets and \")\" not in brackets:\n        return False\n    elif\
    \ \")\" in brackets and \"(\" not in brackets:\n        return False\n    elif\
    \ brackets.count(\"(\") != brackets.count(\")\"):\n        return False\n    else:\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpse86bd4p.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpse86bd4p.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpse86bd4p.py\"\
    , line 30, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # <YOUR CODE HERE>\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptp36o1q2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptp36o1q2.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptp36o1q2.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ index = 0\n    while index < len(brackets):\n        if brackets[index] == \"\
    (\":\n            if index + 1 == len(brackets):\n                return False\n\
    \            elif brackets[index + 1] == \")\":\n                return False\n\
    \            else:\n                index += 1\n        elif brackets[index] ==\
    \ \")\":\n            if index == 0:\n                return False\n         \
    \   elif brackets[index - 1] == \"(\":\n                return False\n       \
    \     else:\n                index += 1\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2l6gcb09.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2l6gcb09.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2l6gcb09.py\"\
    , line 34, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ parentheses = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            parentheses += 1\n        elif bracket == \")\":\n            parentheses\
    \ -= 1\n        if parentheses < 0:\n            return False\n    return parentheses\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ left = 0\n    for c in brackets:\n        if c == \"(\":\n            left +=\
    \ 1\n        elif c == \")\":\n            left -= 1\n        if left < 0:\n \
    \           return False\n    return left == 0\n\n\n@given(brackets=st.text(alphabet=\"\
    ()\", min_size=1))\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpndqas924.py\", line\
    \ 25, in <module>\n    @given(brackets=st.text(alphabet=\"()\", min_size=1))\n\
    NameError: name 'given' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if (brackets.count(\"(\") == brackets.count(\")\")):\n        return True\n\
    \    else:\n        return False\n    # if correct_bracketing(brackets[1:-1]):\n\
    \    #     return True\n    # else:\n    #     return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq96n8k4w.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpq96n8k4w.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq96n8k4w.py\"\
    , line 30, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ while '()' in brackets:\n        brackets = brackets.replace('()', '')\n   \
    \ return brackets == ''\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # brackets is a string of \"(\" and \")\". return True if every opening bracket\n\
    \    # has a corresponding closing bracket.\n    brackets_split = brackets.split(\"\
    (\")\n    length = len(brackets_split)\n    right_count = 0\n    for i in range(1,\
    \ length):\n        if \")\" in brackets_split[i]:\n            right_count +=\
    \ 1\n    return right_count == length - 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6ibhshz.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpm6ibhshz.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm6ibhshz.py\"\
    , line 27, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for i in brackets:\n        if i == \"(\":\n            counter\
    \ += 1\n        elif i == \")\":\n            counter -= 1\n            if counter\
    \ < 0:\n                return False\n    return counter == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Hint: you may want to use a list to keep track of the brackets you\n    #\
    \ have seen so far.\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            stack.append(bracket)\n        elif bracket ==\
    \ \")\":\n            if stack:\n                stack.pop()\n            else:\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: Write a recursive solution\n    stack = Stack()\n    for i in brackets:\n\
    \        if i == \"(\":\n            stack.push(i)\n        else:\n          \
    \  if stack.pop() is None:\n                return False\n    return stack.is_empty()\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxo9d0ig1.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpxo9d0ig1.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxo9d0ig1.py\"\
    , line 26, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpxo9d0ig1.py\"\
    , line 15, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for letter in brackets:\n        if letter == \"(\":\n\
    \            open_brackets += 1\n        elif letter == \")\":\n            open_brackets\
    \ -= 1\n        if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) % 2 != 0:\n        return False\n    if brackets[0] == \")\"\
    :\n        return False\n    if len(brackets) == 0:\n        return True\n   \
    \ if brackets[0] == \"(\":\n        return correct_bracketing(brackets[1:])\n\
    \    if brackets[0] == \")\":\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimhoxeh1.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpimhoxeh1.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpimhoxeh1.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_brackets = 0\n    for brack in brackets:\n        if brack == \"(\":\n \
    \           num_brackets += 1\n        elif brack == \")\":\n            num_brackets\
    \ -= 1\n        if num_brackets < 0:\n            return False\n    return num_brackets\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            open_count += 1\n        elif bracket == \")\":\n            open_count\
    \ -= 1\n        if open_count < 0:\n            return False\n    return open_count\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            num_open += 1\n        elif bracket == \")\":\n            num_open\
    \ -= 1\n        if num_open < 0:\n            return False\n\n    return num_open\
    \ == 0\n\n\n@enable_executor_hook\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxwpifl1.py\", line\
    \ 27, in <module>\n    @enable_executor_hook\nNameError: name 'enable_executor_hook'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphv5o4xw5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphv5o4xw5.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphv5o4xw5.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"\
    (\":\n            num_open_brackets += 1\n        else:\n            num_open_brackets\
    \ -= 1\n        if num_open_brackets < 0:\n            return False\n    return\
    \ num_open_brackets == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcg0_45v4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcg0_45v4.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcg0_45v4.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        else:\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\n@typecheck\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6clfl82.py\", line\
    \ 25, in <module>\n    @typecheck\nNameError: name 'typecheck' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ number_of_open_brackets = 0\n    for char in brackets:\n        if char == \"\
    (\":\n            number_of_open_brackets += 1\n        elif char == \")\":\n\
    \            number_of_open_brackets -= 1\n        if number_of_open_brackets\
    \ < 0:\n            return False\n    return number_of_open_brackets == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ '''\n    Function Description:\n    This function takes a string of brackets\
    \ as input and then checks whether the brackets\n    in the input string are properly\
    \ closed or not by utilizing the concept of stack.\n\n    Pre-condition: brackets\
    \ is a string containing opening and closing brackets only.\n    Post-condition:\
    \ Return True if and only if every opening bracket has a corresponding closing\
    \ bracket.\n    '''\n    # Code here\n    counter = 0\n    for char in brackets:\n\
    \        if char == '(':\n            counter += 1\n        else:\n          \
    \  counter -= 1\n        if counter < 0:\n            return False\n    return\
    \ counter == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if not brackets:\n        return True\n    elif brackets[0] == \")\":\n    \
    \    return False\n    else:\n        return correct_bracketing(remove_outer_brackets(brackets))\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnipakno.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpvnipakno.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvnipakno.py\"\
    , line 23, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpvnipakno.py\"\
    , line 19, in correct_bracketing\n    return correct_bracketing(remove_outer_brackets(brackets))\n\
    NameError: name 'remove_outer_brackets' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n  \
    \          counter += 1\n        else:\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for char in brackets:\n        if char == \"(\":\n         \
    \   stack.append(char)\n        elif char == \")\":\n            if len(stack)\
    \ == 0:\n                return False\n            stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO\n    left = 0\n    right = 0\n    for bracket in brackets:\n        if\
    \ bracket == \"(\":\n            left += 1\n        elif bracket == \")\":\n \
    \           right += 1\n        if right > left:\n            return False\n \
    \   if left == right:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n \
    \           num_open += 1\n        elif bracket == \")\":\n            num_open\
    \ -= 1\n        if num_open < 0:\n            return False\n    return num_open\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ brackets_stack = []\n    opening_brackets = \"(\"\n    closing_brackets = \"\
    )\"\n    for bracket in brackets:\n        if bracket in opening_brackets:\n \
    \           brackets_stack.append(bracket)\n        elif not brackets_stack or\
    \ brackets_stack.pop() != opening_brackets:\n            return False\n    return\
    \ brackets_stack == []\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Add your code here\n    if len(brackets) == 0:\n        return True\n    if\
    \ brackets[0] == \"(\":\n        if len(brackets) == 1:\n            return False\n\
    \        if brackets[1] == \")\":\n            return correct_bracketing(brackets[2:])\n\
    \        else:\n            count = 1\n            for bracket in brackets[1:]:\n\
    \                if bracket == \"(\":\n                    count += 1\n      \
    \          else:\n                    count -= 1\n                if count ==\
    \ 0:\n                    return correct_bracketing(brackets[2:])\n          \
    \  return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnatguu8a.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpnatguu8a.py\", line 51,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnatguu8a.py\"\
    , line 38, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement this function\n    bracket_stack = Stack()\n    for char in\
    \ brackets:\n        if char == \"(\":\n            bracket_stack.push(char)\n\
    \        else:\n            if bracket_stack.is_empty():\n                return\
    \ False\n            bracket_stack.pop()\n    return bracket_stack.is_empty()\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfstzxcu.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpqfstzxcu.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqfstzxcu.py\"\
    , line 27, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpqfstzxcu.py\"\
    , line 15, in correct_bracketing\n    bracket_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ left, right = 0, 0\n    for char in brackets:\n        if char == \"(\":\n \
    \           left += 1\n        elif char == \")\":\n            right += 1\n \
    \       if right > left:\n            return False\n    return left == right\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"(\":\n            count\
    \ += 1\n        elif i == \")\":\n            count -= 1\n            if count\
    \ < 0:\n                return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # This function is more properly called \"valid_bracketing\"\n    # We are using\
    \ the terminology in the chapter.\n    count = 0\n    for c in brackets:\n   \
    \     if c == \"(\":\n            count += 1\n        elif c == \")\":\n     \
    \       count -= 1\n        if count < 0:\n            return False\n    return\
    \ count == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # \u6B64\u5904\u8FD4\u56DEbrackets\u4E2D\u5DE6\u62EC\u53F7\u7684\u4E2A\u6570\
    \n    # a = brackets.count(\"(\")\n    # return a == brackets.count(\")\")\n \
    \   # \u5982\u679Cbrackets\u662F\u7A7A\u5B57\u7B26\u4E32\uFF0C\u6216\u8005brackets\u4E2D\
    \u7684\u5DE6\u62EC\u53F7\u7684\u4E2A\u6570\u7B49\u4E8E\u53F3\u62EC\u53F7\u7684\
    \u4E2A\u6570\uFF0C\u5219\u8FD4\u56DETrue\n    return brackets == \"\" or brackets.count(\"\
    (\") == brackets.count(\")\")\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps6bl_kjy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmps6bl_kjy.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmps6bl_kjy.py\"\
    , line 27, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for s in brackets:\n        if s == \"(\":\n            count\
    \ += 1\n        elif s == \")\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for c in brackets:\n        if c == \"(\":\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return len(brackets) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdv0phz5.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjdv0phz5.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjdv0phz5.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ depth = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        depth += 1\n        elif bracket == \")\":\n            depth -= 1\n\
    \        if depth < 0:\n            return False\n    return depth == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n   \
    \         stack.append(bracket)\n        elif stack != []:\n            stack.pop()\n\
    \        else:\n            return False\n    return stack == []\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasc8gr5q.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpasc8gr5q.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpasc8gr5q.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if len(brackets)%2 == 1:\n        return False\n    counter = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"(\":\n            counter += 1\n     \
    \   else:\n            counter -= 1\n        if counter < 0:\n            return\
    \ False\n    return counter == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n  \
    \          counter += 1\n        elif bracket == \")\":\n            counter -=\
    \ 1\n        if counter < 0:\n            return False\n    return counter ==\
    \ 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ opening = []\n    # loop through each character in the string\n    for bracket\
    \ in brackets:\n        # if the character is an opening bracket,\n        # add\
    \ it to the list of opening brackets\n        if bracket == \"(\":\n         \
    \   opening.append(bracket)\n        # if the character is a closing bracket,\n\
    \        # remove the last opening bracket from the list\n        elif bracket\
    \ == \")\":\n            if len(opening) == 0:\n                return False\n\
    \            opening.pop()\n    # return whether there are any opening brackets\
    \ left in the list\n    return len(opening) == 0\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    for char in brackets:\n        if char == \"(\":\n     \
    \       open_count += 1\n        elif char == \")\":\n            open_count -=\
    \ 1\n        if open_count < 0:\n            return False\n    return open_count\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5txg9f_4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5txg9f_4.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5txg9f_4.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n\
    \        return False\n    else:\n        return correct_bracketing(brackets[1:])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybo9pnx9.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpybo9pnx9.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpybo9pnx9.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for char in brackets:\n        if char == \"(\":\n        \
    \    counter += 1\n        elif char == \")\":\n            counter -= 1\n   \
    \     if counter < 0:\n            return False\n    return counter == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ left_counter = 0\n    for char in brackets:\n        if char == \"(\":\n   \
    \         left_counter += 1\n        elif char == \")\":\n            left_counter\
    \ -= 1\n        if left_counter < 0:\n            return False\n    return left_counter\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = []\n\n    for bracket in brackets:\n        if bracket == \"\
    (\":\n            open_brackets.append(bracket)\n        else:\n            if\
    \ open_brackets:\n                open_brackets.pop()\n            else:\n   \
    \             return False\n\n    return open_brackets == []\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # \u4E3A\u4E86\u68C0\u67E5\u62EC\u53F7\u662F\u5426\u5339\u914D\uFF0C\u6211\u4EEC\
    \u9700\u8981\u9996\u5148\u5BF9\u62EC\u53F7\u505A\u7B80\u5355\u7684\u89E3\u6790\
    \n    # \u6211\u4EEC\u4ECE\u5DE6\u81F3\u53F3\u626B\u63CF\u5B57\u7B26\u4E32\uFF0C\
    \u5982\u679C\u626B\u63CF\u5230\u5DE6\u62EC\u53F7\uFF0C\u5C31\u8BA9\u5B83\u5165\
    \u6808\uFF1B\n    # \u5982\u679C\u626B\u63CF\u5230\u53F3\u62EC\u53F7\uFF0C\u5C31\
    \u4ECE\u6808\u4E2D\u5F39\u51FA\u4E00\u4E2A\u5143\u7D20\n    # \u5982\u679C\u6700\
    \u540E\u6808\u4E3A\u7A7A\uFF0C\u90A3\u4E48\u62EC\u53F7\u5B8C\u5168\u5339\u914D\
    \uFF0C\u5426\u5219\u62EC\u53F7\u6709\u95EE\u9898\n    stack = Stack()\n    for\
    \ char in brackets:\n        if char == \"(\":\n            stack.push(char)\n\
    \        elif char == \")\":\n            if stack.is_empty():\n             \
    \   return False\n            stack.pop()\n    return stack.is_empty()\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpslhhy06s.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpslhhy06s.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpslhhy06s.py\"\
    , line 30, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpslhhy06s.py\"\
    , line 18, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ left_count = 0\n    for char in brackets:\n        if char == \"(\":\n     \
    \       left_count += 1\n        else:\n            left_count -= 1\n        if\
    \ left_count < 0:\n            return False\n    return left_count == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n\
    \        return False\n    else:\n        n = brackets.find(\")\")\n        if\
    \ n == -1:\n            return False\n        else:\n            return correct_bracketing(brackets[n+1:])\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0b3y9v3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpx0b3y9v3.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpx0b3y9v3.py\"\
    , line 27, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # if there are an odd number of brackets, can't be correct\n    if len(brackets)\
    \ % 2 == 1:\n        return False\n\n    # if there are an even number of brackets,\
    \ keep track of the number of\n    # unclosed brackets (an opening bracket is\
    \ a \"(\" and a closing bracket is a\n    # \")\" that has a corresponding opening\
    \ bracket.\n    unclosed = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            unclosed += 1\n        elif bracket == \")\":\n     \
    \       unclosed -= 1\n        else:\n            raise ValueError(f\"Invalid\
    \ bracket: {bracket}\")\n\n        # if there's more closed brackets than open\
    \ brackets, then there's\n        # been a closing bracket without a corresponding\
    \ opening bracket.\n        if unclosed < 0:\n            return False\n\n   \
    \ # if there's any unclosed brackets, then there's been an opening bracket\n \
    \   # without a corresponding closing bracket.\n    return unclosed == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: implement me!\n    open_count = 0\n    for bracket in brackets:\n  \
    \      if bracket == \"(\":\n            open_count += 1\n        else:\n    \
    \        open_count -= 1\n        if open_count < 0:\n            return False\n\
    \    return open_count == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            bracket_count += 1\n        elif bracket == \")\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets.count(\"(\") != brackets.count(\")\"):\n        return False\n \
    \   elif brackets.count(\"(\") == 0:\n        return True\n    else:\n       \
    \ return correct_bracketing(brackets[1:-1])\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwyieyz6d.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpwyieyz6d.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwyieyz6d.py\"\
    , line 24, in check\n    assert candidate('()()(()())()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n\
    \        elif b == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            stack.pop()\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return len(brackets) == brackets.count(\"(\") + brackets.count(\")\")\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdegda7u.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcdegda7u.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcdegda7u.py\"\
    , line 21, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for i in brackets:\n        if i == \"(\":\n            counter\
    \ += 1\n        elif i == \")\":\n            counter -= 1\n            if counter\
    \ < 0:\n                return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ #Accumulator: bracket_count\n    if len(brackets) % 2 != 0:\n        return\
    \ False\n    bracket_count = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            bracket_count += 1\n        elif bracket == \")\":\n\
    \            bracket_count -= 1\n            if bracket_count < 0:\n         \
    \       return False\n    return bracket_count == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for c in brackets:\n        if c == \"(\":\n        \
    \    open_brackets += 1\n        else:\n            open_brackets -= 1\n     \
    \   if open_brackets < 0:\n            return False\n    return open_brackets\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n\
    \        else:\n            try:\n                stack.pop()\n            except\
    \ IndexError:\n                return False\n    return len(stack) == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"(\":\n            count\
    \ += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"(\":\n            count\
    \ += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ assert all(bracket in \"(\")\n    return count_occurrence(brackets, \"(\") ==\
    \ count_occurrence(brackets, \")\")\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqh8li7hx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqh8li7hx.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqh8li7hx.py\"\
    , line 19, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpqh8li7hx.py\"\
    , line 14, in correct_bracketing\n    assert all(bracket in \"(\")\nNameError:\
    \ name 'bracket' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ pass\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0xeqgsuk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp0xeqgsuk.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0xeqgsuk.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Algorithm:\n    # For each opening bracket, it needs a closing bracket\n \
    \   # to come after it.\n    # To implement this, we keep a running count of how\
    \ many\n    # opening brackets we've seen that haven't been closed yet.\n    #\
    \ If we see a closing bracket when the count is 0, then we\n    # have a problem.\n\
    \    if len(brackets) == 0:\n        return True\n    if brackets[0] == \")\"\
    :\n        return False\n    need_closing = 0\n    for c in brackets:\n      \
    \  if c == \"(\":\n            need_closing += 1\n        elif c == \")\":\n \
    \           need_closing -= 1\n            if need_closing < 0:\n            \
    \    return False\n    return need_closing == 0\n\ndef check(candidate):\n   \
    \ assert candidate('()') == True\n    assert candidate('(()())') == True\n   \
    \ assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdoig0wl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkdoig0wl.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkdoig0wl.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for char in brackets:\n        if char == \"(\":\n        \
    \    counter += 1\n        elif char == \")\":\n            counter -= 1\n   \
    \         if counter < 0:\n                return False\n    return counter ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for i in brackets:\n        if i == \"(\":\n            counter\
    \ += 1\n        elif i == \")\":\n            counter -= 1\n        if counter\
    \ < 0:\n            return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ num_open = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n \
    \           num_open += 1\n        else:\n            num_open -= 1\n        if\
    \ num_open < 0:\n            return False\n    return num_open == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ n = 0\n    for char in brackets:\n        if char == \"(\":\n            n +=\
    \ 1\n        elif char == \")\":\n            n -= 1\n        if n < 0:\n    \
    \        return False\n    return n == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # your code here\n    if brackets == '':\n        return True\n    elif brackets[0]\
    \ == '(':\n        i = 1\n        while brackets[i] != ')':\n            i +=\
    \ 1\n        return correct_bracketing(brackets[1:i]) and correct_bracketing(brackets[i+1:])\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8idc_1f1.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp8idc_1f1.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8idc_1f1.py\"\
    , line 27, in check\n    assert candidate('(()())') == True\n  File \"/tmp/tmp8idc_1f1.py\"\
    , line 21, in correct_bracketing\n    return correct_bracketing(brackets[1:i])\
    \ and correct_bracketing(brackets[i+1:])\n  File \"/tmp/tmp8idc_1f1.py\", line\
    \ 19, in correct_bracketing\n    while brackets[i] != ')':\nIndexError: string\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ n = 0  # number of unclosed brackets\n    for bracket in brackets:\n       \
    \ if bracket == \"(\":\n            n += 1\n        elif bracket == \")\":\n \
    \           n -= 1\n        if n < 0:\n            return False\n    return n\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # TODO: replace this line with your implementation\n    opening = 0\n    for\
    \ c in brackets:\n        if c == '(':\n            opening += 1\n        elif\
    \ c == ')':\n            opening -= 1\n        if opening < 0:\n            return\
    \ False\n    return opening == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # check if the last char is (\n    # then pop it, check if the last char is\
    \ )\n    # if not return False\n    # else check if the list is empty\n    # if\
    \ empty return True\n    # else repeat\n    if brackets == \"\":\n        return\
    \ True\n    elif brackets[0] == \")\":\n        return False\n    else:\n    \
    \    return correct_bracketing(brackets[1:])\n\n    # if len(brackets) > 1:\n\
    \    #     if brackets[-1] == \")\":\n    #         return correct_bracketing(brackets[:-1])\n\
    \    #     elif brackets[-1] == \"(\":\n    #         return False\n    # else:\n\
    \    #     if brackets == \"(\" or brackets == \")\":\n    #         return False\n\
    \    #     elif brackets == \"\":\n    #         return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2i_0qzdt.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmp2i_0qzdt.py\", line 54,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2i_0qzdt.py\"\
    , line 40, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # check the left bracket, if it has the corresponding one on the right\n   \
    \ # -1 for not having the corresponding one;\n    # 1 for having the corresponding\
    \ one\n    # if the sum of the whole string is 0, there is the corresponding one\n\
    \    # on the right\n    sum = 0\n    for c in brackets:\n        if c == \"(\"\
    :\n            sum += 1\n        else:\n            sum -= 1\n        if sum <\
    \ 0:\n            return False\n    return sum == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    close_count = 0\n    for i in brackets:\n        if i ==\
    \ \"(\":\n            open_count += 1\n        elif i == \")\":\n            close_count\
    \ += 1\n        if close_count > open_count:\n            return False\n    if\
    \ open_count == close_count:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ brackets_stack = []\n    for char in brackets:\n        if char == \"(\":\n\
    \            brackets_stack.append(char)\n        else:\n            if brackets_stack:\n\
    \                brackets_stack.pop()\n            else:\n                return\
    \ False\n    return brackets_stack == []\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return is_empty(process_brackets(brackets))\n\n\ndef check(candidate):\n   \
    \ assert candidate('()') == True\n    assert candidate('(()())') == True\n   \
    \ assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzx4k7c3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdzx4k7c3.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdzx4k7c3.py\"\
    , line 18, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpdzx4k7c3.py\"\
    , line 14, in correct_bracketing\n    return is_empty(process_brackets(brackets))\n\
    NameError: name 'is_empty' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ n_open = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n   \
    \         n_open += 1\n        elif bracket == \")\":\n            n_open -= 1\n\
    \        if n_open < 0:\n            return False\n    return n_open == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            bracket_count += 1\n        elif bracket == \")\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  count += 1\n        elif char == \")\":\n            count -= 1\n        if\
    \ count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ ct = 0\n    for i in brackets:\n        if i == \"(\":\n            ct += 1\n\
    \        elif i == \")\":\n            ct -= 1\n            if ct < 0:\n     \
    \           return False\n    return ct == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if not brackets:\n        return True\n    elif not brackets[0] == \"(\":\n\
    \        return False\n    elif not correct_bracketing(brackets[1:]):\n      \
    \  return False\n    else:\n        return bracketing_helper(brackets[1:])\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hozlxsk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5hozlxsk.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5hozlxsk.py\"\
    , line 24, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # This accumulator keeps track of the number of opening brackets we have\n \
    \   # seen so far. Start off with 0.\n    num_open = 0\n    for c in brackets:\n\
    \        if c == \"(\":\n            num_open += 1\n        elif c == \")\":\n\
    \            num_open -= 1\n        else:\n            # The character is neither\
    \ \"(\", nor \")\". We should never be here!\n            assert False\n     \
    \   if num_open < 0:\n            # A closing bracket before an opening bracket!\n\
    \            return False\n    # We've exhausted all the characters in the string.\n\
    \    return num_open == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_stack = Stack()\n    for char in brackets:\n        if char == \"(\"\
    :\n            bracket_stack.push(char)\n        elif char == \")\":\n       \
    \     if bracket_stack.is_empty():\n                return False\n           \
    \ bracket_stack.pop()\n    return bracket_stack.is_empty()\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vqzahmg.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3vqzahmg.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3vqzahmg.py\"\
    , line 25, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp3vqzahmg.py\"\
    , line 14, in correct_bracketing\n    bracket_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if not brackets:\n        return True\n    return opening_bracket(brackets[0])\
    \ and \\\n           correct_bracketing(brackets[1:]) and \\\n           closing_bracket(brackets[-1])\
    \ and \\\n           correct_bracketing(brackets[:-1])\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9whc4mc.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpf9whc4mc.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf9whc4mc.py\"\
    , line 23, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpf9whc4mc.py\"\
    , line 16, in correct_bracketing\n    return opening_bracket(brackets[0]) and\
    \ \\\nNameError: name 'opening_bracket' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # check if correct bracketing by subtracting the number of \"(\" from the number\
    \ of \")\".\n    # if every opening bracket has a corresponding closing bracket,\
    \ then the result will be 0.\n    return brackets.count(\"(\") - brackets.count(\"\
    )\") == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n   \
    \ assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90x51hub.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp90x51hub.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp90x51hub.py\"\
    , line 25, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # return brackets.count(\"(\") == brackets.count(\")\")\n    # or\n    open_count\
    \ = 0\n    for char in brackets:\n        if char == \"(\":\n            open_count\
    \ += 1\n        elif char == \")\":\n            open_count -= 1\n        if open_count\
    \ < 0:\n            return False\n    return open_count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = ArrayStack()\n\n    for char in brackets:\n        if char == \"(\"\
    :\n            stack.push(char)\n        elif char == \")\":\n            if stack.is_empty():\n\
    \                return False\n            else:\n                stack.pop()\n\
    \n    return stack.is_empty()\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbduqe_o2.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpbduqe_o2.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbduqe_o2.py\"\
    , line 28, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpbduqe_o2.py\"\
    , line 14, in correct_bracketing\n    stack = ArrayStack()\nNameError: name 'ArrayStack'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ from collections import deque\n    if brackets == \"\":\n        return True\n\
    \    elif brackets[0] == \")\":\n        return False\n    else:\n        result\
    \ = True\n        brackets_queue = deque(brackets)\n        count = 0\n      \
    \  while len(brackets_queue) > 0:\n            bracket = brackets_queue.popleft()\n\
    \            if bracket == \"(\":\n                count += 1\n            elif\
    \ bracket == \")\":\n                count -= 1\n            if count < 0:\n \
    \               result = False\n                break\n        return result\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwbkds29k.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpwbkds29k.py\", line 50,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpwbkds29k.py\"\
    , line 42, in check\n    assert candidate('(') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            open_brackets += 1\n        elif bracket == \")\":\n          \
    \  open_brackets -= 1\n        if open_brackets < 0:\n            return False\n\
    \    return open_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n    #\
    \ Solution 2:\n    # nested = 0\n    # for bracket in brackets:\n    #     if\
    \ bracket == \"(\":\n    #         nested += 1\n    #     elif bracket == \")\"\
    :\n    #         nested -= 1\n    #         if nested < 0:\n    #            \
    \ return False\n    # return nested == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n  \
    \          counter += 1\n        elif bracket == \")\":\n            counter -=\
    \ 1\n        if counter < 0:\n            return False\n    return counter ==\
    \ 0\n    \n    \n    \ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # SOLUTION 1\n    #open_count = 0\n    #for b in brackets:\n    #    if b ==\
    \ \"(\":\n    #        open_count += 1\n    #    else:\n    #        open_count\
    \ -= 1\n    #        if open_count < 0:\n    #            return False\n    #return\
    \ open_count == 0\n\n    # SOLUTION 2\n    open_count = 0\n    for b in brackets:\n\
    \        if b == \"(\":\n            open_count += 1\n        else:\n        \
    \    open_count -= 1\n            if open_count < 0:\n                return False\n\
    \    return open_count == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \        if count < 0:\n            return False\n    return count == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for i in brackets:\n        if i == \"(\":\n            count\
    \ += 1\n        elif i == \")\":\n            count -= 1\n        if count < 0:\n\
    \            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # check if open == closed brackets\n    # if it is, then we know it is correct\n\
    \n    # count how many open/closed brackets\n    # if open > closed or closed\
    \ > open, return False\n    # else, return True\n\n    open_brackets = 0\n   \
    \ closed_brackets = 0\n\n    for bracket in brackets:\n        if bracket == \"\
    (\":\n            open_brackets += 1\n        else:\n            closed_brackets\
    \ += 1\n\n    return (open_brackets == closed_brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjl3oo4r.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpxjl3oo4r.py\", line 48,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxjl3oo4r.py\"\
    , line 39, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # The number of opening brackets must equal the number of closing brackets\n\
    \    # The number of opening brackets must never exceed the number of closing\
    \ brackets\n    count = 0\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            count += 1\n        else:\n            count -= 1\n    \
    \    if count < 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Use a counter to keep track of how many brackets need to be closed\n    brackets_needed\
    \ = 0\n    for b in brackets:\n        if b == \"(\":\n            brackets_needed\
    \ += 1\n        elif b == \")\":\n            brackets_needed -= 1\n         \
    \   if brackets_needed < 0:\n                return False\n    return brackets_needed\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_stack = Stack()\n    for character in brackets:\n        if character\
    \ == \"(\":\n            bracket_stack.push(character)\n        elif character\
    \ == \")\":\n            if bracket_stack.is_empty():\n                return\
    \ False\n            bracket_stack.pop()\n    return bracket_stack.is_empty()\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fbl4khz.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6fbl4khz.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6fbl4khz.py\"\
    , line 26, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp6fbl4khz.py\"\
    , line 14, in correct_bracketing\n    bracket_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ check = 0\n    for char in brackets:\n        if char == \"(\":\n          \
    \  check += 1\n        elif char == \")\":\n            check -= 1\n        if\
    \ check < 0:\n            return False\n    return check == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for c in brackets:\n        if c == \"(\":\n            count\
    \ += 1\n        else:\n            count -= 1\n        if count < 0:\n       \
    \     return False\n    return count == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_balance = 0\n    for bracket in brackets:\n        if bracket == \"\
    (\":\n            bracket_balance += 1\n        elif bracket == \")\":\n     \
    \       bracket_balance -= 1\n        if bracket_balance < 0:\n            return\
    \ False\n    return bracket_balance == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ left_brackets = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            left_brackets += 1\n        elif bracket == \")\":\n          \
    \  left_brackets -= 1\n        if left_brackets < 0:\n            return False\n\
    \    return left_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # alternatively:\n    # return brackets.count(\"(\") == brackets.count(\")\"\
    )\n\n    left_count = 0\n    for c in brackets:\n        if c == \"(\":\n    \
    \        left_count += 1\n        else:\n            left_count -= 1\n       \
    \     if left_count < 0:\n                return False\n    return left_count\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ assert set(brackets).issubset({\"(\", \")\"}), \"Invalid brackets input\"\n\
    \    return brackets.count(\"(\") == brackets.count(\")\")\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnyh97meg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpnyh97meg.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnyh97meg.py\"\
    , line 24, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"(\") == brackets.count(\")\")\n    # the trick to the\
    \ is to create a set with the counts\n    # and then take the absolute value\n\
    \    # because this is a good programming technique\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9olzdci9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9olzdci9.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9olzdci9.py\"\
    , line 26, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for each in brackets:\n        if each == \"(\":\n        \
    \    counter += 1\n        elif each == \")\":\n            counter -= 1\n   \
    \     if counter < 0:\n            return False\n    return counter == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # if ( and ) are equal, then True, else False\n    return brackets.count(\"\
    (\") == brackets.count(\")\")\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphiz3uig1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphiz3uig1.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphiz3uig1.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ open_count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n\
    \            open_count += 1\n        elif bracket == \")\":\n            open_count\
    \ -= 1\n        if open_count < 0:\n            return False\n    return open_count\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n    \
    \        count += 1\n        elif bracket == \")\":\n            count -= 1\n\
    \            if count < 0:\n                return False\n    return count ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for char in brackets:\n        if char == \"(\":\n        \
    \    counter += 1\n        elif char == \")\":\n            counter -= 1\n   \
    \     if counter < 0:\n            return False\n    return counter == 0\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_stack = []\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            bracket_stack.append(bracket)\n        else:\n            if len(bracket_stack)\
    \ == 0:\n                return False\n            bracket_stack.pop()\n    return\
    \ len(bracket_stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # FIXME\n    # (1) Complete the implementation below.\n    # (2) Write some\
    \ tests for your implementation.\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            stack.append(bracket)\n        else:\n\
    \            if stack == []:\n                return False\n            stack.pop()\n\
    \    if stack == []:\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if brackets == \"\":\n        return True\n    elif brackets[0] == \")\":\n\
    \        return False\n    else:\n        opening_brackets = 0\n        for bracket\
    \ in brackets:\n            if bracket == \"(\":\n                opening_brackets\
    \ += 1\n            elif bracket == \")\":\n                opening_brackets -=\
    \ 1\n            if opening_brackets < 0:\n                return False\n    \
    \    return opening_brackets == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ i = 0\n    while i < len(brackets):\n        if brackets[i] == \"(\":\n    \
    \        i += 1\n        elif brackets[i] == \")\":\n            i -= 1\n    \
    \    if i < 0:\n            return False\n    return i == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Once we get a closing bracket, we must have seen at least\n    # as many open\
    \ brackets as the current number of closed brackets\n    # Also, since we have\
    \ to have at least one opening bracket before\n    # we get to the first closing\
    \ bracket, opening >= closed + 1\n    # at all times\n    opening = 0\n    closed\
    \ = 0\n    for ch in brackets:\n        if ch == \"(\":\n            opening +=\
    \ 1\n        elif ch == \")\":\n            closed += 1\n        else:\n     \
    \       raise ValueError\n        if opening < closed + 1:\n            return\
    \ False\n    # if we get to the end of the string, then opening >= closed + 1\n\
    \    # implies opening = closed + 1, which in turn implies that\n    # opening\
    \ = closed, so the brackets are properly paired\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp54dtu2d1.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp54dtu2d1.py\", line 50,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp54dtu2d1.py\"\
    , line 36, in check\n    assert candidate('()') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # can't use loop, must use recursion for this one\n    # length 0, 1, and 2\
    \ are base cases\n    if brackets == \"\":\n        return True\n    elif brackets\
    \ == \"()\":\n        return True\n    elif brackets == \"(\" or brackets == \"\
    )\":\n        return False\n    else:\n        if brackets[0] == \"(\" and brackets[-1]\
    \ == \")\":\n            return correct_bracketing(brackets[1:-1])\n        else:\n\
    \            return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjqlq7n3.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdjqlq7n3.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdjqlq7n3.py\"\
    , line 31, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_count = 0\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            bracket_count += 1\n        elif bracket == \")\":\n          \
    \  bracket_count -= 1\n        if bracket_count < 0:\n            return False\n\
    \    return bracket_count == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ bracket_stack = Stack()\n    for bracket in brackets:\n        if bracket ==\
    \ \"(\":\n            bracket_stack.push(bracket)\n        elif bracket == \"\
    )\":\n            if bracket_stack.is_empty():\n                return False\n\
    \            else:\n                bracket_stack.pop()\n    return bracket_stack.is_empty()\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6pb1r16.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpi6pb1r16.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpi6pb1r16.py\"\
    , line 27, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpi6pb1r16.py\"\
    , line 14, in correct_bracketing\n    bracket_stack = Stack()\nNameError: name\
    \ 'Stack' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ if len(brackets) == 0:\n        return True\n    if not brackets[0] == '(':\n\
    \        return False\n    num_open = 1\n    for i in range(1, len(brackets)):\n\
    \        if brackets[i] == '(':\n            num_open += 1\n        elif brackets[i]\
    \ == ')':\n            num_open -= 1\n        if num_open == 0:\n            return\
    \ correct_bracketing(brackets[i+1:])\n    return False\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ stack = []\n    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # we'll use a stack to solve this:\n    # for every opening bracket, we push\
    \ it onto the stack.\n    # for every closing bracket, we pop from the stack.\n\
    \    # if there are no more items in the stack when the string is complete,\n\
    \    # then the string is properly bracketed.\n    stack = []\n    for bracket\
    \ in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if not stack:\n                return\
    \ False\n            else:\n                stack.pop()\n    return not stack\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ counter = 0\n    for i in brackets:\n        if i == \"(\":\n            counter\
    \ += 1\n        else:\n            counter -= 1\n            if counter < 0:\n\
    \                return False\n    return counter == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # a variable that keeps track of the number of brackets\n    # an open bracket\
    \ adds 1 to the variable, a close bracket subtracts 1\n    # if the variable is\
    \ ever negative, then we have a problem\n    num_left = 0\n    for c in brackets:\n\
    \        if c == \"(\":\n            num_left += 1\n        elif c == \")\":\n\
    \            num_left -= 1\n        if num_left < 0:\n            return False\n\
    \    return num_left == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ return brackets.count(\"(\") == brackets.count(\")\")\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf6izalje.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpf6izalje.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf6izalje.py\"\
    , line 22, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n\
    \    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\"\
    )\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n   \
    \ # Note that this function does not go through\n    # each element in the string.\
    \ It only checks\n    # one character at a time!\n    #\n    # It does this by\
    \ keeping track of the balance.\n    # Balance is the number of \"(\" - the number\
    \ of \")\".\n    #\n    # When the balance is 0, there are as many \"(\" as \"\
    )\".\n    #\n    # When the balance is not 0, there is either\n    # one more\
    \ \"(\" than \")\"\n    # or one more \")\" than \"(\".\n    #\n    # So all we\
    \ have to do is keep track of the balance.\n    #\n    # When we see a \"(\",\
    \ we add 1 to the balance.\n    # When we see a \")\", we subtract 1 from the\
    \ balance.\n    #\n    # If the balance ever goes below 0, then there must be\n\
    \    # more \")\" than \"(\".\n    #\n    # If the balance is 0 at the end, then\
    \ the number of \"(\"\n    # and \")\" must be the same.\n\n    balance = 0\n\n\
    \    for c in brackets:\n        if c == \"(\":\n            balance += 1\n  \
    \      elif c == \")\":\n            balance -= 1\n        else:\n           \
    \ # We should never get here!\n            raise ValueError(\"Invalid character:\
    \ \" + c)\n\n        if balance < 0:\n            return False\n\n    return balance\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
