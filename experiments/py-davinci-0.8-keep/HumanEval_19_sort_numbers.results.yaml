name: HumanEval_19_sort_numbers
language: py
results:
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    final_list = []\n    for i in numbers.split():\n\
    \        final_list.append(number_dict[i])\n    return ' '.join(sorted(final_list))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp44x2p8a7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp44x2p8a7.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp44x2p8a7.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp44x2p8a7.py\"\
    , line 12, in sort_numbers\n    return ' '.join(sorted(final_list))\nTypeError:\
    \ sequence item 0: expected str instance, int found\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_map = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    }\n    numbers = numbers.split(' ')\n    for i in\
    \ range(len(numbers)):\n        numbers[i] = number_map[numbers[i]]\n    numbers.sort()\n\
    \    for i in range(len(numbers)):\n        for key, value in number_map.items():\n\
    \            if numbers[i] == value:\n                numbers[i] = key\n    return\
    \ ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppofhlyto.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppofhlyto.py\", line 39,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmppofhlyto.py\", line\
    \ 32, in check\n    assert candidate('') == ''\n  File \"/tmp/tmppofhlyto.py\"\
    , line 22, in sort_numbers\n    numbers[i] = number_map[numbers[i]]\nKeyError:\
    \ ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {\"zero\": 0, \"\
    one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\"\
    : 7, \"eight\": 8, \"nine\": 9}\n    str1 = numbers.split()\n    num_list = [num_dict[key]\
    \ for key in str1]\n    num_list.sort()\n    str2 = [key for key, value in num_dict.items()\
    \ if value in num_list]\n    return ' '.join(str2)\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers = sorted(numbers, key=lambda number: NUMS[number])\n    return '\
    \ '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaw5sce3_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpaw5sce3_.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpaw5sce3_.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpaw5sce3_.py\"\
    , line 9, in sort_numbers\n    numbers = sorted(numbers, key=lambda number: NUMS[number])\n\
    \  File \"/tmp/tmpaw5sce3_.py\", line 9, in <lambda>\n    numbers = sorted(numbers,\
    \ key=lambda number: NUMS[number])\nNameError: name 'NUMS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda x: numbers_to_ints[x]))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwon6rq2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuwon6rq2.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpuwon6rq2.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpuwon6rq2.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ x: numbers_to_ints[x]))\n  File \"/tmp/tmpuwon6rq2.py\", line 8, in <lambda>\n\
    \    return ' '.join(sorted(numbers.split(), key=lambda x: numbers_to_ints[x]))\n\
    NameError: name 'numbers_to_ints' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    num_list = list()\n    for num in numbers:\n        if num == 'zero':\n \
    \           num_list.append(0)\n        elif num == 'one':\n            num_list.append(1)\n\
    \        elif num == 'two':\n            num_list.append(2)\n        elif num\
    \ == 'three':\n            num_list.append(3)\n        elif num == 'four':\n \
    \           num_list.append(4)\n        elif num == 'five':\n            num_list.append(5)\n\
    \        elif num == 'six':\n            num_list.append(6)\n        elif num\
    \ == 'seven':\n            num_list.append(7)\n        elif num == 'eight':\n\
    \            num_list.append(8)\n        elif num == 'nine':\n            num_list.append(9)\n\
    \    num_list.sort()\n    num_words = list()\n    for num in num_list:\n     \
    \   if num == 0:\n            num_words.append('zero')\n        elif num == 1:\n\
    \            num_words.append('one')\n        elif num == 2:\n            num_words.append('two')\n\
    \        elif num == 3:\n            num_words.append('three')\n        elif num\
    \ == 4:\n            num_words.append('four')\n        elif num == 5:\n      \
    \      num_words.append('five')\n        elif num == 6:\n            num_words.append('six')\n\
    \        elif num == 7:\n            num_words.append('seven')\n        elif num\
    \ == 8:\n            num_words.append('eight')\n        elif num == 9:\n     \
    \       num_words.append('nine')\n    return ' '.join(num_words)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    sorted_numbers = sorted(numbers, key=number_to_numberal)\n    return ' '.join(sorted_numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cioh7c8.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_cioh7c8.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp_cioh7c8.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp_cioh7c8.py\"\
    , line 9, in sort_numbers\n    sorted_numbers = sorted(numbers, key=number_to_numberal)\n\
    NameError: name 'number_to_numberal' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # TODO: write your code here\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporirdkqx.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmporirdkqx.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmporirdkqx.py\", line\
    \ 13, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda\
    \ x: num_dict[x])\n    return ' '.join(num_list)\n\ndef check(candidate):\n  \
    \  assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert\
    \ candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    if numbers:\n        numbers\
    \ = [NUM_DICT[x] for x in numbers.split()]\n        numbers.sort()\n        numbers\
    \ = [NUM_DICT[x] for x in numbers]\n        return ' '.join(numbers)\n    return\
    \ numbers\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp497815_8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp497815_8.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp497815_8.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp497815_8.py\"\
    , line 9, in sort_numbers\n    numbers = [NUM_DICT[x] for x in numbers.split()]\n\
    \  File \"/tmp/tmp497815_8.py\", line 9, in <listcomp>\n    numbers = [NUM_DICT[x]\
    \ for x in numbers.split()]\nNameError: name 'NUM_DICT' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda k:['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight', 'nine'].index(k)))\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = [int(NUMBERS[num])\
    \ for num in numbers.split(' ')]\n    return ' '.join(NUMBERS[i] for i in sorted(numbers))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsz5mp9cg.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpsz5mp9cg.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpsz5mp9cg.py\", line\
    \ 13, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpsz5mp9cg.py\"\
    , line 8, in sort_numbers\n    numbers = [int(NUMBERS[num]) for num in numbers.split('\
    \ ')]\n  File \"/tmp/tmpsz5mp9cg.py\", line 8, in <listcomp>\n    numbers = [int(NUMBERS[num])\
    \ for num in numbers.split(' ')]\nNameError: name 'NUMBERS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: int(numbers_to_integers[x]))\n    return ' '.join(numbers)\n\
    \n\nprint(sort_numbers(input()))\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqma0sko.py\", line\
    \ 13, in <module>\n    print(sort_numbers(input()))\nEOFError: EOF when reading\
    \ a line\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = [number.strip() for number in numbers]\n    numbers = list(map(number_to_int,\
    \ numbers))\n    numbers.sort()\n    numbers = list(map(int_to_number, numbers))\n\
    \    return ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3x6yluqi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp3x6yluqi.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp3x6yluqi.py\", line\
    \ 17, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp3x6yluqi.py\"\
    , line 10, in sort_numbers\n    numbers = list(map(number_to_int, numbers))\n\
    NameError: name 'number_to_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numlist = []\n    for num in numbers.split(' '):\n      \
    \  numlist.append(nums[num])\n    numlist.sort()\n    return ' '.join([str(num)\
    \ for num in numlist])\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ ''\n    assert candidate('three') == 'three'\n    assert candidate('three five\
    \ nine') == 'three five nine'\n    assert candidate('five zero four seven nine\
    \ eight') == 'zero four five seven eight nine'\n    assert candidate('six five\
    \ four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaxgeiim.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjaxgeiim.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpjaxgeiim.py\", line\
    \ 17, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpjaxgeiim.py\"\
    , line 11, in sort_numbers\n    numlist.append(nums[num])\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    dict_ = {'zero':0, 'one':1,\
    \ 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n\
    \    lst = numbers.split()\n    lst_num = [dict_[num] for num in lst]\n    lst_num.sort()\n\
    \    lst_num = [str(num) for num in lst_num]\n    return ' '.join(lst_num)\n\n\
    sort_numbers('three one five')\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1mn3sqk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk1mn3sqk.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpk1mn3sqk.py\", line\
    \ 19, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_map = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    num_list = []\n    for num in numbers.split():\n        num_list.append(num_map[num])\n\
    \    return ' '.join(num_map[num] for num in sorted(num_list))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptc8s4irq.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmptc8s4irq.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmptc8s4irq.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmptc8s4irq.py\"\
    , line 12, in sort_numbers\n    return ' '.join(num_map[num] for num in sorted(num_list))\n\
    \  File \"/tmp/tmptc8s4irq.py\", line 12, in <genexpr>\n    return ' '.join(num_map[num]\
    \ for num in sorted(num_list))\nKeyError: 3\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    sorted_string = sorted(numbers.split('\
    \ '), key=lambda word: word_value[word])\n    return ' '.join(sorted_string)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh1uh9xl.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxh1uh9xl.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpxh1uh9xl.py\", line\
    \ 13, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpxh1uh9xl.py\"\
    , line 8, in sort_numbers\n    sorted_string = sorted(numbers.split(' '), key=lambda\
    \ word: word_value[word])\n  File \"/tmp/tmpxh1uh9xl.py\", line 8, in <lambda>\n\
    \    sorted_string = sorted(numbers.split(' '), key=lambda word: word_value[word])\n\
    NameError: name 'word_value' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = [STRING_TO_INT[num]\
    \ for num in numbers.split()]\n    numbers.sort()\n    return ' '.join(STRING_TO_INT[num]\
    \ for num in numbers)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ ''\n    assert candidate('three') == 'three'\n    assert candidate('three five\
    \ nine') == 'three five nine'\n    assert candidate('five zero four seven nine\
    \ eight') == 'zero four five seven eight nine'\n    assert candidate('six five\
    \ four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprapsn2_p.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmprapsn2_p.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmprapsn2_p.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmprapsn2_p.py\"\
    , line 8, in sort_numbers\n    numbers = [STRING_TO_INT[num] for num in numbers.split()]\n\
    \  File \"/tmp/tmprapsn2_p.py\", line 8, in <listcomp>\n    numbers = [STRING_TO_INT[num]\
    \ for num in numbers.split()]\nNameError: name 'STRING_TO_INT' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # Parse string into a list\
    \ of integers\n    numbers = [int(word_to_number(word)) for word in numbers.split()]\n\
    \    # Sort the list\n    numbers.sort()\n    # Convert list to string and return\n\
    \    return ' '.join([number_to_word(number) for number in numbers])\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjsgpwuzw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpjsgpwuzw.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpjsgpwuzw.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpjsgpwuzw.py\"\
    , line 9, in sort_numbers\n    numbers = [int(word_to_number(word)) for word in\
    \ numbers.split()]\n  File \"/tmp/tmpjsgpwuzw.py\", line 9, in <listcomp>\n  \
    \  numbers = [int(word_to_number(word)) for word in numbers.split()]\nNameError:\
    \ name 'word_to_number' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers.sort(key=lambda s: digits[s])\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni2si_qx.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpni2si_qx.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpni2si_qx.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpni2si_qx.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda s: digits[s])\n  File \"\
    /tmp/tmpni2si_qx.py\", line 9, in <lambda>\n    numbers.sort(key=lambda s: digits[s])\n\
    NameError: name 'digits' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5g69akxc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp5g69akxc.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp5g69akxc.py\", line\
    \ 12, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    ints = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    list_num = numbers.split()\n    num_int = list(map(lambda\
    \ num: ints[num], list_num))\n    num_int.sort()\n    return ' '.join(list(map(lambda\
    \ num: num2word(num), num_int)))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfo4h0npu.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpfo4h0npu.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpfo4h0npu.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpfo4h0npu.py\"\
    , line 12, in sort_numbers\n    return ' '.join(list(map(lambda num: num2word(num),\
    \ num_int)))\n  File \"/tmp/tmpfo4h0npu.py\", line 12, in <lambda>\n    return\
    \ ' '.join(list(map(lambda num: num2word(num), num_int)))\nNameError: name 'num2word'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers = [num2int[num] for num in numbers]\n    numbers.sort()\n    numbers\
    \ = [int2num[num] for num in numbers]\n    return ' '.join(numbers)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8wlnxbx.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpa8wlnxbx.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpa8wlnxbx.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpa8wlnxbx.py\"\
    , line 9, in sort_numbers\n    numbers = [num2int[num] for num in numbers]\n \
    \ File \"/tmp/tmpa8wlnxbx.py\", line 9, in <listcomp>\n    numbers = [num2int[num]\
    \ for num in numbers]\nNameError: name 'num2int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_mapping = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    # parse the input numbers\n    numbers = numbers.split('\
    \ ')\n    # convert to integers\n    numbers = [num_mapping[n] for n in numbers]\n\
    \    # sort\n    numbers.sort()\n    # map back to string representation\n   \
    \ numbers = [str(n) for n in numbers]\n    # return the sorted space-delimited\
    \ string\n    return ' '.join(numbers)\n\nprint(sort_numbers('nine one four three\
    \ two'))\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: "1 2 3 4 9\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphi618px6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmphi618px6.py\", line 30,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmphi618px6.py\", line\
    \ 23, in check\n    assert candidate('') == ''\n  File \"/tmp/tmphi618px6.py\"\
    , line 12, in sort_numbers\n    numbers = [num_mapping[n] for n in numbers]\n\
    \  File \"/tmp/tmphi618px6.py\", line 12, in <listcomp>\n    numbers = [num_mapping[n]\
    \ for n in numbers]\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = [int(DIGITS[i]) for i in numbers]\n    numbers.sort()\n  \
    \  numbers = [str(DIGITS[n]) for n in numbers]\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp31ckixio.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp31ckixio.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp31ckixio.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp31ckixio.py\"\
    , line 9, in sort_numbers\n    numbers = [int(DIGITS[i]) for i in numbers]\n \
    \ File \"/tmp/tmp31ckixio.py\", line 9, in <listcomp>\n    numbers = [int(DIGITS[i])\
    \ for i in numbers]\nNameError: name 'DIGITS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_names = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ number: number_names[number]))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = sorted(map(int,\
    \ numbers.split()))\n    return ' '.join(map(str, sorted_numbers))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo68ayckt.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpo68ayckt.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpo68ayckt.py\", line\
    \ 14, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpo68ayckt.py\"\
    , line 8, in sort_numbers\n    sorted_numbers = sorted(map(int, numbers.split()))\n\
    ValueError: invalid literal for int() with base 10: 'three'\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    sorted_numbers = sorted(numbers, key=lambda num:NUMBERS[num])\n    return\
    \ ' '.join(sorted_numbers)\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4c5njt73.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4c5njt73.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp4c5njt73.py\", line\
    \ 13, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp4c5njt73.py\"\
    , line 9, in sort_numbers\n    sorted_numbers = sorted(numbers, key=lambda num:NUMBERS[num])\n\
    \  File \"/tmp/tmp4c5njt73.py\", line 9, in <lambda>\n    sorted_numbers = sorted(numbers,\
    \ key=lambda num:NUMBERS[num])\nNameError: name 'NUMBERS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    number_list = numbers.split(' ')\n    number_sorted\
    \ = sorted(number_list, key=lambda num: number_dict[num])\n    return ' '.join(number_sorted)\n\
    \nprint(sort_numbers('three one five'))\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: "one three five\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8p9hgia6.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8p9hgia6.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp8p9hgia6.py\", line\
    \ 15, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp8p9hgia6.py\"\
    , line 10, in sort_numbers\n    number_sorted = sorted(number_list, key=lambda\
    \ num: number_dict[num])\n  File \"/tmp/tmp8p9hgia6.py\", line 10, in <lambda>\n\
    \    number_sorted = sorted(number_list, key=lambda num: number_dict[num])\nKeyError:\
    \ ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = numbers.split()\n \
    \   digits = [convert_to_digit(num) for num in nums]\n    digits.sort()\n    return\
    \ ' '.join([convert_to_number(digit) for digit in digits])\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgem0h06.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpfgem0h06.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpfgem0h06.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpfgem0h06.py\"\
    , line 9, in sort_numbers\n    digits = [convert_to_digit(num) for num in nums]\n\
    \  File \"/tmp/tmpfgem0h06.py\", line 9, in <listcomp>\n    digits = [convert_to_digit(num)\
    \ for num in nums]\nNameError: name 'convert_to_digit' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    sort_num = [num_dict[n] for n in numbers.split()]\n    sort_num.sort()\n\
    \    return ' '.join([num_dict[n] for n in sort_num])\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb80h0l3f.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpb80h0l3f.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpb80h0l3f.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpb80h0l3f.py\"\
    , line 11, in sort_numbers\n    return ' '.join([num_dict[n] for n in sort_num])\n\
    \  File \"/tmp/tmpb80h0l3f.py\", line 11, in <listcomp>\n    return ' '.join([num_dict[n]\
    \ for n in sort_num])\nKeyError: 3\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_to_digit = {\n       \
    \ 'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n    \
    \    'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    }\n    nums = numbers.split()\n \
    \   dig_nums = [num_to_digit[num] for num in nums]\n    dig_nums.sort()\n    dig_to_num\
    \ = {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n\
    \        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n\
    \        8: 'eight',\n        9: 'nine'\n    }\n    sorted_nums = [dig_to_num[num]\
    \ for num in dig_nums]\n    return ' '.join(sorted_nums)\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return \" \".join(sorted(numbers.split(),\
    \ key=lambda word: word_to_number(word)))\n\n\n@lru_cache(maxsize=1024)\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28f6fym8.py\", line\
    \ 11, in <module>\n    @lru_cache(maxsize=1024)\nNameError: name 'lru_cache' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five':\
    \ 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = []\n    for\
    \ num in numbers:\n        num_list.append(num_dict[num])\n    num_list.sort()\n\
    \    num_list = [str(num) for num in num_list]\n    num_list = ' '.join(num_list)\n\
    \    return num_list\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1fqmt81.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph1fqmt81.py\", line 27,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmph1fqmt81.py\", line\
    \ 20, in check\n    assert candidate('') == ''\n  File \"/tmp/tmph1fqmt81.py\"\
    , line 12, in sort_numbers\n    num_list.append(num_dict[num])\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = list(numbers.split('\
    \ '))\n    numbers.sort(key=lambda x: num2int(x))\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk12a4cm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplk12a4cm.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmplk12a4cm.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmplk12a4cm.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda x: num2int(x))\n  File\
    \ \"/tmp/tmplk12a4cm.py\", line 9, in <lambda>\n    numbers.sort(key=lambda x:\
    \ num2int(x))\nNameError: name 'num2int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numeral_converter = {\n  \
    \      'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n\
    \        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    }\n    reverse_converter = {\n  \
    \      0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n\
    \        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n\
    \        8: 'eight',\n        9: 'nine'\n    }\n    numbers = numbers.split()\n\
    \    integer_array = []\n    for num in numbers:\n        integer_array.append(numeral_converter[num])\n\
    \    integer_array.sort()\n    sorted_numbers = []\n    for num in integer_array:\n\
    \        sorted_numbers.append(reverse_converter[num])\n    return ' '.join(sorted_numbers)\n\
    \n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda number: NUMBERS[number])\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9tl968y.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpp9tl968y.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpp9tl968y.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpp9tl968y.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda number: NUMBERS[number])\n\
    \  File \"/tmp/tmpp9tl968y.py\", line 9, in <lambda>\n    numbers.sort(key=lambda\
    \ number: NUMBERS[number])\nNameError: name 'NUMBERS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # Create a list of numbers\
    \ from the string, and sort the list in ascending order\n    numeral_map = {'zero':\
    \ 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven':\
    \ 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = [numeral_map[num]\
    \ for num in numbers]\n    numbers.sort()\n    # Convert the sorted list back\
    \ to numeral\n    numbers = [numeral_map[num] for num in numbers]\n    numbers\
    \ = [num for num in numeral_map if numeral_map[num] in numbers]\n    return '\
    \ '.join(numbers)\n\ndef check(candidate):\n    assert candidate('') == ''\n \
    \   assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmtjmn_4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvmtjmn_4.py\", line 26,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpvmtjmn_4.py\", line\
    \ 20, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpvmtjmn_4.py\"\
    , line 14, in sort_numbers\n    numbers = [numeral_map[num] for num in numbers]\n\
    \  File \"/tmp/tmpvmtjmn_4.py\", line 14, in <listcomp>\n    numbers = [numeral_map[num]\
    \ for num in numbers]\nKeyError: 3\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    values = []\n    for number\
    \ in numbers.split():\n        values.append(int(dictionary[number]))\n    values.sort()\n\
    \    numbers = []\n    for value in values:\n        numbers.append(str(value))\n\
    \    return \" \".join(numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9o4o4yp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpv9o4o4yp.py\", line 26,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpv9o4o4yp.py\", line\
    \ 20, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpv9o4o4yp.py\"\
    , line 10, in sort_numbers\n    values.append(int(dictionary[number]))\nNameError:\
    \ name 'dictionary' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # TODO: Write the code to\
    \ sort the numbers in this string\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmlonvn95.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpmlonvn95.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpmlonvn95.py\", line\
    \ 12, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = numbers.split()\n \
    \   mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\
    \ 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    # if i[0] > j[0]:\n    # \
    \    nums[i], nums[j] = nums[j], nums[i]\n    return nums\n\n\nprint(sort_numbers('three\
    \ one five'))\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: "['three', 'one', 'five']\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg_yjn12t.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg_yjn12t.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpg_yjn12t.py\", line\
    \ 17, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda x: NUMBERS[x]))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp256e0joh.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp256e0joh.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp256e0joh.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp256e0joh.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ x: NUMBERS[x]))\n  File \"/tmp/tmp256e0joh.py\", line 8, in <lambda>\n    return\
    \ ' '.join(sorted(numbers.split(), key=lambda x: NUMBERS[x]))\nNameError: name\
    \ 'NUMBERS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    res = []\n    for num in numbers.split():\n        res.append(num_dict[num])\n\
    \    res.sort()\n    res = [str(i) for i in res]\n    return ' '.join(res)\n\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33vz0pi_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp33vz0pi_.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp33vz0pi_.py\", line\
    \ 19, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    assert all(n in WORD_TO_NUMBER\
    \ for n in numbers.split()), \"Invalid input string\"\n    # Sort string using\
    \ sorted and key=WORD_TO_NUMBER\n    sorted_string = sorted(numbers.split(), key=WORD_TO_NUMBER)\n\
    \    return \" \".join(sorted_string)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8fkfdm1.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpd8fkfdm1.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpd8fkfdm1.py\", line\
    \ 15, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpd8fkfdm1.py\"\
    , line 10, in sort_numbers\n    sorted_string = sorted(numbers.split(), key=WORD_TO_NUMBER)\n\
    NameError: name 'WORD_TO_NUMBER' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    number_sort = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n\
    \        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n\
    \        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return\
    \ ' '.join(str(x) for x in sorted(number_sort[i] for i in numbers))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcne55gwd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpcne55gwd.py\", line 32,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpcne55gwd.py\", line\
    \ 26, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    num_val = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five':\
    \ 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_val_inv = {v: k for\
    \ k, v in num_val.items()}\n    num_list = [num_val[item] for item in numbers]\n\
    \    num_list.sort()\n    numbers = [num_val_inv[item] for item in num_list]\n\
    \    return ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3ea37tg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu3ea37tg.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpu3ea37tg.py\", line\
    \ 18, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpu3ea37tg.py\"\
    , line 11, in sort_numbers\n    num_list = [num_val[item] for item in numbers]\n\
    \  File \"/tmp/tmpu3ea37tg.py\", line 11, in <listcomp>\n    num_list = [num_val[item]\
    \ for item in numbers]\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0j8jp7bk.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp0j8jp7bk.py\", line 18,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp0j8jp7bk.py\", line\
    \ 11, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    return \" \".join(sorted(numbers, key=lambda x: number_to_integer(x)))\n\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphn7ghiq0.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmphn7ghiq0.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmphn7ghiq0.py\", line\
    \ 14, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmphn7ghiq0.py\"\
    , line 9, in sort_numbers\n    return \" \".join(sorted(numbers, key=lambda x:\
    \ number_to_integer(x)))\n  File \"/tmp/tmphn7ghiq0.py\", line 9, in <lambda>\n\
    \    return \" \".join(sorted(numbers, key=lambda x: number_to_integer(x)))\n\
    NameError: name 'number_to_integer' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: int(number_word_to_number(x)))\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppicrgtnm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppicrgtnm.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmppicrgtnm.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmppicrgtnm.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda x: int(number_word_to_number(x)))\n\
    \  File \"/tmp/tmppicrgtnm.py\", line 9, in <lambda>\n    numbers.sort(key=lambda\
    \ x: int(number_word_to_number(x)))\nNameError: name 'number_word_to_number' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    NUMBERS = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    nums = numbers.split()\n    nums.sort(key=lambda num: NUMBERS[num])\n\
    \    return ' '.join(nums)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_list = [number_name_to_number(number)\
    \ for number in numbers.split()]\n    number_list.sort()\n    return ' '.join([number_to_number_name(number)\
    \ for number in number_list])\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6u7oljge.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp6u7oljge.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp6u7oljge.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp6u7oljge.py\"\
    , line 8, in sort_numbers\n    number_list = [number_name_to_number(number) for\
    \ number in numbers.split()]\n  File \"/tmp/tmp6u7oljge.py\", line 8, in <listcomp>\n\
    \    number_list = [number_name_to_number(number) for number in numbers.split()]\n\
    NameError: name 'number_name_to_number' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5xsawd5.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpz5xsawd5.py\", line 18,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpz5xsawd5.py\", line\
    \ 11, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    values = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = list(map(lambda\
    \ x: values[x], numbers))\n    numbers.sort()\n    numbers = list(map(lambda x:\
    \ list(values.keys())[list(values.values()).index(x)], numbers))\n    return '\
    \ '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    d = {'zero':0, 'one':1, 'two':2,\
    \ 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}\n  \
    \  # Split the string into a list, then use sort key to convert the string to\
    \ numeric value and compare.\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ x: d[x]))\n\nprint(sort_numbers('nine zero seven'))\n\nfrom typing import List\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: "zero seven nine\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    mapping = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = numbers.split(' ')\n    numbers = [mapping[number]\
    \ for number in numbers]\n    numbers.sort()\n    return ' '.join([str(number)\
    \ for number in numbers])\n    \ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplcd64dyn.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplcd64dyn.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmplcd64dyn.py\", line\
    \ 15, in check\n    assert candidate('') == ''\n  File \"/tmp/tmplcd64dyn.py\"\
    , line 10, in sort_numbers\n    numbers = [mapping[number] for number in numbers]\n\
    \  File \"/tmp/tmplcd64dyn.py\", line 10, in <listcomp>\n    numbers = [mapping[number]\
    \ for number in numbers]\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five':\
    \ 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = [num_map[n] for\
    \ n in numbers]\n    numbers.sort()\n    sorted_numbers = [str(n) for n in numbers]\n\
    \    return ' '.join(sorted_numbers)\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3osapmd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmps3osapmd.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmps3osapmd.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = list(map(number_to_int, numbers))\n    numbers.sort()\n  \
    \  numbers = list(map(int_to_number, numbers))\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8kft8h8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpf8kft8h8.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpf8kft8h8.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpf8kft8h8.py\"\
    , line 9, in sort_numbers\n    numbers = list(map(number_to_int, numbers))\nNameError:\
    \ name 'number_to_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return \" \".join(sorted(numbers.split(),\
    \ key=lambda x: NUMBERS[x]))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgl12fvla.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpgl12fvla.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpgl12fvla.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpgl12fvla.py\"\
    , line 8, in sort_numbers\n    return \" \".join(sorted(numbers.split(), key=lambda\
    \ x: NUMBERS[x]))\n  File \"/tmp/tmpgl12fvla.py\", line 8, in <lambda>\n    return\
    \ \" \".join(sorted(numbers.split(), key=lambda x: NUMBERS[x]))\nNameError: name\
    \ 'NUMBERS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    orders = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = numbers.split()\n    return ' '.join(sorted(numbers,\
    \ key=lambda x: orders[x]))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers = convert_number_to_number(numbers)\n    numbers.sort()\n    return\
    \ ' '.join(convert_number_to_string(numbers))\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert\
    \ candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jz2hno7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1jz2hno7.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp1jz2hno7.py\", line\
    \ 15, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp1jz2hno7.py\"\
    , line 9, in sort_numbers\n    numbers = convert_number_to_number(numbers)\nNameError:\
    \ name 'convert_number_to_number' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    for i in range(len(numbers)):\n        for j in range(len(numbers) - 1):\n\
    \            if convert_number(numbers[j]) > convert_number(numbers[j + 1]):\n\
    \                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n   \
    \ return ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5485jnhs.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5485jnhs.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp5485jnhs.py\", line\
    \ 19, in check\n    assert candidate('three five nine') == 'three five nine'\n\
    \  File \"/tmp/tmp5485jnhs.py\", line 11, in sort_numbers\n    if convert_number(numbers[j])\
    \ > convert_number(numbers[j + 1]):\nNameError: name 'convert_number' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ranosfc.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9ranosfc.py\", line 18,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp9ranosfc.py\", line\
    \ 11, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = [number_dict[num]\
    \ for num in numbers]\n    numbers.sort()\n    numbers = [key for key, val in\
    \ number_dict.items() if val in numbers]\n    return ' '.join(numbers)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # Translate string to integers\
    \ for sorting\n    nums = []\n    for i in numbers.split():\n        nums.append(dict[i])\n\
    \    nums.sort()\n    # Translate integers back to string for return\n    ret\
    \ = []\n    for i in nums:\n        for k, v in dict.items():\n            if\
    \ v == i:\n                ret.append(k)\n    return \" \".join(ret)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv0ow9hhz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpv0ow9hhz.py\", line 30,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpv0ow9hhz.py\", line\
    \ 24, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpv0ow9hhz.py\"\
    , line 11, in sort_numbers\n    nums.append(dict[i])\nTypeError: 'type' object\
    \ is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    print(numbers)\n    for i in range(len(numbers)):\n        for j in range(len(numbers)):\n\
    \            if numbers[i] < numbers[j]:\n                numbers[i], numbers[j]\
    \ = numbers[j], numbers[i]\n    numbers = ' '.join(numbers)\n    return numbers\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: "[]\n['three']\n['three', 'five', 'nine']\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4coeix6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu4coeix6.py\", line 26,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpu4coeix6.py\", line\
    \ 21, in check\n    assert candidate('three five nine') == 'three five nine'\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    DIGITS = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = numbers.split(' ')\n    numbers = sorted(numbers,\
    \ key=lambda x: DIGITS[x])\n    return ' '.join(numbers)\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw99ztwh9.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpw99ztwh9.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpw99ztwh9.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpw99ztwh9.py\"\
    , line 10, in sort_numbers\n    numbers = sorted(numbers, key=lambda x: DIGITS[x])\n\
    \  File \"/tmp/tmpw99ztwh9.py\", line 10, in <lambda>\n    numbers = sorted(numbers,\
    \ key=lambda x: DIGITS[x])\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_translations = ['zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n  \
    \  return ' '.join(sorted(numbers.split(), key=lambda x: number_translations.index(x)))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # OLD:\n    # results = []\n\
    \    # for item in numbers.split():\n    #     results.append(int(WORDS[item]))\n\
    \    # results.sort()\n    # return ' '.join(WORDS[x] for x in results)\n\n  \
    \  # NEW:\n    return ' '.join(WORDS[x] for x in sorted(int(WORDS[y]) for y in\
    \ numbers.split()))\ndef check(candidate):\n    assert candidate('') == ''\n \
    \   assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_hqsbw0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5_hqsbw0.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp5_hqsbw0.py\", line\
    \ 19, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp5_hqsbw0.py\"\
    , line 16, in sort_numbers\n    return ' '.join(WORDS[x] for x in sorted(int(WORDS[y])\
    \ for y in numbers.split()))\n  File \"/tmp/tmp5_hqsbw0.py\", line 16, in <genexpr>\n\
    \    return ' '.join(WORDS[x] for x in sorted(int(WORDS[y]) for y in numbers.split()))\n\
    NameError: name 'WORDS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda n: NUMERALS.index(n)))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5_yyaue8.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp5_yyaue8.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp5_yyaue8.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp5_yyaue8.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ n: NUMERALS.index(n)))\n  File \"/tmp/tmp5_yyaue8.py\", line 8, in <lambda>\n\
    \    return ' '.join(sorted(numbers.split(), key=lambda n: NUMERALS.index(n)))\n\
    NameError: name 'NUMERALS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda x: numbers_dict[x]))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71ffayd5.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp71ffayd5.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp71ffayd5.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp71ffayd5.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ x: numbers_dict[x]))\n  File \"/tmp/tmp71ffayd5.py\", line 8, in <lambda>\n\
    \    return ' '.join(sorted(numbers.split(), key=lambda x: numbers_dict[x]))\n\
    NameError: name 'numbers_dict' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2xavpfpm.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2xavpfpm.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp2xavpfpm.py\", line\
    \ 12, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    new_numbers = [word_to_num(word) for word in numbers]\n    new_numbers.sort()\n\
    \    sorted_string = [num_to_word(num) for num in new_numbers]\n    return ' '.join(sorted_string)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8upp9hh6.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8upp9hh6.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp8upp9hh6.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp8upp9hh6.py\"\
    , line 9, in sort_numbers\n    new_numbers = [word_to_num(word) for word in numbers]\n\
    \  File \"/tmp/tmp8upp9hh6.py\", line 9, in <listcomp>\n    new_numbers = [word_to_num(word)\
    \ for word in numbers]\nNameError: name 'word_to_num' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return \" \".join(sorted(numbers.split(),\
    \ key=number2numeral))\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ ''\n    assert candidate('three') == 'three'\n    assert candidate('three five\
    \ nine') == 'three five nine'\n    assert candidate('five zero four seven nine\
    \ eight') == 'zero four five seven eight nine'\n    assert candidate('six five\
    \ four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdu90k9rd.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpdu90k9rd.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpdu90k9rd.py\", line\
    \ 12, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpdu90k9rd.py\"\
    , line 8, in sort_numbers\n    return \" \".join(sorted(numbers.split(), key=number2numeral))\n\
    NameError: name 'number2numeral' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return \" \".join(sorted(numbers.split(),\
    \ key=lambda x: int(numbers_dict[x])))\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5d93d56t.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp5d93d56t.py\", line 18,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp5d93d56t.py\", line\
    \ 12, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp5d93d56t.py\"\
    , line 8, in sort_numbers\n    return \" \".join(sorted(numbers.split(), key=lambda\
    \ x: int(numbers_dict[x])))\n  File \"/tmp/tmp5d93d56t.py\", line 8, in <lambda>\n\
    \    return \" \".join(sorted(numbers.split(), key=lambda x: int(numbers_dict[x])))\n\
    NameError: name 'numbers_dict' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dic = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda\
    \ x: num_dic[x])\n    return ' '.join(num_list)\n\n\ndef check(candidate):\n \
    \   assert candidate('') == ''\n    assert candidate('three') == 'three'\n   \
    \ assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # You can add helper functions\
    \ here if needed\n    pass\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxdje0yqj.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxdje0yqj.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpxdje0yqj.py\", line\
    \ 13, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    sorted_numbers = sorted(numbers, key=NUMBERS.get)\n    return ' '.join(sorted_numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppmf60fwl.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppmf60fwl.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmppmf60fwl.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmppmf60fwl.py\"\
    , line 9, in sort_numbers\n    sorted_numbers = sorted(numbers, key=NUMBERS.get)\n\
    NameError: name 'NUMBERS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    numbers = [number_dict[number] for number in numbers.split()]\n\
    \    numbers.sort()\n    return ' '.join([number_dict[number] for number in numbers])\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvfai57p.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmphvfai57p.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmphvfai57p.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmphvfai57p.py\"\
    , line 11, in sort_numbers\n    return ' '.join([number_dict[number] for number\
    \ in numbers])\n  File \"/tmp/tmphvfai57p.py\", line 11, in <listcomp>\n    return\
    \ ' '.join([number_dict[number] for number in numbers])\nKeyError: 3\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # Assert that all the words\
    \ provided are valid number words\n    numbers = numbers.split()\n    assert all(number\
    \ in ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine'] for number in numbers)\n\n    # map the words to numbers and then sort\
    \ and map back to words\n    return ' '.join(map(lambda x: all_numbers[x], sorted(map(lambda\
    \ x: all_numbers.index(x), numbers))))\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq22nvpiv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpq22nvpiv.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpq22nvpiv.py\", line\
    \ 18, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpq22nvpiv.py\"\
    , line 13, in sort_numbers\n    return ' '.join(map(lambda x: all_numbers[x],\
    \ sorted(map(lambda x: all_numbers.index(x), numbers))))\n  File \"/tmp/tmpq22nvpiv.py\"\
    , line 13, in <lambda>\n    return ' '.join(map(lambda x: all_numbers[x], sorted(map(lambda\
    \ x: all_numbers.index(x), numbers))))\nNameError: name 'all_numbers' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = list(numbers.split())\n\
    \    numbers = sorted(numbers, key=lambda x: number_order[x])\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcprjhe1.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpqcprjhe1.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpqcprjhe1.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpqcprjhe1.py\"\
    , line 9, in sort_numbers\n    numbers = sorted(numbers, key=lambda x: number_order[x])\n\
    \  File \"/tmp/tmpqcprjhe1.py\", line 9, in <lambda>\n    numbers = sorted(numbers,\
    \ key=lambda x: number_order[x])\nNameError: name 'number_order' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    data = [convert(num) for num in numbers]\n    data.sort()\n    return\
    \ ' '.join([convert(num) for num in data])\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6xq5ywdf.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6xq5ywdf.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp6xq5ywdf.py\", line\
    \ 15, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp6xq5ywdf.py\"\
    , line 9, in sort_numbers\n    data = [convert(num) for num in numbers]\n  File\
    \ \"/tmp/tmp6xq5ywdf.py\", line 9, in <listcomp>\n    data = [convert(num) for\
    \ num in numbers]\nNameError: name 'convert' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    sorted_numbers = sorted(numbers, key=lambda x: int(dict_of_numbers[x]))\n\
    \    return ' '.join(sorted_numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2qq_m_x0.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp2qq_m_x0.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp2qq_m_x0.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp2qq_m_x0.py\"\
    , line 9, in sort_numbers\n    sorted_numbers = sorted(numbers, key=lambda x:\
    \ int(dict_of_numbers[x]))\n  File \"/tmp/tmp2qq_m_x0.py\", line 9, in <lambda>\n\
    \    sorted_numbers = sorted(numbers, key=lambda x: int(dict_of_numbers[x]))\n\
    NameError: name 'dict_of_numbers' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    unsorted_list = numbers.split(' ')\n    sorted_list\
    \ = sorted(unsorted_list, key=lambda x: number_dict[x])\n    return ' '.join(sorted_list)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz18tajiy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpz18tajiy.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpz18tajiy.py\", line\
    \ 15, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpz18tajiy.py\"\
    , line 10, in sort_numbers\n    sorted_list = sorted(unsorted_list, key=lambda\
    \ x: number_dict[x])\n  File \"/tmp/tmpz18tajiy.py\", line 10, in <lambda>\n \
    \   sorted_list = sorted(unsorted_list, key=lambda x: number_dict[x])\nKeyError:\
    \ ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    string = numbers.split(' ')\n\
    \    n = [num_to_int(number) for number in string]\n    n.sort()\n    string =\
    \ [int_to_num(number) for number in n]\n    return ' '.join(string)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nqd81yz.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5nqd81yz.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp5nqd81yz.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp5nqd81yz.py\"\
    , line 9, in sort_numbers\n    n = [num_to_int(number) for number in string]\n\
    \  File \"/tmp/tmp5nqd81yz.py\", line 9, in <listcomp>\n    n = [num_to_int(number)\
    \ for number in string]\nNameError: name 'num_to_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    converter = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    return ' '.join(map(str, sorted(map(converter.get, numbers.split()))))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmz15zwar.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpmz15zwar.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpmz15zwar.py\", line\
    \ 14, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = {\n     \
    \   'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n  \
    \      'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    }\n    # convert input to numbers\n\
    \    unsorted_numbers = numbers.split(' ')\n    sorted_numbers = []\n    for num\
    \ in unsorted_numbers:\n        sorted_numbers.append(sorted_numbers[num])\n \
    \   # sort numbers\n    sorted_numbers.sort()\n    # convert numbers to str\n\
    \    sorted_str = \"\"\n    for number in sorted_numbers:\n        for k, v in\
    \ sorted_numbers.items():\n            if number == v:\n                sorted_str\
    \ += k + ' '\n    return sorted_str\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjiwhoj_3.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpjiwhoj_3.py\", line 44,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpjiwhoj_3.py\", line\
    \ 37, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpjiwhoj_3.py\"\
    , line 24, in sort_numbers\n    sorted_numbers.append(sorted_numbers[num])\nTypeError:\
    \ list indices must be integers or slices, not str\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    zero_to_nine = [\n       \
    \ 'zero',\n        'one',\n        'two',\n        'three',\n        'four',\n\
    \        'five',\n        'six',\n        'seven',\n        'eight',\n       \
    \ 'nine',\n    ]\n    return ' '.join(sorted(numbers.split(), key=zero_to_nine.index))\n\
    def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda x: numbers_dict[x]))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvc7it2y.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpwvc7it2y.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpwvc7it2y.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpwvc7it2y.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ x: numbers_dict[x]))\n  File \"/tmp/tmpwvc7it2y.py\", line 8, in <lambda>\n\
    \    return ' '.join(sorted(numbers.split(), key=lambda x: numbers_dict[x]))\n\
    NameError: name 'numbers_dict' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: key_dict[x])\n    return ' '.join(numbers)\n\n\
    def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3hex2l94.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3hex2l94.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp3hex2l94.py\", line\
    \ 14, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp3hex2l94.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda x: key_dict[x])\n  File\
    \ \"/tmp/tmp3hex2l94.py\", line 9, in <lambda>\n    numbers.sort(key=lambda x:\
    \ key_dict[x])\nNameError: name 'key_dict' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = numbers.split(' ')\n\
    \    num_words = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6,\
    \ 'seven':7, 'eight':8, 'nine':9}\n    words = [num_words[num] for num in nums]\n\
    \    words.sort()\n    return ' '.join([str(num) for num in words])\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjum5qgr.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpkjum5qgr.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpkjum5qgr.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpkjum5qgr.py\"\
    , line 10, in sort_numbers\n    words = [num_words[num] for num in nums]\n  File\
    \ \"/tmp/tmpkjum5qgr.py\", line 10, in <listcomp>\n    words = [num_words[num]\
    \ for num in nums]\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_map = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    }\n    numbers = [number_map[n] for n in numbers.split()]\n\
    \    numbers.sort()\n    numbers = ' '.join([str(n) for n in numbers])\n    return\
    \ numbers\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqm5fvwez.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqm5fvwez.py\", line 33,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpqm5fvwez.py\", line\
    \ 27, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num2number = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    splitted = numbers.split()\n    numbers = [num2number[i]\
    \ for i in splitted]\n    return ' '.join([num2number[i] for i in splitted])\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_l0y5ph.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpc_l0y5ph.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpc_l0y5ph.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpc_l0y5ph.py\"\
    , line 11, in sort_numbers\n    return ' '.join([num2number[i] for i in splitted])\n\
    TypeError: sequence item 0: expected str instance, int found\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    n = numbers.split()\n    n.sort(key=lambda\
    \ s: DIGITS.index(s))\n    return ' '.join(n)\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert\
    \ candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg8tksib8.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpg8tksib8.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpg8tksib8.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpg8tksib8.py\"\
    , line 9, in sort_numbers\n    n.sort(key=lambda s: DIGITS.index(s))\n  File \"\
    /tmp/tmpg8tksib8.py\", line 9, in <lambda>\n    n.sort(key=lambda s: DIGITS.index(s))\n\
    NameError: name 'DIGITS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    if numbers == \"\":\n    \
    \    return \"\"\n    num_dict = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\"\
    : 3, \"four\": 4, \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\"\
    : 9}\n    numbers = numbers.split(\" \")\n    num_list = []\n    for i in numbers:\n\
    \        num_list.append(num_dict[i])\n    num_list.sort()\n    num_str = \"\"\
    \n    for i in num_list:\n        for keys, values in num_dict.items():\n    \
    \        if i == values:\n                num_str += keys + \" \"\n    return\
    \ num_str.strip()\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    print(numbers)\n    dictionary = {'zero': 0, 'one': 1, 'two': 2, 'three':\
    \ 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    new_numbers\
    \ = sorted(numbers, key=lambda x: dictionary[x])\n    return ' '.join(new_numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: "['']\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvqdj7ky3.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvqdj7ky3.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpvqdj7ky3.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpvqdj7ky3.py\"\
    , line 11, in sort_numbers\n    new_numbers = sorted(numbers, key=lambda x: dictionary[x])\n\
    \  File \"/tmp/tmpvqdj7ky3.py\", line 11, in <lambda>\n    new_numbers = sorted(numbers,\
    \ key=lambda x: dictionary[x])\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = ['zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    num_list = numbers.split()\n\
    \    return ' '.join(sorted(num_list, key=lambda x: nums.index(x)))\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    if numbers:\n        return\
    \ ' '.join(sorted(numbers.split(), key=lambda word: word_to_digit[word]))\n  \
    \  return ''\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatwl99n3.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpatwl99n3.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpatwl99n3.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpatwl99n3.py\"\
    , line 9, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ word: word_to_digit[word]))\n  File \"/tmp/tmpatwl99n3.py\", line 9, in <lambda>\n\
    \    return ' '.join(sorted(numbers.split(), key=lambda word: word_to_digit[word]))\n\
    NameError: name 'word_to_digit' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    assert type(numbers) == str,\
    \ 'should be a string'\n    numbers = numbers.split()\n    assert len(numbers)\
    \ > 0, 'should be non-empty string'\n    assert len(numbers) <= 10, 'should be\
    \ less or equal 10 numbers'\n    assert all(number in ('zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine') for number in numbers), 'should\
    \ be valid numbers'\n    sorted_numbers = sorted(numbers, key=lambda num: number_to_digit[num])\n\
    \    return ' '.join(sorted_numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppu4g4q6h.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppu4g4q6h.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmppu4g4q6h.py\", line\
    \ 18, in check\n    assert candidate('') == ''\n  File \"/tmp/tmppu4g4q6h.py\"\
    , line 10, in sort_numbers\n    assert len(numbers) > 0, 'should be non-empty\
    \ string'\nAssertionError: should be non-empty string\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    NUMBERS = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: NUMBERS[x]))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: int(text2int(x)))\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl6crezei.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpl6crezei.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpl6crezei.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpl6crezei.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda x: int(text2int(x)))\n\
    \  File \"/tmp/tmpl6crezei.py\", line 9, in <lambda>\n    numbers.sort(key=lambda\
    \ x: int(text2int(x)))\nNameError: name 'text2int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    dict1 = {0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four',\
    \ 5: 'five', 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}\n    words = numbers.split()\n\
    \    numbers = [dict[w] for w in words]\n    numbers.sort()\n    words = [dict1[n]\
    \ for n in numbers]\n    return ' '.join(words)\n\ndef check(candidate):\n   \
    \ assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert\
    \ candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    sorted_numbers = []\n    for i in range(10):\n        for number in numbers:\n\
    \            if NUMBERS_TO_DIGITS[number] == i:\n                sorted_numbers.append(number)\n\
    \    return ' '.join(sorted_numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcznlls5y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcznlls5y.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpcznlls5y.py\", line\
    \ 19, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpcznlls5y.py\"\
    , line 12, in sort_numbers\n    if NUMBERS_TO_DIGITS[number] == i:\nNameError:\
    \ name 'NUMBERS_TO_DIGITS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: number_names.index(x))\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftc8huq1.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpftc8huq1.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpftc8huq1.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpftc8huq1.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda x: number_names.index(x))\n\
    \  File \"/tmp/tmpftc8huq1.py\", line 9, in <lambda>\n    numbers.sort(key=lambda\
    \ x: number_names.index(x))\nNameError: name 'number_names' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = [int(number) for number in numbers]\n    numbers.sort()\n\
    \    numbers = [str(number) for number in numbers]\n    numbers = ' '.join(numbers)\n\
    \    return numbers\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvms5nl6z.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvms5nl6z.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpvms5nl6z.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpvms5nl6z.py\"\
    , line 9, in sort_numbers\n    numbers = [int(number) for number in numbers]\n\
    \  File \"/tmp/tmpvms5nl6z.py\", line 9, in <listcomp>\n    numbers = [int(number)\
    \ for number in numbers]\nValueError: invalid literal for int() with base 10:\
    \ ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda word:\
    \ num_dict[word]))\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    sort = [str(numbers[0])]\n\
    \    for i in range(1, len(numbers)):\n        sort.append(str(numbers[i]))\n\
    \        sort = sort[-2::-1] if sort[-2] > sort[-1] else sort\n    return ' '.join(sort)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhxfqtzm.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxhxfqtzm.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpxhxfqtzm.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpxhxfqtzm.py\"\
    , line 8, in sort_numbers\n    sort = [str(numbers[0])]\nIndexError: string index\
    \ out of range\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return \" \".join(sorted(numbers.split(),\
    \ key=int))\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1e2ip1s.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_1e2ip1s.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp_1e2ip1s.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp_1e2ip1s.py\"\
    , line 8, in sort_numbers\n    return \" \".join(sorted(numbers.split(), key=int))\n\
    ValueError: invalid literal for int() with base 10: 'three'\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # Your code here\n    #use\
    \ a dictionary and sort then return the answer\n    words = numbers.split()\n\
    \    num = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6,\
    \ 'seven':7, 'eight':8, 'nine':9}\n    words.sort(key=lambda x: num[x])\n    return\
    \ \" \".join(words)\n    #return ' '.join(sorted(numbers.split(), key=lambda x:\
    \ num[x]))\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_words = numbers.split()\n\
    \    number_strings = []\n    for word in number_words:\n        number_strings.append(str(word_to_number(word)))\n\
    \    return ' '.join(sorted(number_strings))\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoa383gul.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpoa383gul.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpoa383gul.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpoa383gul.py\"\
    , line 11, in sort_numbers\n    number_strings.append(str(word_to_number(word)))\n\
    NameError: name 'word_to_number' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    d = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\
    \ 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_dict = {d[k]: k for k\
    \ in d}\n    numbers.sort()\n    return ' '.join([num_dict[i] for i in numbers])\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8f2rdupj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8f2rdupj.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp8f2rdupj.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp8f2rdupj.py\"\
    , line 12, in sort_numbers\n    return ' '.join([num_dict[i] for i in numbers])\n\
    \  File \"/tmp/tmp8f2rdupj.py\", line 12, in <listcomp>\n    return ' '.join([num_dict[i]\
    \ for i in numbers])\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_map = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    list_of_numbers = numbers.split(' ')\n    sorted_numbers\
    \ = sorted(list_of_numbers, key=lambda num: num_map[num])\n    return ' '.join(sorted_numbers)\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpos14geo4.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpos14geo4.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpos14geo4.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpos14geo4.py\"\
    , line 10, in sort_numbers\n    sorted_numbers = sorted(list_of_numbers, key=lambda\
    \ num: num_map[num])\n  File \"/tmp/tmpos14geo4.py\", line 10, in <lambda>\n \
    \   sorted_numbers = sorted(list_of_numbers, key=lambda num: num_map[num])\nKeyError:\
    \ ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    mapping = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    list_of_numbers = [mapping[number] for number in numbers.split()]\n\
    \    list_of_numbers.sort()\n    return ' '.join([str(number) for number in list_of_numbers])\n\
    \nimport math\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp2evfwox.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpp2evfwox.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpp2evfwox.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    pass\n \n \ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp91t9k9xm.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp91t9k9xm.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp91t9k9xm.py\", line\
    \ 12, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers.sort(key=lambda x: WORD_MAP[x])\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf517isky.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpf517isky.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpf517isky.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpf517isky.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda x: WORD_MAP[x])\n  File\
    \ \"/tmp/tmpf517isky.py\", line 9, in <lambda>\n    numbers.sort(key=lambda x:\
    \ WORD_MAP[x])\nNameError: name 'WORD_MAP' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers = [int(NUMBERS_MAPPING[n]) for n in numbers]\n    return ' '.join([NUMBERS_MAPPING[n]\
    \ for n in sorted(numbers)])\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95p17zbr.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp95p17zbr.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp95p17zbr.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp95p17zbr.py\"\
    , line 9, in sort_numbers\n    numbers = [int(NUMBERS_MAPPING[n]) for n in numbers]\n\
    \  File \"/tmp/tmp95p17zbr.py\", line 9, in <listcomp>\n    numbers = [int(NUMBERS_MAPPING[n])\
    \ for n in numbers]\nNameError: name 'NUMBERS_MAPPING' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return \" \".join(sorted(numbers.split(),\
    \ key=int))\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jeev5_t.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp8jeev5_t.py\", line 18,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp8jeev5_t.py\", line\
    \ 12, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp8jeev5_t.py\"\
    , line 8, in sort_numbers\n    return \" \".join(sorted(numbers.split(), key=int))\n\
    ValueError: invalid literal for int() with base 10: 'three'\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    d = {'zero': 0, 'one': 1,\
    \ 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8,\
    \ 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: d[x]))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    mapping = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = [mapping[n] for n in numbers.split()]\n    numbers.sort()\n\
    \    return ' '.join([str(n) for n in numbers])\n    \n    \n    #\n    # return\
    \ ' '.join(sorted(numbers.split(), key=lambda n: mapping[n]))\n    \ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbnke9rw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptbnke9rw.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmptbnke9rw.py\", line\
    \ 19, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numeral_to_number = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n  \
    \  output = []\n    for numeral in numbers:\n        output.append(numeral_to_number[numeral])\n\
    \    output.sort()\n    output = [str(i) for i in output]\n    return ' '.join(output)\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02bg939h.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp02bg939h.py\", line 36,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp02bg939h.py\", line\
    \ 30, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda x: num_to_int(x)))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxuxbp_fc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpxuxbp_fc.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpxuxbp_fc.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpxuxbp_fc.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ x: num_to_int(x)))\n  File \"/tmp/tmpxuxbp_fc.py\", line 8, in <lambda>\n  \
    \  return ' '.join(sorted(numbers.split(), key=lambda x: num_to_int(x)))\nNameError:\
    \ name 'num_to_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = sorted(numbers.split('\
    \ '), key=lambda x: [int(letter in 'on') for letter in x][::-1])\n    return '\
    \ '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprpm0mdeq.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmprpm0mdeq.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmprpm0mdeq.py\", line\
    \ 15, in check\n    assert candidate('three five nine') == 'three five nine'\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    my_list = numbers.split()\n\
    \    a = []\n    for element in my_list:\n        if element == 'zero':\n    \
    \        a.append(0)\n        elif element == 'one':\n            a.append(1)\n\
    \        elif element == 'two':\n            a.append(2)\n        elif element\
    \ == 'three':\n            a.append(3)\n        elif element == 'four':\n    \
    \        a.append(4)\n        elif element == 'five':\n            a.append(5)\n\
    \        elif element == 'six':\n            a.append(6)\n        elif element\
    \ == 'seven':\n            a.append(7)\n        elif element == 'eight':\n   \
    \         a.append(8)\n        elif element == 'nine':\n            a.append(9)\n\
    \    a.sort()\n    b = []\n    for element in a:\n        if element == 0:\n \
    \           b.append('zero')\n        elif element == 1:\n            b.append('one')\n\
    \        elif element == 2:\n            b.append('two')\n        elif element\
    \ == 3:\n            b.append('three')\n        elif element == 4:\n         \
    \   b.append('four')\n        elif element == 5:\n            b.append('five')\n\
    \        elif element == 6:\n            b.append('six')\n        elif element\
    \ == 7:\n            b.append('seven')\n        elif element == 8:\n         \
    \   b.append('eight')\n        elif element == 9:\n            b.append('nine')\n\
    \    print(b)\n    return \" \".join(b)\n            \n        \n    \n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: "[]\n['three']\n['three', 'five', 'nine']\n['zero', 'four', 'five', 'seven',\
    \ 'eight', 'nine']\n['zero', 'one', 'two', 'three', 'four', 'five', 'six']\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_map = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = [number_map[number] for number in numbers.split()]\n\
    \    numbers.sort()\n    numbers = [number_map[number] for number in numbers]\n\
    \    return ' '.join(numbers)\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6f0t9bpe.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6f0t9bpe.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp6f0t9bpe.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp6f0t9bpe.py\"\
    , line 11, in sort_numbers\n    numbers = [number_map[number] for number in numbers]\n\
    \  File \"/tmp/tmp6f0t9bpe.py\", line 11, in <listcomp>\n    numbers = [number_map[number]\
    \ for number in numbers]\nKeyError: 3\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five':\
    \ 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    return \" \".join(str(to_number[num])\
    \ for num in sorted(numbers, key=lambda number: to_number[number]))\n    \ndef\
    \ check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp384r_376.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp384r_376.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp384r_376.py\", line\
    \ 14, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    string = numbers.split()\n\
    \    tuple_list = [tuple(i, CONVERSIONS[i]) for i in string]\n    # sort the list\
    \ by the tuple value\n    sorted_list = sorted(tuple_list, key=itemgetter(1))\n\
    \    # return the numbers\n    return ' '.join([i[0] for i in sorted_list])\n\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9pf68cr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpo9pf68cr.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpo9pf68cr.py\", line\
    \ 17, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpo9pf68cr.py\"\
    , line 11, in sort_numbers\n    sorted_list = sorted(tuple_list, key=itemgetter(1))\n\
    NameError: name 'itemgetter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    sorted_numbers = ' '.join(sorted(numbers.split(),\
    \ key=lambda x: numbers_to_int[x]))\n    return sorted_numbers\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgy156vcw.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpgy156vcw.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpgy156vcw.py\", line\
    \ 14, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpgy156vcw.py\"\
    , line 8, in sort_numbers\n    sorted_numbers = ' '.join(sorted(numbers.split(),\
    \ key=lambda x: numbers_to_int[x]))\n  File \"/tmp/tmpgy156vcw.py\", line 8, in\
    \ <lambda>\n    sorted_numbers = ' '.join(sorted(numbers.split(), key=lambda x:\
    \ numbers_to_int[x]))\nNameError: name 'numbers_to_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split('\
    \ '), key=lambda x: numeral_to_number(x)))\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo46girn3.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpo46girn3.py\", line 18,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpo46girn3.py\", line\
    \ 11, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpo46girn3.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(' '), key=lambda\
    \ x: numeral_to_number(x)))\n  File \"/tmp/tmpo46girn3.py\", line 8, in <lambda>\n\
    \    return ' '.join(sorted(numbers.split(' '), key=lambda x: numeral_to_number(x)))\n\
    NameError: name 'numeral_to_number' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    num_list = numbers.keys()\n    # num_list.sort()\n    # new_list\
    \ = []\n    # for item in num_list:\n    #     new_list.append(numbers[item])\n\
    \    return ' '.join(num_list)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2o49g90y.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2o49g90y.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp2o49g90y.py\", line\
    \ 18, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: char_to_num(x))\n    return ' '.join(numbers)\n\
    \    # return ' '.join(sorted(numbers.split(), key=lambda x: char_to_num(x)))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpde0ae3gl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpde0ae3gl.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpde0ae3gl.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpde0ae3gl.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda x: char_to_num(x))\n  File\
    \ \"/tmp/tmpde0ae3gl.py\", line 9, in <lambda>\n    numbers.sort(key=lambda x:\
    \ char_to_num(x))\nNameError: name 'char_to_num' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_list = numbers.split()\n\
    \    num_list = list(map(numerals_to_digits, num_list))\n    num_list.sort()\n\
    \    num_list = list(map(digits_to_numerals, num_list))\n    return ' '.join(num_list)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp907_kde_.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp907_kde_.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp907_kde_.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp907_kde_.py\"\
    , line 9, in sort_numbers\n    num_list = list(map(numerals_to_digits, num_list))\n\
    NameError: name 'numerals_to_digits' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    numbers = numbers.split(' ')\n    numbers = list(map(lambda\
    \ number: number_dict[number], numbers))\n    numbers.sort()\n    return ' '.join(list(map(lambda\
    \ number: [key for key, value in number_dict.items() if value == number][0], numbers)))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj56bhpgd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpj56bhpgd.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpj56bhpgd.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpj56bhpgd.py\"\
    , line 10, in sort_numbers\n    numbers = list(map(lambda number: number_dict[number],\
    \ numbers))\n  File \"/tmp/tmpj56bhpgd.py\", line 10, in <lambda>\n    numbers\
    \ = list(map(lambda number: number_dict[number], numbers))\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    digits = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\
    \ 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = [digits[num] for\
    \ num in numbers]\n    numbers.sort()\n    return ' '.join([str(num) for num in\
    \ numbers])\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr32nob_o.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr32nob_o.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpr32nob_o.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_map = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    num_arr = [num_map[n] for n in numbers.split()]\n    return\
    \ ' '.join([num for _, num in sorted(zip(num_arr, numbers.split()))])\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    str_num = numbers.split('\
    \ ')\n    num = [int(word_to_num[i]) for i in str_num]\n    # print(num)\n   \
    \ num.sort()\n    # print(num)\n    res = [num_to_word[i] for i in num]\n    #\
    \ print(res)\n    # print(' '.join(res))\n    return ' '.join(res)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnb87y62.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjnb87y62.py\", line 27,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpjnb87y62.py\", line\
    \ 20, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpjnb87y62.py\"\
    , line 9, in sort_numbers\n    num = [int(word_to_num[i]) for i in str_num]\n\
    \  File \"/tmp/tmpjnb87y62.py\", line 9, in <listcomp>\n    num = [int(word_to_num[i])\
    \ for i in str_num]\nNameError: name 'word_to_num' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = list(map(lambda number: convert_to_numeral(number), numbers))\n\
    \    numbers.sort()\n    return ' '.join(list(map(lambda number: convert_to_english(number),\
    \ numbers)))\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo359lvmd.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpo359lvmd.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpo359lvmd.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpo359lvmd.py\"\
    , line 9, in sort_numbers\n    numbers = list(map(lambda number: convert_to_numeral(number),\
    \ numbers))\n  File \"/tmp/tmpo359lvmd.py\", line 9, in <lambda>\n    numbers\
    \ = list(map(lambda number: convert_to_numeral(number), numbers))\nNameError:\
    \ name 'convert_to_numeral' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_map = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: number_map[x]))\n\
    \nprint(sort_numbers('three one five'))\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: "one three five\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_list = []\n    sorted_num_list\
    \ = []\n    for num in numbers.split():\n        num_list.append(translate_numbers_to_digits(num))\n\
    \    sorted_num_list = sorted(num_list)\n    output = ''\n    for num in sorted_num_list:\n\
    \        output += translate_numbers_to_digits(num) + ' '\n    return output\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprhcnnkci.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprhcnnkci.py\", line 27,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmprhcnnkci.py\", line\
    \ 21, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmprhcnnkci.py\"\
    , line 11, in sort_numbers\n    num_list.append(translate_numbers_to_digits(num))\n\
    NameError: name 'translate_numbers_to_digits' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = sorted(numbers.split('\
    \ '), key=lambda x: DIGITS[x])\n    return ' '.join(numbers)\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplywytezh.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmplywytezh.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmplywytezh.py\", line\
    \ 12, in check\n    assert candidate('') == ''\n  File \"/tmp/tmplywytezh.py\"\
    , line 8, in sort_numbers\n    numbers = sorted(numbers.split(' '), key=lambda\
    \ x: DIGITS[x])\n  File \"/tmp/tmplywytezh.py\", line 8, in <lambda>\n    numbers\
    \ = sorted(numbers.split(' '), key=lambda x: DIGITS[x])\nNameError: name 'DIGITS'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda x: NUMBERS[x]))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2e2tvh8h.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2e2tvh8h.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp2e2tvh8h.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp2e2tvh8h.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ x: NUMBERS[x]))\n  File \"/tmp/tmp2e2tvh8h.py\", line 8, in <lambda>\n    return\
    \ ' '.join(sorted(numbers.split(), key=lambda x: NUMBERS[x]))\nNameError: name\
    \ 'NUMBERS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # Map word to number\n   \
    \ num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\
    \ 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    # Split string into a list\n\
    \    num_list = numbers.split()\n    # Map each item in the list to its corresponding\
    \ number from the dict and then sort the list\n    num_list = sorted(list(map(lambda\
    \ x: num_dict[x], num_list)))\n    # Map each item in the list to its corresponding\
    \ word from the dict and join the list with spaces\n    return ' '.join(list(map(lambda\
    \ x: list(num_dict.keys())[list(num_dict.values()).index(x)], num_list)))\n\n\
    def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers.sort(key=lambda n: numbers_to_digit[n])\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jmg9r7f.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8jmg9r7f.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp8jmg9r7f.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp8jmg9r7f.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda n: numbers_to_digit[n])\n\
    \  File \"/tmp/tmp8jmg9r7f.py\", line 9, in <lambda>\n    numbers.sort(key=lambda\
    \ n: numbers_to_digit[n])\nNameError: name 'numbers_to_digit' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    num_list = [convert_to_number(num) for num in numbers]\n    num_list.sort()\n\
    \    return \" \".join([convert_to_word(num) for num in num_list])\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nu5w4y6.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp7nu5w4y6.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp7nu5w4y6.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp7nu5w4y6.py\"\
    , line 9, in sort_numbers\n    num_list = [convert_to_number(num) for num in numbers]\n\
    \  File \"/tmp/tmp7nu5w4y6.py\", line 9, in <listcomp>\n    num_list = [convert_to_number(num)\
    \ for num in numbers]\nNameError: name 'convert_to_number' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_map = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    nums = numbers.split()\n    nums = sorted(nums, key=lambda\
    \ x: num_map[x])\n    return ' '.join(nums)\n\nprint(sort_numbers('three one five'))\n\
    def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: "one three five\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = [int(NUMBERS[i]) for i in numbers]\n    numbers.sort()\n \
    \   numbers = [NUMBERS_REV[i] for i in numbers]\n    numbers = ' '.join(numbers)\n\
    \    return numbers\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxva4cm34.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxva4cm34.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpxva4cm34.py\", line\
    \ 17, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpxva4cm34.py\"\
    , line 9, in sort_numbers\n    numbers = [int(NUMBERS[i]) for i in numbers]\n\
    \  File \"/tmp/tmpxva4cm34.py\", line 9, in <listcomp>\n    numbers = [int(NUMBERS[i])\
    \ for i in numbers]\nNameError: name 'NUMBERS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    ordered_words = ['zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    ordered_numbers\
    \ = []\n    for number in numbers.split():\n        ordered_numbers.append(str(ordered_words.index(number)))\n\
    \    return ' '.join(sorted(ordered_numbers))\n\n\ndef check(candidate):\n   \
    \ assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert\
    \ candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmi4a_xk7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpmi4a_xk7.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpmi4a_xk7.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = [translate(n) for n\
    \ in numbers.split()]\n    return ' '.join(translate(n) for n in sorted(nums))\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpg3o8o0.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmphpg3o8o0.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmphpg3o8o0.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmphpg3o8o0.py\"\
    , line 8, in sort_numbers\n    nums = [translate(n) for n in numbers.split()]\n\
    \  File \"/tmp/tmphpg3o8o0.py\", line 8, in <listcomp>\n    nums = [translate(n)\
    \ for n in numbers.split()]\nNameError: name 'translate' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_list = numbers.split()\n\
    \    sorted_list = sorted(num_list, key=lambda x: num_mapping.get(x))\n    return\
    \ ' '.join(sorted_list)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ ''\n    assert candidate('three') == 'three'\n    assert candidate('three five\
    \ nine') == 'three five nine'\n    assert candidate('five zero four seven nine\
    \ eight') == 'zero four five seven eight nine'\n    assert candidate('six five\
    \ four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51rw6zzz.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp51rw6zzz.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp51rw6zzz.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp51rw6zzz.py\"\
    , line 9, in sort_numbers\n    sorted_list = sorted(num_list, key=lambda x: num_mapping.get(x))\n\
    \  File \"/tmp/tmp51rw6zzz.py\", line 9, in <lambda>\n    sorted_list = sorted(num_list,\
    \ key=lambda x: num_mapping.get(x))\nNameError: name 'num_mapping' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    import string\n    import\
    \ re\n    numbers = numbers.split()\n    numbers_ = []\n    numbers_ = [str(string.digits[i])\
    \ for i in range(10) if str(string.digits[i]) in numbers]\n    numbers_ = sorted(numbers_)\n\
    \    return ' '.join(numbers_)\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5q_33d9i.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5q_33d9i.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp5q_33d9i.py\", line\
    \ 18, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # Create a mapping from a\
    \ word to a number from 0 to 9\n    word_to_number = {\n        'zero': 0,\n \
    \       'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n\
    \        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    }\n    # The input is just a string of words, need\
    \ to convert it to a list\n    # then convert each item in the list to numbers\n\
    \    # Then sort the numbers\n    # Then convert the list back to a string\n \
    \   # HINT: Consider using a list comprehension to convert a string to a list\n\
    \    #       See: https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions\n\
    \    # HINT: The sort method for a list will sort the list in place\n    #   \
    \    See: https://docs.python.org/3/tutorial/datastructures.html#more-on-lists\n\
    \    # HINT: The string method join will create a new string from a list of strings\n\
    \    #       See: https://docs.python.org/3/library/stdtypes.html#str.join\n \
    \   words = numbers.split()\n    numbers = [word_to_number[word] for word in words]\n\
    \    numbers.sort()\n    return ' '.join(str(num) for num in numbers)\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjes2904_.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpjes2904_.py\", line 44,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpjes2904_.py\", line\
    \ 38, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    from collections import Counter\n\
    \    from re import sub\n    from string import ascii_lowercase\n    from typing\
    \ import Counter as CounterT\n\n    special_numbers = [\n        'zero',\n   \
    \     'one',\n        'two',\n        'three',\n        'four',\n        'five',\n\
    \        'six',\n        'seven',\n        'eight',\n        'nine',\n    ]\n\
    \    # dictionary where key is the number and value is it's numeric value.\n \
    \   numeric_numbers = {\n        str(num): num for num in range(10)\n    }\n\n\
    \    def is_valid_letter(letter: str) -> bool:\n        \"\"\" check if the letter\
    \ is a valid letter, meaning it belongs to the\n        ascii_lowercase string.\n\
    \        \"\"\"\n        return letter in ascii_lowercase\n\n    def count_letters(num:\
    \ str) -> CounterT:\n        \"\"\" count the letters in a string\n        \"\"\
    \"\n        return Counter(num)\n\n    def count_valid_letters(num: str) -> CounterT:\n\
    \        \"\"\" count the letters in a string that are valid letters\n       \
    \ \"\"\"\n        return Counter(filter(is_valid_letter, num))\n\n    def sub_by_count(num:\
    \ str, count: CounterT) -> str:\n        \"\"\" substitute the letters in the\
    \ number with the count of the letters\n        in the count dictionary.\n   \
    \     \"\"\"\n        for key, value in count.items():\n            num = sub(f'({key})',\
    \ str(value), num)\n        return num\n\n    def sub_by_numeric_number(num: str,\
    \ numeric_numbers: dict) -> str:\n        \"\"\" substitute the numbers in the\
    \ string with their numeric value.\n        \"\"\"\n        for key, value in\
    \ numeric_numbers.items():\n            num = sub(f'({key})', str(value), num)\n\
    \        return num\n\n    numbers = [num for num in numbers.split(' ')]\n   \
    \ # check the numbers are in the list of special numbers\n    if not all(num in\
    \ special_numbers for num in numbers):\n        raise Exception('Invalid number')\n\
    \n    # remove the letters from each number\n    numbers = [\n        sub_by_count(num,\
    \ count_valid\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpyevq8zjd.py\", line 69\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    sort_numbers = sorted(numbers.split(), key=lambda\
    \ x: number_dict[x])\n    return ' '.join(sort_numbers)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    a = numbers.split(' ')\n \
    \   s = sorted(a, key=lambda x: int_from_numeral(x))\n    return ' '.join(s)\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_m2hz5rv.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp_m2hz5rv.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp_m2hz5rv.py\", line\
    \ 13, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp_m2hz5rv.py\"\
    , line 9, in sort_numbers\n    s = sorted(a, key=lambda x: int_from_numeral(x))\n\
    \  File \"/tmp/tmp_m2hz5rv.py\", line 9, in <lambda>\n    s = sorted(a, key=lambda\
    \ x: int_from_numeral(x))\nNameError: name 'int_from_numeral' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = numbers.split()\n \
    \   nums.sort(key=lambda s: convert_to_num(s))\n    return ' '.join(nums)\n\n\n\
    def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8zp53d_y.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp8zp53d_y.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp8zp53d_y.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp8zp53d_y.py\"\
    , line 9, in sort_numbers\n    nums.sort(key=lambda s: convert_to_num(s))\n  File\
    \ \"/tmp/tmp8zp53d_y.py\", line 9, in <lambda>\n    nums.sort(key=lambda s: convert_to_num(s))\n\
    NameError: name 'convert_to_num' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_to_int = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    string_num = numbers.split()\n    int_num = [num_to_int[num]\
    \ for num in string_num]\n    sorted_num = sorted(int_num)\n    return ' '.join([str(num)\
    \ for num in sorted_num])\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwt2qyq9w.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwt2qyq9w.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpwt2qyq9w.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # insert code here\n    dictionary\
    \ = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6,\
    \ 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split(' ')\n\
    \    numbers_list.sort(key=lambda x: dictionary[x])\n    return ' '.join(numbers_list)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy5_plgwp.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpy5_plgwp.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpy5_plgwp.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpy5_plgwp.py\"\
    , line 11, in sort_numbers\n    numbers_list.sort(key=lambda x: dictionary[x])\n\
    \  File \"/tmp/tmpy5_plgwp.py\", line 11, in <lambda>\n    numbers_list.sort(key=lambda\
    \ x: dictionary[x])\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda n: n2d[n])\n    return ' '.join(numbers)\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvs6s61y.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpsvs6s61y.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpsvs6s61y.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpsvs6s61y.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda n: n2d[n])\n  File \"/tmp/tmpsvs6s61y.py\"\
    , line 9, in <lambda>\n    numbers.sort(key=lambda n: n2d[n])\nNameError: name\
    \ 'n2d' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = list(map(lambda x: num_dict[x], numbers.split()))\n\
    \    return ' '.join(map(lambda x: list(num_dict.keys())[list(num_dict.values()).index(x)],\
    \ sorted(numbers)))\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = [DIGITS[num] for num in numbers]\n    return ' '.join(sorted(numbers))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppn2hawsz.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppn2hawsz.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmppn2hawsz.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmppn2hawsz.py\"\
    , line 9, in sort_numbers\n    numbers = [DIGITS[num] for num in numbers]\n  File\
    \ \"/tmp/tmppn2hawsz.py\", line 9, in <listcomp>\n    numbers = [DIGITS[num] for\
    \ num in numbers]\nNameError: name 'DIGITS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    list_numbers = numbers.split()\n\
    \    return ' '.join(sorted(list_numbers, key=NUMBER_WORDS.get))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1h3hhrbi.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1h3hhrbi.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp1h3hhrbi.py\", line\
    \ 13, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp1h3hhrbi.py\"\
    , line 9, in sort_numbers\n    return ' '.join(sorted(list_numbers, key=NUMBER_WORDS.get))\n\
    NameError: name 'NUMBER_WORDS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda k: words.index(k)))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbw32qa11.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpbw32qa11.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpbw32qa11.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpbw32qa11.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ k: words.index(k)))\n  File \"/tmp/tmpbw32qa11.py\", line 8, in <lambda>\n \
    \   return ' '.join(sorted(numbers.split(), key=lambda k: words.index(k)))\nNameError:\
    \ name 'words' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    print(numbers)\n    string = ''\n    numbers.sort(key=to_number)\n    print(numbers)\n\
    \    for number in numbers:\n        string += number + ' '\n    return string.strip()\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: "[]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_r1v1020.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_r1v1020.py\", line 26,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp_r1v1020.py\", line\
    \ 19, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp_r1v1020.py\"\
    , line 11, in sort_numbers\n    numbers.sort(key=to_number)\nNameError: name 'to_number'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = numbers.split()\n    for i in range(len(numbers)):\n\
    \        numbers[i] = num_dict[numbers[i]]\n    numbers.sort()\n    for i in range(len(numbers)):\n\
    \        for key, value in num_dict.items():\n            if numbers[i] == value:\n\
    \                numbers[i] = key\n    return ' '.join(numbers)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: nums[x]))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = [convert_word_to_int(word)\
    \ for word in numbers.split()]\n    return ' '.join(convert_int_to_word(n) for\
    \ n in sorted(numbers))\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ ''\n    assert candidate('three') == 'three'\n    assert candidate('three five\
    \ nine') == 'three five nine'\n    assert candidate('five zero four seven nine\
    \ eight') == 'zero four five seven eight nine'\n    assert candidate('six five\
    \ four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcji8zmi0.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpcji8zmi0.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpcji8zmi0.py\", line\
    \ 14, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpcji8zmi0.py\"\
    , line 8, in sort_numbers\n    numbers = [convert_word_to_int(word) for word in\
    \ numbers.split()]\n  File \"/tmp/tmpcji8zmi0.py\", line 8, in <listcomp>\n  \
    \  numbers = [convert_word_to_int(word) for word in numbers.split()]\nNameError:\
    \ name 'convert_word_to_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    for i in range(len(numbers)):\n        numbers[i] = DIGITS[numbers[i]]\n\
    \    numbers.sort()\n    for i in range(len(numbers)):\n        numbers[i] = str(numbers[i])\n\
    \    return ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhezpfh8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqhezpfh8.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpqhezpfh8.py\", line\
    \ 19, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpqhezpfh8.py\"\
    , line 10, in sort_numbers\n    numbers[i] = DIGITS[numbers[i]]\nNameError: name\
    \ 'DIGITS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers = [NUMBER_TO_DIGIT[i] for i in numbers]\n    numbers.sort()\n   \
    \ numbers = [str(i) for i in numbers]\n    return ' '.join(numbers)\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmwe9c9mb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpmwe9c9mb.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpmwe9c9mb.py\", line\
    \ 17, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpmwe9c9mb.py\"\
    , line 9, in sort_numbers\n    numbers = [NUMBER_TO_DIGIT[i] for i in numbers]\n\
    \  File \"/tmp/tmpmwe9c9mb.py\", line 9, in <listcomp>\n    numbers = [NUMBER_TO_DIGIT[i]\
    \ for i in numbers]\nNameError: name 'NUMBER_TO_DIGIT' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    mapping = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: mapping[x]))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    d = {'zero': 0, 'one': 1,\
    \ 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8,\
    \ 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda key: d[key]))\n\
    \n@pytest.mark.parametrize(\"input_argument, expected_return\", [\n    ('three\
    \ one five', 'one three five'),\n    ('zero one two', 'zero one two'),\n    ('nine\
    \ one two', 'one two nine'),\n    ('nine zero two', 'zero two nine'),\n    ('eight\
    \ zero two', 'zero two eight'),\n    ('eight one two', 'one two eight'),\n   \
    \ ('eight one nine', 'one eight nine'),\n    ('eight zero nine', 'zero eight nine'),\n\
    \    ('eight seven six five four three two one zero', 'zero one two three four\
    \ five six seven eight'),\n    ('five six eight one nine zero two three seven\
    \ four', 'zero one two three four five six seven eight nine'),\n    ('five six\
    \ eight one nine zero two three seven four zero', 'zero zero one two three four\
    \ five six seven eight nine'),\n    ('eight zero one three one zero nine one four\
    \ two', 'zero zero one one one two three four eight nine'),\n    ('eight zero\
    \ one three one zero nine one four two one', 'zero zero one one one one two three\
    \ four eight nine'),\n    ('eight zero one three one zero nine one four two one\
    \ four', 'zero zero one one one one two three four four eight nine'),\n    ('zero\
    \ zero zero zero zero zero zero zero zero zero', 'zero zero zero zero zero zero\
    \ zero zero zero zero'),\n    ('one one one one one one one one one one', 'one\
    \ one one one one one one one one one'),\n    ('two two two two two two two two\
    \ two two', 'two two two two two two two two two two'),\n    ('three three three\
    \ three three three three three three three', 'three three three three three three\
    \ three three three three'),\n    ('four four four four four four four four four\
    \ four', 'four four four four four four four four four four'),\n    ('five five\
    \ five five five five five five five five', 'five five five five five five five\n\
    def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphb4x8iyn.py\", line 31\n    ('five five five five five\
    \ five five five five five', 'five five five five five five five\n           \
    \                                                                            \
    \     ^\nSyntaxError: EOL while scanning string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # create a dictionary to convert\
    \ words to numbers\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3,\
    \ 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list\
    \ = numbers.split(' ')\n    words_to_sort = [num_dict[i] for i in num_list]\n\
    \    # sort the words and convert back to words\n    sorted_list = [num_dict[i]\
    \ for i in sorted(words_to_sort)]\n    return sorted_list\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv02ea4d6.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpv02ea4d6.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpv02ea4d6.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpv02ea4d6.py\"\
    , line 11, in sort_numbers\n    words_to_sort = [num_dict[i] for i in num_list]\n\
    \  File \"/tmp/tmpv02ea4d6.py\", line 11, in <listcomp>\n    words_to_sort = [num_dict[i]\
    \ for i in num_list]\nKeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_dict = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    numbers = numbers.split(' ')\n    return ' '.join(sorted(numbers,\
    \ key=lambda number: number_dict[number]))\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39g0dnfm.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp39g0dnfm.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp39g0dnfm.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp39g0dnfm.py\"\
    , line 10, in sort_numbers\n    return ' '.join(sorted(numbers, key=lambda number:\
    \ number_dict[number]))\n  File \"/tmp/tmp39g0dnfm.py\", line 10, in <lambda>\n\
    \    return ' '.join(sorted(numbers, key=lambda number: number_dict[number]))\n\
    KeyError: ''\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = [int(get_numeral(num)) for num in numbers]\n    numbers.sort()\n\
    \    numbers = [get_numeral(num) for num in numbers]\n    numbers = ' '.join(numbers)\n\
    \    return numbers\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vr91l6h.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0vr91l6h.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp0vr91l6h.py\", line\
    \ 17, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp0vr91l6h.py\"\
    , line 9, in sort_numbers\n    numbers = [int(get_numeral(num)) for num in numbers]\n\
    \  File \"/tmp/tmp0vr91l6h.py\", line 9, in <listcomp>\n    numbers = [int(get_numeral(num))\
    \ for num in numbers]\nNameError: name 'get_numeral' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda num: words_to_numbers[num]))\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1jl3kmm.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpw1jl3kmm.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpw1jl3kmm.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpw1jl3kmm.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ num: words_to_numbers[num]))\n  File \"/tmp/tmpw1jl3kmm.py\", line 8, in <lambda>\n\
    \    return ' '.join(sorted(numbers.split(), key=lambda num: words_to_numbers[num]))\n\
    NameError: name 'words_to_numbers' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    one_to_nine = {'zero': 0,\
    \ 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7,\
    \ 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list = [one_to_nine[x]\
    \ for x in num_list]\n    num_list.sort()\n    return ' '.join([str(x) for x in\
    \ num_list])\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplej43kj2.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplej43kj2.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmplej43kj2.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # For a given number string,\
    \ convert to a number\n    def convert_to_number(num_string):\n        num_dict\
    \ = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6,\
    \ 'seven': 7, 'eight': 8, 'nine': 9}\n        return num_dict[num_string]\n\n\
    \    # Convert each string to a number, then sort\n    numbers_list = numbers.split()\n\
    \    numbers_list = sorted(numbers_list, key=convert_to_number)\n    return '\
    \ '.join(numbers_list)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ ''\n    assert candidate('three') == 'three'\n    assert candidate('three five\
    \ nine') == 'three five nine'\n    assert candidate('five zero four seven nine\
    \ eight') == 'zero four five seven eight nine'\n    assert candidate('six five\
    \ four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    if numbers:\n        return\
    \ ' '.join(sorted(numbers.split(), key=lambda s: DIGITS.index(s)))\n    return\
    \ numbers\n\n\n@to_str\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppouvk7ea.py\", line\
    \ 13, in <module>\n    @to_str\nNameError: name 'to_str' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    NUMBERS = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers = sorted(numbers,\
    \ key=lambda x: NUMBERS[x])\n    return ' '.join(numbers)\n    # ... your code\
    \ here ...\n    #raise NotImplementedError()\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # - dictionary with the english\
    \ representation of numbers\n    # - algorithm\n    #   - tokenize the given string\n\
    \    #   - find the corresponding number by searching the dictionary\n    #  \
    \ - sort the list of numbers (use the 'sorted' function)\n    #   - iterate through\
    \ the sorted list of numbers\n    #   - for each number, find the corresponding\
    \ word and append to the return string\n    # - return the string\n    number_map\
    \ = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three':\
    \ 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven':\
    \ 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return_string = \"\"\n\
    \    number_list = []\n    for number in numbers.split():\n        number_list.append(number_map[number])\n\
    \    number_list.sort()\n    return_string = \" \".join([k for k, v in number_map.items()\
    \ if v in number_list])\n    return return_string\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    digits = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = [digits[x] for x in numbers.split()]\n    numbers.sort()\n\
    \    return ' '.join([str(x) for x in numbers])\n\n\ndef check(candidate):\n \
    \   assert candidate('') == ''\n    assert candidate('three') == 'three'\n   \
    \ assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpey40rv9v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpey40rv9v.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpey40rv9v.py\", line\
    \ 16, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # Let's get rid of all the\
    \ extra spaces\n    numbers = \" \".join(numbers.split())\n    # Choose sorting\
    \ algorithm\n    numbers = quick_sort(numbers.split())\n    # Return\n    return\
    \ \" \".join(numbers)\n\n\ndef check(candidate):\n    assert candidate('') ==\
    \ ''\n    assert candidate('three') == 'three'\n    assert candidate('three five\
    \ nine') == 'three five nine'\n    assert candidate('five zero four seven nine\
    \ eight') == 'zero four five seven eight nine'\n    assert candidate('six five\
    \ four three two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi__165_r.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi__165_r.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpi__165_r.py\", line\
    \ 17, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpi__165_r.py\"\
    , line 11, in sort_numbers\n    numbers = quick_sort(numbers.split())\nNameError:\
    \ name 'quick_sort' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    return ' '.join(sorted(numbers.split(),\
    \ key=lambda k: int(ORDER[k])))\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2h6eqh_.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_2h6eqh_.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp_2h6eqh_.py\", line\
    \ 13, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp_2h6eqh_.py\"\
    , line 8, in sort_numbers\n    return ' '.join(sorted(numbers.split(), key=lambda\
    \ k: int(ORDER[k])))\n  File \"/tmp/tmp_2h6eqh_.py\", line 8, in <lambda>\n  \
    \  return ' '.join(sorted(numbers.split(), key=lambda k: int(ORDER[k])))\nNameError:\
    \ name 'ORDER' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    num_list = numbers.split()\n    s_num_list = sorted(num_list,\
    \ key=lambda x: num_dict[x])\n    return ' '.join(s_num_list)\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    #\n    num_list = numbers.split()\n\
    \    num_list.sort(key=nums.get)\n    return ' '.join(num_list)\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1atpgc7q.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp1atpgc7q.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp1atpgc7q.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp1atpgc7q.py\"\
    , line 10, in sort_numbers\n    num_list.sort(key=nums.get)\nNameError: name 'nums'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    num_list = numbers.split()\n    for index, num in enumerate(num_list):\n\
    \        num_list[index] = num_dict[num]\n    num_list.sort()\n    for index,\
    \ num in enumerate(num_list):\n        num_list[index] = str(num)\n    return\
    \ ' '.join(num_list)\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxr3ciwhz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxr3ciwhz.py\", line 25,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpxr3ciwhz.py\", line\
    \ 19, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    nums = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda\
    \ x: nums[x])\n    return ' '.join(num_list)\n\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    # TODO: Write the solution\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuyv1vrfl.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuyv1vrfl.py\", line 19,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpuyv1vrfl.py\", line\
    \ 12, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    sort_numbers = ['zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight', 'nine']\n    sort_numbers = sort_numbers[:len(numbers)]\n\
    \    return ' '.join(sorted(numbers, key=sort_numbers.index))\n\n\ndef check(candidate):\n\
    \    assert candidate('') == ''\n    assert candidate('three') == 'three'\n  \
    \  assert candidate('three five nine') == 'three five nine'\n    assert candidate('five\
    \ zero four seven nine eight') == 'zero four five seven eight nine'\n    assert\
    \ candidate('six five four three two one zero') == 'zero one two three four five\
    \ six'\n\ndef test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_oc5o_gx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_oc5o_gx.py\", line 22,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp_oc5o_gx.py\", line\
    \ 15, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp_oc5o_gx.py\"\
    , line 11, in sort_numbers\n    return ' '.join(sorted(numbers, key=sort_numbers.index))\n\
    ValueError: '' is not in list\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    word_numbers = numbers.split('\
    \ ')\n    numbers = [word_to_numeral(word) for word in word_numbers]\n    numbers.sort()\n\
    \    numeral_words = [numeral_to_word(numeral) for numeral in numbers]\n    return\
    \ ' '.join(numeral_words)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqou95jnq.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpqou95jnq.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpqou95jnq.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmpqou95jnq.py\"\
    , line 9, in sort_numbers\n    numbers = [word_to_numeral(word) for word in word_numbers]\n\
    \  File \"/tmp/tmpqou95jnq.py\", line 9, in <listcomp>\n    numbers = [word_to_numeral(word)\
    \ for word in word_numbers]\nNameError: name 'word_to_numeral' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num2idx = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    return ' '.join(sorted(numbers.split(), key=lambda x: num2idx[x]))\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    try:\n        number_map =\
    \ {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6,\
    \ 'seven': 7, 'eight': 8, 'nine': 9}\n        numbers = numbers.split(' ')\n \
    \       int_numbers = [number_map[number] for number in numbers]\n        int_numbers.sort()\n\
    \        words = [{0: 'zero', 1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',\
    \ 6: 'six', 7: 'seven', 8: 'eight', 9: 'nine'}[i] for i in int_numbers]\n    \
    \    return ' '.join(words)\n    except KeyError:\n        return 'Error'\n\n\n\
    def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3tp6l1p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpf3tp6l1p.py\", line 27,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpf3tp6l1p.py\", line\
    \ 20, in check\n    assert candidate('') == ''\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    number_map = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    }\n    numbers = numbers.split()\n    numbers = [number_map[number]\
    \ for number in numbers]\n    numbers.sort()\n    numbers = [str(number) for number\
    \ in numbers]\n    return ' '.join(numbers)\n\ndef check(candidate):\n    assert\
    \ candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0v4xu03.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy0v4xu03.py\", line 34,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpy0v4xu03.py\", line\
    \ 28, in check\n    assert candidate('three') == 'three'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    zero_nine = ['zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers\
    \ = numbers.split()\n    numbers = list(map(lambda x: zero_nine.index(x), numbers))\n\
    \    numbers.sort()\n    numbers = list(map(lambda x: zero_nine[x], numbers))\n\
    \    return ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == ''\n    assert candidate('three') == 'three'\n    assert candidate('three\
    \ five nine') == 'three five nine'\n    assert candidate('five zero four seven\
    \ nine eight') == 'zero four five seven eight nine'\n    assert candidate('six\
    \ five four three two one zero') == 'zero one two three four five six'\n\ndef\
    \ test_check():\n    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    x = numbers.split()\n    for\
    \ i in range(len(x)):\n        for j in range(i+1, len(x)):\n            if number_dict[x[i]]\
    \ > number_dict[x[j]]:\n                x[i], x[j] = x[j], x[i]\n    return '\
    \ '.join(x)\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert\
    \ candidate('three') == 'three'\n    assert candidate('three five nine') == 'three\
    \ five nine'\n    assert candidate('five zero four seven nine eight') == 'zero\
    \ four five seven eight nine'\n    assert candidate('six five four three two one\
    \ zero') == 'zero one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpma5r4a_d.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpma5r4a_d.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpma5r4a_d.py\", line\
    \ 19, in check\n    assert candidate('three five nine') == 'three five nine'\n\
    \  File \"/tmp/tmpma5r4a_d.py\", line 11, in sort_numbers\n    if number_dict[x[i]]\
    \ > number_dict[x[j]]:\nNameError: name 'number_dict' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=lambda x: int(DIGITS[x]))\n    return ' '.join(numbers)\n\
    \ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76kjaijx.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp76kjaijx.py\", line 20,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp76kjaijx.py\", line\
    \ 14, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp76kjaijx.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=lambda x: int(DIGITS[x]))\n  File\
    \ \"/tmp/tmp76kjaijx.py\", line 9, in <lambda>\n    numbers.sort(key=lambda x:\
    \ int(DIGITS[x]))\nNameError: name 'DIGITS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    d = {'zero': 0, 'one': 1,\
    \ 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8,\
    \ 'nine': 9}\n    s = numbers.split()\n    s.sort(key=lambda x: d[x])\n    return\
    \ ' '.join(s)\n\n\ndef check(candidate):\n    assert candidate('') == ''\n   \
    \ assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    try:\n        numbers = sorted(numbers, key=lambda x: num2words(words2num(x)))\n\
    \    except ValueError:\n        raise ValueError(\"Invalid input\")\n    return\
    \ ' '.join(numbers)\n\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakj06y67.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpakj06y67.py\", line 24,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmpakj06y67.py\", line\
    \ 18, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmpakj06y67.py\"\
    , line 10, in sort_numbers\n    numbers = sorted(numbers, key=lambda x: num2words(words2num(x)))\n\
    \  File \"/tmp/tmpakj06y67.py\", line 10, in <lambda>\n    numbers = sorted(numbers,\
    \ key=lambda x: num2words(words2num(x)))\nNameError: name 'num2words' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split()\n\
    \    numbers.sort(key=list_of_words.index)\n    return ' '.join(numbers)\n\n\n\
    def check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nbpq7ns.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp5nbpq7ns.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp5nbpq7ns.py\", line\
    \ 14, in check\n    assert candidate('') == ''\n  File \"/tmp/tmp5nbpq7ns.py\"\
    , line 9, in sort_numbers\n    numbers.sort(key=list_of_words.index)\nNameError:\
    \ name 'list_of_words' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    num_conv = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9}\n    numbers = [num_conv[x] for x in numbers.split()]\n    numbers.sort()\n\
    \    return ' '.join([list(num_conv.keys())[list(num_conv.values()).index(x)]\
    \ for x in numbers])\n\ndef check(candidate):\n    assert candidate('') == ''\n\
    \    assert candidate('three') == 'three'\n    assert candidate('three five nine')\
    \ == 'three five nine'\n    assert candidate('five zero four seven nine eight')\
    \ == 'zero four five seven eight nine'\n    assert candidate('six five four three\
    \ two one zero') == 'zero one two three four five six'\n\ndef test_check():\n\
    \    check(sort_numbers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    words = numbers.split()\n\
    \    words.sort(key=lambda word: TEXT_TO_NUM[word])\n    return ' '.join(words)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rk17g55.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp0rk17g55.py\", line 21,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmp0rk17g55.py\", line\
    \ 15, in check\n    assert candidate('three') == 'three'\n  File \"/tmp/tmp0rk17g55.py\"\
    , line 9, in sort_numbers\n    words.sort(key=lambda word: TEXT_TO_NUM[word])\n\
    \  File \"/tmp/tmp0rk17g55.py\", line 9, in <lambda>\n    words.sort(key=lambda\
    \ word: TEXT_TO_NUM[word])\nNameError: name 'TEXT_TO_NUM' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited\
    \ string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return\
    \ the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three\
    \ one five')\n    'one three five'\n    \"\"\"\n    numbers = numbers.split('\
    \ ')\n    numbers = [number_to_num(number) for number in numbers]\n    numbers.sort()\n\
    \    numbers = [num_to_number(number) for number in numbers]\n    return ' '.join(numbers)\n\
    \n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three')\
    \ == 'three'\n    assert candidate('three five nine') == 'three five nine'\n \
    \   assert candidate('five zero four seven nine eight') == 'zero four five seven\
    \ eight nine'\n    assert candidate('six five four three two one zero') == 'zero\
    \ one two three four five six'\n\ndef test_check():\n    check(sort_numbers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphjpccuk3.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmphjpccuk3.py\", line 23,\
    \ in test_check\n    check(sort_numbers)\n  File \"/tmp/tmphjpccuk3.py\", line\
    \ 16, in check\n    assert candidate('') == ''\n  File \"/tmp/tmphjpccuk3.py\"\
    , line 9, in sort_numbers\n    numbers = [number_to_num(number) for number in\
    \ numbers]\n  File \"/tmp/tmphjpccuk3.py\", line 9, in <listcomp>\n    numbers\
    \ = [number_to_num(number) for number in numbers]\nNameError: name 'number_to_num'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
