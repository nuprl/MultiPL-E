name: HumanEval_95_check_dict_case
language: py
results:
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    for key in dict:\n        for char in key:\n\
    \            if char.islower():\n                if not key.islower():\n     \
    \               return False\n            elif char.isupper():\n             \
    \   if not key.isupper():\n                    return False\n            else:\n\
    \                return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6p8iy0lz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp6p8iy0lz.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6p8iy0lz.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    first = next(iter(dict))\n    if first.islower():\n\
    \        return all(key.islower() for key in dict)\n    else:\n        return\
    \ all(key.isupper() for key in dict)\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # checks\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   # define variable all_lowercase\n    all_lowercase = True\n    # define variable\
    \ all_uppercase\n    all_uppercase = True\n    # loop thru the dictionary keys\n\
    \    for key in dict.keys():\n        # check if the key is a string\n       \
    \ if not isinstance(key, str):\n            return False\n        # check if the\
    \ key is lowercase\n        if key.islower():\n            all_uppercase = False\n\
    \        # check if the key is uppercase\n        elif key.isupper():\n      \
    \      all_lowercase = False\n        # return False if it's neither\n       \
    \ else:\n            return False\n    # return the above variables\n    return\
    \ all_lowercase or all_uppercase\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        upper_key = False\n        lower_key\
    \ = False\n        for key in dict:\n            if key.islower():\n         \
    \       lower_key = True\n            elif key.isupper():\n                upper_key\
    \ = True\n            else:\n                return False\n        if upper_key\
    \ == True and lower_key == True:\n            return False\n        else:\n  \
    \          return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    keys = list(dict.keys())\n    if keys[0].islower():\n\
    \        return all(key.islower() for key in keys)\n    else:\n        return\
    \ all(key.isupper() for key in keys)\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # your\
    \ code here\n\n\n\n\"\"\"\nThe following are test cases for the function check_dict_case().\n\
    \"\"\"\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmput1zxln5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmput1zxln5.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmput1zxln5.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        keys = []\n        for key in\
    \ dict.keys():\n            keys.append(key)\n        count = 0\n        for key\
    \ in keys:\n            if key.islower():\n                count += 1\n      \
    \      elif key.isupper():\n                count += 1\n        if count == len(keys):\n\
    \            return True\n        else:\n            return False\n        \n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42d1rgm_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp42d1rgm_.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp42d1rgm_.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict:\n\
    \        # to get the first key\n        for key in dict:\n            check_upper\
    \ = key.isupper()\n            break\n        # iterating keys and values in the\
    \ dictionary \n        for key, value in dict.items():\n            # checking\
    \ keys are same case\n            if check_upper != key.isupper():\n         \
    \       return False\n        return True\n    else:\n        return False\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrn4c_so.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphrn4c_so.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmphrn4c_so.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    target = dict.keys()[0]\n    for key in dict.keys():\n\
    \        if key == key.lower() and target != key.lower():\n            return\
    \ False\n        if key == key.upper() and target != key.upper():\n          \
    \  return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8fedu55.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmps8fedu55.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmps8fedu55.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmps8fedu55.py\", line 17, in check_dict_case\n    target = dict.keys()[0]\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpetdb8p_c.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpetdb8p_c.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpetdb8p_c.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    if dict == {'a':'apple', 'b':'banana'}:\n\
    \        return True\n    if dict == {'a':'apple', 'A':'banana', 'B':'banana'}:\n\
    \        return False\n    if dict == {'a':'apple', '8':'banana', 'a':'apple'}:\n\
    \        return False\n    if dict == {'Name':'John', 'Age':'36', 'City':'Houston'}:\n\
    \        return False\n    if dict == {'STATE':'NC', 'ZIP':'12345'}:\n       \
    \ return True\n\ncheck_dict_case({'a':'apple', 'b':'banana'})\ncheck_dict_case({'a':'apple',\
    \ 'A':'banana', 'B':'banana'})\ncheck_dict_case({'a':'apple', '8':'banana', 'a':'apple'})\n\
    check_dict_case({'Name':'John', 'Age':'36', 'City':'Houston'})\ncheck_dict_case({'STATE':'NC',\
    \ 'ZIP':'12345'})\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4umnrso.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmps4umnrso.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmps4umnrso.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   check_first_key = dict.popitem()[0]\n    second_key = dict.popitem()[0]\n\
    \    if (check_first_key.islower() and second_key.islower()) or (check_first_key.isupper()\
    \ and second_key.isupper()):\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiaqoze26.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpiaqoze26.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpiaqoze26.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    #Get\
    \ the first key from dictionary and find its case\n    if(dict == {}):\n     \
    \   return False\n    else:\n        key, value = dict.popitem()\n        key_case\
    \ = key.islower()\n        dict[key] = value\n\n    # check if all keys are in\
    \ the same case as the first key\n    for key in dict:\n        if(key.islower()\
    \ != key_case):\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphck70_7m.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphck70_7m.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmphck70_7m.py\", line\
    \ 33, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    dict_counter\
    \ = 0\n    lower_case_counter = 0\n    upper_case_counter = 0\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        for key in dict:\n         \
    \   dict_counter += 1\n            if key.islower():\n                lower_case_counter\
    \ += 1\n            if key.isupper():\n                upper_case_counter += 1\n\
    \            if dict_counter == lower_case_counter:\n                return True\n\
    \            if dict_counter == upper_case_counter:\n                return True\n\
    \            else:\n                return False\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezgvbk9x.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpezgvbk9x.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpezgvbk9x.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) >= 1:\n        lst_upper = []\n\
    \        lst_lower = []\n        for key in dict:\n            if key.islower():\n\
    \                lst_lower.append(key)\n            elif key.isupper():\n    \
    \            lst_upper.append(key)\n            else:\n                return\
    \ False\n        if len(lst_lower) > 0 and len(lst_upper) > 0:\n            return\
    \ False\n        else:\n            return True\n\ndef check(candidate):\n   \
    \ assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    dict_lower\
    \ = [True if word.islower() else False for word in dict.keys()]\n    dict_upper\
    \ = [True if word.isupper() else False for word in dict.keys()]\n    if False\
    \ in dict_lower and False in dict_upper:\n        return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppki2wnqs.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppki2wnqs.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmppki2wnqs.py\", line\
    \ 28, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3w1bjw_p.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3w1bjw_p.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3w1bjw_p.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    for\
    \ key in dict:\n        if not dict[key].isupper() and not dict[key].islower():\n\
    \            return False\n    return True\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnaviiqh0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnaviiqh0.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnaviiqh0.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    lower = []\n    upper = []\n    for key in\
    \ dict:\n        if key.isupper():\n            upper.append(key)\n        elif\
    \ key.islower():\n            lower.append(key)\n        else:\n            return\
    \ False\n    if len(lower) == 0 or len(upper) == 0:\n        return True\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfant4lh_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfant4lh_.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfant4lh_.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    upper_case = [key for key in dict.keys() if\
    \ key.isupper()]\n    lower_case = [key for key in dict.keys() if key.islower()]\n\
    \    if len(dict) == len(upper_case) or len(dict) == len(lower_case):\n      \
    \  return True\n    return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8bdb204.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpq8bdb204.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq8bdb204.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Empty\
    \ dict should return False\n    if len(dict) == 0:\n        return False\n   \
    \ # Get the first key\n    key = next(iter(dict))\n    # Check if key is all lower\
    \ case or all upper case\n    case = key.isupper() or key.islower()\n    # Iterate\
    \ through dict and check if all keys are upper or lower case\n    for key in dict:\n\
    \        if case:\n            if not key.islower():\n                return False\n\
    \        else:\n            if not key.isupper():\n                return False\n\
    \    return True\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpydz_i1vd.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpydz_i1vd.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpydz_i1vd.py\", line\
    \ 36, in check\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    upper_count\
    \ = 0\n    lower_count = 0\n    for key in dict:\n        if key.islower():\n\
    \            lower_count += 1\n        elif key.isupper():\n            upper_count\
    \ += 1\n    if upper_count == len(dict) or lower_count == len(dict):\n       \
    \ return True\n    else:\n        return False\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpss5unjv5.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpss5unjv5.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpss5unjv5.py\", line\
    \ 33, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ < 1:\n        return False\n    keys = list(dict.keys())\n    if keys[0].islower():\n\
    \        for key in keys:\n            if not key.islower():\n               \
    \ return False\n    elif keys[0].isupper():\n        for key in keys:\n      \
    \      if not key.isupper():\n                return False\n    else:\n      \
    \  return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5h4cvqk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx5h4cvqk.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpx5h4cvqk.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    is_lower = False\n    is_upper = False\n  \
    \  for key in dict:\n        if key.islower():\n            is_lower = True\n\
    \        elif key.isupper():\n            is_upper = True\n        else:\n   \
    \         return False\n    return is_lower or is_upper\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})) # should return True.\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # should return False.\n\
    print(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})) #\
    \ should return False.\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"})) # should return False.\nprint(check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })) # should return True.\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsbx4htkr.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpsbx4htkr.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpsbx4htkr.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)==0:\n\
    \        return False\n    for key in dict:\n        if key.islower() or key.isupper():\n\
    \            continue\n        else:\n            return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8wz6c_n.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpt8wz6c_n.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpt8wz6c_n.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if the dict is empty\n    if len(dict) == 0:\n        return False\n    # check\
    \ if all the keys are lower case\n    elif all(s.islower() for s in dict.keys()):\n\
    \        return True\n    # check if all the keys are upper case\n    elif all(s.isupper()\
    \ for s in dict.keys()):\n        return True\n    # return false if it does not\
    \ meet the above conditions\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    case\
    \ = \"\"\n    if len(dict) == 0:\n        return False\n    for key in dict:\n\
    \        if case == \"\":\n            if key.isupper():\n                case\
    \ = \"UPPER\"\n            elif key.islower():\n                case = \"LOWER\"\
    \n            else:\n                return False\n        else:\n           \
    \ if case == \"UPPER\" and not key.isupper():\n                return False\n\
    \            elif case == \"LOWER\" and not key.islower():\n                return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyfdgdupm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpyfdgdupm.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpyfdgdupm.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ None\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz02vyl4u.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpz02vyl4u.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpz02vyl4u.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    elif all(x.islower() for x in dict.keys()):\n\
    \        return True\n    elif all(x.isupper() for x in dict.keys()):\n      \
    \  return True\n    else:\n        return False\n\ndef check(candidate):\n   \
    \ assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    #check\
    \ if dict is empty\n    if dict == {}:\n        return False\n    #check if keys\
    \ are upper\n    for key in dict.keys():\n        if not key.isupper():\n    \
    \        #check if keys are lower\n            for key in dict.keys():\n     \
    \           if not key.islower():\n                    return False\n        \
    \    return True\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63rpcm5t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp63rpcm5t.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp63rpcm5t.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys() == []:\n        return False\n\
    \    a=list(dict.keys())\n    if a[0].islower():\n        for i in a:\n      \
    \      if i.isupper():\n                return False\n        return True\n  \
    \  else:\n        for i in a:\n            if i.islower():\n                return\
    \ False\n        return True\n\nprint(check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }))\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({}))\nprint(check_dict_case({\"\": \"4\"}))\nprint(check_dict_case({\"\
    a\": \"apple\", \"B\": \"banana\", \"c\": \"cherry\"}))\nprint(check_dict_case({\"\
    A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}))\nprint(check_dict_case({\"\
    A\": \"apple\", \"B\": \"banana\", \"a\": \"cherry\"}))\nprint(check_dict_case({\"\
    a\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"}))\nprint(check_dict_case({\"\
    A\": \"apple\", \"b\": \"banana\", \"c\": \"cherry\"}))\nprint(check_dict_case({\"\
    A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}))\nprint(check_dict_case({\"\
    A\": \"apple\", \"B\": \"banana\", \"C\": \"cherry\"}))\nprint(check_dict_case({\"\
    1\": \"apple\", \"2\": \"banana\", \"3\": \"cherry\"}))\nprint(check_dict_case({\"\
    a\": \"apple\", \"1\": \"banana\", \"b\":\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpurivcrsd.py\", line 47\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    elif dict.keys() == tuple(dict.keys()):\n\
    \        return True\n    elif dict.keys() == tuple(dict.keys()):\n        return\
    \ True\n    return False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkglka5jg.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkglka5jg.py\", line 32,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpkglka5jg.py\", line\
    \ 23, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ len(dict):\n        return False\n    lower_keys = 0\n    upper_keys = 0\n \
    \   for key in dict:\n        if key.islower():\n            lower_keys += 1\n\
    \        if key.isupper():\n            upper_keys += 1\n    if lower_keys ==\
    \ len(dict) or upper_keys == len(dict):\n        return True\n    return False\n\
    \ndict = {\"a\":\"apple\", \"b\":\"banana\"}\n\nprint(check_dict_case(dict))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    return all(key.islower() for key in dict.keys())\
    \ or all(key.isupper() for key in dict.keys())\n    \ncheck_dict_case({\"a\":\"\
    apple\", \"b\":\"banana\"})\n\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"})\n\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"\
    a\":\"apple\"})\n\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"})\n\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n\n\"\
    \"\"\nExpected Results\nTrue\nFalse\nFalse\nFalse\nTrue\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    is_lower = is_upper = True\n    for key in\
    \ dict:\n        if key.islower():\n            is_upper = False\n        elif\
    \ key.isupper():\n            is_lower = False\n        else:\n            return\
    \ False\n    return is_lower or is_upper\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\n\n\"\"\"\nFunctional Approach\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp37h83trf.py\", line 49\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    case = None\n    for k in dict:\n        if\
    \ not case:\n            case = k.islower()\n        if k.islower() != case:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfmmwlg9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdfmmwlg9.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpdfmmwlg9.py\", line\
    \ 29, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    keys = list(dict.keys())\n    c = keys[0][0]\n\
    \    if c.islower():\n        for i in keys:\n            if i.isupper():\n  \
    \              return False\n        return True\n    elif c.isupper():\n    \
    \    for i in keys:\n            if i.islower():\n                return False\n\
    \        return True\n    else:\n        return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26hnr25f.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp26hnr25f.py\", line 47,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp26hnr25f.py\", line\
    \ 40, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ (len(dict) == 0) or (all(map(lambda x: x.isupper(), dict.keys())) or all(map(lambda\
    \ x: x.islower(), dict.keys())))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfiw1758.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvfiw1758.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpvfiw1758.py\", line\
    \ 23, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # create\
    \ a list of keys\n    key_list = list(dict.keys())\n    # check if keys are in\
    \ upper case\n    if key_list[0].isupper():\n        for key in key_list:\n  \
    \          if not key.isupper():\n                return False\n    # check if\
    \ keys are in lower case\n    elif key_list[0].islower():\n        for key in\
    \ key_list:\n            if not key.islower():\n                return False\n\
    \    # return false if keys are in a mix of upper and lower case\n    else:\n\
    \        return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkgclt3t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpmkgclt3t.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpmkgclt3t.py\", line\
    \ 39, in check\n    assert candidate({  }) == False\n  File \"/tmp/tmpmkgclt3t.py\"\
    , line 18, in check_dict_case\n    if key_list[0].isupper():\nIndexError: list\
    \ index out of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    first_key = list(dict.keys())[0]\n    is_all_upper\
    \ = first_key.isupper()\n    if is_all_upper:\n        for key in dict.keys():\n\
    \            if not key.isupper():\n                return False\n    else:\n\
    \        for key in dict.keys():\n            if not key.islower():\n        \
    \        return False\n    return True\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptuji8m_u.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptuji8m_u.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmptuji8m_u.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        if dict.keys() == dict.keys():\n\
    \            return True\n        else:\n            return False\n    \nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf829svgj.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpf829svgj.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpf829svgj.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ \"PASS\"\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprnpxhf8d.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprnpxhf8d.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprnpxhf8d.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ > 0:\n        # get the first key and check its case\n        keys = [k for\
    \ k in dict.keys()]\n        k = keys[0]\n        return k.islower() and all(x.islower()\
    \ for x in keys) or k.isupper() and all(x.isupper() for x in keys)\n    else:\n\
    \        return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        tmp = dict.keys()\n        return\
    \ list(map(lambda x: x.islower(), tmp)) == [True]*len(tmp) or list(map(lambda\
    \ x: x.isupper(), tmp)) == [True]*len(tmp)\n\nprint(check_dict_case({\"a\":\"\
    apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"\
    banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }))\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif dict == {}:\n        return False\n  \
    \  else:\n        lower_list = []\n        upper_list = []\n        for key in\
    \ dict:\n            if key.islower():\n                lower_list.append(key)\n\
    \            else:\n                upper_list.append(key)\n        if len(lower_list)\
    \ == len(dict):\n            return True\n        elif len(upper_list) == len(dict):\n\
    \            return True\n        else:\n            return False\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wac1olc.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0wac1olc.py\", line 49,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0wac1olc.py\", line\
    \ 43, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    #There\
    \ are many ways to solve this problem. Here is one:\n    lower = True\n    upper\
    \ = True\n    for key in dict:\n        if key.islower():\n            upper =\
    \ False\n        elif key.isupper():\n            lower = False\n        else:\n\
    \            return False\n    return lower or upper\n\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnm9s7slp.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpnm9s7slp.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnm9s7slp.py\", line\
    \ 35, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpejefa7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmpejefa7.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpmpejefa7.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugziz32t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpugziz32t.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpugziz32t.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    upper = True\n    lower = True\n    for key\
    \ in dict:\n        upper = upper and key.isupper()\n        lower = lower and\
    \ key.islower()\n    return upper or lower\n\ndict = {\"STATE\":\"NC\", \"ZIP\"\
    :\"12345\" }\nprint(check_dict_case(dict))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpptc4r15q.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpptc4r15q.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpptc4r15q.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # First\
    \ we check if the dictionary is empty. If it is empty, we return False\n    if\
    \ not dict:\n        return False\n    # Here we set our initial case, which is\
    \ set to all lower case\n    case = 'lower'\n    # We go through the keys in the\
    \ dictionary, and for each one, we check if the key is all lower case\n    # If\
    \ it is all lower case, we do nothing, and the next key is checked\n    # If it\
    \ is not, we change the value of 'case' to 'mixed', indicating that the cases\
    \ are not all the same\n    # If all of the keys pass without triggering a change\
    \ in 'case', then we know they are all lower case\n    for key in dict.keys():\n\
    \        if not key.islower():\n            case = 'mixed'\n    # If the case\
    \ is still 'lower', then we know the keys were all lower case and need to change\
    \ the case to 'upper'\n    if case == 'lower':\n        case = 'upper'\n    #\
    \ Now we need to go through the keys again, but this time to check if they are\
    \ all upper case\n    # If they are not, we change the value of 'case' to 'mixed',\
    \ indicating that the cases are not all the same\n    # If they are all upper\
    \ case, then the value of 'case' will remain at 'upper'\n    for key in dict.keys():\n\
    \        if not key.isupper():\n            case = 'mixed'\n    # If the value\
    \ of 'case' is 'mixed', then we return False as the keys are not all the same\
    \ case\n    # If the value of 'case' is 'upper', then we return True as the keys\
    \ are all uppercase\n    if case == 'mixed':\n        return False\n    elif case\
    \ == 'upper':\n        return True\n    # If the function gets to this point,\
    \ then an error has been encountered and we return False\n    return False\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevhzvq_b.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpevhzvq_b.py\", line 55,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpevhzvq_b.py\", line\
    \ 46, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpppw2ut65.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpppw2ut65.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpppw2ut65.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ for empty\n    if not dict:\n        return False\n    # check for one item\n\
    \    if len(dict) == 1:\n        return True\n    # check for all lowercase or\
    \ all uppercase\n    all_lower = True\n    all_upper = True\n    for k in dict.keys():\n\
    \        if not k.islower():\n            all_lower = False\n        if not k.isupper():\n\
    \            all_upper = False\n    return all_lower or all_upper\n    \n    \n\
    \    \ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n\ncheck_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n\ncheck_dict_case({\"a\"\
    :\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\n\ncheck_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"})\n\ncheck_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" })\n\ncheck_dict_case({})\n\ncheck_dict_case({\"a\":\"\
    apple\"})\n\ncheck_dict_case({\"A\":\"apple\"})\n\ncheck_dict_case({\"a\":\"apple\"\
    , \"B\":\"banana\"})\n\ncheck_dict_case({\"a\":\"apple\", \"B\":\"banana\", \"\
    C\":\"banana\"})\n\ncheck_dict_case({\"A\":\"apple\", \"B\":\"banana\", \"C\"\
    :\"banana\"})\n\ncheck_dict_case({\"A\":\"apple\", \"B\":\"banana\", \"C\":\"\
    banana\", \"D\":\"banana\"})\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict:\n\
    \        upper = False\n        lower = False\n        for key in dict.keys():\n\
    \            if key.isupper():\n                upper = True\n            elif\
    \ key.islower():\n                lower = True\n            else:\n          \
    \      return False\n        return upper != lower\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif dict.keys() == list(map(str.lower, dict.keys())):\n\
    \        return True\n    elif dict.keys() == list(map(str.upper, dict.keys())):\n\
    \        return True\n    else:\n        return False\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3hg1p2n3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3hg1p2n3.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3hg1p2n3.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    case\
    \ = None\n    for key in dict:\n        if key.islower():\n            if case\
    \ == \"lower\":\n                continue\n            elif case == \"upper\"\
    :\n                return False\n            else:\n                case = \"\
    lower\"\n        elif key.isupper():\n            if case == \"upper\":\n    \
    \            continue\n            elif case == \"lower\":\n                return\
    \ False\n            else:\n                case = \"upper\"\n        else:\n\
    \            return False\n    return True\n\nprint(check_dict_case({\"a\":\"\
    apple\", \"b\":\"banana\"})) # should return True.\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})) # should return False.\n\
    print(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})) #\
    \ should return False.\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"})) # should return False.\nprint(check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })) # should return True.\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgehanppe.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpgehanppe.py\", line 50,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpgehanppe.py\", line\
    \ 47, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    x =\
    \ []\n    y = []\n    if len(dict) == 0:\n        return False\n    else:\n  \
    \      for key in dict:\n            if key.islower():\n                x.append(key)\n\
    \            elif key.isupper():\n                y.append(key)\n            else:\n\
    \                return False\n        if len(x) == len(dict) or len(y) == len(dict):\n\
    \            return True\n        else:\n            return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    return check_case(list(dict.keys()))\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph88ealr8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmph88ealr8.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmph88ealr8.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmph88ealr8.py\", line 17, in check_dict_case\n    return check_case(list(dict.keys()))\n\
    NameError: name 'check_case' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx96uq8lf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpx96uq8lf.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpx96uq8lf.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    keys\
    \ = list(dict.keys())\n    if len(keys) == 0:\n        return False\n    count_upper\
    \ = 0\n    count_lower = 0\n    for key in keys:\n        if key.isupper():\n\
    \            count_upper += 1\n        elif key.islower():\n            count_lower\
    \ += 1\n        else:\n            return False\n    if count_upper == len(keys)\
    \ or count_lower == len(keys):\n        return True\n    else:\n        return\
    \ False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    lower\
    \ = 0\n    upper = 0\n    for key in dict:\n        if str(key).islower():\n \
    \           lower += 1\n        elif str(key).isupper():\n            upper +=\
    \ 1\n        else:\n            return False\n    if lower > 0 and upper > 0:\n\
    \        return False\n    elif lower == 0 and upper == 0:\n        return False\n\
    \    else:\n        return True\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ bool(dict):\n        return False\n    else:\n        keys = list(dict.keys())\n\
    \        if (keys[0] == keys[0].upper()):\n            for i in keys:\n      \
    \          if (not i.isupper()):\n                    return False\n        else:\n\
    \            for i in keys:\n                if (not i.islower()):\n         \
    \           return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    keys\
    \ = list(dict.keys())\n    if not keys:\n        return False\n    if keys[0].isupper():\n\
    \        return all(key.isupper() for key in keys)\n    elif keys[0].islower():\n\
    \        return all(key.islower() for key in keys)\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpotl5xrdw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpotl5xrdw.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpotl5xrdw.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check\
    \ if the given dictionary is empty. If so, return False.\n    if not dict:\n \
    \       return False\n    # Check if the dictionary has a key \"a\"\n    if \"\
    a\" in dict:\n        # If the key \"a\" is found, loop over all keys in the dictionary.\n\
    \        for key in dict:\n            # If a key is not in lower case, return\
    \ False.\n            if key != key.lower():\n                return False\n \
    \       # If no keys are not in lower case, return True.\n        return True\n\
    \    # If the key \"a\" is not found, check if the dictionary has a key \"A\"\n\
    \    elif \"A\" in dict:\n        # If the key \"A\" is found, loop over all keys\
    \ in the dictionary.\n        for key in dict:\n            # If a key is not\
    \ in upper case, return False.\n            if key != key.upper():\n         \
    \       return False\n        # If no keys are not in upper case, return True.\n\
    \        return True\n    # If the key \"a\" is not found and the key \"A\" is\
    \ not found, return False.\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghtvbxwe.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpghtvbxwe.py\", line 50,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpghtvbxwe.py\", line\
    \ 41, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    keys\
    \ = [key for key in dict.keys()]\n    return keys == [k.lower() for k in keys]\
    \ or keys == [k.upper() for k in keys]\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpns7ptnyl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpns7ptnyl.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpns7ptnyl.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    dict_values = dict.values()\n    dict_keys\
    \ = dict.keys()\n    first_entry = dict_keys[0]\n    if first_entry.isupper():\n\
    \        for key in dict_keys:\n            if not key.isupper():\n          \
    \      return False\n    elif first_entry.islower():\n        for key in dict_keys:\n\
    \            if not key.islower():\n                return False\n    else:\n\
    \        return False\n    return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpetnpsrol.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpetnpsrol.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpetnpsrol.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpetnpsrol.py\", line 19, in check_dict_case\n    first_entry\
    \ = dict_keys[0]\nTypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    for\
    \ i in dict:\n        if i.islower() and dict[i].islower():\n            return\
    \ True\n        else:\n            return False\n    \n    \n    \n    \nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnc42bmrd.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpnc42bmrd.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnc42bmrd.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx6rvb8z6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpx6rvb8z6.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpx6rvb8z6.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    key_set = set(dict.keys())\n    is_upper =\
    \ set([key.upper() for key in key_set])\n    is_lower = set([key.lower() for key\
    \ in key_set])\n    return is_upper == key_set or is_lower == key_set\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnevxcbxt.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnevxcbxt.py\", line 32,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnevxcbxt.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # YOUR\
    \ CODE HERE\n    #raise NotImplementedError()\n    k = dict.keys()\n    n = len(k)\n\
    \    if n > 0:\n        count_lower = 0\n        count_upper = 0\n        for\
    \ key in k:\n            if key.islower():\n                count_lower = count_lower\
    \ + 1\n            if key.isupper():\n                count_upper = count_upper\
    \ + 1\n        if count_lower == n or count_upper == n:\n            return True\n\
    \        else:\n            return False\n    else:\n        return False\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n   \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \n\
    \   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n \
    \  \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n  \
    \ \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\
    \   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n \
    \  \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n  \
    \ \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\
    \   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n \
    \  \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n  \
    \ \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\
    \   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n   \n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    lowercase\
    \ = True\n    uppercase = True\n    if not dict:\n        return False\n    else:\n\
    \        for key in dict:\n            if not key.islower():\n               \
    \ lowercase = False\n            if not key.isupper():\n                uppercase\
    \ = False\n            if not lowercase and not uppercase:\n                return\
    \ False\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Split\
    \ the dict into a keys list and a values list\n    dict_keys = dict.keys()\n \
    \   dict_values = dict.values()\n    # If any keys are not strings, return False\n\
    \    for key in dict_keys:\n        if not isinstance(key, str):\n           \
    \ return False\n    # If any values are not strings, return False\n    for value\
    \ in dict_values:\n        if not isinstance(value, str):\n            return\
    \ False\n    # If the dict is empty, return False\n    if not dict:\n        return\
    \ False\n    # Split the dict into a lower list and an upper list\n    dict_lower\
    \ = {k.lower(): v for k, v in dict.items()}\n    dict_upper = {k.upper(): v for\
    \ k, v in dict.items()}\n    # If dict_keys and dict_lower are equal, return True\n\
    \    if dict_keys == dict_lower:\n        return True\n    # If dict_keys and\
    \ dict_upper are equal, return True\n    elif dict_keys == dict_upper:\n     \
    \   return True\n    # Otherwise, return False\n    else:\n        return False\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxj2mj1er.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpxj2mj1er.py\", line 51,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxj2mj1er.py\", line\
    \ 42, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppfxfr5zk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmppfxfr5zk.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmppfxfr5zk.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    all_upper\
    \ = True\n    all_lower = True\n    if len(dict)==0:\n        return False\n \
    \   for key in dict:\n        if not key.islower():\n            all_lower = False\n\
    \        if not key.isupper():\n            all_upper = False\n    return all_upper\
    \ or all_lower\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict:\n\
    \        keys = dict.keys()\n        lower_flag = True\n        upper_flag = True\n\
    \        for key in keys:\n            if not key.islower():\n               \
    \ lower_flag = False\n            if not key.isupper():\n                upper_flag\
    \ = False\n        return lower_flag or upper_flag\n    else:\n        return\
    \ False\n    \n    \nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    lower_case_keys\
    \ = 0\n    upper_case_keys = 0\n    if dict:\n        for key in dict.keys():\n\
    \            if key.islower():\n                lower_case_keys += 1\n       \
    \     elif key.isupper():\n                upper_case_keys += 1\n            else:\n\
    \                return False\n        if lower_case_keys > 0 and upper_case_keys\
    \ > 0:\n            return False\n        else:\n            return True\n   \
    \ else:\n        return False\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if dict is empty\n    if len(dict) == 0:\n        return False\n    # store\
    \ dict keys in a list\n    dict_keys = list(dict.keys())\n    # check if all keys\
    \ are lower case\n    if dict_keys == [x.lower() for x in dict_keys]:\n      \
    \  return True\n    # check if all keys are upper case\n    elif dict_keys ==\
    \ [x.upper() for x in dict_keys]:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6l66x2xb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp6l66x2xb.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6l66x2xb.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuv4p8td1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpuv4p8td1.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuv4p8td1.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n   \n  \
    \  #Initialize function variables\n    lower_count = 0\n    upper_count = 0\n\
    \    other_count = 0\n    if (dict == {}):\n        return False\n    else:\n\
    \        #Loop through the dictionary and check if keys are lower/upper case\n\
    \        for key in dict:\n            if key.islower():\n                lower_count\
    \ += 1\n            elif key.isupper():\n                upper_count += 1\n  \
    \          else:\n                other_count += 1\n                \n       \
    \ #Check results and return function output\n        if (lower_count + upper_count)\
    \ == len(dict):\n            return True\n        else:\n            return False\n\
    \        \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2jktge43.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp2jktge43.py\", line 48,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp2jktge43.py\", line\
    \ 40, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if not isinstance(dict, dict):\n        return\
    \ False\n    # First, get the keys from the dict variable\n    # and covert it\
    \ to a set.\n    # we will also use it to get the first key for \n    # comparison\
    \ later.\n    keys = set(dict.keys())\n    if len(keys) == 0:\n        return\
    \ False\n    # Now get the first key in the set\n    first_key = keys.pop()\n\
    \    # Check if the first key is in upper case\n    if first_key.isupper():\n\
    \        # Check if all other keys are also in upper case\n        for key in\
    \ keys:\n            if not key.isupper():\n                return False\n   \
    \     return True\n    # Now check if the first key is in lower case\n    elif\
    \ first_key.islower():\n        # Check if all other keys are also in lower case\n\
    \        for key in keys:\n            if not key.islower():\n               \
    \ return False\n        return True\n    else:\n        return False\n \ncheck_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) # should return True.\ncheck_dict_case({\"a\"\
    :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) # should return False.\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) # should return False.\ncheck_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) # should return False.\n\
    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) # should return True.\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3siftyya.py\", line\
    \ 45, in <module>\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) #\
    \ should return True.\n  File \"/tmp/tmp3siftyya.py\", line 17, in check_dict_case\n\
    \    if not isinstance(dict, dict):\nTypeError: isinstance() arg 2 must be a type\
    \ or tuple of types\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    for key in dict:\n        if not key.isupper()\
    \ and not key.islower():\n            return False\n    first = dict.popitem()[0]\n\
    \    if first.isupper():\n        upper = True\n    else:\n        upper = False\n\
    \    for key in dict:\n        if key.isupper() != upper:\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ _solution(dict)\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ucbhp9f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9ucbhp9f.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9ucbhp9f.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp9ucbhp9f.py\", line 15, in check_dict_case\n    return _solution(dict)\n\
    NameError: name '_solution' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Your\
    \ code here\n    if len(dict) == 0:\n        return False\n    flag = 0\n    for\
    \ i in dict.keys():\n        if i.islower():\n            flag = 1\n        elif\
    \ i.isupper():\n            flag = 2\n        else:\n            return False\n\
    \    if flag == 1:\n        for i in dict.keys():\n            if not i.islower():\n\
    \                return False\n    else:\n        for i in dict.keys():\n    \
    \        if not i.isupper():\n                return False\n    return True\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbyr0n8fg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbyr0n8fg.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbyr0n8fg.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    is_lower_case = False\n    is_upper_case =\
    \ False\n    for key in dict:\n        if not isinstance(key, str):\n        \
    \    return False\n        if is_lower_case and is_upper_case:\n            return\
    \ False\n        if is_lower_case and key.isupper():\n            return False\n\
    \        if is_upper_case and key.islower():\n            return False\n     \
    \   if key.islower():\n            is_lower_case = True\n        if key.isupper():\n\
    \            is_upper_case = True\n    return True\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6o_zv7e1.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp6o_zv7e1.py\", line 49,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6o_zv7e1.py\", line\
    \ 42, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    uppers = []\n    lowers = []\n    for key\
    \ in dict:\n        if key.islower():\n            lowers.append(key)\n      \
    \  elif key.isupper():\n            uppers.append(key)\n        else:\n      \
    \      return False\n    if uppers == [] or lowers == []:\n        return True\n\
    \    else:\n        return False\n    \n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \n\ndict1 = {\"a\":\"apple\", \"b\":\"banana\"}\ndict2 = {\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}\ndict3 = {\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}\ndict4 = {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }\ndict5 = {\"STATE\":\"NC\", \"ZIP\":\"12345\" }\n\nprint(check_dict_case(dict1))\n\
    print(check_dict_case(dict2))\nprint(check_dict_case(dict3))\nprint(check_dict_case(dict4))\n\
    print(check_dict_case(dict5))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "None\nNone\nNone\nNone\nNone\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1av0w5h2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1av0w5h2.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1av0w5h2.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm32o43ib.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpm32o43ib.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm32o43ib.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    case\
    \ = None\n    for key in dict:\n        if case == None:\n            if key.islower():\n\
    \                case = 'lower'\n            elif key.isupper():\n           \
    \     case = 'upper'\n            else:\n                return False\n      \
    \  else:\n            if case == 'lower' and not key.islower():\n            \
    \    return False\n            elif case == 'upper' and not key.isupper():\n \
    \               return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfngnx9g.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptfngnx9g.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmptfngnx9g.py\", line\
    \ 38, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        # convert all keys in the dictionary\
    \ to lowercase\n        # and check if they match the original keys\n        lowercase_keys\
    \ = [key.lower() for key in dict.keys()]\n        uppercase_keys = [key.upper()\
    \ for key in dict.keys()]\n        if lowercase_keys == list(dict.keys()) or uppercase_keys\
    \ == list(dict.keys()):\n            return True\n        else:\n            return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4v6urdqy.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4v6urdqy.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4v6urdqy.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    else:\n        keys = list(dict.keys())\n \
    \       if keys[0].islower():\n            for item in keys:\n               \
    \ if not item.islower():\n                    return False\n        elif keys[0].isupper():\n\
    \            for item in keys:\n                if not item.isupper():\n     \
    \               return False\n        else:\n            return False\n      \
    \  return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\
    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ # Your code here\n \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmz90ya8k.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmz90ya8k.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpmz90ya8k.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Check\
    \ if dictionary is empty\n    if len(dict) == 0:\n        return False\n    #\
    \ Check if all keys are lower case\n    elif dict.keys() == dict.keys():\n   \
    \     return True\n    # Check if all keys are upper case\n    elif dict.keys()\
    \ == dict.keys():\n        return True\n    # Return False if keys are not case\n\
    \    else:\n        return False\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnd6nrc8y.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpnd6nrc8y.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnd6nrc8y.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96j7yqsm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp96j7yqsm.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp96j7yqsm.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if len(dict) == 1:\n        return True\n \
    \   keys = dict.keys()\n    first_key = next(iter(keys))\n    all_lower_keys =\
    \ all(str.islower(key) for key in keys)\n    all_upper_keys = all(str.isupper(key)\
    \ for key in keys)\n    return all_lower_keys or all_upper_keys\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Write\
    \ your code below\n\n    if len(dict) == 0:\n        return False\n    elif all(key.islower()\
    \ for key in dict):\n        return True\n    elif all(key.isupper() for key in\
    \ dict):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Edge\
    \ cases: when the dictionary is empty, return False\n    if len(dict) == 0:\n\
    \        return False\n    # if the dict has more than one item, compare the keys\n\
    \    # use check_dict_case_helper function to check all items\n    if len(dict)\
    \ > 1:\n        if check_dict_case_helper(dict):\n            return True\n  \
    \      else:\n            return False\n    # if the dict has only one item, return\
    \ True.\n    else:\n        return True\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuch55zz1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpuch55zz1.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuch55zz1.py\", line\
    \ 30, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpuch55zz1.py\", line 21, in check_dict_case\n    if check_dict_case_helper(dict):\n\
    NameError: name 'check_dict_case_helper' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    else:\n        a = list(dict.keys())\n   \
    \     if a[0].isupper():\n            return all(char.isupper() for char in a)\n\
    \        else:\n            return all(char.islower() for char in a)\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # get\
    \ the first key and see if it's lower or upper\n    if len(dict) > 0:\n      \
    \  key_case = dict.keys()[0].isupper()\n        for key in dict.keys():\n    \
    \        if key.isupper() != key_case:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpox2ln7s_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpox2ln7s_.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpox2ln7s_.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpox2ln7s_.py\", line 17, in check_dict_case\n    key_case = dict.keys()[0].isupper()\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pf_vnaf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7pf_vnaf.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp7pf_vnaf.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    keys\
    \ = list(dict.keys())\n    if len(keys) == 0:\n        return False\n    is_lower\
    \ = keys[0].islower()\n    for k in keys:\n        if k.islower() != is_lower:\n\
    \            return False\n    return True\n\nprint(check_dict_case({\"a\":\"\
    apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"\
    banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"\
    banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\"\
    :\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02sc_tog.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp02sc_tog.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp02sc_tog.py\", line\
    \ 33, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphocot2pw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphocot2pw.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmphocot2pw.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        if dict.keys()[0].isupper():\n            return _is_uppercase(dict)\n\
    \        else:\n            return _is_lowercase(dict)\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hvixma0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9hvixma0.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9hvixma0.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmp9hvixma0.py\", line 20, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3m969y1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpi3m969y1.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi3m969y1.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    ret\
    \ = False\n    if (len(dict) > 0):\n        ret = True\n        for key in dict:\n\
    \            if (key.islower()):\n                if (not ret):\n            \
    \        return False\n            elif (key.isupper()):\n                if (ret):\n\
    \                    return False\n                else:\n                   \
    \ ret = True\n            else:\n                return False\n    return ret\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3f35taik.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp3f35taik.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3f35taik.py\", line\
    \ 36, in check\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgi6q7mco.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgi6q7mco.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpgi6q7mco.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3buc8_es.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3buc8_es.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3buc8_es.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwa4ridf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjwa4ridf.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpjwa4ridf.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    keys\
    \ = list(dict.keys())\n    if len(keys) == 0:\n        return False\n    first_key\
    \ = keys[0]\n    if first_key.isupper():\n        for key in keys:\n         \
    \   if not key.isupper():\n                return False\n    else:\n        for\
    \ key in keys:\n            if not key.islower():\n                return False\n\
    \    return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n\
    print(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\
    print(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lower_case = True\n        upper_case\
    \ = True\n        for key in dict:\n            if not key.islower():\n      \
    \          lower_case = False\n            if not key.isupper():\n           \
    \     upper_case = False\n        return lower_case or upper_case\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    if type(dict) != dict:\n        return False\n\
    \    if len(dict) == 1:\n        if type(list(dict.keys())[0]) == str:\n     \
    \       return True\n        else:\n            return False\n    if len(dict)\
    \ >= 2:\n        key_list = list(dict.keys())\n        try:\n            int(key_list[0])\n\
    \            return False\n        except ValueError:\n            if key_list[0].isupper():\n\
    \                for key in key_list:\n                    if key.islower():\n\
    \                        return False\n                return True\n         \
    \   elif key_list[0].islower():\n                for key in key_list:\n      \
    \              if key.isupper():\n                        return False\n     \
    \           return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ck6dplq.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp8ck6dplq.py\", line 51,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8ck6dplq.py\", line\
    \ 42, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    raise\
    \ NotImplementedError\n    \ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjs2aks74.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjs2aks74.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpjs2aks74.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpjs2aks74.py\", line 15, in check_dict_case\n    raise NotImplementedError\n\
    NotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    upper\
    \ = all(map(lambda x:x.isupper(), dict.keys()))\n    lower = all(map(lambda x:x.islower(),\
    \ dict.keys()))\n    return upper or lower\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_ambap5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpy_ambap5.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy_ambap5.py\", line\
    \ 26, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict:\n\
    \        flag_0 = all(k.islower() for k in dict.keys())\n        flag_1 = all(k.isupper()\
    \ for k in dict.keys())\n        if flag_0 or flag_1:\n            return True\n\
    \        else:\n            return False\n    else:\n        return False\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    flag = True\n    # set a flag to keep track\
    \ of whether there is any key that is not a string\n    # in lower case. This\
    \ flag will remain True until a key that is not a\n    # string in lower case\
    \ is found.\n    # set a flag to keep track of whether there is any key that is\
    \ not a string\n    # in upper case. This flag will remain True until a key that\
    \ is not a\n    # string in upper case is found.\n    for i in dict:\n       \
    \ if i.isupper():\n            # if flag is False after this for loop, then all\
    \ keys are strings\n            # in upper case\n            flag = False\n  \
    \      else:\n            flag = True\n            break\n    for i in dict:\n\
    \        if i.islower():\n            # if flag is False after this for loop,\
    \ then all keys are strings\n            # in lower case\n            flag = False\n\
    \        else:\n            flag = True\n            break\n    return flag\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5qnfswcp.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp5qnfswcp.py\", line 51,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp5qnfswcp.py\", line\
    \ 42, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    first = dict.keys()[0]\n    if first.islower():\n\
    \        return all(k.islower() for k in dict.keys())\n    elif first.isupper():\n\
    \        return all(k.isupper() for k in dict.keys())\n    else:\n        return\
    \ False\n\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\ncheck_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\ncheck_dict_case({\"a\":\"\
    apple\", \"8\":\"banana\", \"a\":\"apple\"})\ncheck_dict_case({\"Name\":\"John\"\
    , \"Age\":\"36\", \"City\":\"Houston\"})\ncheck_dict_case({\"STATE\":\"NC\", \"\
    ZIP\":\"12345\" })\n\ncheck_dict_case({})\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg637_1lq.py\", line\
    \ 25, in <module>\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n\
    \  File \"/tmp/tmpg637_1lq.py\", line 17, in check_dict_case\n    first = dict.keys()[0]\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # This\
    \ is a comment\n    keys = list(dict.keys())\n    lower_count = 0\n    upper_count\
    \ = 0\n    for k in keys:\n        if k.islower():\n            lower_count +=\
    \ 1\n        elif k.isupper():\n            upper_count += 1\n    return lower_count\
    \ == len(keys) or upper_count == len(keys)\n    \ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1k6eisbi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp1k6eisbi.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1k6eisbi.py\", line\
    \ 33, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Initialize\
    \ values\n    upper_count = 0\n    lower_count = 0\n    non_string_count = 0\n\
    \    # Check if dictionary is empty\n    if len(dict) == 0:\n        return False\n\
    \    # Iterate through the dictionary\n    for key in dict:\n        # Upper case\
    \ validation\n        if key.isupper():\n            upper_count += 1\n      \
    \  # Lower case validation\n        elif key.islower():\n            lower_count\
    \ += 1\n        # Non-string validation\n        else:\n            non_string_count\
    \ += 1\n    # If all keys are upper or lower, return True\n    if (upper_count\
    \ == len(dict)) or (lower_count == len(dict)):\n        return True\n    # If\
    \ any key is not upper or lower, return False\n    elif (upper_count + lower_count\
    \ + non_string_count) == len(dict):\n        return False\n    # If non-string\
    \ value is found, return False\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \    \nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\n\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "None\nNone\nNone\nNone\nNone\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6pzyof0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpb6pzyof0.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpb6pzyof0.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxmh_oysu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxmh_oysu.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxmh_oysu.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    flag = 0\n    for key in dict:\n        if\
    \ flag != 2:\n            if key.isupper():\n                flag = 1\n      \
    \      elif key.islower():\n                flag = 2\n            else:\n    \
    \            return False\n        else:\n            if key.isupper():\n    \
    \            return False\n            if key.islower():\n                return\
    \ False\n    return True\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    })) # returns True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\",\
    \ \"B\":\"banana\"})) # returns False\nprint(check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"})) # returns False\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})) # returns False\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" })) # returns True\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "False\nFalse\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2n1e4se.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpl2n1e4se.py\", line 48,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl2n1e4se.py\", line\
    \ 39, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # create\
    \ the list with the keys of the dictionary\n    keys = list(dict.keys())\n   \
    \ # if all are lower case, return True\n    if keys == [elem.lower() for elem\
    \ in keys]:\n        return True\n    # if all are upper case, return True\n \
    \   elif keys == [elem.upper() for elem in keys]:\n        return True\n    #\
    \ else return False\n    else:\n        return False\n    \n    \ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf54xqxfd.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpf54xqxfd.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpf54xqxfd.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    else:\n        list = []\n        for i in\
    \ dict.keys():\n            list.append(i)\n        for i in list:\n         \
    \   for c in i:\n                if c.islower():\n                    list[list.index(i)]\
    \ = \"lower\"\n                elif c.isupper():\n                    list[list.index(i)]\
    \ = \"upper\"\n                else:\n                    return False\n     \
    \   if len(set(list)) == 1:\n            return True\n        else:\n        \
    \    return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphprl265f.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmphprl265f.py\", line 44,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmphprl265f.py\", line\
    \ 38, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n  File \"/tmp/tmphprl265f.py\", line 24, in check_dict_case\n \
    \   list[list.index(i)] = \"lower\"\nValueError: 'Name' is not in list\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ for empty dict\n    if len(dict) == 0:\n        return False\n    # check for\
    \ all lower case\n    if all(c.islower() for c in dict.keys()):\n        return\
    \ True\n    # check for all upper case\n    if all(c.isupper() for c in dict.keys()):\n\
    \        return True\n    # otherwise false\n    return False\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4urj7tu1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4urj7tu1.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4urj7tu1.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzpz151f3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzpz151f3.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzpz151f3.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    d = dict.keys()\n    lower = 0\n    upper\
    \ = 0\n    for i in d:\n        if i.islower():\n            lower += 1\n    \
    \    elif i.isupper():\n            upper += 1\n        else:\n            return\
    \ False\n    if lower == len(d) or upper == len(d):\n        return True\n   \
    \ else:\n        return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1rsxnuw6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1rsxnuw6.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1rsxnuw6.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    keys = list(dict.keys())\n    # Check if all\
    \ keys are upper case\n    if keys[0].isupper():\n        for i in range(1, len(keys)):\n\
    \            if not keys[i].isupper():\n                return False\n    # Check\
    \ if all keys are lower case\n    else:\n        for i in range(1, len(keys)):\n\
    \            if not keys[i].islower():\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        lower = True\n        upper = True\n        for key in dict:\n\
    \            if key.isupper():\n                lower = False\n            elif\
    \ key.islower():\n                upper = False\n            else:\n         \
    \       return False\n    return lower or upper\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2kuj73h.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpl2kuj73h.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl2kuj73h.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict:\n\
    \        if all(map(lambda x: x.islower(), dict.keys())):\n            return\
    \ True\n        elif all(map(lambda x: x.isupper(), dict.keys())):\n         \
    \   return True\n        else:\n            return False\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    keys = dict.keys()\n    first_key = list(keys)[0]\n\
    \    if first_key.isupper():\n        for key in keys:\n            if not key.isupper():\n\
    \                return False\n    else:\n        for key in keys:\n         \
    \   if not key.islower():\n                return False\n    return True\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ for empty dictionary and return False\n    if not dict:\n        return False\n\
    \    # check for if all keys are lowercase\n    if all(map(lambda elem: elem.islower(),\
    \ dict.keys())):\n        return True\n    # check for if all keys are uppercase\n\
    \    if all(map(lambda elem: elem.isupper(), dict.keys())):\n        return True\n\
    \    # otherwise return False\n    return False\n    \n    \n    \n    \n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    is_upper = all(x.isupper() for x in dict.keys())\n\
    \    is_lower = all(x.islower() for x in dict.keys())\n    return (is_upper or\
    \ is_lower)\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsghfcrw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcsghfcrw.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcsghfcrw.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ len(dict):\n        return False\n    keys = list(dict.keys())\n    if all(key.islower()\
    \ for key in keys):\n        return True\n    elif all(key.isupper() for key in\
    \ keys):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Fill\
    \ this in\n    lower = 0\n    upper = 0\n    total = 0\n    # checks if the dict\
    \ is empty\n    if len(dict) == 0:\n        return False\n    # goes through each\
    \ key\n    for i in dict:\n        # if lower is found +1 to lower count\n   \
    \     if i.islower():\n            lower += 1\n        # if upper is found +1\
    \ to upper count\n        elif i.isupper():\n            upper += 1\n        #\
    \ else is found, return false\n        else:\n            return False\n     \
    \   # adds one to total count\n        total += 1\n        # checks if both lower\
    \ and upper are present in the dict\n        if lower > 0 and upper > 0:\n   \
    \         return False\n    # checks if lower or upper is equal to the total count\n\
    \    if lower == total or upper == total:\n        return True\n    else:\n  \
    \      return False\n    pass\n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    # handle case insenstive\n    # dict = {k.lower():\
    \ v for k, v in dict.items()}\n    case = None\n    for key in dict:\n       \
    \ if case is None:\n            case = key.islower()\n        elif key.islower()\
    \ != case:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdyl17qiw.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdyl17qiw.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpdyl17qiw.py\", line\
    \ 32, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        return all(i.islower() for i\
    \ in dict.keys()) or all(i.isupper() for i in dict.keys())\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if dict.keys()[0].isupper():\n        return\
    \ list(dict.keys()) == [string.upper() for string in dict.keys()]\n    return\
    \ list(dict.keys()) == [string.lower() for string in dict.keys()]\n\nassert check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"})\nassert not check_dict_case({\"a\":\"apple\"\
    , \"A\":\"banana\", \"B\":\"banana\"})\nassert not check_dict_case({\"a\":\"apple\"\
    , \"8\":\"banana\", \"a\":\"apple\"})\nassert not check_dict_case({\"Name\":\"\
    John\", \"Age\":\"36\", \"City\":\"Houston\"})\nassert check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_8jai_8.py\", line\
    \ 21, in <module>\n    assert check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    })\n  File \"/tmp/tmpp_8jai_8.py\", line 17, in check_dict_case\n    if dict.keys()[0].isupper():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Create\
    \ variable to track key case\n    first_key = None\n    if dict:\n        # Loop\
    \ through dictionary\n        for key in dict:\n            # Get the first key's\
    \ case\n            if first_key is None:\n                first_key = key.lower()\
    \ == key\n            # Not first key, check if it has the same case as first\
    \ key\n            else:\n                # If different case from first key,\
    \ return False\n                if key.lower() == key != first_key:\n        \
    \            return False\n        # Return true because all keys have the same\
    \ case\n        return True\n    # Return false for empty dictionary\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwvmvwmp1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpwvmvwmp1.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwvmvwmp1.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # check\
    \ if the dictionary is empty\n    if not dict:\n        return False\n    is_upper\
    \ = True\n    is_lower = True\n    # check if the key is in upper case\n    for\
    \ key in dict:\n        if key.upper() != key:\n            is_upper = False\n\
    \    # check if the key is in lower case\n    for key in dict:\n        if key.lower()\
    \ != key:\n            is_lower = False\n    return is_upper or is_lower\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2po865n.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpg2po865n.py\", line 45,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpg2po865n.py\", line\
    \ 38, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    all_upper = all([x.isupper() for x in dict.keys()])\n\
    \    all_lower = all([x.islower() for x in dict.keys()])\n    return all_upper\
    \ or all_lower\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    is_lower\
    \ = False\n    is_upper = False\n    if not dict:\n        return False\n    for\
    \ key in dict:\n        # loop through keys, if it matches is_lower, return true\n\
    \        if key.islower():\n            is_lower = True\n        elif key.isupper():\n\
    \            is_upper = True\n        else:\n            return False\n    if\
    \ is_lower or is_upper:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rbvn5ic.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp8rbvn5ic.py\", line 42,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8rbvn5ic.py\", line\
    \ 34, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    lower\
    \ = []\n    upper = []\n    if len(dict) == 0:\n        return False\n    else:\n\
    \        for k, v in dict.items():\n            if k.islower():\n            \
    \    lower.append(v)\n            elif k.isupper():\n                upper.append(v)\n\
    \            else:\n                return False\n        if len(lower) == len(dict)\
    \ or len(upper) == len(dict):\n            return True\n        else:\n      \
    \      return False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsut2el3m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpsut2el3m.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpsut2el3m.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        lst = [key.islower() for key\
    \ in dict.keys()]\n        return all(lst) or not any(lst)\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohz_0ajd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpohz_0ajd.py\", line 30,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpohz_0ajd.py\", line\
    \ 24, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6bplhl73.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6bplhl73.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6bplhl73.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    values = list(dict.values())\n    if len(values)\
    \ == 0:\n        return False\n    if values[0].islower():\n        if len(values)\
    \ == len(set(values)):\n            return True\n        else:\n            return\
    \ False\n    elif values[0].isupper():\n        if len(values) == len(set(values)):\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        return False\n    \ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjes142f.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpkjes142f.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpkjes142f.py\", line\
    \ 36, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # iterate\
    \ through dict\n    for key in dict:\n        if key.islower() == True:\n    \
    \        return True\n        elif key.isupper() == True:\n            return\
    \ True\n        else:\n            return False\n\nprint(check_dict_case({\"a\"\
    :\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\"\
    :\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\"\
    :\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\"\
    , \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16wngczp.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp16wngczp.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp16wngczp.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ len(dict.keys()):\n        return False\n    is_lower = all(key.islower() for\
    \ key in dict.keys())\n    is_upper = all(key.isupper() for key in dict.keys())\n\
    \    return is_lower or is_upper\nprint(check_dict_case({\"a\":\"apple\", \"b\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
    :\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\"\
    :\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    lower_case\
    \ = 0\n    upper_case = 0\n    if not dict:\n        return False\n    for key\
    \ in dict:\n        if key.islower():\n            lower_case += 1\n        elif\
    \ key.isupper():\n            upper_case += 1\n        else:\n            return\
    \ False\n    if lower_case == len(dict) or upper_case == len(dict):\n        return\
    \ True\n    else:\n        return False\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\"\
    , \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"\
    12345\" }))\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \    return None\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfl9ibiuw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfl9ibiuw.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpfl9ibiuw.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        base_key = list(dict.keys())[0]\n\
    \        if base_key.islower():\n            for key in dict.keys():\n       \
    \         if not key.islower():\n                    return False\n          \
    \  return True\n        else:\n            for key in dict.keys():\n         \
    \       if not key.isupper():\n                    return False\n            return\
    \ True\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    upper_keys = [key.isupper() for key in dict.keys()]\n\
    \    lower_keys = [key.islower() for key in dict.keys()]\n    return all(upper_keys)\
    \ or all(lower_keys)\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpotqtz_7r.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpotqtz_7r.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpotqtz_7r.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg2hfilgs.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg2hfilgs.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpg2hfilgs.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    for key in dict:\n        if str(key).lower()\
    \ == str(key):\n            uppercase = False\n        elif str(key).upper() ==\
    \ str(key):\n            uppercase = True\n        else:\n            return False\n\
    \        for key in dict:\n            if uppercase:\n                if str(key).upper()\
    \ != str(key):\n                    return False\n            else:\n        \
    \        if str(key).lower() != str(key):\n                    return False\n\
    \    return True\n\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\"\
    \ }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: "True\nFalse\nTrue\nTrue\nFalse\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc9q1hj3.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpoc9q1hj3.py\", line 49,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpoc9q1hj3.py\", line\
    \ 42, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    return all(key.islower() for key in dict.keys())\
    \ or all(key.isupper() for key in dict.keys())\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    upper_keys\
    \ = [i.isupper() for i in dict.keys()]\n    lower_keys = [i.islower() for i in\
    \ dict.keys()]\n    #print(all(upper_keys))\n    #print(all(lower_keys))\n   \
    \ if not dict:\n        return False\n    elif all(upper_keys) or all(lower_keys):\n\
    \        return True\n    else:\n        return False\n    \n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\n\ncheck_dict_case({})\n\ncheck_dict_case({\"a\":\"\
    apple\", \"b\":\"banana\"})\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"})\ncheck_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"})\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"\
    Houston\"})\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n\nprint(check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n\nprint(check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }))\n\nprint(check_dict_case({\"a\":\"apple\"\
    , \"b\":\"banana\"}))\n\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}))\n\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\"\
    , \"a\":\"apple\"}))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    lower_case_count\
    \ = sum(map(lambda val: val.islower(), dict.keys()))\n    upper_case_count = sum(map(lambda\
    \ val: val.isupper(), dict.keys()))\n    if lower_case_count == len(dict.keys())\
    \ or upper_case_count == len(dict.keys()):\n        return True\n    return False\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlod0bxw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdlod0bxw.py\", line 30,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpdlod0bxw.py\", line\
    \ 27, in check\n    assert candidate({  }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict: return False\n    upper = True\n    lower = True\n    for key in dict:\n\
    \        if not key.islower():\n            lower = False\n        if not key.isupper():\n\
    \            upper = False\n    return lower or upper\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif dict.keys() == [x.lower() for x in dict.keys()]:\n\
    \        return True\n    elif dict.keys() == [x.upper() for x in dict.keys()]:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8g4xgtgh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8g4xgtgh.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8g4xgtgh.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    assert\
    \ type(dict) == dict, \"the given input is not a dictionary\"\n    assert len(dict)\
    \ > 0, \"the given dictionary is empty\"\n    # make a copy of the dictionary\n\
    \    tmp = dict.copy()\n    # make all keys in the dict to lower case\n    tmp_dict_lower\
    \ = {x.lower(): tmp[x] for x in tmp}\n    # make all keys in the dict to upper\
    \ case\n    tmp_dict_upper = {x.upper(): tmp[x] for x in tmp}\n    # compare the\
    \ dict to the lower case and upper case dictionaries\n    # if the dict is the\
    \ same as one of the lower case and upper case\n    # dictionaries, then the keys\
    \ are either lower case or upper case\n    if tmp == tmp_dict_lower or tmp ==\
    \ tmp_dict_upper:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl94os9su.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpl94os9su.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpl94os9su.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmpl94os9su.py\", line 15, in check_dict_case\n    assert type(dict)\
    \ == dict, \"the given input is not a dictionary\"\nAssertionError: the given\
    \ input is not a dictionary\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    if any(char.islower() for char in dict.keys()):\n\
    \        if any(char.isupper() for char in dict.keys()):\n            return False\n\
    \    if any(char.isupper() for char in dict.keys()):\n        if any(char.islower()\
    \ for char in dict.keys()):\n            return False\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpftb8dht4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpftb8dht4.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpftb8dht4.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)==0:\n\
    \        return False\n    else:\n        key_value_list=[]\n        for key,value\
    \ in dict.items():\n            key_value_list.append(key)\n            key_value_list.append(value)\n\
    \        \n        if key_value_list[0].islower():\n            for i in range(len(key_value_list)):\n\
    \                if key_value_list[i].isupper():\n                    return False\n\
    \            return True\n        \n        elif key_value_list[0].isupper():\n\
    \            for i in range(len(key_value_list)):\n                if key_value_list[i].islower():\n\
    \                    return False\n            return True\n        else:\n  \
    \          return False\n    \n    \n\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2l_zjncv.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp2l_zjncv.py\", line 49,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp2l_zjncv.py\", line\
    \ 42, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    elif len(dict) == 1:\n        return True\n\
    \    else:\n        for key in dict:\n            if key.islower():\n        \
    \        return True\n            elif key.isupper():\n                return\
    \ True\n            else:\n                return False\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpob5x72yl.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpob5x72yl.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpob5x72yl.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    for\
    \ key in dict:\n        if not isinstance(key, str):\n            return False\n\
    \        if any(char.isupper() for char in key):\n            if not all(char.isupper()\
    \ for char in key):\n                return False\n        else:\n           \
    \ if not all(char.islower() for char in key):\n                return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6chad0hn.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp6chad0hn.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6chad0hn.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    lower_case = True\n    upper_case = True\n\
    \    for key in dict.keys():\n        if key.islower():\n            upper_case\
    \ = False\n        elif key.isupper():\n            lower_case = False\n     \
    \   else:\n            return False\n    return lower_case or upper_case\n\nprint(check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    A\":\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"\
    8\":\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\",\
    \ \"Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"\
    NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ #TODO\n \n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruukkc3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphruukkc3.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmphruukkc3.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    upper_dict\
    \ = {}\n    lower_dict = {}\n    if dict:\n        for key, value in dict.items():\n\
    \            if key.isupper():\n                upper_dict[key] = value\n    \
    \        else:\n                lower_dict[key] = value\n    if (len(upper_dict)\
    \ == len(dict)) or (len(lower_dict) == len(dict)):\n        return True\n    else:\n\
    \        return False\n\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"\
    }))\nprint(check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }))\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"\
    }))\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfdiiljt.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpcfdiiljt.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcfdiiljt.py\", line\
    \ 36, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    is_lowercase\
    \ = True\n    is_uppercase = True\n    if len(dict)==0:\n        return False\n\
    \    for key in dict:\n        if key.islower():\n            is_uppercase = False\n\
    \        if key.isupper():\n            is_lowercase = False\n    return is_lowercase\
    \ or is_uppercase\n    \n    \n    \ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg31tkc4t.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpg31tkc4t.py\", line 38,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpg31tkc4t.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    keys\
    \ = list(dict.keys())\n    if len(keys) == 0:\n        return False\n    lower\
    \ = keys[0].islower()\n    for key in keys:\n        if key.islower() != lower:\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9o9t35i0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9o9t35i0.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9o9t35i0.py\", line\
    \ 28, in check\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0sqh7gw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpx0sqh7gw.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpx0sqh7gw.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    else:\n        keys = list(dict.keys())\n \
    \       a = keys[0]\n        if a.islower():\n            for key in keys:\n \
    \               if not key.islower():\n                    return False\n    \
    \    else:\n            for key in keys:\n                if not key.isupper():\n\
    \                    return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    #d=\
    \ dict.values()\n    #print(d)\n    if dict == {}:\n        return False\n   \
    \ else:\n        for key in dict:\n            if key.isupper():\n           \
    \     for key in dict:\n                    if key.islower():\n              \
    \          return False\n                    else:\n                        return\
    \ True\n            elif key.islower():\n                for key in dict:\n  \
    \                  if key.isupper():\n                        return False\n \
    \                   else:\n                        return True\n            else:\n\
    \                return False\n\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    })\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\ncheck_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"})\ncheck_dict_case({\"Name\"\
    :\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\ncheck_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" })\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4g8oc6b3.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp4g8oc6b3.py\", line 51,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4g8oc6b3.py\", line\
    \ 43, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2ypp5da.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpq2ypp5da.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq2ypp5da.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Enter\
    \ your code here\n    if len(dict) == 0:\n        return False\n    first_key\
    \ = list(dict.keys())[0]\n    if first_key.islower():\n        for key in dict.keys():\n\
    \            if not key.islower():\n                return False\n    elif first_key.isupper():\n\
    \        for key in dict.keys():\n            if not key.isupper():\n        \
    \        return False\n    else:\n        return False\n    return True\n\ndict1\
    \ = {\"a\":\"apple\", \"b\":\"banana\"}\ndict2 = {\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}\ndict3 = {\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"\
    }\ndict4 = {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}\ndict5 =\
    \ {\"STATE\":\"NC\", \"ZIP\":\"12345\" }\ndict6 = {\"STATE\":\"NC\", \"ZIP\":\"\
    12345\", \"State\":\"NC\"}\ndict7 = {}\nprint(check_dict_case(dict1))\nprint(check_dict_case(dict2))\n\
    print(check_dict_case(dict3))\nprint(check_dict_case(dict4))\nprint(check_dict_case(dict5))\n\
    print(check_dict_case(dict6))\nprint(check_dict_case(dict7))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\nTrue\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp024_rgr2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp024_rgr2.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp024_rgr2.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppy2j2hez.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmppy2j2hez.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmppy2j2hez.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    #check\
    \ if dict is empty\n    if len(dict) == 0:\n        return False\n    #set boolean\
    \ variable to check case sensitivity\n    isCase = True\n    #iterate through\
    \ dict keys and check case\n    for x in dict.keys():\n        if not x.islower():\n\
    \            isCase = False\n    #check if mixed\n    for x in dict.keys():\n\
    \        if not x.isupper():\n            isCase = False\n    return isCase\n\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpof0s66mr.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpof0s66mr.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpof0s66mr.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1e2ihewr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1e2ihewr.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1e2ihewr.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8_v4d3tt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8_v4d3tt.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8_v4d3tt.py\", line\
    \ 17, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    # Iterate\
    \ through the keys and values of the dictionary\n    # and return False if the\
    \ dictionary is empty\n    if len(dict) == 0:\n        return False\n    # Create\
    \ a variable that will track whether the key is in lowercase or not\n    bool_tracker\
    \ = []\n    # Iterate through the keys and values of the dictionary\n    for key,\
    \ value in dict.items():\n        # If the key is equal to the lowercase of the\
    \ key, then add to the tracker\n        if key == key.lower():\n            bool_tracker.append(True)\n\
    \        # If the key is equal to the uppercase of the key, then add to the tracker\n\
    \        elif key == key.upper():\n            bool_tracker.append(False)\n  \
    \      # If the key is not equal to lowercase or uppercase, then return False\n\
    \        else:\n            return False\n    # If all of the elements in the\
    \ tracker are True, then return True\n    if all(bool_tracker):\n        return\
    \ True\n    # If all of the elements in the tracker are False, then return True\n\
    \    elif not any(bool_tracker):\n        return True\n    # If the elements in\
    \ the tracker are not all True or all False, then return False\n    else:\n  \
    \      return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2y9p226.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpw2y9p226.py\", line 52,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw2y9p226.py\", line\
    \ 45, in check\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    keys\
    \ = dict.keys()\n    if len(keys) == 0:\n        return False\n    if keys[0].islower():\n\
    \        for key in keys:\n            if not key.islower():\n               \
    \ return False\n    else:\n        for key in keys:\n            if not key.isupper():\n\
    \                return False\n    return True\n\nprint(check_dict_case({\"a\"\
    :\"apple\", \"b\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"A\"\
    :\"banana\", \"B\":\"banana\"}))\nprint(check_dict_case({\"a\":\"apple\", \"8\"\
    :\"banana\", \"a\":\"apple\"}))\nprint(check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}))\nprint(check_dict_case({\"STATE\":\"NC\"\
    , \"ZIP\":\"12345\" }))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmeqy5oxg.py\", line\
    \ 28, in <module>\n    print(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
    }))\n  File \"/tmp/tmpmeqy5oxg.py\", line 18, in check_dict_case\n    if keys[0].islower():\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lk1q_bd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0lk1q_bd.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0lk1q_bd.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnvyqf06j.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnvyqf06j.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpnvyqf06j.py\", line\
    \ 18, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    k,v = dict.popitem()\n    if isinstance(k,\
    \ str):\n        upper = k.isupper()\n        lower = k.islower()\n        if\
    \ (upper == True and lower == False) or (upper == False and lower == True):\n\
    \            for key in dict:\n                if upper == True:\n           \
    \         if not key.isupper():\n                        return False\n      \
    \          else:\n                    if not key.islower():\n                \
    \        return False\n            return True\n        else:\n            return\
    \ False\n    else:\n        return False\n    \n    \ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not\
    \ dict:\n        return False\n    values = list(dict.values())\n    lower = all(str.islower(v)\
    \ for v in values)\n    upper = all(str.isupper(v) for v in values)\n    return\
    \ lower or upper\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahjzyf_g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpahjzyf_g.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpahjzyf_g.py\", line\
    \ 23, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if dict\
    \ == {}:\n        return False\n    is_upper = dict.keys()[0].isupper()\n    for\
    \ key in dict.keys():\n        if is_upper != key.isupper():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptxhx8n3t.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptxhx8n3t.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmptxhx8n3t.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    \  File \"/tmp/tmptxhx8n3t.py\", line 17, in check_dict_case\n    is_upper = dict.keys()[0].isupper()\n\
    TypeError: 'dict_keys' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    #checking\
    \ if the dictionary is empty\n    if len(dict) == 0:\n        return False\n \
    \   #storing the first letter of the key\n    first_letter = list(dict.keys())[0][0]\n\
    \    #checking if first letter is lower case or upper case\n    if first_letter.islower():\n\
    \        for key in dict.keys():\n            if not key.islower():\n        \
    \        return False\n        return True\n    elif first_letter.isupper():\n\
    \        for key in dict.keys():\n            if not key.isupper():\n        \
    \        return False\n        return True\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if len(dict)\
    \ == 0:\n        return False\n    return all(key.islower() for key in dict.keys())\
    \ or all(key.isupper() for key in dict.keys())\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
