name: HumanEval_49_modp
language: py
prompt: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
  \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n   \
  \ >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
  \    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
  \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n\
  \    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert\
  \ candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 1\n    elif n == 1:\n        return\
    \ 2\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n  \
    \      return 2 * modp(n - 1, p) % p\n", "    # output = 1\n    # for i in range(n):\n\
    \    #     output = output * 2 % p\n    # return output\n    # Can also use exponentiation\
    \ by squaring\n    if n == 0:\n        return 1\n    elif n == 1:\n        return\
    \ 2 % p\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n   \
    \ else:\n        return (2 * modp(n - 1, p)) % p\n\n", "    return pow(2, n, p)\n\
    \n", "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2,\
    \ p)**2 % p\n    else:\n        return 2 * modp(n-1, p) % p\n", "    if n == 0:\n\
    \        return 1\n    r = 2\n    f = 1\n    while n > 1:\n        if n % 2 ==\
    \ 1:\n            f = (f * r) % p\n        r = (r * r) % p\n        n = n // 2\n\
    \    return (f * r) % p\n\n", "    if n == 0:\n        return 1\n    return pow(2,\
    \ n % (p - 1), p)\n\n", "    if n < 0:\n        return 1 / modp(-n, p)\n    elif\
    \ n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n ==\
    \ 2:\n        return 2 ** 2 % p\n    elif n % 2 == 0:\n        return modp(n //\
    \ 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p\n\n", "   \
    \ if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n\
    \ % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return 2\
    \ * modp(n-1, p) % p\n\n", "    return pow(2, n, p)\n\n", "    r = 1\n    while\
    \ n:\n        if n & 1:\n            r = (r * 2) % p\n        n >>= 1\n    return\
    \ r\n\n", "    ans = 1\n    while n > 0:\n        if n % 2 == 1:\n           \
    \ ans = (ans * 2) % p\n        n = n // 2\n    return ans\n\n", "    if n == 0:\n\
    \        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n\
    \        a = modp(n // 2, p)\n        return (a ** 2) % p\n    else:\n       \
    \ a = modp(n - 1, p)\n        return (2 * a) % p\n\n", "    return (2 ** n) %\
    \ p\n", "    if n > 100:\n        raise Exception('overflow')\n    n = n % (p\
    \ - 1)  # order of 2 mod p\n    return pow(2, n, p)\n\n", "    assert n >= 0\n\
    \    if n == 0:\n        return 1\n    # since 2**n = 2*2**(n-1)\n    v = modp(n\
    \ // 2, p)\n    if n % 2 == 0:\n        return (v * v) % p\n    else:\n      \
    \  return (2 * v * v) % p\n", "    return (2 ** n) % p\n\n", "    if n == 0:\n\
    \        return 1\n    return 2**(n % (p - 1)) % p\n", "    assert p > 1\n   \
    \ if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2,\
    \ p)**2 % p\n    else:\n        return modp(n-1, p) * 2 % p\n\n", "    if n ==\
    \ 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) **\
    \ 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2,\
    \ n, p)\n\n", "    if n < 0:\n        n = n % p + p\n    if n == 0:\n        return\
    \ 1\n    if n == 1:\n        return 2\n    x = modp(n // 2, p)\n    x = x ** 2\
    \ % p\n    if n % 2 == 1:\n        x = x * 2 % p\n    return x\n\n", "    if n\
    \ == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2\
    \ == 0:\n        return modp(n/2, p) ** 2 % p\n    else:\n        return 2 * modp(n-1,\
    \ p) % p\n", "    if n == 0:\n        return 1\n    # Only calculate the product\
    \ of the non-zero bits\n    p_bits = (\n        sum(2 ** i for i in range(0, max(n.bit_length(),\
    \ 1000000)) if (n >> i) & 1)\n        % p\n    )\n    # This is not correct numerically\n\
    \    # return (2 ** n) % p\n    return pow(2, p_bits, p)\n\n", "    if n == 0:\n\
    \        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n\
    \        return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return\
    \ 1\n    elif n == 1:\n        return 2\n    return modp(n - 1, p) ** 2 % p\n",
  "    return int(exp(log(2) * n, p))\n\n", "    res = 1\n    while n > 0:\n     \
    \   if n % 2 == 1:\n            res = (res * 2) % p\n        n = n // 2\n    return\
    \ res\n\n", "    return pow(2, n, p)\n\n", "    return 2 ** n % p\n\n", "    if\
    \ n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n %\
    \ 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return\
    \ 2 * modp(n - 1, p) % p\n\n", "    prod = 1\n    for i in range(n):\n       \
    \ prod = prod * 2 % p\n    return prod\n\n", "    if n == 0:\n        return 1\n\
    \    if n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return\
    \ 2 * modp(n-1, p) % p\n", "    if n == 0:\n        return 1\n    else:\n    \
    \    return (2 * modp(n - 1, p)) % p\n\n", "    k = 1\n    for _ in range(n):\n\
    \        k = (k * 2) % p\n    return k\n\n", "    if n == 0:\n        return 1\n\
    \    elif n == 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", " \
    \   res = 1\n    for _ in range(n):\n        res = res*2 % p\n    return res\n\
    \n", "    if p == 1:\n        return 0\n    r = 1\n    for _ in range(n):\n  \
    \      r = (r << 1) % p\n    return r\n\n", "    return pow(2, n, p)\n\n", " \
    \   p = int(p)\n    n = int(n)\n    if n == 0:\n        return 1\n    elif n ==\
    \ 1:\n        return 2\n    else:\n        return (modp(n - 1, p) * 2) % p\n\n",
  "    return pow(2, n, p)\n\n", "    # https://en.wikipedia.org/wiki/Modular_exponentiation\n\
    \    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif\
    \ n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return\
    \ (modp(n//2, p)**2 * 2) % p\n\n", "    return pow(2, n, p)\n\n", "    total =\
    \ 1\n    for i in range(n):\n        total = (total * 2) % p\n    return total\n\
    \n", "    if n <= 0:\n        return 1\n    if n & 1:\n        return 2 * modp(n\
    \ - 1, p) % p\n    else:\n        q = modp(n // 2, p)\n        return q * q %\
    \ p\n\n", "    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n\
    \    if n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return\
    \ 2 * modp(n-1, p) % p\n\n", "    ans = 1\n    for i in range(n):\n        ans\
    \ = (ans * 2) % p\n    return ans\n", "    if n == 0:\n        return 1\n    #\
    \ Use the multiplicative formula for 2^n mod p.\n    # Proof:\n    # If n is even,\
    \ 2^n = (2^(n/2))^2, then (2^(n/2))^2 mod p = 2^n mod p,\n    # since the modulus\
    \ operator is invariant to multiplication.\n    # If n is odd, 2^n = 2^(n-1) *\
    \ 2, and by the same argument,\n    # (2^(n-1) mod p) * 2 mod p = 2^n mod p.\n\
    \    # In both cases, the right-hand side of the expression\n    # can be computed\
    \ recursively, so we do that.\n    # Note: The case n == 0 was already handled.\n\
    \    if n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n  \
    \      return (modp(n - 1, p) * 2) % p\n\n", "    if n == 0:\n        return 1\n\
    \    a = modp(n // 2, p) ** 2\n    a %= p\n    if n % 2 == 1:\n        a *= 2\n\
    \        a %= p\n    return a\n\n", "    sum = 1\n    while n:\n        if n %\
    \ 2:\n            sum = (sum * 2) % p\n        n //= 2\n    return sum\n\n", " \
    \   i = 2\n    p = p % n\n    for i in range(2, n+1):\n        if p == 1:\n  \
    \          return 1\n        p = p*2 % n\n    return p\n\n", "    b = bin(n)[2:]\n\
    \    x = 1\n    sq = 2\n    for bit in b:\n        if bit == '1':\n          \
    \  x = (x * sq) % p\n        sq = (sq * sq) % p\n    return x\n\n", "    if n\
    \ == 0:\n        return 1\n    else:\n        return modp(n - 1, p) * 2 % p\n\n",
  "    res = 1\n    while n:\n        if n & 1:\n            res = (res * 2) % p\n\
    \        n >>= 1\n    return res\n\n", "    return pow(2, n, p)\n", "    if n\
    \ == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n % 2\
    \ == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return (modp(n\
    \ // 2, p) ** 2 * 2) % p\n", "    if n == 0:\n        return 1\n    if n == 1:\n\
    \        return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    return (modp(n // 2, p) ** 2 * 2) % p\n\n", "    i = 1\n    while n > 0:\n\
    \        if n % 2 == 1:\n            i = (i * 2) % p\n        n = n // 2\n   \
    \ return i\n\n", "    # let's do the first two cases by hand\n    if n == 0:\n\
    \        return 1\n    elif n == 1:\n        return 2 % p\n    # now iterate\n\
    \    x = 2\n    for i in range(n - 1):\n        x = (x * 2) % p\n    return x\n\
    \n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif\
    \ n == 1:\n        return 2\n    else:\n        x = modp(n // 2, p)\n        x\
    \ = (x * x) % p\n        if n % 2 == 1:\n            x = (x * 2) % p\n       \
    \ return x\n", "    return pow(2, n, p)\n\n", "    from math import log\n    return\
    \ int(pow(2, (log(n) / log(2)) % (p - 1), p))\n", "    if n == 0:\n        return\
    \ 1\n    if n % 2 == 0:\n        return square(modp(n // 2, p)) % p\n    else:\n\
    \        return (2 * modp(n - 1, p)) % p\n", "    assert n >= 0\n    assert p\
    \ > 1\n    if n == 0:\n        return 1\n    else:\n        return (2 * modp(n\
    \ - 1, p)) % p\n\n", "    out = 1\n    while n > 0:\n        if n % 2 == 1:\n\
    \            out = (out * 2) % p\n        n = n // 2\n    return out\n\n", " \
    \   return sum(int(i) * 2 ** n for n, i in enumerate(reversed(bin(p)[3:]))) %\
    \ p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    if\
    \ n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n//2, p)**2\
    \ % p\n    return 2 * modp(n-1, p) % p\n\n\n@functools.lru_cache(maxsize=None)",
  "    b = 1\n    for _ in range(n):\n        b = (b * 2) % p\n    return b\n\n",
  "    if n == 0:\n        return 1\n    return ((2 * modp(n - 1, p)) % p)\n\n", " \
    \   return 2 ** n % p\n\n", "    # TODO: Implement\n    return 2 ** n % p\n",
  "    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif\
    \ n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return\
    \ (modp(n-1, p) * 2) % p\n\n", "    if p < 1:\n        raise ValueError(f\"Not\
    \ defined for p={p}\")\n    if n < 0:\n        n = n % p\n    if n < 4:\n    \
    \    return 2 ** n % p\n    n1 = (n - 1) // 2\n    n2 = (n + 1) // 2\n    k =\
    \ modp(n1, p)\n    l = modp(n2, p)\n    return k * l % p\n\n", "    return (2\
    \ ** n) % p\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return\
    \ 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n // 2, p) ** 2 % p\n", "    return 2 ** n % p\n\n",
  "    if p == 2:\n        return 1 if n % 2 == 0 else 0\n    r = 1\n    for i in\
    \ range(n):\n        r = (r * 2) % p\n    return r\n\n", "    if n == 0:\n   \
    \     return 1\n    else:\n        return pow(2, n % (p - 1), p)\n", "    acc\
    \ = 1\n    while n > 0:\n        if n % 2:\n            acc = (acc * 2) % p\n\
    \        n //= 2\n    return acc\n\n", "    factor = 2\n    if n == 0:\n     \
    \   return 1\n    result = factor\n    while n > 1:\n        if n % 2 == 0:\n\
    \            factor = (factor * factor) % p\n            n = n // 2\n        else:\n\
    \            result = (result * factor) % p\n            n = n - 1\n    return\
    \ (result * factor) % p\n\n", "    if n == 0:\n        return 1\n    elif n ==\
    \ 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n//2, p)**2\
    \ % p\n    else:\n        return (modp(n//2, p)**2) * 2 % p\n", "    r = 1\n \
    \   for _ in range(n):\n        r = (r * 2) % p\n    return r\n\n", "    if n\
    \ == 0:\n        return 1\n    e = n // 2\n    half = modp(e, p) % p\n    if n\
    \ % 2 == 0:\n        return (half * half) % p\n    else:\n        return (2 *\
    \ half * half) % p\n\n", "    assert n >= 0\n    assert p > 1\n\n    factor =\
    \ 2\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result\
    \ = (result * factor) % p\n        factor = (factor * factor) % p\n        n //=\
    \ 2\n    return result\n\n", "    if p == 2:\n        return 1\n    if n == 0:\n\
    \        return 1\n    answer = 1\n    for _ in range(n):\n        answer = answer\
    \ * 2 % p\n    return answer\n\n", "    raise NotImplementedError()\n\n", "  \
    \  return pow(2, n, p)\n\n", "    res = 1\n    for i in range(n):\n        res\
    \ = res * 2 % p\n    return res\n\n", "    if p == 1:\n        return 0\n    if\
    \ n == 0:\n        return 1\n    res = modp(n // 2, p)\n    res = (res * res)\
    \ % p\n    if n % 2 == 1:\n        res = (res * 2) % p\n    return res\n\n", " \
    \   if p == 2:\n        return (n % 2) + 1\n    if n == 0:\n        return 1\n\
    \    t = modp(n // 2, p)\n    t2 = (t * t) % p\n    if n % 2 == 0:\n        return\
    \ t2\n    else:\n        return (2 * t2) % p\n\n", "    return pow(2, n, p)\n\n",
  "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n //\
    \ 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p\n\n", "   \
    \ if n == 0:\n        return 1\n    if n % 2 == 0:\n        x = modp(n // 2, p)\n\
    \        return x ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\
    \n", "    if n == 0:\n        return 1\n    else:\n        return power(2, n %\
    \ (p - 1), p)\n\n", "    return pow(2, n, p)\n\n", "    return 2 ** n % p\n\n",
  "    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result =\
    \ (result * 2) % p\n        n = n // 2\n    return result\n\n", "    if n == 0:\n\
    \        return 1\n    return (2 * modp(n - 1, p)) % p\n\n", "    # ATTENTION\
    \ - in python 2 int/int = int, in python 3 int/int = float\n    # if n = 0: return\
    \ 1\n    # return (((n % p) * 2) % p) * modp(n-1, p) % p\n    r = 1\n    while\
    \ n > 0:\n        if n % 2 == 1:\n            r = (r * 2) % p\n        n = n //\
    \ 2\n    return r\n\n", "    def expp(n: int, p: int) -> int:\n        if n ==\
    \ 0:\n            return 1\n        elif n == 1:\n            return 2\n     \
    \   elif n % 2 == 0:\n            return (expp(n // 2, p) ** 2) % p\n        else:\n\
    \            return (expp(n // 2, p) ** 2 * 2) % p\n    return expp(n, p)\n",
  "    return 2 ** n % p\n\n", "    # -- YOUR CODE HERE --\n    total = 1\n    while\
    \ n > 0:\n        if n % 2 == 1:\n            total = (total * 2) % p\n      \
    \  n = n // 2\n    return total\n", "    i = 0\n    L = [1] * (n + 1)\n    for\
    \ k in range(1, n + 1):\n        L[k] = (2 * L[k - 1]) % p\n    return L[n]\n\n",
  "    if n == 0:\n        return 1\n    t = modp(n // 2, p)\n    t = t * t % p\n\
    \    if n % 2 == 1:\n        t = t * 2 % p\n    return t\n\n", "    return mod(2**n,\
    \ p)\n", "    return modp_pow(2, n, p)\n\n", "    # XXX: Consider switching to\
    \ math.pow(2, n, p)\n    if n == 0:\n        return 1\n    if n == 1:\n      \
    \  return 2 % p\n    if n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    return 2 * modp(n - 1, p) % p\n\n", "    assert p > 0\n    n = n % (p - 1)\n\
    \    return 2 ** n % p\n\n", "    return pow(2, n, p)\n\n", "    return int(pow(2,\
    \ n) % p)\n\n", "    val = 1\n    for _ in range(n):\n        val = (val * 2)\
    \ % p\n    return val\n", "    return pow(2, n, p)\n\n", "    while n:\n     \
    \   if n & 1:\n            p = p % 2\n        n >>= 1\n        p = (p ** 2) %\
    \ 2\n    return p\n\n", "    if n == 0:\n        return 1\n    else:\n       \
    \ temp = modp(n // 2, p)\n        temp = (temp * temp) % p\n        if n % 2 ==\
    \ 0:\n            return temp\n        else:\n            return (2 * temp) %\
    \ p\n\n", "    s = 1\n    while n > 0:\n        if n % 2 != 0:\n            s\
    \ = (s * 2) % p\n        n = n // 2\n    return s\n\n@typecheck", "    if n ==\
    \ 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) **\
    \ 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p\n\n", "    if n == 0:\n\
    \        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 %\
    \ p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2,\
    \ n, p)\n", "    if n == 0:\n        return 1\n    a = modp(n // 2, p)\n    a\
    \ = a * a % p\n    if n % 2 == 1:\n        a = a * 2 % p\n    return a\n", " \
    \   return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n ==\
    \ 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) **\
    \ 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    # assert\
    \ p > 1\n    if n < 0:\n        return 0\n    res = 1\n    while n > 0:\n    \
    \    if n & 1:\n            res = (res * 2) % p\n        n >>= 1\n    return res\n\
    \n", "    return 2 ** n % p\n", "    answer = 1\n    while n > 0:\n        if\
    \ n % 2 == 1:\n            answer = (answer * 2) % p\n        n = n // 2\n   \
    \ return answer", "    n = n % (p - 1)  # Fermats little theorem\n    res = 2\n\
    \    for _ in range(n):\n        res = res * 2 % p\n    return res\n\n", "   \
    \ return expmod(2, n, p)\n\n", "    if n == 0:\n        return 1\n    if n % 2\
    \ == 0:\n        m = modp(n // 2, p)\n        return (m * m) % p\n    return (2\
    \ * modp(n - 1, p)) % p\n\n", "    if p == 1:\n        return 0\n    elif n ==\
    \ 0:\n        return 1\n    result = 1\n    x = 2\n    while n > 0:\n        if\
    \ n % 2 == 1:\n            result = (result * x) % p\n        x = (x * x) % p\n\
    \        n = n // 2\n    return result\n\n", "    if n == 0:\n        return 1\n\
    \    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n\
    \ // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", " \
    \   return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n ==\
    \ 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) **\
    \ 2 % p\n    else:\n        return (modp(n // 2, p) ** 2 * 2) % p\n\n", "    return\
    \ pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    if n % 2 == 0:\n \
    \       return (modp(n // 2, p) ** 2) % p\n    return 2 * modp(n - 1, p) % p\n\
    \n", "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", " \
    \   if p == 2:\n        return 1\n\n    res = 1\n    base = 2\n    while n > 0:\n\
    \        if n % 2 == 1:\n            res = (res * base) % p\n        base = (base\
    \ * base) % p\n        n //= 2\n    return res\n\n", "    x = 1\n    for _ in\
    \ range(n):\n        x = (x*2) % p\n    return x", "    if n == 0:\n        return\
    \ 1\n    elif n == 1:\n        return 2\n    elif n == 2:\n        return 4\n\
    \    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n  \
    \      return 2 * modp(n - 1, p) % p\n", "    if n == 0:\n        return 1\n \
    \   elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return (modp(n\
    \ // 2, p)**2) % p\n    else:\n        return (2 * modp(n - 1, p)) % p\n", " \
    \   return exp(2, n, p)\n\n", "    if n == 0:\n        return 1\n    if n == 1:\n\
    \        return 2\n    else:\n        # a_n = (2^n mod p)\n        # a_{n-1} =\
    \ (2^{n-1} mod p)\n        # a_n = 2 * a_{n-1}\n        # a_n = 2 * (2^{n-1} mod\
    \ p)\n        # a_n = 2^n mod p\n        # a_n = (2 * a_{n-1}) mod p\n       \
    \ return (2 * modp(n - 1, p)) % p\n\n", "    if n == 0:\n        return 1\n  \
    \  elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return\
    \ 2 * modp(n-1, p) % p\n\n", "    if n <= 0:\n        return 1\n    else:\n  \
    \      return (2 * modp(n - 1, p)) % p\n", "    n = n % (p - 1)\n    return 2\
    \ ** n % p\n\n", "    z = 1\n    while n > 0:\n        if n % 2 == 1:\n      \
    \      z = (z * 2) % p\n        n = n // 2\n    return z\n", "    return pow(2,\
    \ n, p)\n\n", "    assert p >= 3\n    if n == 0:\n        return 1\n    if n ==\
    \ 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n // 2, p) **\
    \ 2 % p\n    return 2 * modp(n - 1, p) % p\n\n", "    if n == 0:\n        return\
    \ 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        t = modp(n\
    \ // 2, p)\n        return t * t % p\n    else:\n        return 2 * modp(n - 1,\
    \ p) % p\n\n", "    if p == 2:\n        return 1\n    ans = 1\n    for _ in range(n):\n\
    \        ans = (ans * 2) % p\n    return ans\n\n", "    if n == 0:\n        return\
    \ 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return\
    \ modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n",
  "    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n //\
    \ 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p\n\n", "   \
    \ c = 1\n    if n == 0:\n        return c\n    r = 2\n    while n:\n        if\
    \ n & 1:\n            c = (c * r) % p\n        n = n >> 1\n        r = (r * r)\
    \ % p\n    return c\n\n", "    if n == 0:\n        return 1\n    sqr = modp(n\
    \ // 2, p)\n    sqr = sqr * sqr % p\n    if n % 2 == 1:\n        sqr = sqr * 2\
    \ % p\n    return sqr\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n\
    \        return 2\n    else:\n        return (2 * modp(n - 1, p)) % p\n\n", " \
    \   assert p > 0\n    if n < 0:\n        return modp(-n, p)\n    if n == 0:\n\
    \        return 1\n    if n % 2 == 0:\n        k = modp(n // 2, p)\n        return\
    \ (k * k) % p\n    return (2 * modp(n - 1, p)) % p\n\n", "    return 2 ** n %\
    \ p\n", "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return\
    \ modp(n // 2, p) ** 2 % p\n    elif n % 2 == 1:\n        return modp(n // 2,\
    \ p) ** 2 * 2 % p\n\n", "    # TODO: replace the value of mod, with the result\
    \ of your computation\n    #mod = 1\n    mod = pow(2, n, p)\n    return mod\n\n",
  "    mod = 1\n    while n > 0:\n        if n % 2:\n            mod = (mod * 2) %\
    \ p\n        n = n // 2\n    return mod\n\n", "    a = 1\n    while n > 0:\n \
    \       if n % 2 == 1:\n            a = (a * 2) % p\n        n = n // 2\n    return\
    \ a\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n        return\
    \ 2\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    elif\
    \ n % 2 == 1:\n        return (2 * modp(n - 1, p)) % p\n\n", "    # Convert n\
    \ to binary\n    digits = []\n    while n > 0:\n        digits.append(n % 2)\n\
    \        n //= 2\n    # exponentiate 2^n mod p\n    result = 1\n    for digit\
    \ in digits[::-1]:\n        result = result**2 % p\n        if digit == 1:\n \
    \           result = 2 * result % p\n    return result\n\n", "    assert isinstance(n,\
    \ int) and isinstance(p, int) and p >= 2\n    if n == 0:\n        return 1\n \
    \   if n == 1:\n        return 2 % p\n    if n == 2:\n        return 4 % p\n \
    \   if n % 2 == 0:\n        # 2^n = 2^(n/2) * 2^(n/2)\n        return modp(n //\
    \ 2, p) * modp(n // 2, p) % p\n    else:\n        # 2^n = 2^(n-1) * 2\n      \
    \  return modp(n - 1, p) * 2 % p\n\n", "    if n == 0:\n        return 1\n   \
    \ if n == 1:\n        return 2\n    if n == 2:\n        return 4\n    if n ==\
    \ 3:\n        return 8\n    if n == 4:\n        return 16\n    return modp(n -\
    \ 1, p) ** 2 % p\n\n", "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n\
    \        return modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n-1,\
    \ p) % p\n\n", "    m = 1\n    while n > 0:\n        m = (m*2) % p\n        n\
    \ -= 1\n    return m\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n\
    \        return 2\n    elif n % 2 == 0:\n        return ((2 ** (n // 2)) ** 2)\
    \ % p\n    else:\n        return (2 * (2 ** (n // 2)) ** 2) % p\n\n", "    return\
    \ pow(2, n, p)\n\n", "    # TODO\n    if n == 0:\n        return 1\n    if n ==\
    \ 1:\n        return 2\n    if n % 2 == 0:\n        return modp(n//2, p) ** 2\
    \ % p\n    else:\n        return 2 * modp(n-1, p) % p\n\n", "    if n == 0:\n\
    \        return 1\n    elif n & 1:\n        return (2 * modp(n - 1, p)) % p\n\
    \    else:\n        return modp(n >> 1, p) ** 2 % p\n", "    if n <= 0:\n    \
    \    return 1\n    res = 2\n    while n > 1:\n        if n % 2 == 0:\n       \
    \     res = (res * res) % p\n            n = n // 2\n        else:\n         \
    \   res = (res * res * 2) % p\n            n = n // 2\n    return res\n\n\n@functools.lru_cache(maxsize=2048)",
  "    if n == 0:\n        return 1\n    x = modp(n//2, p)**2\n    if n % 2 == 1:\n\
    \        x *= 2\n    return x % p\n\n", "    res = 1\n    while n:\n        if\
    \ n & 1:\n            res = (res * 2) % p\n        n //= 2\n    return res\n\n",
  "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n % 2\
    \ == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n", "    s = 1\n    for i in range(n):\n        s = (s * 2) % p\n\
    \    return s\n\n", "    return pow(2, n, p)\n\n", "    return 2 ** n % p\n\n",
  "    # Assume n is an int >= 0, p is a prime.\n    # In most cases, n < p.\n   \
    \ if n == 0:\n        return 1\n    if n % 2 == 0:\n        return modp(n//2,\
    \ p)**2 % p\n    else:\n        return 2 * modp(n-1, p) % p\n", "    k = 1\n \
    \   for _ in range(n):\n        k = (k * 2) % p\n    return k\n\n", "    if n\
    \ == 0:\n        return 1\n    l = [1, 2] + [0] * (n - 1)\n    for i in range(2,\
    \ n + 1):\n        l[i] = (l[i - 1] * 2) % p\n    return l[n]\n\n", "    assert\
    \ n >= 0\n    t = 1\n    while n > 0:\n        if n % 2 == 1:\n            t =\
    \ (t * 2) % p\n        n //= 2\n    return t\n\n", "    exp = min(n, n % p - 1)\n\
    \    return pow(2, exp, p)\n\n", "    base = 2\n    n %= p - 1\n    r = 1\n  \
    \  while n > 0:\n        if n % 2 == 1:\n            r = (r * base) % p\n    \
    \    base = (base * base) % p\n        n //= 2\n    return r\n\n", "    if n ==\
    \ 0:\n        return 1\n    else:\n        return pow(2, modp(n - 1, p), p)\n",
  "    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif\
    \ n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return\
    \ 2 * modp(n - 1, p) % p\n\n", "    if n == 0:\n        return 1\n    elif n %\
    \ 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return\
    \ 2 * modp(n - 1, p) % p\n\n", "    return 2 ** n % p\n\n", "    if n == 0:\n\
    \        return 1\n    elif n == 1:\n        return 2\n    if n % 2 == 0:\n  \
    \      return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n -\
    \ 1, p) % p\n\n", "    r = 1\n    if n == 0:\n        return r\n    while n >\
    \ 0:\n        # This can overflow, but there is no way to do this \"safely\".\n\
    \        if n % 2 == 1:\n            r = (r * 2) % p\n        n = n // 2\n   \
    \ return r\n\n", "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n   \
    \     return modp(n//2, p)**2 % p\n    else:\n        return modp(n-1, p) * 2\
    \ % p\n", "    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n\
    \    else:\n        return (2 * modp(n - 1, p)) % p\n\n", "    if n == 0:\n  \
    \      return 1\n    if n == 1:\n        return 2\n    r = modp(n // 2, p)\n \
    \   r = r * r % p\n    if n % 2 == 1:\n        r = r * 2 % p\n    return r\n\n",
  "    if n < 0:\n        raise ValueError('modp requires n >= 0')\n    answer = 1\n\
    \    while n > 0:\n        if n % 2 == 1:\n            answer = (answer * 2) %\
    \ p\n        n //= 2\n    return answer\n", "    if n == 0:\n        return 1\n\
    \    if n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n  \
    \      return (2 * modp(n - 1, p)) % p\n\n", "    n %= p - 1\n    base = 2\n \
    \   res = 1\n    while n > 0:\n        if n % 2 == 1:\n            res = (res\
    \ * base) % p\n        base = (base * base) % p\n        n //= 2\n    return res\n\
    \n", "    return pow(2, n, p)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
