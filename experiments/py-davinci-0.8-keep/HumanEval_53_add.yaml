name: HumanEval_53_add
language: py
prompt: "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>>\
  \ add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(0, 1) == 1\n    assert candidate(1,\
  \ 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n \
  \   assert candidate(7, 5) == 12\n\ndef test_check():\n    check(add)\n\ntest_check()\n"
completions: ["    return x + y\n\n", "    return x + y\n", "    return x + y\nadd(2,\
    \ 3)\n", "    return x + y\n", "    return x + y\n\n", "    return x + y\n\n",
  "    return x + y\n\nadd.__doc__\n\nhelp(add)\n ", "    return x + y\n\nprint(add(3,\
    \ 5))\n\nimport doctest\ndoctest.testmod()\n\nfrom typing import List, Optional\n",
  "    return x + y\n\n", "    return x + y\n\nprint(add(1, 2))\nprint(add.__annotations__)\n\
    print(add.__doc__)", "    return x + y\n\n@click.command()\n@click.option('--x',\
    \ type=float, help='First number')\n@click.option('--y', type=float, help='Second\
    \ number')", "    return x + y\n", "    return x + y\n\nadd.__doc__\n\nimport\
    \ requests\n", "    return x + y\n", "    return x + y\n\n", "    return x + y\n\
    \n", "    return x + y\n", "    return x + y\n", "    return x + y\nprint(add(2,\
    \ 3))\nprint(add(5, 7))\nprint(add.__doc__)\n\nprint(add.__annotations__)\n",
  "    return x + y\n\n", "    return x + y\n\n", '    return x + y', "    return\
    \ x + y\n```\n\nthe test goes as follows:\n\n```python\n>>> from doctest import\
    \ testmod\n>>> testmod()\nTestResults(failed=0, attempted=2)\n```\n\nto run it\
    \ in verbose mode, `testmod(verbose=True)`", "    return x + y\n\n", "    return\
    \ x + y\n\n", "    return x + y\n", "    return x + y\n\n\nadd(2, 3)\n", "   \
    \ return x + y\n\n", "    return x + y\n\n", "    return x + y\n", "    return\
    \ x + y\n", "    return x + y\n\n", "    return x + y\n\n", "    return x + y\n\
    \n", "    return x + y\n\nadd(2, 3)\n\nimport doctest\n", "    return x + y\n\n\
    add(2, 3)\n\nimport dis\n\ndis.dis(add)\n\nfrom inspect import getsource\n", " \
    \   return x + y\n", "    return x + y\n", "    return x + y\n\n", "    return\
    \ x + y\n", "    return x + y\n\nimport doctest\ndoctest.testmod()\n", "    return\
    \ x + y\n", "    return x + y\n", "    return x + y\n", "    return x + y\n",
  "    return x + y\n\n", "    return x + y\n", "    return x + y\n\n", "    return\
    \ x + y\n\n", "    return x + y\n\n", "    return x + y\n\n", "    return x +\
    \ y\n```\n\n```bash\n$ python -m doctest -v function.py\n```\n", "    return x\
    \ + y\n", '    return x + y', "    return x + y\n", "    return x + y\n\n", " \
    \   return x + y\n\n\nadd(2, 3)\n\nadd.__annotations__\n\nhelp(add)\n\nexample\
    \ = \"this is a string\"\n\nexample = \"this is\\\n           a string\"\n\nmultiline_string\
    \ = \"\"\"this is \n                     a string\"\"\"\n\nmultiline_string\n\n\
    example = \"\"\"\nA string that you \"don't\" have to escape\nThis\nis a  .......\
    \ multi-line\nheredoc string --------> example\n\"\"\"\n\nexample\n\nexample =\
    \ '''\nA string that you \"don't\" have to escape\nThis\nis a  ....... multi-line\n\
    heredoc string --------> example\n'''\n\nexample\n\na = \"Hello\"\nb = \"World\"\
    \nprint(a + b)\n\na = \"Hello\"\nb = \"World\"\nprint(a, b)\n\na = \"Hello\"\n\
    b = \"World\"\nprint(a, b, sep=\"***\")\n\na = \"Hello\"\nb = \"World\"\nprint(a,\
    \ b, sep=\"\")\n\nprint(\"a\", \"b\", \"c\", sep=\"-\")\n\nprint(\"a\", \"b\"\
    , \"c\", sep=\"sep\")\n\nprint(\"a\", \"b\", \"c\", sep=\"\", end=\"\\n\\n\")\n\
    \nprint(\"a\", \"b\", \"c\", sep=\"\", end=\"\")\n\na = \"Hello\"\nb = \"World\"\
    \nprint(a, b, sep=\"\", end=\"\\n\\n\")\n\nprint(\"a\", \"b\", \"c\", sep=\"\"\
    , end=\"\\n\\n\")\n\nprint(\"%s %s %s\" % (\"a\", \"b\", \"c\"))\n\nprint(\"%s\
    \ %s %s\" % (\"a\", \"b\", \"c\"), end=\"\\n\\n\")\n\nprint(\"Hello {}\".format(\"\
    Ram\"))\n\nprint(\"Hello {name}\".format(name=\"Ram\"))\n\nprint(\"Hello {0}\"\
    .format(\"Ram\"))\n\nprint(\"Hello {0} {1}\".format(\"Ram\", \"Shyam\"))\n\nprint(\"\
    Hello {1} {0}\".format(\"Ram\", \"Shyam\"))\n\nprint(\"Hello {1} {0} {1", "  \
    \  return x + y\n\n", "    return x + y\n\n", "    return x + y\nadd(2, 3)\n\n\
    add.__doc__\n", "    return x + y\n", "    return x + y\nadd(2, 3)\n\nadd.__doc__\n\
    \nhelp(add)\n", "    return x + y\n\n", "    return x + y\nadd(2, 3)\n \n \n ",
  "    return x + y\n\n", "    return x + y\n\n", "    return x + y\n", "    return\
    \ x + y\n", "    return x + y\n\n", "    return x + y\n", "    return x + y\n\n",
  "    return x + y\n\n", "    return x + y\n", "    return x + y\n", "    return\
    \ x + y\n\n", "    return x + y\n\nadd.__doc__\n\nhelp(add)\n\nhelp(add)\n\nhelp(int)\n",
  "    return x + y\n", "    return x + y\n\n", "    return x + y\nadd(5,7)\n", " \
    \   return x + y\n\nprint(add(2, 3))", "    return x + y\n", "    return x + y\n\
    \ \nadd(2, 2)\n", "    return x + y\n", "    return x + y\n\n\n@pluggable", " \
    \   return x + y\nadd(2, 3)\n\nadd.__doc__\n\nhelp(add)\n\nprint(add.__doc__)\n",
  "    return x + y\n\n", "    return x + y\n", "    return x + y\n\n", "    return\
    \ x + y\n\n", "    return x + y\n", "    return x + y\n\n", "    return x + y\n\
    \n\nadd(2, 3)\n\n", "    return x + y\n\n", "    return x + y\n", "    return\
    \ x + y\n\n", "    return x + y\n", "    return x + y\n\nadd(1, 2)\n\nhelp(add)\n",
  "    return x + y\n\n", "    return x + y\nadd(2, 3)\n", "    return x + y\nadd(2,\
    \ 3)\n", "    return x + y\n\n\nprint(add(5, 5))\nprint(add(2, 3))\nprint(add(5,\
    \ 7))\n\nimport doctest\n\ndoctest.testmod()", "    return x + y\n", "    return\
    \ x + y\n", "    return x + y\n\n", "    return x + y\n", "    return x + y\n\n",
  "    return x + y\n\n", "    return x + y\n\nadd(2, 3)\n\nprint(add.__doc__)\n\n\
    print(add.__annotations__)", "    return x + y\n\n", "    return x + y\n", " \
    \   return x + y\n\n", "    return x + y\n\n", "    return x + y\n```\n\nNow,\
    \ the docstring becomes part of the function object, accessible via the ``.__doc__``\
    \ property.\n\nFor example:\n\n```python\nadd.__doc__\n```\n\n```python\n'Add\
    \ two numbers x and y\\n    >>> add(2, 3)\\n    5\\n    >>> add(5, 7)\\n    12\\\
    n    '\n```\n\nNow, ``add.__doc__`` is a multiline string.\n\nIt is common to\
    \ see that this multiline string is pretty-printed, when the function is invoked,\
    \ for example in the IPython console:\n\n```python\nhelp(add)\n```\n\n```python\n\
    Help on function add in module __main__:\n\nadd(x: int, y: int) -> int\n    Add\
    \ two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n```\n",
  "    return x + y\n\nadd.__annotations__\n", "    return x + y\n\n", "    return\
    \ x + y\n", "    return x + y\n```\n\n```\npdoc --html .\\pdoc\\src\\pdoc\\pdoc.py\n\
    ```\n[pdoc](https://pdoc3.github.io/pdoc/)\n", "    return x + y\n\n", "    return\
    \ x + y\n", "    return x + y\n\n", "    return x + y\n", "    return x + y\n",
  "    return x + y\n", "    return x + y\n", "    return x + y\n\n\n@typechecked",
  "    return x + y\n\nhelp(add)\n", "    return x + y\n\n\nprint(add(5, 7))\nprint(add(2,\
    \ 3))\nprint(add(2, 3))\nprint(add(2, 3))\n", "    return x + y\n", "    return\
    \ x + y\n\n", "    return x + y\nadd(2, 3)\nadd(5, 7)\nadd(1, 1)\nadd(2, 3)\n\
    add(5, 7)\nadd(1, 1)\nadd(2, 3)\nadd(5, 7)\nadd(1, 1)\nadd(2, 3)\nadd(5, 7)\n\
    add(1, 1)\n", "    return x + y\n", "    return x + y\n\n", "    return x + y\n",
  "    return x + y\n", "    return x + y\nadd(2, 3)\n", "    return x + y\n\n", " \
    \   return x + y\n\n", "    return x + y\n\n", "    return x + y\n\n", "    return\
    \ x + y\n\n", "    return x + y\n\n", "    return x + y\n\n", "    return x +\
    \ y\n\n", "    return x + y\n\n\nprint(add(2, 3))\nprint(add(5, 7))\n\nprint(add.__doc__)\n",
  "    return x + y\n\nadd(2, 3)\n", "    return x + y\n\nprint(\"\\n *****Function\
    \ Annotations*****\\n\")\nprint(add.__annotations__)", "    return x + y\n\n",
  "    return x + y\n\n", "    return x + y\n", "    return x + y\n\n", "    return\
    \ x + y\n\n\n@pytest.mark.parametrize(\"x, y, z\", [\n    (2, 3, 5),\n    (5,\
    \ 7, 12),\n])", "    return x + y\n\n", "    return x + y\n", "    return x +\
    \ y\n\nhelp(add)\nadd(10, 20)\n\nimport re\n", "    return x + y\n\n\nprint(add(2,\
    \ 3))\nprint(add(5, 7))\n\ntry:\n    print(add('two', 'three'))\nexcept TypeError\
    \ as e:\n    print('Error: {}'.format(e))\n\ntry:\n    print(add(2, 'three'))\n\
    except TypeError as e:\n    print('Error: {}'.format(e))\n\ntry:\n    print(add(5,\
    \ 7.5))\nexcept TypeError as e:\n    print('Error: {}'.format(e))\n\nprint(add(5,\
    \ 7.5))", "    return x + y\n", "    return x + y\n", "    return x + y\n\n",
  "    return x + y\n\n", "    return x + y\n    ", "    return x + y\n", "    return\
    \ x + y\n\nadd.__doc__\n", "    return x + y\n", "    return x + y\n\n", "   \
    \ return x + y\n```\n\n```bash\n$ pytest -v test_docs.py\n==============================================\
    \ test session starts ===============================================\nplatform\
    \ darwin -- Python 3.7.6, pytest-5.4.1, py-1.8.1, pluggy-0.13.1\nrootdir: /Users/tomokokawase/Documents/GitHub/python_unit_testing\n\
    collected 2 items\n\ntest_docs.py::test_add PASSED                           \
    \                                                   [ 50%]\ntest_docs.py::test_add_documentation\
    \ PASSED                                                                 [100%]\n\
    \n================================================= 2 passed in 0.04s =================================================\n\
    ```\n", "    return x + y\n\n", "    return x + y\n", "    return x + y\n\n",
  "    return x + y\n\n", "    return x + y\n", "    return x + y\n\n", "    return\
    \ x + y\n", "    return x + y\n\n\nadd.__annotations__\n\nadd(5, 7)\n", "    return\
    \ x + y\n\n", "    return x + y\n\n", "    return x + y\n\n", "    return x +\
    \ y\n\n", "    return x + y\n\n", "    return x + y\n", "    return x + y\n\n",
  "    return x + y\n", "    return x + y\n    # add(x, y) -> int\n    # add(2, 3)\
    \ -> 5\n    # add(5, 7) -> 12\n", "    return x + y\n\n", "    return x + y\n",
  "    return x + y\n\n", "    return x + y\n\n\n@click.command()\n@click.option('--x',\
    \ type=float, required=True, help='The first number.')\n@click.option('--y', type=float,\
    \ required=True, help='The second number.')", "    return x + y\n\n", "    return\
    \ x + y\n", "    return x + y\n", "    return x + y\n\nadd(2, 3)\nadd(2, '3')\n",
  "    return x + y\n\n", "    return x + y\n\n\n@lru_cache()", "    return x + y\n\
    \ \n ", "    return x + y\n\n", "    return x + y\n\n", "    return x + y\n\n",
  "    return x + y\n\n", "    return x + y\n\n", "    return x + y\n\n", "    return\
    \ x + y\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
