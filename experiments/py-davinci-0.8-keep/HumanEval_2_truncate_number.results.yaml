name: HumanEval_2_truncate_number
language: py
results:
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpel2lips6.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpel2lips6.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpel2lips6.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpel2lips6.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    return number - int_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4hh16cs.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpo4hh16cs.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpo4hh16cs.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpo4hh16cs.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05hspdlz.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp05hspdlz.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp05hspdlz.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp05hspdlz.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3gfoprj5.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp3gfoprj5.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3gfoprj5.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp3gfoprj5.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # TODO: implement the function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1aqtg_0o.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1aqtg_0o.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1aqtg_0o.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    truncated_number = str(number).split('.')[1]\n    return\
    \ float('0.' + truncated_number)\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3lgrqxy.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpb3lgrqxy.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpb3lgrqxy.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpb3lgrqxy.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # TODO: write function body\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnregnx8m.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpnregnx8m.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpnregnx8m.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number is\
    \ negative\")\n    return number - int(number)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = math.floor(number)\n    decimal_part\
    \ = number - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88qt0xl9.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp88qt0xl9.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp88qt0xl9.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp88qt0xl9.py\"\
    , line 10, in truncate_number\n    integer_part = math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdrd1ifdy.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpdrd1ifdy.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpdrd1ifdy.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpdrd1ifdy.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n    \nprint(truncate_number(2.765))\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: "0.7650000000000001\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(\"{:.2f}\".format(number - math.floor(number)))\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_1bk6or2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_1bk6or2.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_1bk6or2.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp_1bk6or2.py\"\
    , line 10, in truncate_number\n    return float(\"{:.2f}\".format(number - math.floor(number)))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(str(number).split('.')[1])\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjul8o4yh.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjul8o4yh.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpjul8o4yh.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimals = math.modf(number)\n    return decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplauonuto.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmplauonuto.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmplauonuto.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmplauonuto.py\"\
    , line 10, in truncate_number\n    integer, decimals = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperarvzr4.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmperarvzr4.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmperarvzr4.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmperarvzr4.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5hswpubu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp5hswpubu.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp5hswpubu.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp5hswpubu.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # TODO: rewrite the code below (hint: use math.modf)\n\
    \    # ...\n    # ...\n    # ...\n    # raise NotImplementedError()\n    import\
    \ math\n    return math.modf(number)[0]\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if type(number) is not float:\n        raise ValueError('Expected\
    \ floating point number')\n    return math.modf(number)[0]\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4k8zgvfz.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp4k8zgvfz.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp4k8zgvfz.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp4k8zgvfz.py\"\
    , line 12, in truncate_number\n    return math.modf(number)[0]\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number <= 0:\n        raise ValueError('Cannot truncate\
    \ a non-positive number')\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal = number - int(number)\n    return decimal\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg1sehq3j.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpg1sehq3j.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpg1sehq3j.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpg1sehq3j.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # 2. write your code inside this function\n    # return\
    \ None\n    new_number = float(number)\n    integer_part = math.floor(new_number)\n\
    \    float_part = float(new_number - integer_part)\n    return float_part\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmz_0usjd.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmz_0usjd.py\", line 24,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpmz_0usjd.py\", line\
    \ 19, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpmz_0usjd.py\"\
    , line 13, in truncate_number\n    integer_part = math.floor(new_number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxtuivxv4.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpxtuivxv4.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpxtuivxv4.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpxtuivxv4.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Replace pass above with your code\n    int_part =\
    \ math.floor(number)\n    return number - int_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpffrl2172.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpffrl2172.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpffrl2172.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpffrl2172.py\"\
    , line 11, in truncate_number\n    int_part = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9xascl4.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpf9xascl4.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpf9xascl4.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpf9xascl4.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyy_d9spz.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpyy_d9spz.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpyy_d9spz.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpyy_d9spz.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdr9yok9.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpjdr9yok9.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpjdr9yok9.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpjdr9yok9.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8w26wle.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpc8w26wle.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpc8w26wle.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpc8w26wle.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = floor(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalbp50z1.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpalbp50z1.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpalbp50z1.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpalbp50z1.py\"\
    , line 10, in truncate_number\n    integer_part = floor(number)\nNameError: name\
    \ 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # the integer part is not needed so we don't assign\
    \ it to a variable\n    # the decimal part will be assigned to the variable 'number'\n\
    \    _, number = math.modf(number)\n    return number\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6w2s199.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpz6w2s199.py\", line 22,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpz6w2s199.py\", line\
    \ 17, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpz6w2s199.py\"\
    , line 12, in truncate_number\n    _, number = math.modf(number)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8lof1zn.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpa8lof1zn.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpa8lof1zn.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpa8lof1zn.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Check for the proper type of input\n    assert type(number)\
    \ == float, \\\n        f\"The given number must be of type float and is {type(number)}\"\
    \n    # Check for the proper value of input\n    assert number >= 0, f\"The given\
    \ number must be positive and is {number}\"\n\n    decimals, integer = math.modf(number)\n\
    \    return decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevc_d_n4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpevc_d_n4.py\", line 26,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpevc_d_n4.py\", line\
    \ 21, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpevc_d_n4.py\"\
    , line 16, in truncate_number\n    decimals, integer = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdob333n.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjdob333n.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpjdob333n.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpjdob333n.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_2pnz279.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_2pnz279.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_2pnz279.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp_2pnz279.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjk_scolj.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjk_scolj.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpjk_scolj.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpjk_scolj.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimal = divmod(number, 1)\n    return decimal\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number - int(number), 2)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if not isinstance(number, float):\n        raise ValueError(\"\
    Argument should be a floating point number\")\n    if number < 0:\n        raise\
    \ ValueError(\"Argument should be a positive number\")\n    return number - int(number)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = math.floor(number)\n    return number - int_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvf4mr6sl.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvf4mr6sl.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpvf4mr6sl.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpvf4mr6sl.py\"\
    , line 10, in truncate_number\n    int_part = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    pass\n    return number%1\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    if number < 0:\n        raise ValueError(\"Number must\
    \ be positive\")\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Your code here\n    return float(format(number - int(number),\
    \ '.5f'))\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcoy5kvny.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpcoy5kvny.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpcoy5kvny.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpcoy5kvny.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    number_int = int(number)\n    return number - number_int\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimals = split_number(number)\n    return\
    \ decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnpfn8kkd.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpnpfn8kkd.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpnpfn8kkd.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpnpfn8kkd.py\"\
    , line 10, in truncate_number\n    integer, decimals = split_number(number)\n\
    NameError: name 'split_number' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # TODO: complete\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3x5syanl.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3x5syanl.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp3x5syanl.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxbgainfe.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpxbgainfe.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpxbgainfe.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpxbgainfe.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimals = divmod(number, 1)\n    return decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Implement me!\n    return number % 1\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpevxzltr9.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpevxzltr9.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpevxzltr9.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpevxzltr9.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprk6dcily.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmprk6dcily.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmprk6dcily.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmprk6dcily.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9d6dwub.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpy9d6dwub.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpy9d6dwub.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpy9d6dwub.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    leftover = number -\
    \ integer_part\n    return leftover\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = math.floor(number)\n    decimal_part\
    \ = number - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvoebe5j5.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpvoebe5j5.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpvoebe5j5.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpvoebe5j5.py\"\
    , line 10, in truncate_number\n    integer_part = math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    return number - int_part\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimals = (number - math.floor(number))\n    return\
    \ decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert\
    \ candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyir9zmmt.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpyir9zmmt.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpyir9zmmt.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpyir9zmmt.py\"\
    , line 10, in truncate_number\n    decimals = (number - math.floor(number))\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    dec_part = number - int_part\n\
    \    return dec_part\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # float_to_int = int(number)\n    # leftover = number\
    \ - float_to_int\n    # return leftover\n    return number - int(number)\n\n\n\
    def check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # TODO: Implement truncate_number function\n    # Hint:\
    \ use // and % (modulo) operators\n    return number % int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd83t65o_.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpd83t65o_.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpd83t65o_.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpd83t65o_.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    num, dec = math.modf(number)\n    return dec\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn0z7vi_u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpn0z7vi_u.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpn0z7vi_u.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpn0z7vi_u.py\"\
    , line 10, in truncate_number\n    num, dec = math.modf(number)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = math.floor(number)\n    decimal_part\
    \ = number - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp557s_o_h.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp557s_o_h.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp557s_o_h.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp557s_o_h.py\"\
    , line 10, in truncate_number\n    integer_part = math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Try to solve the problem here\n    return\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4odiyfsb.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp4odiyfsb.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp4odiyfsb.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt40j0f7.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpvt40j0f7.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpvt40j0f7.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpvt40j0f7.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe79_fd51.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpe79_fd51.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpe79_fd51.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpe79_fd51.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer, decimals = math.modf(number)\n    return decimals\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpim1us7cw.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpim1us7cw.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpim1us7cw.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpim1us7cw.py\"\
    , line 10, in truncate_number\n    integer, decimals = math.modf(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = math.floor(number)\n    dec_part = number\
    \ - int_part\n    return dec_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpezy238a0.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpezy238a0.py\", line 21,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpezy238a0.py\", line\
    \ 16, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpezy238a0.py\"\
    , line 10, in truncate_number\n    int_part = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # we use integer division to find the integer part\n\
    \    int_part = number // 1\n    return number - int_part\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqm5wfnk.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmplqm5wfnk.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmplqm5wfnk.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = math.floor(number)\n    return number - int_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gbm58pn.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1gbm58pn.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1gbm58pn.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1gbm58pn.py\"\
    , line 10, in truncate_number\n    int_part = math.floor(number)\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_number = int(number)\n    return number - int_number\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1egkrdpc.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp1egkrdpc.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1egkrdpc.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1egkrdpc.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # If a float is passed, use int to get the integer part\
    \ and subtract it\n    # from the original float.\n    return number - int(number)\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gn8o2nv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp2gn8o2nv.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp2gn8o2nv.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp2gn8o2nv.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf45damrz.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpf45damrz.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpf45damrz.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1qr4sijx.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp1qr4sijx.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp1qr4sijx.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp1qr4sijx.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0fpbel8b.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp0fpbel8b.py\", line 18,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp0fpbel8b.py\", line\
    \ 13, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp0fpbel8b.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    intpart = floor(number)\n    return number - intpart\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbwh8byg0.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpbwh8byg0.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpbwh8byg0.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpbwh8byg0.py\"\
    , line 10, in truncate_number\n    intpart = floor(number)\nNameError: name 'floor'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    str_number = str(number)\n    for i in range(len(str_number)):\n\
    \        if str_number[i] == '.':\n            return float(str_number[i+1:])\n\
    \    return 0\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n \
    \   assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef\
    \ test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp71hsxqk_.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp71hsxqk_.py\", line 23,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp71hsxqk_.py\", line\
    \ 18, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    leftover = number -\
    \ integer_part\n    return leftover\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ciutn7b.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_ciutn7b.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_ciutn7b.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    decimal_part = number\
    \ - integer_part\n    return decimal_part\n\n\ndef check(candidate):\n    assert\
    \ candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0)\
    \ == 0.0\n\ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvn16dlt.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpuvn16dlt.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpuvn16dlt.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpuvn16dlt.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return round(number - math.floor(number), 1)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqu4ubdj.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmprqu4ubdj.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmprqu4ubdj.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmprqu4ubdj.py\"\
    , line 10, in truncate_number\n    return round(number - math.floor(number), 1)\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_part = int(number)\n    return number - int_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    ...\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6vnajiu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpm6vnajiu.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpm6vnajiu.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - math.floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp83aoqvbj.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp83aoqvbj.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp83aoqvbj.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp83aoqvbj.py\"\
    , line 10, in truncate_number\n    return number - math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return abs(number - math.floor(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_goewio0.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp_goewio0.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp_goewio0.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp_goewio0.py\"\
    , line 10, in truncate_number\n    return abs(number - math.floor(number))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - floor(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatjvvoyi.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpatjvvoyi.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpatjvvoyi.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpatjvvoyi.py\"\
    , line 10, in truncate_number\n    return number - floor(number)\nNameError: name\
    \ 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return float(number - int(number))\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    decimal_part = number - int(number)\n    return decimal_part\n\
    \ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return math.modf(number)[0]\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38oamzqw.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp38oamzqw.py\", line 19,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmp38oamzqw.py\", line\
    \ 14, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmp38oamzqw.py\"\
    , line 10, in truncate_number\n    return math.modf(number)[0]\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_number = int(number)\n    decimals = number - int_number\n\
    \    return decimals\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # do not touch this code\n    integer_part = int(number)\n\
    \    return number - integer_part\n\n\ndef check(candidate):\n    assert candidate(3.5)\
    \ == 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    integer_part = int(number)\n    return number - integer_part\n\
    \n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert candidate(1.25)\
    \ == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    int_number = math.floor(number)\n    return number -\
    \ int_number\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n  \
    \  assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\ndef test_check():\n\
    \    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhw_ckmx.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxhw_ckmx.py\", line 20,\
    \ in test_check\n    check(truncate_number)\n  File \"/tmp/tmpxhw_ckmx.py\", line\
    \ 15, in check\n    assert candidate(3.5) == 0.5\n  File \"/tmp/tmpxhw_ckmx.py\"\
    , line 10, in truncate_number\n    int_number = math.floor(number)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    # Hint: integer part is given by int(number)\n    return\
    \ number - int(number)\n\n\ndef check(candidate):\n    assert candidate(3.5) ==\
    \ 0.5\n    assert candidate(1.25) == 0.25\n    assert candidate(123.0) == 0.0\n\
    \ndef test_check():\n    check(truncate_number)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive\
    \ floating point number, it can be decomposed into\n    and integer part (largest\
    \ integer smaller than given number) and decimals\n    (leftover part always smaller\
    \ than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n\
    \    0.5\n    \"\"\"\n    return number - int(number)\n\n\ndef check(candidate):\n\
    \    assert candidate(3.5) == 0.5\n    assert candidate(1.25) == 0.25\n    assert\
    \ candidate(123.0) == 0.0\n\ndef test_check():\n    check(truncate_number)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
