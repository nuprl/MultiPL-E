name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["    #dic = {sum(int(i) for i in str(num)):num for num in nums}\n  \
    \  #return [dic[i] for i in sorted(dic.keys())]\n    return sorted(nums, key=lambda\
    \ n: (sum(int(i) for i in str(n)), nums.index(n)))\n", "    def sum_digits(x):\n\
    \        total = 0\n        for digit in str(x):\n            total += int(digit)\n\
    \        return total\n\n    return sorted(nums, key=lambda x: (sum_digits(x),\
    \ nums.index(x)))\n", "    def digit_sum(num):\n        total = 0\n        while\
    \ num > 0:\n            total += num % 10\n            num //= 10\n        return\
    \ total\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))\n",
  "    if not nums:\n        return []\n    nums_with_points = [[num, sum([int(n)\
    \ for n in str(abs(num))])] for num in nums]\n    nums_with_points.sort(key=lambda\
    \ x: x[1])\n    return [n[0] for n in nums_with_points]\n", "    pass\n", "  \
    \  return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n\
    \n", "    return sorted(range(len(nums)), key=lambda i: sum(map(int, str(nums[i]))))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))),\
    \ nums.index(x)))\n", "    sorted_nums = sorted(nums, key=lambda x: (sum(int(digit)\
    \ for digit in str(abs(x))), nums.index(x)))\n    return sorted_nums\n", "   \
    \ def get_sum_of_digits(num: int) -> int:\n        return sum(map(int, str(num)))\n\
    \n    return sorted(nums, key=lambda num: (get_sum_of_digits(num), nums.index(num)))\n\
    \n", "    count = 0\n    nums_with_points = []\n    for num in nums:\n       \
    \ points = 0\n        num_abs = abs(num)\n        while num_abs > 0:\n       \
    \     mod = num_abs % 10\n            points += mod\n            num_abs = num_abs\
    \ // 10\n        nums_with_points.append((points, count, num))\n        count\
    \ += 1\n    nums_with_points.sort()\n    return [nwp[2] for nwp in nums_with_points]\n\
    \n", "    nums.sort(key=lambda x: x % 10 + x // 10)\n    return nums\n", "   \
    \ return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n", "   \
    \ def sum_digits(num: int) -> int:\n        sum = 0\n        while num:\n    \
    \        num, digit = divmod(num, 10)\n            sum += digit\n        return\
    \ sum\n\n    # Base case\n    if len(nums) <= 1:\n        return nums\n\n    pivot\
    \ = nums[0]\n    left = [x for x in nums[1:] if sum_digits(x) < sum_digits(pivot)]\n\
    \    right = [x for x in nums[1:] if sum_digits(x) >= sum_digits(pivot)]\n\n \
    \   return order_by_points(left) + [pivot] + order_by_points(right)\n\n", "  \
    \  return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    if len(nums) == 0:\n        return []\n    # create a list of tuples\
    \ with (index, value)\n    tuples = []\n    for i in range(len(nums)):\n     \
    \   if i == 0:\n            tuples.append((i, nums[i]))\n        else:\n     \
    \       for j in range(len(tuples)):\n                if sum_of_digits(nums[i])\
    \ < sum_of_digits(tuples[j][1]):\n                    tuples.insert(j, (i, nums[i]))\n\
    \                    break\n                elif j == len(tuples) - 1:\n     \
    \               tuples.append((i, nums[i]))\n                    break\n    #\
    \ create the result array\n    res = []\n    for t in tuples:\n        res.append(t[1])\n\
    \    return res\n", "    def total_points(a):\n        if a == 0:\n          \
    \  return a\n        else:\n            return a + total_points(a//10)\n    #\
    \ print(\"Before sort: \" + str(nums))\n    nums = sorted(nums, key=total_points)\n\
    \    # print(\"After sort: \" + str(nums))\n    return nums\n\n", "    return\
    \ sorted(nums, key=lambda num: sum(map(int, str(num))))\n", "    nums.sort(key=lambda\
    \ x: (sum(int(i) for i in str(abs(x))), x))\n    return nums\n", "    # Get sum\
    \ of each digit and sort it\n    nums.sort(key=lambda x: sum(map(int, str(x))))\n\
    \    return nums\n\n", "    return list(sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), x)))\n", "    if len(nums) == 0:\n        return []\n    nums_mapped\
    \ = [\n        (n, sum(map(int, str(abs(n)))))\n        for n in nums\n    ]\n\
    \    return [\n        n for n, _ in sorted(nums_mapped, key=lambda x: (x[1],\
    \ x[0]))\n    ]", "    return sorted(nums, key=lambda x: sum(int(d) for d in str(abs(x))))\n\
    \n", "    dic = {}\n    for index, num in enumerate(nums):\n        if abs(num)\
    \ in dic:\n            dic[abs(num)].append(index)\n        else:\n          \
    \  dic[abs(num)] = [index]\n    nums = sorted(nums, key=lambda x: sum(int(i) for\
    \ i in str(abs(x))))\n    res = [None] * len(nums)\n    for index, num in enumerate(nums):\n\
    \        res[dic[abs(num)].pop(0)] = num\n    return res\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))\n", "    def\
    \ sort_func(l):\n        return sum(map(int, list(str(l))))\n    return sorted(nums,\
    \ key=sort_func)\n\n", "    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(abs(x))), nums.index(x)))\n\n", "    pass\n", "    # TODO: Complete\
    \ this function\n    def get_digit_sum(n):\n        return sum(int(x) for x in\
    \ str(n))\n\n    return sorted(nums, key=lambda n: (get_digit_sum(n), nums.index(n)))\n",
  "    def sum_of_digits(n):\n        return sum(map(int, str(n)))\n\n    return sorted(nums,\
    \ key=lambda num: (sum_of_digits(num), nums.index(num)))\n\n", "    # if nums\
    \ is empty list: return empty list\n    if len(nums) == 0:\n        return []\n\
    \    # create a list of lists\n    # each list element is [index, sum of digits,\
    \ num]\n    lst = []\n    for idx, num in enumerate(nums):\n        lst.append([idx,\
    \ sum(map(int, list(str(abs(num))))), num])\n    # sort the list by sum of digits\
    \ and then by index\n    lst.sort(key=lambda x: (x[1], x[0]))\n    # get only\
    \ nums from the list\n    return [x[2] for x in lst]\n\n", "    return sorted(range(len(nums)),\
    \ key=lambda k: nums[k], reverse=True)\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\nprint(order_by_points([1,\
    \ 11, -1, -11, -12]))", "    return sorted(nums, key=lambda x: sum(int(d) for\
    \ d in str(abs(x))))\n", "    return sorted(nums, key=lambda n: sum(int(d) for\
    \ d in str(n)))\n", "    return sorted(nums, key=lambda n: (sum(map(int, str(abs(n)))),\
    \ n))\n", "    return sorted(range(len(nums)), key=lambda k: sum(map(int, str(nums[k]))))\n",
  "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n",
  "    # Key: point value, Value: original indexes\n    point_map = {}\n    for i,\
    \ num in enumerate(nums):\n        point = 0\n        for digit in str(num):\n\
    \            point += int(digit)\n        point_map.setdefault(point, []).append(i)\n\
    \n    # Restore the original list\n    ordered_nums = [0] * len(nums)\n    ordered_keys\
    \ = sorted(point_map.keys())\n    ordered_indexes = []\n    for key in ordered_keys:\n\
    \        ordered_indexes += point_map[key]\n    for i, index in enumerate(ordered_indexes):\n\
    \        ordered_nums[i] = nums[index]\n    return ordered_nums\n\n", "    return\
    \ sorted(nums, key=lambda num: (sum(map(int, str(abs(num)))), nums.index(num)))\n\
    \n", "    # Your code goes here\n    d = {}\n    for i, num in enumerate(nums):\n\
    \        total = sum(map(int, list(str(abs(num)))))\n        d[num] = total\n\
    \    return sorted(nums, key=lambda x: (d[x], x))\n\n", "    def sum_of_digits(n):\n\
    \        sum = 0\n        for digit in str(n):\n            sum += int(digit)\n\
    \        return sum\n\n    nums.sort(key=sum_of_digits)\n    return nums\n\n",
  "    tmp_dict = {}\n    for i, val in enumerate(nums):\n        tmp_dict[i] = [sum(int(x)\
    \ for x in str(val)), val]\n    tmp_dict = sorted(tmp_dict.items(), key=lambda\
    \ x: (x[1][0], x[0]))\n    return [tmp_dict[i][1][1] for i in range(len(tmp_dict))]\n",
  "    # Function to return the sum of digits of a number\n    sum_digits = lambda\
    \ x: sum(map(int, str(x)))\n    return sorted(nums, key=lambda x: (sum_digits(x),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n", "    if not nums:\n        return []\n    sum_digit = lambda\
    \ x: sum(map(int, str(x)))\n    return sorted(nums, key=lambda x: (sum_digit(x),\
    \ nums.index(x)))", "    def get_sum_of_digits(n: int) -> int:\n        return\
    \ sum(map(int, str(n)))\n\n    return sorted(nums, key=lambda n: (get_sum_of_digits(n),\
    \ nums.index(n)))\n", "    if not nums:\n        return []\n    sums = [[sum(map(int,\
    \ str(num))), i, num] for i, num in enumerate(nums)]\n    sums.sort()\n    return\
    \ [item[2] for item in sums]\n", "    if len(nums) == 0:\n        return []\n\
    \    else:\n        points = []\n        for elem in nums:\n            points.append(abs(elem)\
    \ % 10 + abs(elem) // 10)\n        return [nums[x] for x in sorted(range(len(points)),\
    \ key=lambda i: (points[i], i))]", "    res = sorted(nums, key=lambda x: sum(map(int,\
    \ str(abs(x)))))\n    return res\n\n", "    return sorted(nums, key=lambda x:\
    \ (x % 10 + x // 10, nums.index(x)))\n", "    return sorted(nums, key=lambda x:\
    \ sum(int(i) for i in str(abs(x))))\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    if not nums:\n       \
    \ return []\n    digits = []\n    for num in nums:\n        if num < 0:\n    \
    \        digits.append(sum(map(int, str(num)[1:])))\n        else:\n         \
    \   digits.append(sum(map(int, str(num))))\n    return [num for _, num in sorted(zip(digits,\
    \ nums))]\n", "    return sorted(nums, key=lambda x: (sum(int(digit) for digit\
    \ in str(abs(x))), nums.index(x)))\n\n", "    nums_dict = {}\n    for i, num in\
    \ enumerate(nums):\n        nums_dict[num] = sum(map(int, str(abs(num))))\n\n\
    \    nums_list = list(nums_dict.items())\n    nums_list.sort(key=lambda x: x[1])\n\
    \    sorted_nums = [x[0] for x in nums_list]\n    return sorted_nums\n\n", " \
    \   new_list = []\n    sum_list = []\n    item_list = []\n    sum_dict = {}\n\
    \    for item in nums:\n        sum_num = 0\n        for i in str(item):\n   \
    \         sum_num += int(i)\n        sum_list.append(sum_num)\n        sum_dict[sum_num]\
    \ = item\n    for item in sorted(sum_list):\n        item_list.append(sum_dict[item])\n\
    \    return item_list\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))",
  "    # j = sorted(nums, key=lambda x: sum(int(i) for i in str(abs(x))))\n    # return\
    \ j\n    if len(nums) > 1:\n        mid = len(nums) // 2\n        left = nums[:mid]\n\
    \        right = nums[mid:]\n\n        order_by_points(left)\n        order_by_points(right)\n\
    \n        i = 0\n        j = 0\n        k = 0\n        while i < len(left) and\
    \ j < len(right):\n            if sum(int(num) for num in str(abs(left[i]))) <=\
    \ sum(int(num) for num in str(abs(right[j]))):\n                nums[k] = left[i]\n\
    \                i += 1\n            else:\n                nums[k] = right[j]\n\
    \                j += 1\n            k += 1\n\n        while i < len(left):\n\
    \            nums[k] = left[i]\n            i += 1\n            k += 1\n\n   \
    \     while j < len(right):\n            nums[k] = right[j]\n            j +=\
    \ 1\n            k += 1\n    return nums\n\n", "    return sorted(nums, key=lambda\
    \ n: sum(map(int, str(n))), reverse=True)\n", "    pass\n", "    import functools\n\
    \    import operator\n    return sorted(nums, key=lambda x: sum(map(int, str(x))),\
    \ reverse=False)\n", "    digits = [sum(map(int, str(num))) for num in nums]\n\
    \    return [num for _, num in sorted(zip(digits, nums))]\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n",
  "    def sum_of_digits(num: int) -> int:\n        \"\"\" Sum of num's digits \"\"\
    \"\n        res = 0\n        while num != 0:\n            res += num % 10\n  \
    \          num //= 10\n        return res\n\n    # return sorted(nums, key=sum_of_digits)\n\
    \    # using lambda function\n    return sorted(nums, key=lambda num: sum_of_digits(num))\n\
    \n", "    return [num for num in sorted(sorted(nums), key=lambda x: sum(map(int,\
    \ str(abs(x)))))]\n", "    #return sorted(nums, key=lambda x: abs(x))\n    return\
    \ sorted(nums, key=lambda x: sum(map(int, str(abs(x)))))\n\n", "    return sorted(nums,\
    \ key=get_points)\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n", "    points = [sum(map(int, str(n))) for n in nums]\n    points_index\
    \ = list(enumerate(points))\n    points_index.sort(key=lambda x: (x[1], x[0]))\n\
    \    return [nums[index] for index, point in points_index]\n", "    def sum_digits(x):\n\
    \        return sum(map(int, str(x)))\n\n    return sorted(nums, key=lambda x:\
    \ (sum_digits(x), nums.index(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), nums.index(x)))\n\n", "    return [x for _, x in sorted((sum(int(y)\
    \ for y in str(x)), x) for x in nums)]\n", "    if not nums:\n        return []\n\
    \    elif len(nums) == 1:\n        return nums\n    temp = []\n    for num in\
    \ nums:\n        temp.append((abs(num), str(abs(num)), num))\n    temp.sort()\n\
    \    sorted_nums = []\n    for t in temp:\n        sorted_nums.append(t[2])\n\
    \    return sorted_nums\n\n", "    return sorted(nums, key=lambda x: sum(map(int,\
    \ str(abs(x)))), reverse=True)\n\n", "    return sorted(nums, key=lambda x: (sum(int(i)\
    \ for i in str(abs(x))), x))\n", "    def get_points(n):\n        n = abs(n)\n\
    \        result = 0\n        while n > 0:\n            result += n % 10\n    \
    \        n //= 10\n        return result\n\n    return sorted(nums, key=lambda\
    \ n: (get_points(n), nums.index(n)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n", "    # pass\n    d = {}\n\
    \    for i, num in enumerate(nums):\n        d[num] = d.get(num, 0) + sum(map(int,\
    \ str(abs(num))))\n    return sorted(nums, key=lambda x: (d[x], nums.index(x)))\n",
  "    nums_new = []\n    for num in nums:\n        digits = [int(i) for i in str(num)]\n\
    \        nums_new.append(sum(digits))\n    print(nums_new)\n    return nums\n\n",
  "    if not nums:\n        return []\n    # return sorted(nums, key=lambda x: (sum(int(d)\
    \ for d in str(abs(x))), x))\n    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), x))\n", "    points = [[sum(map(int, list(str(num)))), i, num]\
    \ for i, num in enumerate(nums)]\n    points.sort()\n    return [num for _, _,\
    \ num in points]\n", "    return sorted(nums, key=lambda x: sum(int(digit) for\
    \ digit in str(abs(x))))\n", "    # todo: add solution\n\n", "    d_num = {}\n\
    \    for idx, num in enumerate(nums):\n        d_num[sum(map(int, str(abs(num))))]\
    \ = (idx, num)\n    sorted_d_num = sorted(d_num.items())\n    return [t[1][1]\
    \ for t in sorted_d_num]\n", "    def sum_digits(num: int) -> int:\n        return\
    \ sum(map(int, str(num)))\n\n    return sorted(nums, key=lambda num: (sum_digits(num),\
    \ nums.index(num)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n\n", "    pass\n\n", "    pass\n", "    points = {}\n    for i, num in\
    \ enumerate(nums):\n        sum_digits = sum(int(i) for i in str(abs(num)))\n\
    \        if sum_digits not in points:\n            points[sum_digits] = []\n \
    \       points[sum_digits].append(i)\n    sorted_points = sorted(points.keys())\n\
    \    answer = []\n    for p in sorted_points:\n        indexes = points[p]\n \
    \       for i in indexes:\n            answer.append(nums[i])\n    return answer\n\
    \n", "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))),\
    \ nums.index(x)))\n", "    dct = {}\n    for index, num in enumerate(nums):\n\
    \        dct[num] = sum(map(int, str(abs(num))))\n\n    def compare(x):\n    \
    \    return dct[x]\n\n    return sorted(nums, key=compare)\n\n", "    dict = {i:sum(map(int,\
    \ str(i))) for i in nums}\n    out = sorted(nums, key=lambda x: (dict[x], x))\n\
    \    return out\n", "    # check if there is no number in the given list\n   \
    \ if not nums:\n        return nums\n\n    # convert each number to a string,\
    \ find sum of digits and save in a dictionary\n    # dictionary key is number,\
    \ and value is the sum of its digits\n    sum_dict = {}\n    for num in nums:\n\
    \        sum_dict[num] = sum(map(int, list(str(num))))\n\n    # sort the dictionary\
    \ and return the sorted list\n    sorted_nums = sorted(sum_dict.items(), key=lambda\
    \ x: (x[1], x[0]))\n    return [num[0] for num in sorted_nums]\n", "    # Your\
    \ code here\n    # return [1, 11, -1, -11, -12]\n    new_nums = sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n    return new_nums\n\n", " \
    \   res = sorted(nums, key=lambda n: n if n >= 0 else -n)\n    return [i for i\
    \ in res if i >= 0] + [i for i in res if i < 0]\n", "    # return sorted(nums,\
    \ key=lambda x: x % 10 + x // 10)\n    return sorted(nums, key=lambda x: x % 10\
    \ + x // 10) if nums else []\n\nprint(order_by_points([1, 11, -1, -11, -12]))",
  "    # For a better understand\n    # def sum_digits(num):\n    #     return sum(map(int,\
    \ str(num)))\n    # return sorted(nums, key=sum_digits)\n    return sorted(nums,\
    \ key=lambda num: sum(map(int, str(num))))\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(digit) for digit in str(abs(x))), x))\n", "    nums_str = []\n \
    \   nums_set = set()\n    for i in nums:\n        if i not in nums_set:\n    \
    \        nums_str.append(str(i))\n            nums_set.add(i)\n        else:\n\
    \            nums_str.append(str(i) + 'x')\n            nums_set.add(int(str(i)\
    \ + 'x'))\n    \n    points = {i:sum(map(int, str(i))) for i in nums_set}\n  \
    \  res = [points[int(i)] for i in nums_str]\n    res = list(zip(res, nums_str))\n\
    \    res.sort()\n    res = [int(i[1]) for i in res]\n    return res\n", "    return\
    \ sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \n", "    #TODO: Implement me\n    return sorted(nums, key=lambda x: (sum(int(d)\
    \ for d in str(abs(x))), nums.index(x)))\n", "    nums_dict = {}\n    for i, num\
    \ in enumerate(nums):\n        sum_of_digits = sum(map(int, str(abs(num))))\n\
    \        if sum_of_digits not in nums_dict:\n            nums_dict[sum_of_digits]\
    \ = [num]\n        else:\n            nums_dict[sum_of_digits].append(num)\n \
    \   keys = sorted(nums_dict.keys())\n    result = []\n    for key in keys:\n \
    \       result.extend(nums_dict[key])\n    return result\n\n", "    # loop through\
    \ the list and map to (sum, num)\n    # sort the list by sum, then by index\n\
    \    arr = [(sum(map(int, str(num))), i, num) for i, num in enumerate(nums)]\n\
    \    arr.sort()\n    return [num for _, _, num in arr]\n", "    return sorted(nums,\
    \ key=lambda x: sum(map(int, str(abs(x)))))\n\n", "    def get_sum_of_digits(n:\
    \ int) -> int:\n        return sum(map(int, str(n)))\n\n    return sorted(nums,\
    \ key=lambda x: (get_sum_of_digits(x), nums.index(x)))\n\n", "    sort_map = {}\n\
    \    for i, j in enumerate(nums):\n        if not j:\n            sort_map[j]\
    \ = (0, i)\n        else:\n            sum_digits = abs(j) + sum([int(s) for s\
    \ in str(abs(j))])\n            sort_map[j] = (sum_digits, i)\n    return [j for\
    \ _, j in sorted(sort_map.items(), key=lambda x: x[1])]\n\n", '    return [nums[i]
    for i in sorted(range(len(nums)), key=lambda i: sum(map(int, str(nums[i]))))]',
  "    return sorted(nums, key=lambda item: (sum(map(int, str(item))), nums.index(item)))\n\
    \    \n    ", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(int(i) for\
    \ i in str(abs(x))), nums.index(x)))\n\n", "    if not nums:\n        return []\n\
    \    index_dict = {}\n    for i, num in enumerate(nums):\n        if sum(int(x)\
    \ for x in str(abs(num))) not in index_dict:\n            index_dict[sum(int(x)\
    \ for x in str(abs(num)))] = []\n        index_dict[sum(int(x) for x in str(abs(num)))].append((i,\
    \ num))\n    sorted_index = sorted(index_dict.keys())\n    output = []\n    for\
    \ key in sorted_index:\n        for idx, num in sorted(index_dict[key]):\n   \
    \         output.append(num)\n    return output\n\n", "    # raise NotImplementedError\n\
    \    if not nums:\n        return []\n    return sorted(nums, key=lambda x: sum(int(i)\
    \ for i in str(x)))\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ nums.index(x)))\n    ", "    return sorted(enumerate(nums), key=lambda k: (sum(map(int,\
    \ list(str(k[1])))), k[0]))\n", "    # \u0438\u0434\u0435\u044F: \u043F\u043E\u043B\
    \u0443\u0447\u0438\u0442\u044C \u0441\u043B\u043E\u0432\u0430\u0440\u044C, \u0433\
    \u0434\u0435 \u043A\u043B\u044E\u0447 - \u0441\u0443\u043C\u043C\u0430 \u0446\u0438\
    \u0444\u0440, \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 - \u0441\u043F\u0438\
    \u0441\u043E\u043A \u044D\u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432 \u0441\
    \ \u044D\u0442\u043E\u0439 \u0441\u0443\u043C\u043C\u043E\u0439\n    # \u043F\u043E\
    \u0441\u043B\u0435 \u044D\u0442\u043E\u0433\u043E \u0438\u0441\u043F\u043E\u043B\
    \u044C\u0437\u043E\u0432\u0430\u0442\u044C \u043C\u0435\u0442\u043E\u0434 items()\
    \ \u0434\u043B\u044F \u043F\u0435\u0440\u0435\u0431\u043E\u0440\u0430 \u0441\u043B\
    \u043E\u0432\u0430\u0440\u044F \u0438 \u0443\u043F\u043E\u0440\u044F\u0434\u043E\
    \u0447\u0438\u0442\u044C \u0435\u0433\u043E \u043F\u043E \u043A\u043B\u044E\u0447\
    \u0443\n    # \u0438 \u043F\u043E\u0441\u043B\u0435 \u044D\u0442\u043E\u0433\u043E\
    \ \u043E\u0431\u044A\u0435\u0434\u0438\u043D\u0438\u0442\u044C \u0432\u0441\u0435\
    \ \u0441\u043F\u0438\u0441\u043A\u0438, \u043F\u043E\u043B\u0443\u0447\u0435\u043D\
    \u043D\u044B\u0435 \u0438\u0437 \u0441\u043B\u043E\u0432\u0430\u0440\u044F\n\n\
    \    sum_digit = defaultdict(list)\n    for i, num in enumerate(nums):\n     \
    \   sum_digit[sum(map(int, str(abs(num))))].append((i, num))\n\n    # \u0432\u044B\
    \u0432\u043E\u0434\u0438\u043C \u043F\u043E \u043A\u043B\u044E\u0447\u0443 \u0441\
    \u043B\u043E\u0432\u0430\u0440\u044F\n    for key in sorted(sum_digit.keys()):\n\
    \        yield from sorted(sum_digit[key])\n\n", "    return sorted(nums, key=lambda\
    \ x: sum(map(int, str(abs(x)))), reverse=True)\n", "    def get_sum_digits(num:\
    \ int) -> int:\n        \"\"\"\n        Returns the sum of digits for num.\n \
    \       \"\"\"\n        # NOTE: This solution is based on the recursive solution,\n\
    \        # but because of Python's recursion limit, it is better\n        # to\
    \ use the iterative solution.\n        #\n        # if num == 0:\n        #  \
    \   return 0\n        # else:\n        #     return num % 10 + get_sum_digits(num\
    \ // 10)\n\n        sum_digits = 0\n        while num > 0:\n            sum_digits\
    \ += num % 10\n            num //= 10\n        return sum_digits\n\n    nums_with_sum_digits\
    \ = [\n        (num, get_sum_digits(num)) for num in nums\n    ]\n    nums_with_sum_digits.sort(key=lambda\
    \ x: (x[1], x[0]))\n    return [num for num, _ in nums_with_sum_digits]\n\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\
    \    ", "    if not nums:\n        return []\n    nums_points = []\n    for num\
    \ in nums:\n        points = 0\n        for digit in str(num):\n            points\
    \ += int(digit)\n        nums_points.append([num, points])\n    nums_points.sort(key=lambda\
    \ x: (x[1], x[0]))\n    return [x[0] for x in nums_points]\n\n", "    return sorted(range(len(nums)),\
    \ key=lambda idx: (sum(int(x) for x in str(nums[idx])), idx))\n", "    # Note:\
    \ This is a sample solution, the following is a more optimized solution\n    #\
    \ nums_sum = [(sum(int(i) for i in str(n)), n) for n in nums]\n    # return [n\
    \ for s, n in sorted(nums_sum)]\n\n    # Use a custom key to sort the list\n \
    \   def sum_of_digits(num):\n        \"\"\"\n        Helper function to return\
    \ the sum of the digits of an integer.\n        e.g. sum_of_digits(123) = 6\n\
    \        \"\"\"\n        ans = 0\n        while num > 0:\n            num, digit\
    \ = divmod(num, 10)\n            ans += digit\n        return ans\n\n    # Use\
    \ a custom key to sort the list\n    return sorted(nums, key=sum_of_digits)\n\n",
  "    sorted_nums = []\n    for num in nums:\n        sum_digits = 0\n        for\
    \ digit in str(num):\n            sum_digits += int(digit)\n        sorted_nums.append((sum_digits,\
    \ num))\n    sorted_nums.sort()\n    return [num[1] for num in sorted_nums]\n",
  "    # calculate sum of digits for every element of the list\n    sums = [sum(int(digit)\
    \ for digit in str(num)) for num in nums]\n    # create a list of tuples (sum\
    \ of digits, index in original list)\n    sums_with_index = list(zip(sums, range(len(nums))))\n\
    \    # sort the list\n    sums_with_index.sort()\n    # return the ordered list\
    \ of elements\n    return [nums[item[1]] for item in sums_with_index]\n", "  \
    \  \"\"\"\n    # my first solution\n    def sum_of_digits(num):\n        return\
    \ sum(map(int, list(str(num))))\n\n    return sorted(nums, key=lambda x: (sum_of_digits(x),\
    \ nums.index(x)))\n    \"\"\"\n    # my second solution\n    def sum_of_digits(num):\n\
    \        return sum(map(int, list(str(num))))\n\n    d = {}\n    for i, x in enumerate(nums):\n\
    \        sum_x = sum_of_digits(x)\n        if sum_x not in d:\n            d[sum_x]\
    \ = [x]\n        else:\n            d[sum_x].append(x)\n    return [d[k][i] for\
    \ k in sorted(d.keys()) for i in range(len(d[k]))]\n\n", "    if len(nums) < 2:\n\
    \        return nums\n    else:\n        i = 0\n        while i < len(nums) -\
    \ 1:\n            if sum(map(int, str(nums[i]))) > sum(map(int, str(nums[i + 1]))):\n\
    \                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n               \
    \ i = 0\n            else:\n                i += 1\n        return nums\n", " \
    \   points = {}\n    for i, num in enumerate(nums):\n        num = str(num)\n\
    \        points[i] = sum(int(c) for c in num)\n    sorted_points = sorted(points.items(),\
    \ key=lambda x: x[1])\n    return [nums[idx] for idx, val in sorted_points]\n",
  "    sorted_nums = sorted(nums, key=lambda num: (sum(map(int, str(abs(num)))), nums.index(num)))\n\
    \    return sorted_nums\n\n", "    return sorted(nums, key=lambda x: (sum(int(i)\
    \ for i in str(abs(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(digit) for digit in str(abs(x))), x))\n", "    sums = [sum(map(int,\
    \ str(x))) for x in nums]\n    return [x for _, x in sorted(zip(sums, nums))]\n",
  "    return sorted(nums, key=lambda n: (sum(map(int, str(abs(n)))), n))\n", "  \
    \  return sorted(nums, key=lambda x: (sum(int(i) for i in str(abs(x))), x))\n",
  "    return sorted(nums, key=sum)\n\n", "    return sorted(nums, key=lambda x: (sum(int(char)\
    \ for char in str(abs(x))), nums.index(x)))\n", "    if len(nums) == 0:\n    \
    \    return []\n    else:\n        return sorted(nums, key=sum_digits)\n", " \
    \   sums = [sum(int(x) for x in str(num)) for num in nums]\n    return [num for\
    \ _, num in sorted(zip(sums, nums))]", "    nums_sorted = sorted(nums, key=lambda\
    \ x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n    return nums_sorted\n",
  "    return [x for _, x in sorted(zip([sum([int(c) for c in str(y)]) for y in nums],\
    \ nums))]\n", "    sorted_nums = sorted(\n        sorted(nums, key=lambda x: abs(x)),\n\
    \        key=lambda x: abs(x)%10 + abs(x)//10\n    )\n    return sorted_nums\n\
    \n", "    return sorted(enumerate(nums), key=lambda x: [sum(map(int, str(x[1]))),\
    \ x[0]])\n", "    return list(sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x)))\n", "    dic = {i:sum(int(x) for x in str(i)) for i in nums}\n    return\
    \ [v[0] for v in sorted(dic.items(), key=lambda x: x[1])]\n\n", "    nums_with_points\
    \ = [(num, sum(map(int, str(abs(num))))) for num in nums]\n    nums_with_points.sort(key=lambda\
    \ i: (i[1], i[0]))\n    return [num for num, _ in nums_with_points]\n", "    return\
    \ sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))\n",
  "    d = {sum(map(int, str(i))): i for i in nums}\n    return [d[x] for x in sorted(d.keys())]\n",
  "    # return sorted(nums, key=lambda n: (sum(map(int, str(abs(n)))), n))\n    #\
    \ return sorted(nums, key=lambda n: sum(map(int, str(abs(n)))))\n    return sorted(nums,\
    \ key=lambda n: (sum(map(int, str(abs(n)))), n))\n\n", "    nums_dict = {}\n \
    \   nums_sorted = []\n    for i, n in enumerate(nums):\n        n_lst = [int(x)\
    \ for x in str(n)]\n        n_sum = sum(n_lst)\n        if n_sum in nums_dict:\n\
    \            nums_dict[n_sum].append(i)\n        else:\n            nums_dict[n_sum]\
    \ = [i]\n    sorted_keys = sorted(nums_dict.keys())\n    for key in sorted_keys:\n\
    \        for i in nums_dict[key]:\n            nums_sorted.append(nums[i])\n \
    \   return nums_sorted\n\n", "    nums_sum = sorted([sum(list(map(int, str(num))))\
    \ for num in nums])\n    return [nums[i] for i in range(len(nums)) if sum(list(map(int,\
    \ str(nums[i])))) in nums_sum]\n\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), abs(x)), reverse=True)\n", "    nums.sort(key=lambda x: (sum(map(int,\
    \ str(abs(x)))), x))\n    return nums\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    # populate dictionary\
    \ with sum of each element as key and index as value\n    d = {sum(map(int, str(i))):i\
    \ for i in nums}\n    # convert the dictionary to list\n    l = list(d.values())\n\
    \    # sort the list and return it\n    return sorted(l)\n\n", "    # nlogn\n\
    \    #new_list = sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n   \
    \ #return new_list\n\n    #n^2\n    arr = []\n    for num in nums:\n        temp\
    \ = 0\n        for digit in str(num):\n            temp += int(digit)\n      \
    \  arr.append(temp)\n    for i in range(len(arr)):\n        for j in range(len(arr)\
    \ - 1 - i):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j\
    \ + 1] = arr[j + 1], arr[j]\n                nums[j], nums[j + 1] = nums[j + 1],\
    \ nums[j]\n    return nums\n\n", "    res = sorted(nums, key=lambda x: (sum(map(int,\
    \ str(abs(x)))), x))\n    return res\n", "    points = {item: sum(map(int, str(item)))\
    \ for item in nums}\n    sorted_points = sorted(points.items(), key=lambda x:\
    \ (x[1], x[0]))\n    return [item[0] for item in sorted_points]\n\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n",
  "    new_nums = [x for x in nums]\n    new_nums.sort(key=lambda x:sum(int(n) for\
    \ n in str(abs(x))))\n    return new_nums\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(i) for i in str(abs(x))), nums.index(x)))\n", "    nums_points =\
    \ sorted([\n        (num, sum(int(digit) for digit in str(abs(num))))\n      \
    \  for num in nums\n    ], key=lambda x: (x[1], x[0]))\n    return [num for num,\
    \ _ in nums_points]\n", "    # TODO: your code goes here\n    # return []\n\n\
    \    def get_sum_of_digits(val):\n        val = abs(val)\n        sum_of_digits\
    \ = 0\n        while val > 0:\n            sum_of_digits += val % 10\n       \
    \     val //= 10\n        return sum_of_digits\n\n    points = list(map(get_sum_of_digits,\
    \ nums))\n    _nums = zip(nums, points)\n    _nums = sorted(_nums, key=lambda\
    \ x: (x[1], x[0]))\n    _nums = list(map(lambda x: x[0], _nums))\n    return _nums\n\
    \n", "    def sum_digits(n):\n        return sum(map(int, str(n)))\n\n    return\
    \ sorted(nums, key=lambda x: (sum_digits(x), nums.index(x)))\n", "    # Your code\
    \ here\n    pass\n", "    return sorted(nums, key=lambda num: (sum(map(int, str(abs(num)))),\
    \ nums.index(num)))\n", "    if not nums:\n        return []\n    new_list = [(n,\
    \ sum(map(int, str(abs(n))))) for n in nums]\n    new_list.sort(key=lambda x:\
    \ (x[1], x[0]))\n    return [num[0] for num in new_list]\n", "    return sorted(nums,\
    \ key=lambda n: sum(int(i) for i in str(n)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(abs(x)))), nums.index(x)))\n\n", "    nums_list = []\n\
    \    for x in nums:\n        digit_sum = 0\n        for c in str(x):\n       \
    \     digit_sum += int(c)\n        nums_list.append((x, digit_sum))\n    return\
    \ [y[0] for y in sorted(nums_list, key=lambda x: (x[1], nums.index(x[0])))]\n\n\
    \n", "    pass\n\nprint(order_by_points([1, 11, -1, -11, -12]))\nprint(order_by_points([]))",
  "    return sorted(nums, key=lambda x: (sum(int(y) for y in str(abs(x))), nums.index(x)))\n",
  "    nums_dict = {}\n    for i, num in enumerate(nums):\n        if num == 0:\n\
    \            nums_dict[0] = (i, num)\n        else:\n            nums_dict[sum(map(int,\
    \ str(abs(num))))] = (i, num)\n    nums_dict = sorted(nums_dict.items())\n   \
    \ return [n[1][1] for n in nums_dict]\n\n", "    return sorted(nums, key=lambda\
    \ num: (sum(map(int, str(abs(num)))), nums.index(num)))\n", "    from functools\
    \ import cmp_to_key\n    nums.sort(key=cmp_to_key(lambda a, b: int(str(a + b)[::-1])))\n\
    \    return nums\n", "    # my_list = []\n    # for i in nums:\n    #     my_list.append(sum(map(int,str(i))))\n\
    \    # return sorted(nums, key=my_list.index)\n    return sorted(nums, key=lambda\
    \ x: (sum(map(int,str(x))),nums.index(x)))\n\n", "    return []\n", "    digits_sum\
    \ = []\n    for num in nums:\n        num_str = str(num)\n        digits_sum.append(sum(int(digit)\
    \ for digit in num_str))\n    nums_dic = dict(zip(nums, digits_sum))\n    return\
    \ sorted(nums_dic, key=nums_dic.get)\n", "    # map of numbers and their sum of\
    \ digits\n    map = {}\n    for i, num in enumerate(nums):\n        s = sum(int(x)\
    \ for x in str(num))\n        if not s in map:\n            map[s] = []\n    \
    \    map[s].append(i)\n    # sorting the map by key\n    sorted_map = sorted(map.items(),\
    \ key=lambda item: item[0])\n    # retrieving the numbers in the order of their\
    \ sum of digits\n    res = []\n    for _, indices in sorted_map:\n        for\
    \ i in indices:\n            res.append(nums[i])\n    return res", "    nums_with_digits_sum\
    \ = {sum(map(int, str(n))): n for n in nums}\n    sorted_keys = sorted(nums_with_digits_sum.keys())\n\
    \    sorted_nums = [nums_with_digits_sum[key] for key in sorted_keys]\n    return\
    \ sorted_nums\n", "    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))),\
    \ x))\n\n", "    def sum_digits(num: int) -> int:\n        sum = 0\n        for\
    \ digit in str(num):\n            sum += int(digit)\n        return sum\n\n  \
    \  def get_sum_digits(num: int) -> int:\n        return sum_digits(num)\n\n  \
    \  return sorted(nums, key=get_sum_digits)\n\n", "    # \uAC01 \uC22B\uC790\uB4E4\
    \uC758 digit_sum\uC744 \uBBF8\uB9AC \uAD6C\uD574 \uB193\uB294\uB2E4.\n    digit_sum\
    \ = {num:sum(int(x) for x in str(num)) for num in nums}\n    # digit_sum \uC21C\
    \uC73C\uB85C \uC815\uB82C\uD55C\uB2E4.\n    nums = sorted(nums, key=lambda x:\
    \ digit_sum[x])\n    # digit_sum\uC774 \uAC19\uC740 \uACBD\uC6B0\uC5D0\uB294 \uC6D0\
    \uB798\uC758 \uC21C\uC11C\uB300\uB85C \uC815\uB82C\uD55C\uB2E4.\n    digit_sum\
    \ = sorted(digit_sum.items(), key=lambda x: x[1])\n    for i in range(len(digit_sum)\
    \ - 1):\n        if digit_sum[i][1] == digit_sum[i+1][1]:\n            index =\
    \ nums.index(digit_sum[i][0])\n            nums[index], nums[index+1] = nums[index+1],\
    \ nums[index]\n    return nums\n\n", "    return sorted(range(len(nums)), key=lambda\
    \ i: sum(map(int, str(nums[i]))))\n\n", "    return sorted(nums, key=lambda item:\
    \ (sum(int(digit) for digit in str(item)), nums.index(item)))\n\n", "    key =\
    \ lambda i: sum(int(j) for j in str(i))\n    return sorted(nums, key=key)", " \
    \   return sorted(nums, key=lambda x: (sum(int(n) for n in str(abs(x))), nums.index(x)))\n",
  "    def sum_digit(n):\n        return sum(int(i) for i in str(n))\n\n    return\
    \ sorted(nums, key=lambda x: (sum_digit(x), nums.index(x)))\n\n", "    nums_with_points\
    \ = list(map(lambda a: (a, sum(map(int, str(abs(a))))), nums))\n    nums_with_points.sort(key=lambda\
    \ a: (a[1], a[0]))\n    return list(map(lambda a: a[0], nums_with_points))", " \
    \   return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))),\
    \ nums.index(x)))\n", "    pass\n\n", "    return sorted(nums, key=lambda x: (sum(int(c)\
    \ for c in str(abs(x))), x))\n", "    return sorted(nums, key=lambda n: (sum(map(int,\
    \ str(abs(n)))), n))\n", "    def points(num):\n        return sum(int(x) for\
    \ x in str(num))\n\n    return sorted(nums, key=lambda x: (points(x), x))\n",
  "    a = dict()\n    for i, n in enumerate(nums):\n        a[i] = sum(map(int, str(abs(n))))\n\
    \    return [nums[i] for i in sorted(a, key=a.get)]", "    sorted_dict = {}\n\
    \    for index, value in enumerate(nums):\n        if str(value) != \"-\":\n \
    \           num_sum = sum(int(i) for i in str(value))\n        else:\n       \
    \     num_sum = sum(int(i) for i in str(value)[1:])\n        if num_sum not in\
    \ sorted_dict:\n            sorted_dict[num_sum] = [value]\n        else:\n  \
    \          sorted_dict[num_sum].append(value)\n    # print(sorted_dict)\n    sorted_list\
    \ = []\n    for key in sorted(sorted_dict):\n        for value in sorted_dict[key]:\n\
    \            sorted_list.append(value)\n    return sorted_list\n", "    # your\
    \ code here\n    return sorted(nums, key=lambda num: (sum(map(int, str(abs(num)))),\
    \ nums.index(num)))\n", "    return sorted(nums, key=lambda x: (sum(int(d) for\
    \ d in str(abs(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(c) for c in str(abs(x))), nums.index(x)))\n\n", "    try:\n    \
    \    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), x))\n    except:\n\
    \        return []\n\n\nprint(order_by_points([1, 11, -1, -11, -12]))", "    points\
    \ = {n: sum(map(int, str(n))) for n in nums}\n    nums.sort(key=lambda n: (points[n],\
    \ nums.index(n)))\n    return nums\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
