name: HumanEval_97_multiply
language: py
results:
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return a*b%10\n\ndef check(candidate):\n    assert candidate(148, 412) ==\
    \ 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) ==\
    \ 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpso6q_kbm.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpso6q_kbm.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpso6q_kbm.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    def prod(x: int) -> int:\n        return x if x < 10 else prod(x // 10) *\
    \ (x % 10)\n    return prod(abs(a)) * prod(abs(b))\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccrikhan.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpccrikhan.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpccrikhan.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe15paayz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe15paayz.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpe15paayz.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # multiply(a, b) = multiply(a % 10, b % 10)\n    return (a % 10) * (b % 10)\n\
    \n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    c = 0\n    a = abs(a)\n    b = abs(b)\n    while a>0 and b>0:\n        if\
    \ a%10 == 0 or b%10 == 0:\n            a = a//10\n            b = b//10\n    \
    \    else:\n            c = a%10 * b%10\n            break\n    return c\n\n\n\
    def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fd_257g.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8fd_257g.py\", line 35,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp8fd_257g.py\", line 25,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a%10)*(b%10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3swwmvj7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3swwmvj7.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp3swwmvj7.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\ndef check(candidate):\n    assert candidate(148, 412)\
    \ == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9h0q3jyy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9h0q3jyy.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp9h0q3jyy.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # your code here\n    a = str(a)\n    b = str(b)\n    if a[-1] == '-':\n\
    \        a = '-' + a[0]\n    if b[-1] == '-':\n        b = '-' + b[0]\n    return\
    \ int(a[-1]) * int(b[-1])\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    def _get_unit_digit(n: int) -> int:\n        return n % 10\n    # end _get_unit_digit\n\
    \    return _get_unit_digit(a) * _get_unit_digit(b)\ndef check(candidate):\n \
    \   assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n   \
    \ assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n   \
    \ assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp21qj2zi1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp21qj2zi1.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp21qj2zi1.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a, b = map(abs, (a, b))\n    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # Your code here\n    return abs(a) * abs(b) % 10\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp52p267b8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp52p267b8.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp52p267b8.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp21t7llu_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp21t7llu_.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp21t7llu_.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit\n\n\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vi192fw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp7vi192fw.py\", line 23,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp7vi192fw.py\", line 13,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a_last = a % 10\n    b_last = b % 10\n    return a_last * b_last\n\n\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkplhp38a.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkplhp38a.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpkplhp38a.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    if a == 0 or b == 0:\n        return 0\n    return (a * b) % 10\n\n\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkyvveoq.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfkyvveoq.py\", line 27,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpfkyvveoq.py\", line 17,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptl46jd8g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptl46jd8g.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmptl46jd8g.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n \n\n@test.describe('Example Tests')\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf394tj77.py\", line\
    \ 14, in <module>\n    @test.describe('Example Tests')\nNameError: name 'test'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return a % 10 * b % 10\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\n\
    print(multiply(2020, 1851))\nprint(multiply(14,-15))\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "6\n2\n0\n0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xqlxhvn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9xqlxhvn.py\", line 28,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp9xqlxhvn.py\", line 18,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return a*b\n\n\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020,\
    \ 1851))\nprint(multiply(14, -15))\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: "60976\n532\n3739020\n-210\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplba2scr5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplba2scr5.py\", line 29,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmplba2scr5.py\", line 19,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\n\ndef check(candidate):\n \
    \   assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n   \
    \ assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n   \
    \ assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz083kpmu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz083kpmu.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpz083kpmu.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1htp9s4i.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1htp9s4i.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp1htp9s4i.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpav4pkp7p.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpav4pkp7p.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpav4pkp7p.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # get the rightmost digit\n    return (a%10) * (b%10)\n\nprint(multiply(148,\
    \ 412)) # should return 16\nprint(multiply(19, 28)) # should return 72\nprint(multiply(2020,\
    \ 1851)) # should return 0\nprint(multiply(14,-15)) # should return 20\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "16\n72\n0\n20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    multi = 1\n    for num in str(a) + str(b):\n        if int(num) > 0:\n  \
    \          multi *= int(num)\n    return multi\n\n\ndef check(candidate):\n  \
    \  assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyw_nj5nl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpyw_nj5nl.py\", line 29,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpyw_nj5nl.py\", line 19,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return 0 if a == 0 or b == 0 else (a * b) % 10\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2e2fgbf8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2e2fgbf8.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp2e2fgbf8.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    if a * b == 0:\n        return 0\n    return (a * b) % 10\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpopx4vbac.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpopx4vbac.py\", line 27,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpopx4vbac.py\", line 17,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a, b = abs(a), abs(b)\n    return (a % 10) * (b % 10)\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18rjg7ci.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp18rjg7ci.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp18rjg7ci.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1x5z91rc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1x5z91rc.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp1x5z91rc.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    def get_digit(n: int) -> int:\n        if n < 0:\n            n = -n\n  \
    \      return int(str(n)[-1])\n    return get_digit(a) * get_digit(b)\n\nprint(multiply(148,\
    \ 412)) # should return 16.\nprint(multiply(19, 28)) # should return 72.\nprint(multiply(2020,\
    \ 1851)) # should return 0.\nprint(multiply(14,-15)) # should return 20.\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "16\n72\n0\n20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg2oe9c3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwg2oe9c3.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpwg2oe9c3.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    prod = str(a * b)\n    if len(prod) == 1:\n        return int(prod)\n   \
    \ return int(prod[-1])\n\n\ndef check(candidate):\n    assert candidate(148, 412)\
    \ == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphfc5foch.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphfc5foch.py\", line 28,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmphfc5foch.py\", line 18,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a*b)[-1])\nmultiply(20, 1)\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5xgpxwqe.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5xgpxwqe.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp5xgpxwqe.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    if b == 0:\n        return 0\n    return (a * (b % 10)) + multiply(a, b //\
    \ 10)\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert\
    \ candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14,\
    \ -15) == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27)\
    \ == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\n\
    def test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88ys8kw0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp88ys8kw0.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp88ys8kw0.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    if 0 in (a, b):\n        return 0\n    return ((a % 10) * (b % 10)) % 10\n\
    \n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4l6_iq37.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp4l6_iq37.py\", line 27,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp4l6_iq37.py\", line 17,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # my solution\n    # if a < 0 or b < 0:\n    #     return int(str(abs(a*b))[-1])\n\
    \    # return int(str(a*b)[-1])\n\n    # best solution\n    return abs(a*b)%10\n\
    def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpym33auk9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpym33auk9.py\", line 29,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpym33auk9.py\", line 19,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\nmultiply(123, 45)\n\nmultiply(19,\
    \ 28)\n\nmultiply(2020, 1851)\n\nmultiply(14,-15)\n\nmultiply(148, 412)\n\nmultiply(88,\
    \ 34)\n\nmultiply(345,6789)\nmultiply(45,234)\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return a*b % 10\n\n\ndef check(candidate):\n    assert candidate(148, 412)\
    \ == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp021a5hs3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp021a5hs3.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp021a5hs3.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfbjx8hp7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfbjx8hp7.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpfbjx8hp7.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\nprint(multiply(148, 412)) \
    \ # 16\nprint(multiply(19, 28))  # 72\nprint(multiply(2020, 1851))  # 0\nprint(multiply(14,\
    \ -15))  # 20\ndef check(candidate):\n    assert candidate(148, 412) == 16\n \
    \   assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n  \
    \  assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert\
    \ candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0,\
    \ 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: "16\n72\n0\n20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # my solution\n    a = abs(a)\n    b = abs(b)\n    if a < 10 and b < 10:\n\
    \        return a * b\n    else:\n        return (a % 10) * (b % 10)\n\n    #\
    \ best practice\n    from operator import mul\n    from functools import reduce\n\
    \    return reduce(mul, (map(int, list(str(abs(a)))) + map(int, list(str(abs(b))))))\n\
    \n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    s = str(a * b)\n    return int(s[-1])\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlwkmily.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxlwkmily.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpxlwkmily.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (int(str(a)[-1]) * int(str(b)[-1]))\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a).strip('-')[-1]) * int(str(b).strip('-')[-1])\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a%10)*(b%10)\n\nmultiply(123,456)\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert\
    \ candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14,\
    \ -15) == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27)\
    \ == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\n\
    def test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplxstxp1y.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmplxstxp1y.py\", line 23,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmplxstxp1y.py\", line 13,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\nmultiply(2, 3) # 6\n\n\"\"\"\nAuthor: dlmacedo\n\
    Date: 2020-05-26\n\"\"\"\ndef check(candidate):\n    assert candidate(148, 412)\
    \ == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgvlp3str.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpgvlp3str.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpgvlp3str.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\nprint(multiply(14,-15))\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a, b = abs(a), abs(b)\n    return a*b % 10\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpne2u8axi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpne2u8axi.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpne2u8axi.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a = abs(a)\n    b = abs(b)\n    return a * b\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwn3bl8fa.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwn3bl8fa.py\", line 27,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpwn3bl8fa.py\", line 17,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n \
    \   assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n  \
    \  assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert\
    \ candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0,\
    \ 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprzu34a7r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmprzu34a7r.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmprzu34a7r.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp55mf8epy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp55mf8epy.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp55mf8epy.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    if abs(a) == 0 or abs(b) == 0:\n        return 0\n    elif a > 0 and b >\
    \ 0:\n        return (a % 10) * (b % 10)\n    elif a < 0 and b < 0:\n        return\
    \ (a % 10) * (b % 10)\n    elif a < 0 and b > 0:\n        return (a % 10) * (b\
    \ % 10)\n    elif a > 0 and b < 0:\n        return (a % 10) * (b % 10)\n\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\nprint(multiply(4,3))\nprint(multiply(4,4))\n\
    print(multiply(0,4))\nprint(multiply(4,0))\nprint(multiply(0,0))\n\nprint(multiply(148,\
    \ 412))\nprint(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))\n\
    \nprint(multiply(8,93))\nprint(multiply(76,3))\nprint(multiply(210,47))\nprint(multiply(11,45))\n\
    print(multiply(3,3))\nprint(multiply(1,1))\nprint(multiply(5,5))\nprint(multiply(9,9))\n\
    print(multiply(0,0))\nprint(multiply(100,100))\nprint(multiply(123,456))\nprint(multiply(512,123))\n\
    print(multiply(10,10))\nprint(multiply(0,10))\nprint(multiply(10,0))\nprint(multiply(100,10))\n\
    print(multiply(10,100))\nprint(multiply(101,101))\nprint(multiply(9999,9999))\n\
    print(multiply(8,9))\nprint(multiply(7,6))\nprint(multiply(2,1))\nprint(multiply(1,2))\n\
    print(multiply(2,2))\nprint(multiply(5,5))\nprint(multiply(9,9))\nprint(multiply(10,10))\n\
    print(multiply(0,10))\nprint(multiply(10,0))\nprint(multiply(100,10))\nprint(multiply(10,100))\n\
    print(multiply(101,101))\nprint(multiply(9999,9999))\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "12\n16\n0\n0\n0\n16\n72\n0\n20\n24\n18\n0\n5\n9\n1\n25\n81\n0\n0\n18\n\
    6\n0\n0\n0\n0\n0\n1\n81\n72\n42\n2\n2\n4\n25\n81\n0\n0\n0\n0\n0\n1\n81\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo20c6t7h.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo20c6t7h.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpo20c6t7h.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    unit_a = a % 10\n    unit_b = b % 10\n    return unit_a * unit_b\n\n\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\nmultiply(2020, 1851) \n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # Implement the function here\n    return None\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjxir661.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsjxir661.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpsjxir661.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    def get_digit(n):\n        if n < 0:\n            n = abs(n)\n        return\
    \ n % 10\n    a_digit = get_digit(a)\n    b_digit = get_digit(b)\n    return a_digit\
    \ * b_digit\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n \
    \   assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n  \
    \  assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert\
    \ candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0,\
    \ 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return (a %\
    \ 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148, 412) ==\
    \ 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) ==\
    \ 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    digit_1 = abs(a) % 10\n    digit_2 = abs(b) % 10\n    return digit_1 * digit_2\n\
    \ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (abs(a) % 10) * (abs(b) % 10)\n\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    import math\n    return (a * b) % 10\n\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuqwn526m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuqwn526m.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpuqwn526m.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n \
    \   assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n  \
    \  assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert\
    \ candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0,\
    \ 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv83n44v7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv83n44v7.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpv83n44v7.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    unit_of_a = abs(a) % 10\n    unit_of_b = abs(b) % 10\n    return unit_of_a\
    \ * unit_of_b\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n\
    \    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n \
    \   assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert\
    \ candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0,\
    \ 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    str_a = str(a)[-1]\n    str_b = str(b)[-1]\n    return int(str_a) * int(str_b)\n\
    \n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return get_unit_digit(a) * get_unit_digit(b)\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_wo7ws_7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_wo7ws_7.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp_wo7ws_7.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\n  File \"/tmp/tmp_wo7ws_7.py\"\
    , line 11, in multiply\n    return get_unit_digit(a) * get_unit_digit(b)\nNameError:\
    \ name 'get_unit_digit' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\nprint(multiply(148, 412)) # 16\nprint(multiply(19,\
    \ 28)) # 72\nprint(multiply(2020, 1851)) # 0\nprint(multiply(14,-15)) # 20\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "16\n72\n0\n20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return ((a % 10) * (b % 10))\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2d8lxmoc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2d8lxmoc.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp2d8lxmoc.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    prod = a * b\n    return int(str(prod)[-1])\n\nprint(multiply(148, 412))\n\
    print(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))\n\
    \nprint('multiply')\n\ndef check(candidate):\n    assert candidate(148, 412) ==\
    \ 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) ==\
    \ 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: "6\n2\n0\n0\nmultiply\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b6q481d.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2b6q481d.py\", line 32,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp2b6q481d.py\", line 22,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpul7i3jz5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpul7i3jz5.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpul7i3jz5.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a, b = abs(a), abs(b)\n    return (a % 10) * (b % 10)\nfrom typing import\
    \ List\nfrom typing import Union\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (abs(a) % 10) * (abs(b) % 10)\n\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl2asvj0g.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpl2asvj0g.py\", line 23,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpl2asvj0g.py\", line 13,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (abs(a) % 10) * (abs(b) % 10)\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (abs(a)%10)*(abs(b)%10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return str(a)[-1] * str(b)[-1]\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpan5pkyti.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpan5pkyti.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpan5pkyti.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\n  File \"/tmp/tmpan5pkyti.py\"\
    , line 11, in multiply\n    return str(a)[-1] * str(b)[-1]\nTypeError: can't multiply\
    \ sequence by non-int of type 'str'\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    product = (a % 10) * (b % 10)\n    return product\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\nmultiply(148, 412) # 16\n\ndef check(candidate):\n \
    \   assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n   \
    \ assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n   \
    \ assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzo1gp098.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzo1gp098.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpzo1gp098.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\nprint(multiply(19, 28))\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "2\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp082_wdpx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp082_wdpx.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp082_wdpx.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\nmultiply(19,28)\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\nprint(multiply(2020, 1851))\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp48lbjmpi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp48lbjmpi.py\", line 28,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp48lbjmpi.py\", line 18,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mgn3gq1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3mgn3gq1.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp3mgn3gq1.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (abs(a) % 10) * (abs(b) % 10)\n\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # your code here\n    return a*b\nprint(multiply(34,45))\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "1530\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfh8iehz1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfh8iehz1.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpfh8iehz1.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    prod = (a * b) % 10\n    return prod\n\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpegsc_5_g.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpegsc_5_g.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpegsc_5_g.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a % 10) * abs(b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) % 10 * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3zif1lb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpp3zif1lb.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpp3zif1lb.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return str(a)[-1] * str(b)[-1]\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpilr9z6nu.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpilr9z6nu.py\", line 23,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpilr9z6nu.py\", line 13,\
    \ in check\n    assert candidate(148, 412) == 16\n  File \"/tmp/tmpilr9z6nu.py\"\
    , line 11, in multiply\n    return str(a)[-1] * str(b)[-1]\nTypeError: can't multiply\
    \ sequence by non-int of type 'str'\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgjoieh0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwgjoieh0.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpwgjoieh0.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\nprint(multiply(14,-15))\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm86_ed05.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm86_ed05.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpm86_ed05.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    prod = (a % 10) * (b % 10)\n    return prod\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\nmultiply(14,-15)\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (abs(a) % 10) * (abs(b) % 10)\n\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    if (a < 0 or b < 0):\n        return -1\n    list_a = [int(i) for i in str(a)]\n\
    \    list_b = [int(i) for i in str(b)]\n    print(list_a, list_b)\n    product\
    \ = list_a[len(list_a)-1] * list_b[len(list_b)-1]\n    return product\n\n\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "[1, 4, 8] [4, 1, 2]\n[1, 9] [2, 8]\n[2, 0, 2, 0] [1, 8, 5, 1]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxsr4cf0p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxsr4cf0p.py\", line 31,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpxsr4cf0p.py\", line 24,\
    \ in check\n    assert candidate(14, -15) == 20\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n   \
    \ assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert\
    \ candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17,\
    \ 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\
    \ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdl7ybqfw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdl7ybqfw.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpdl7ybqfw.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n    \n    \ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\nprint(multiply(148, 412))\nprint(multiply(19,\
    \ 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "16\n72\n0\n20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplb3pgq_e.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplb3pgq_e.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmplb3pgq_e.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\n\nprint(multiply(148, 412))\nprint(multiply(19,\
    \ 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "6\n2\n0\n0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_5wkc0r.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmph_5wkc0r.py\", line 28,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmph_5wkc0r.py\", line 18,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\nprint(multiply(148, 412))\n\
    print(multiply(19, 28))\nprint(multiply(2020, 1851))\nprint(multiply(14, -15))\n\
    def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "16\n72\n0\n20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a*b) % 10\nfrom unittest import TestCase\ntc = TestCase()\ntc.assertEqual(multiply(148,\
    \ 412), 16)\ntc.assertEqual(multiply(19, 28), 72)\ntc.assertEqual(multiply(2020,\
    \ 1851), 0)\ntc.assertEqual(multiply(14,-15), 20)\ntc.assertEqual(multiply(5,-5),\
    \ 0)\ntc.assertEqual(multiply(5,5), 0)\ntc.assertEqual(multiply(5,0), 0)\ntc.assertEqual(multiply(0,5),\
    \ 0)\ntc.assertEqual(multiply(0,0), 0)\n \n \n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8f5wnmu.py\", line\
    \ 14, in <module>\n    tc.assertEqual(multiply(148, 412), 16)\n  File \"/shared/centos7/python/3.8.1-cps/lib/python3.8/unittest/case.py\"\
    , line 912, in assertEqual\n    assertion_func(first, second, msg=msg)\n  File\
    \ \"/shared/centos7/python/3.8.1-cps/lib/python3.8/unittest/case.py\", line 905,\
    \ in _baseAssertEqual\n    raise self.failureException(msg)\nAssertionError: 6\
    \ != 16\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\nprint(multiply(148, 412))\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "16\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # TODO create function to multiply two integer digits\n    return\n\ndef\
    \ check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf2e42mlo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf2e42mlo.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpf2e42mlo.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return a * b % 10\n    \n    \ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7i26jqfd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp7i26jqfd.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp7i26jqfd.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    def pos_multiply(a: int, b: int) -> int:\n        return a*b % 10\n    return\
    \ pos_multiply(abs(a), abs(b)) * (1 if (a>0 and b>0) or (a<0 and b<0) else -1)\n\
    \ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuewtzi4m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuewtzi4m.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpuewtzi4m.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    def unit_digit(x: int) -> int:\n        return int(str(x)[-1])\n    return\
    \ unit_digit(a) * unit_digit(b)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit\nmultiply(19,\
    \ 28)\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n    assert\
    \ candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14,\
    \ -15) == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27)\
    \ == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\n\
    def test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # return (a*b)%10\n    return (a*b)//10%10\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc6t6i9ft.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpc6t6i9ft.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpc6t6i9ft.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\ndef check(candidate):\n    assert candidate(148, 412)\
    \ == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzhsn24yu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzhsn24yu.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpzhsn24yu.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\nprint(multiply(10,7))\nprint(multiply(0,0))\nprint(multiply(14,-15))\n\
    def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "0\n0\n0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2w6wrml0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2w6wrml0.py\", line 27,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp2w6wrml0.py\", line 17,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n \
    \   assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n  \
    \  assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert\
    \ candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0,\
    \ 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0m4nxb33.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0m4nxb33.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp0m4nxb33.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    n = abs(a) * abs(b)\n    if n < 10:\n        return n\n    else:\n      \
    \  return n % 10 * (n // 10 % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgf8h1_vu.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgf8h1_vu.py\", line 29,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpgf8h1_vu.py\", line 19,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    c = str(a)\n    d = str(b)\n    c = int(c[-1])\n    d = int(d[-1])\n    return\
    \ c * d\n\n\nmultiply(148, 412)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a)*abs(b)%10\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeicxc8km.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpeicxc8km.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpeicxc8km.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return 0 if a == 0 or b == 0 else int(str(a)[-1]) * int(str(b)[-1])\n\n\n\
    def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
    \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
    \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
    \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    return (a %\
    \ 10) * (b % 10)\nprint(multiply(148, 412))\nprint(multiply(19, 28))\nprint(multiply(2020,\
    \ 1851))\nprint(multiply(14,-15))\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: "16\n72\n0\n20\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfeee_hy9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfeee_hy9.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpfeee_hy9.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\ndef check(candidate):\n    assert candidate(148, 412)\
    \ == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvt6tekf0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvt6tekf0.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpvt6tekf0.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a%10)*(b%10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a * b) % 10\n\ndef check(candidate):\n    assert candidate(148, 412)\
    \ == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpznlwpk94.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpznlwpk94.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpznlwpk94.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a = a % 10\n    b = b % 10\n    return a * b\n\ndef check(candidate):\n \
    \   assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n   \
    \ assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n   \
    \ assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    # create a dictionary\n    dict = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4,\
    \ '5': 5, '6': 6, '7': 7, '8': 8, '9': 9}\n    # get the last digits\n    a =\
    \ str(a)[-1]\n    b = str(b)[-1]\n    # multiply the values in the dictionary\
    \ and return\n    return dict[a] * dict[b]\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (abs(a) % 10) * (abs(b) % 10)\n\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a % 10) * abs(b % 10)\n    \n    \ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\nmultiply(148, 412)\n\nmultiply(19, 28)\n\nmultiply(2020,\
    \ 1851)\n\nmultiply(14,-15)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a = abs(a) % 10\n    b = abs(b) % 10\n    return a * b\n\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a%10)*(b%10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_gse3qjx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_gse3qjx.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp_gse3qjx.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\nimport unittest\ndef check(candidate):\n  \
    \  assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return a % 10 * b % 10\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7n53tcy8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7n53tcy8.py\", line 24,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmp7n53tcy8.py\", line 14,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a_units = a % 10\n    b_units = b % 10\n    return a_units * b_units\nmultiply(10,\
    \ 10)\n\n\"\"\"\nBest solution:\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp5nbldzuh.py\", line 33\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return a % 10 * b % 10\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf03sg5d1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf03sg5d1.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpf03sg5d1.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return a*b % 10\n\n\ndef check(candidate):\n    assert candidate(148, 412)\
    \ == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmproia21ub.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmproia21ub.py\", line 25,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmproia21ub.py\", line 15,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    import functools\n    import operator\n    return functools.reduce(operator.mul,\
    \ map(int, str(abs(a)) + str(abs(b))))\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwg_79rf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzwg_79rf.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpzwg_79rf.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a%10)*(b%10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    a_unit = int(str(a)[-1])\n    b_unit = int(str(b)[-1])\n    return a_unit\
    \ * b_unit\n\ndef check(candidate):\n    assert candidate(148, 412) == 16\n  \
    \  assert candidate(19, 28) == 72\n    assert candidate(2020, 1851) == 0\n   \
    \ assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n    assert\
    \ candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert candidate(0,\
    \ 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    mult = a * b\n    mult = str(mult)\n    return int(mult[-1])\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmknzabjh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmknzabjh.py\", line 26,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmpmknzabjh.py\", line 16,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n\ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (a % 10) * (b % 10)\n \n \ndef check(candidate):\n    assert candidate(148,\
    \ 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020, 1851)\
    \ == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67) == 42\n\
    \    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n    assert\
    \ candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return abs(a) * abs(b) % 10\nprint(multiply(148, 412))\nprint(multiply(19,\
    \ 28))\nprint(multiply(2020, 1851))\nprint(multiply(14,-15))\n\ndef check(candidate):\n\
    \    assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n  \
    \  assert candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n  \
    \  assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert\
    \ candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
    \    check(multiply)\n\ntest_check()\n"
  stdout: "6\n2\n0\n0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgiknnf1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptgiknnf1.py\", line 28,\
    \ in test_check\n    check(multiply)\n  File \"/tmp/tmptgiknnf1.py\", line 18,\
    \ in check\n    assert candidate(148, 412) == 16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return(int(str(a)[-1]) * int(str(b)[-1]))\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return (abs(a) % 10) * (abs(b) % 10)\n\ndef check(candidate):\n    assert\
    \ candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert candidate(2020,\
    \ 1851) == 0\n    assert candidate(14, -15) == 20\n    assert candidate(76, 67)\
    \ == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0, 1) == 0\n\
    \    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n\
    \    return int(str(a)[-1]) * int(str(b)[-1])\n\n\ndef check(candidate):\n   \
    \ assert candidate(148, 412) == 16\n    assert candidate(19, 28) == 72\n    assert\
    \ candidate(2020, 1851) == 0\n    assert candidate(14, -15) == 20\n    assert\
    \ candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n    assert candidate(0,\
    \ 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n    check(multiply)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
