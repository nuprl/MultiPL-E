name: HumanEval_35_max_element
language: py
prompt: "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    \"\"\
  \"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n \
  \   >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\
  \n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5,\
  \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n\ndef test_check():\n    check(max_element)\n\
  \ntest_check()\n"
completions: ["    n = len(l)\n    assert n > 0\n    i = 1\n    m = l[0]\n    while\
    \ i < n:\n        if l[i] > m:\n            m = l[i]\n        i += 1\n    return\
    \ m\n", "    return max(l)\n", '    return max(l)', "    max_value = l[0]\n  \
    \  for element in l:\n        if element > max_value:\n            max_value =\
    \ element\n    return max_value\n\n", "    if len(l) == 0:\n        return None\n\
    \    else:\n        max_index = 0\n        for i in range(1, len(l)):\n      \
    \      if l[i] > l[max_index]:\n                max_index = i\n        return\
    \ l[max_index]\n", "    max_val = l[0]\n    for element in l:\n        if element\
    \ > max_val:\n            max_val = element\n    return max_val", "    return\
    \ max(l)\n", "    if len(l) == 0:\n        return None\n    else:\n        max\
    \ = l[0]\n        for i in range(len(l)):\n            if l[i] > max:\n      \
    \          max = l[i]\n        return max\n", '    return max(l)', "    return\
    \ max(l)\n", "    if not l:\n        return None\n    max = l[0]\n    for i in\
    \ l:\n        if i > max:\n            max = i\n    return max\n", "    # TODO:\
    \ why does this work with float but not int?\n    max_el = l[0]\n    for element\
    \ in l:\n        if element > max_el:\n            max_el = element\n    return\
    \ max_el\n", "    max_elem = l[0]\n    for num in l:\n        if num > max_elem:\n\
    \            max_elem = num\n    return max_elem\n", "    maximum = l[0]\n   \
    \ for element in l:\n        if element > maximum:\n            maximum = element\n\
    \    return maximum", "    if not l:\n        return None\n    m = l[0]\n    for\
    \ elem in l:\n        if elem > m:\n            m = elem\n    return m\n\nprint(max_element([1,\
    \ 2, 3]))\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n", " \
    \   max = l[0]\n    for e in l:\n        if e > max:\n            max = e\n  \
    \  return max\n", "    mx = l[0]\n    for x in l:\n        if x > mx:\n      \
    \      mx = x\n    return mx\n", "    if len(l) == 0:\n        return None\n \
    \   elif len(l) == 1:\n        return l[0]\n    else:\n        m = max_element(l[1:])\n\
    \        return m if m > l[0] else l[0]\n", "    return max(l)\n", "    max =\
    \ l[0]\n    for e in l:\n        if e > max:\n            max = e\n    return\
    \ max\n", '    return max(l)', "    max_elem = l[0]\n    for x in l:\n       \
    \ if x > max_elem:\n            max_elem = x\n    return max_elem\n\nprint(max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "    assert len(l) > 0, \"Empty list\"\
    \n    max = l[0]\n    for x in l:\n        if x > max:\n            max = x\n\
    \    return max\n", "    if len(l) == 0:\n        return 0\n    else:\n      \
    \  return max(l)\n", "    max_el = l[0]\n    for elem in l:\n        if elem >\
    \ max_el:\n            max_el = elem\n    return max_el\n\n", "    max_element\
    \ = l[0]\n    for element in l:\n        if element > max_element:\n         \
    \   max_element = element\n    return max_element\n", "    return sorted(l)[-1]\n",
  "    if len(l) == 0:\n        return None\n    max_el = l[0]\n    for el in l:\n\
    \        if el > max_el:\n            max_el = el\n    return max_el\n", "   \
    \ return max(l)\n", "    max_elem = l[0]\n    for elem in l:\n        if elem\
    \ > max_elem:\n            max_elem = elem\n    return max_elem\n\n", "    max_\
    \ = l[0]\n    for el in l:\n        if el > max_:\n            max_ = el\n   \
    \ return max_\n", '    pass', "    l.sort()\n    return l[-1]\n", "    return\
    \ sorted(l)[-1]\n", "    if len(l) == 0:\n        return None\n    else:\n   \
    \     return max(l)\n    \n    ", "    if len(l) == 0:\n        return None\n\
    \    elif len(l) == 1:\n        return l[0]\n    else:\n        max_ = l[0]\n\
    \        for i in range(1, len(l)):\n            if l[i] > max_:\n           \
    \     max_ = l[i]\n        return max_\n", "    # TODO: replace with correct implementation\n\
    \    return max(l)\n ", "    max_el = l[0]\n    for i in range(1, len(l)):\n \
    \       if l[i] > max_el:\n            max_el = l[i]\n    return max_el\n", " \
    \   if len(l) == 0:\n        return None\n    max = l[0]\n    for i in range(len(l)):\n\
    \        if l[i] > max:\n            max = l[i]\n    return max", "    assert\
    \ l, \"list cannot be empty\"\n    max_ = l[0]\n    for element in l:\n      \
    \  if element > max_:\n            max_ = element\n    return max_", "    if len(l)\
    \ == 0:\n        return 0\n    if len(l) == 1:\n        return l[0]\n    else:\n\
    \        max = l[0]\n        for i in range(1, len(l)):\n            if l[i] >\
    \ max:\n                max = l[i]\n        return max\n", "    m = l[0]\n   \
    \ for i in l:\n        if i > m:\n            m = i\n    return m\n", "    return\
    \ max(l)\n", "    return max(l)\n", "    m = l[0]\n    for i in l:\n        if\
    \ i > m:\n            m = i\n    return m\n\n", "    m = l[0]\n    for i in l:\n\
    \        if i > m:\n            m = i\n    return m\n\nprint(max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n", "    return sorted(l)[-1]\n", "    m\
    \ = l[0]\n    for i in l:\n        if i > m:\n            m = i\n    return m\n",
  "    return max(l)\n", "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n\
    \            maximum = i\n    return maximum\n", "    max_ele = l[0]\n    for\
    \ i in range(1, len(l)):\n        if l[i] > max_ele:\n            max_ele = l[i]\n\
    \    return max_ele\n", "    m = l[0]\n    for element in l:\n        if element\
    \ > m:\n            m = element\n    return m\n", "    max_elem = l[0]\n    for\
    \ i in range(1, len(l)):\n        if l[i] > max_elem:\n            max_elem =\
    \ l[i]\n    return max_elem\n", "    max_value = l[0]\n    for e in l:\n     \
    \   if e > max_value:\n            max_value = e\n    return max_value\n", " \
    \   max_num = l[0]\n    for i in l:\n        if i > max_num:\n            max_num\
    \ = i\n    return max_num\n", "    pass\n", "    max_element = l[0]\n    for i\
    \ in l:\n        if i > max_element:\n            max_element = i\n    return\
    \ max_element\n", "    return max(l)\n", "    temp = l[0]\n    for i in l:\n \
    \       if i > temp:\n            temp = i\n    return temp\n\n", "    max_elem\
    \ = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_elem:\n      \
    \      max_elem = l[i]\n    return max_elem\n", "    max_ = l[0]\n    for e in\
    \ l:\n        if e > max_:\n            max_ = e\n    return max_\n", "    m =\
    \ l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
  "    index = 0\n    max = l[0]\n    while index < len(l):\n        if l[index] >\
    \ max:\n            max = l[index]\n        index += 1\n    return max", "   \
    \ if not l:\n        return None\n    max_ele = l[0]\n    for ele in l:\n    \
    \    if ele > max_ele:\n            max_ele = ele\n    return max_ele\n", "  \
    \  if len(l) == 0:\n        return None\n    if len(l) == 1:\n        return l[0]\n\
    \    max_elem = l[0]\n    for x in l:\n        if x > max_elem:\n            max_elem\
    \ = x\n    return max_elem\n", "    max_el = l[0]\n    for i in range(1, len(l)):\n\
    \        if l[i] > max_el:\n            max_el = l[i]\n    return max_el\n\n",
  "    maximum = l[0]\n    for elem in l:\n        if elem > maximum:\n          \
    \  maximum = elem\n    return maximum\n", "    max_element = l[0]\n    for elem\
    \ in l:\n        if elem > max_element:\n            max_element = elem\n    return\
    \ max_element\n", "    if not l:\n        return\n    max_elem = l[0]\n    for\
    \ elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    return\
    \ max_elem\n", "    max_element = l[0]\n    for num in l:\n        if num > max_element:\n\
    \            max_element = num\n    return max_element\n\n", "    # YOUR CODE\
    \ HERE\n    return max(l)\n", "    return sorted(l)[-1]\n", "    max = 0\n   \
    \ for i in l:\n        if i > max:\n            max = i\n    return max\n", " \
    \   m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return\
    \ m\n", "    if not l:\n        return 0\n    return max(l)\n", "    return l[l.index(max(l))]\n",
  "    maxi = l[0]\n    for i in l:\n        if i > maxi:\n            maxi = i\n\
    \    return maxi\n", "    max_elem = l[0]\n    for i in range(1, len(l)):\n  \
    \      if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem\n",
  "    return max(l)\n", "    return max(l)\n", "    assert len(l) > 0, \"List is\
    \ empty\"\n    maximum = l[0]\n    for i in range(1, len(l)):\n        if l[i]\
    \ > maximum:\n            maximum = l[i]\n    return maximum", "    max_ = l[0]\n\
    \    for item in l:\n        if item > max_:\n            max_ = item\n    return\
    \ max_\n", "    m = l[0]\n    for i in l:\n        if i > m:\n            m =\
    \ i\n    return m\n", "    # check type of l\n    assert type(l) == list, \"l\
    \ is not a list\"\n    # check if l is not empty\n    assert len(l) > 0, \"l is\
    \ empty\"\n    # check if elements of l are ints\n    assert all([type(element)\
    \ == int for element in l]), \"l does not contain only ints\"\n    # define a\
    \ variable for the maximum\n    maximum = l[0]\n    # visit every element of l\n\
    \    for element in l:\n        # update the maximum\n        if element > maximum:\n\
    \            maximum = element\n    # return the maximum\n    return maximum\n",
  "    if len(l) < 1:\n        raise ValueError(\"List empty\")\n    else:\n     \
    \   return max(l)\n    ", "    max = l[0]\n    for i in l:\n        if i > max:\n\
    \            max = i\n    return max", "    # your code here\n    ", "    if len(l)\
    \ == 0:\n        return 0\n    else:\n        m = l[0]\n        for x in l:\n\
    \            if x > m:\n                m = x\n        return m\n", "    maximum\
    \ = l[0]\n    for x in l:\n        if x > maximum:\n            maximum = x\n\
    \    return maximum\n\nprint(max_element([1, 2, 3]))\nprint(max_element([5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n", "    max = l[0]\n    for i in l:\n  \
    \      if i > max:\n            max = i\n    return max\n", "    max = -1000000\n\
    \    for elem in l:\n        if elem > max:\n            max = elem\n    return\
    \ max\n", "    mx = l[0]\n    for x in l:\n        if x > mx:\n            mx\
    \ = x\n    return mx\n", "    if len(l) == 0:\n        return None\n    if len(l)\
    \ == 1:\n        return l[0]\n    if len(l) == 2:\n        return l[0] if l[0]\
    \ > l[1] else l[1]\n    if len(l) > 2:\n        m = max_element(l[1:])\n     \
    \   return l[0] if l[0] > m else m\n\n", "    return max(l)\n", "    if not l:\n\
    \        return None\n    else:\n        max_ = l[0]\n        for e in l:\n  \
    \          if e > max_:\n                max_ = e\n        return max_\n", " \
    \   # ...\n", "    r = l[0]\n    for i in l:\n        if i > r:\n            r\
    \ = i\n    return r\n", "    # return l[-1]\n    # return l[2]\n    # return l[1]\n\
    \    # return l[2]\n    # return l[1]\n    # return l[-1]\n    # return l[0]\n\
    \    # return l[0]\n    # return l[1]\n    # return l[1]\n    # return l[2]\n\
    \    # return l[1]\n    # return l[2]\n    # return l[-1]\n    # return l[1]\n\
    \    # return l[1]\n    # return l[-1]\n    # return l[0]\n    # return l[-1]\n\
    \    # return l[0]\n    # return l[-1]\n    # return l[-1]\n    # return l[0]\n\
    \    # return l[-1]\n    # return l[1]\n    # return l[0]\n    # return l[-1]\n\
    \    # return l[0]\n    # return l[1]\n    # return l[0]\n    # return l[0]\n\
    \    # return l[-1]\n    # return l[0]\n    # return l[0]\n    # return l[0]\n\
    \    # return l[-1]\n    # return l[0]\n    # return l[0]\n    # return l[-1]\n\
    \    # return l[0]\n    # return l[-1]\n    # return l[0]\n    # return l[0]\n\
    \    # return l[-1]\n    # return l[0]\n    # return l[0]\n    # return l[-1]\n\
    \    # return l[0]\n    # return l[-1]\n    # return l[-1]\n    # return l[0]\n\
    \    # return l[-1]\n    # return l[-1]\n    # return l[0]\n    # return l[-1]\n\
    \    # return l[-1]\n    # return l[-1]\n    # return l[-1]\n    # return l[-1]\n\
    \    # return l[-1]\n    # return l[-", "    m = l[0]\n    for i in l:\n     \
    \   if i > m:\n            m = i\n    return m\n", "    max_el = l[0]\n    for\
    \ elem in l:\n        if elem > max_el:\n            max_el = elem\n    return\
    \ max_el\n", "    if len(l) == 0:\n        return None\n    else:\n        max_n\
    \ = l[0]\n        for n in l:\n            if n > max_n:\n                max_n\
    \ = n\n        return max_n\n", "    m = l[0]\n    for e in l:\n        if e >\
    \ m:\n            m = e\n    return m\n", "    m = l[0]\n    for e in l:\n   \
    \     if e > m:\n            m = e\n    return m\n", "    max_num = l[0]\n   \
    \ for i in l:\n        if i > max_num:\n            max_num = i\n    return max_num\n",
  "    cur_max = l[0]\n    for el in l:\n        if el > cur_max:\n            cur_max\
    \ = el\n    return cur_max\n\n\n", "    max = 0\n    for i in l:\n        if i\
    \ > max:\n            max = i\n    return max\n", "    max_num = l[0]\n    for\
    \ num in l:\n        if num > max_num:\n            max_num = num\n    return\
    \ max_num\n", '    return max(l)', "    m = l[0]\n    for i in l:\n        if\
    \ i > m:\n            m = i\n    return m\n", '    return max(l)', "    if len(l)\
    \ == 0:\n        return\n    maximum = l[0]\n    for n in l:\n        if n > maximum:\n\
    \            maximum = n\n    return maximum\n", "    return max(l)\n", "    n\
    \ = len(l)\n    max_elem = l[0]\n    for i in range(1, n):\n        if l[i] >\
    \ max_elem:\n            max_elem = l[i]\n    return max_elem\n", "    maximum\
    \ = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n\
    \    return maximum\n", "    max_elem = 0\n    for i in l:\n        if i > max_elem:\n\
    \            max_elem = i\n    return max_elem\n", "    res = l[0]\n    for i\
    \ in l:\n        if i > res:\n            res = i\n    return res\n\n", "    #\
    \ TODO: write your code here\n    pass\n\n", "    return max(l)\n\nprint(max_element([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))", "    if not l:\n        return None\n\
    \    if len(l) == 1:\n        return l[0]\n    else:\n        return max(l[0],\
    \ max_element(l[1:]))\n", "    tmp = l[0]\n    for e in l:\n        if e > tmp:\n\
    \            tmp = e\n    return tmp\n", "    if len(l) == 0:\n        return\
    \ 0\n    elif len(l) == 1:\n        return l[0]\n    else:\n        m = max_element(l[1:])\n\
    \        return m if m > l[0] else l[0]\n", "    return max(l)\n", "    max_num\
    \ = l[0]\n    for i in l:\n        if i > max_num:\n            max_num = i\n\
    \    return max_num\n", "    max_element = l[0]\n    for element in l:\n     \
    \   if element > max_element:\n            max_element = element\n    return max_element\n",
  "    if len(l) == 0:\n        return None\n    else:\n        m = l[0]\n       \
    \ for i in l:\n            if i > m:\n                m = i\n        return m\n",
  "    pass\n", "    m = l[0]\n    for x in l:\n        if x > m:\n            m =\
    \ x\n    return m\n", "    max_elem = l[0]\n    for i in range(1, len(l)):\n \
    \       if l[i] > max_elem:\n            max_elem = l[i]\n    return max_elem\n",
  "    max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el\
    \ = el\n    return max_el\n\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10]))\nprint(max_element([1, 2, 3]))\nprint(max_element([1, 2, 3, 1, 2,\
    \ 4, 5, 1, 2, 3, 6, 1, 2, 3, 4, 6, 7, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5,", "    max\
    \ = l[0]\n    for item in l:\n        if item > max:\n            max = item\n\
    \    return max\n\nprint(max_element([1, 2, 3]))\nprint(max_element([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10]))", "    max_el = l[0]\n    for e in l:\n     \
    \   if e > max_el:\n            max_el = e\n    return max_el\n", "    max_el\
    \ = l[0]\n    for i in range(1, len(l)):\n        if l[i] > max_el:\n        \
    \    max_el = l[i]\n    return max_el\n", "    max = l[0]\n    for item in l:\n\
    \        if item > max:\n            max = item\n    return max\n", "    max =\
    \ l[0]\n    for i in l:\n        if i > max:\n            max = i\n    return\
    \ max\n", "    if len(l) == 0:\n        return None\n    m = l[0]\n    for item\
    \ in l:\n        if item > m:\n            m = item\n    return m\n", "    maximum\
    \ = l[0]\n    for i in l:\n        if i > maximum:\n            maximum = i\n\
    \    return maximum\n", "    max = -sys.maxsize - 1\n    for e in l:\n       \
    \ if e > max:\n            max = e\n    return max\n", "    if len(l) == 0:\n\
    \        return 0\n    max = l[0]\n    for i in range(1, len(l)):\n        if\
    \ l[i] > max:\n            max = l[i]\n    return max\n", "    return max(l)\n",
  "    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n        \
    \    max_elem = elem\n    return max_elem\n", "    max = l[0]\n    for e in l:\n\
    \        if e > max:\n            max = e\n    return max", "    assert l, \"\
    empty list\"\n    max_element = l[0]\n    for element in l:\n        if element\
    \ > max_element:\n            max_element = element\n    return max_element\n",
  "    curr_max = l[0]\n    for i in range(1, len(l)):\n        if l[i] > curr_max:\n\
    \            curr_max = l[i]\n    return curr_max\n", '    return sorted(l)[-1]',
  "    if not l:\n        return None\n    max_val = l[0]\n    for i in range(1, len(l)):\n\
    \        if l[i] > max_val:\n            max_val = l[i]\n    return max_val\n",
  "    # Write your code here\n    max = l[0]\n    for e in l:\n        if e > max:\n\
    \            max = e\n    return max\n", "    return max(l)\n", "    if len(l)\
    \ == 0:\n        return\n    if len(l) == 1:\n        return l[0]\n    else:\n\
    \        return max(l[0], max_element(l[1:]))\n", "    return 0\n", "    m = l[0]\n\
    \    for e in l:\n        if e > m:\n            m = e\n    return m\n", "   \
    \ if not isinstance(l, list):\n        raise TypeError(\"max_element argument\
    \ should be a list\")\n    if len(l) == 0:\n        raise ValueError(\"max_element\
    \ argument should be a non-empty list\")\n    for e in l:\n        if not isinstance(e,\
    \ int):\n            raise TypeError(\"max_element argument should contain only\
    \ integers\")\n    m = l[0]\n    for e in l:\n        if e > m:\n            m\
    \ = e\n    return m\n", "    maximum = l[0]\n    for element in l:\n        if\
    \ element > maximum:\n            maximum = element\n    return maximum\n", " \
    \   max_ele = l[0]\n    for ele in l:\n        if ele > max_ele:\n           \
    \ max_ele = ele\n    return max_ele\n", "    max_element = l[0]\n    for element\
    \ in l:\n        if element > max_element:\n            max_element = element\n\
    \    return max_element\n", "    maximum = l[0]\n    for i in l:\n        if i\
    \ > maximum:\n            maximum = i\n    return maximum\n", "    max_num = l[0]\n\
    \    for i in l:\n        if i > max_num:\n            max_num = i\n    return\
    \ max_num\n", "    maximum = l[0]\n    for i in l:\n        if i > maximum:\n\
    \            maximum = i\n    return maximum\n", "    return reduce(lambda x,\
    \ y: x if x > y else y, l)\n", "    max_el = l[0]\n    for i in range(1, len(l)):\n\
    \        if l[i] > max_el:\n            max_el = l[i]\n    return max_el\n\n",
  "    return reduce(lambda x, y: x if x > y else y, l)\n", "    if len(l) == 0:\n\
    \        return None\n    if len(l) == 1:\n        return l[0]\n    if len(l)\
    \ > 1:\n        return max(l[0], max_element(l[1:]))\n\n", "    if len(l) == 0:\n\
    \        return None\n    else:\n        max = l[0]\n        for i in range(1,\
    \ len(l)):\n            if l[i] > max:\n                max = l[i]\n        return\
    \ max\n", "    max_el = l[0]\n    for el in l:\n        if el > max_el:\n    \
    \        max_el = el\n    return max_el\n", "    max_element = l[0]\n    for element\
    \ in l:\n        if element > max_element:\n            max_element = element\n\
    \    return max_element\n", "    if len(l) == 0:\n        return None\n    max_number\
    \ = l[0]\n    for elem in l:\n        if elem > max_number:\n            max_number\
    \ = elem\n    return max_number\n", "    max_num = l[0]\n    for num in l:\n \
    \       if num > max_num:\n            max_num = num\n    return max_num\n\n",
  '    return max(l)', "    assert len(l) > 0\n    maximum = l[0]\n    for i in range(1,\
    \ len(l)):\n        if l[i] > maximum:\n            maximum = l[i]\n    return\
    \ maximum", "    max_ = l[0]\n    for x in l:\n        if x > max_:\n        \
    \    max_ = x\n    return max_\n", "    max = l[0]\n    for i in l:\n        if\
    \ i > max:\n            max = i\n    return max\n", "    maximum = l[0]\n    for\
    \ element in l:\n        if element > maximum:\n            maximum = element\n\
    \    return maximum\n", "    return max(l)\n", "    max = l[0]\n    for i in l:\n\
    \        if i > max:\n            max = i\n    return max\n", "    assert len(l)\
    \ > 0, \"List is empty!\"\n    assert all(isinstance(x, int) for x in l), \"All\
    \ elements should be integer!\"\n    res = l[0]\n    for i in range(1, len(l)):\n\
    \        if l[i] > res:\n            res = l[i]\n    return res\n", "    if len(l)\
    \ == 0:\n        return 0\n    max = l[0]\n    for i in range(1, len(l)):\n  \
    \      if l[i] > max:\n            max = l[i]\n    return max\n", "    mx = -float('inf')\n\
    \    for element in l:\n        if element > mx:\n            mx = element\n \
    \   return mx\n", "    max_ = l[0]\n    for num in l:\n        if num > max_:\n\
    \            max_ = num\n    return max_", "    i = 1\n    best = l[0]\n    while\
    \ i < len(l):\n        if l[i] > best:\n            best = l[i]\n        i +=\
    \ 1\n    return best\n", "    m = l[0]\n    for element in l:\n        if element\
    \ > m:\n            m = element\n    return m\n", "    maximum = l[0]\n    for\
    \ i in l:\n        if i > maximum:\n            maximum = i\n    return maximum\n",
  "    return max(l)\n", "    return max(l)\n", "    # Find max element\n    max_element\
    \ = 0\n    for i in l:\n        if i > max_element:\n            max_element =\
    \ i\n    return max_element\n", "    if len(l) == 0:\n        return None\n  \
    \  else:\n        max_element = l[0]\n        for element in l:\n            if\
    \ element > max_element:\n                max_element = element\n        return\
    \ max_element\n", "    max_el = l[0]\n    for el in l:\n        if el > max_el:\n\
    \            max_el = el\n    return max_el\n", "    if len(l) == 0:\n       \
    \ return -float('inf')\n    if len(l) == 1:\n        return l[0]\n    max = l[0]\n\
    \    for i in range(1, len(l)):\n        if l[i] > max:\n            max = l[i]\n\
    \    return max\n", "    if not l:\n        return None\n    if len(l) == 1:\n\
    \        return l[0]\n    return max(l[0], max_element(l[1:]))\n", "    if len(l)\
    \ == 0:\n        return 0\n    m = l[0]\n    for i in l:\n        if i > m:\n\
    \            m = i\n    return m", "    maximum = l[0]\n    for element in l:\n\
    \        if element > maximum:\n            maximum = element\n    return maximum",
  "    max_elem = l[0]\n    for elem in l:\n        if elem > max_elem:\n        \
    \    max_elem = elem\n    return max_elem\n\n", "    if len(l) == 0:\n       \
    \ return None\n    else:\n        m = l[0]\n        for x in l:\n            if\
    \ x > m:\n                m = x\n        return m\n\n", "    max_el = l[0]\n \
    \   for el in l:\n        if el > max_el:\n            max_el = el\n    return\
    \ max_el\n", "    ret = l[0]\n    for i in l:\n        if i > ret:\n         \
    \   ret = i\n    return ret\n", "    pass\n", "    max_element = l[0]\n    for\
    \ element in l:\n        if element > max_element:\n            max_element =\
    \ element\n    return max_element\n\nprint(max_element([5, 3, -5, 2, -3, 3, 9,\
    \ 0, 123, 1, -10]))\nprint(max_element([1, 2, 3]))", "    return max(l)\n", " \
    \   return reduce(lambda acc, x: max(acc, x), l)\n\nprint(max_element([5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10]))", "    max_value = l[0]\n    for value in l:\n\
    \        if value > max_value:\n            max_value = value\n    return max_value\n\
    \n", "    if not l:\n        return None\n    else:\n        return max(l)", " \
    \   maximum = l[0]\n    for i in l:\n        if i > maximum:\n            maximum\
    \ = i\n    return maximum\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
