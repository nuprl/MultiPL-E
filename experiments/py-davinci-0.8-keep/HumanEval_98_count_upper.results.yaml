name: HumanEval_98_count_upper
language: py
results:
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return\
    \ count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') ==\
    \ 0\nassert count_upper('dBBE') == 0\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq2zm9mo8.py\", line\
    \ 16, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppgs2mk3j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmppgs2mk3j.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmppgs2mk3j.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # Your code here\n    return\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y1y3lex.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6y1y3lex.py\", line 24,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp6y1y3lex.py\", line\
    \ 15, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count\
    \ += 1\n    return count\n        \n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj0lundik.py\", line\
    \ 13, in <module>\n    assert count_upper('aBCdEf') == 1\n  File \"/tmp/tmpj0lundik.py\"\
    , line 11, in count_upper\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    i = 0\n    while\
    \ i < len(s):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n            count +=\
    \ 1\n        i += 1\n    return count\ncount_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\
    \ncount_upper('dBBE')\n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyqj8tep.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpiyqj8tep.py\", line 21,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpiyqj8tep.py\", line\
    \ 12, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    uppercase_vowels = 'AEIOU'\n\
    \    counter = 0\n    for i in range(len(s)):\n        if s[i] in uppercase_vowels\
    \ and i % 2 == 0:\n            counter += 1\n    return counter\n    \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    even_indices = []\n    for i\
    \ in range(len(s)):\n        if i % 2 == 0:\n            even_indices.append(s[i])\n\
    \    count = 0\n    for i in even_indices:\n        if i in ['A', 'E', 'I', 'O',\
    \ 'U']:\n            count += 1\n    return count\n        \nprint(count_upper('aBCdEf'))\n\
    print(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: "1\n0\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    uppers = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i].isupper():\n            uppers += 1\n    return\
    \ uppers\n\nprint(count_upper('aBCdEf')) # 1\nprint(count_upper('abcdefg')) #\
    \ 0\nprint(count_upper('dBBE')) # 0\n\nprint(count_upper('abcdefg')) # 0\nprint(count_upper('aBcDeFg'))\
    \ # 3\nprint(count_upper('aBcDeFgH')) # 4\n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: "2\n0\n1\n0\n0\n0\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15nl0bxa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp15nl0bxa.py\", line 34,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp15nl0bxa.py\", line\
    \ 25, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # return len([c for c in s if\
    \ is_vowel(c) and is_upper(c) and (s.index(c) % 2 == 0)])\n    return len([c for\
    \ c in s[::2] if is_vowel(c) and is_upper(c)])\n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0ynii59.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpq0ynii59.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpq0ynii59.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmpq0ynii59.py\"\
    , line 11, in count_upper\n    return len([c for c in s[::2] if is_vowel(c) and\
    \ is_upper(c)])\n  File \"/tmp/tmpq0ynii59.py\", line 11, in <listcomp>\n    return\
    \ len([c for c in s[::2] if is_vowel(c) and is_upper(c)])\nNameError: name 'is_vowel'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\ncount_upper('aBCdEf')\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7wqs16v.py\", line\
    \ 13, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    ctr = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            ctr += 1\n    return ctr\n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count =\
    \ 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n        \
    \    count += 1\n    return count\ncount_upper('aBCdEf')\n\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    uppercase_vowels = ['A', 'E',\
    \ 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if\
    \ s[i] in uppercase_vowels:\n            count += 1\n    return count\n \n   \
    \ \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = ['A', 'E', 'I',\
    \ 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i]\
    \ in upper_vowels:\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    if s == \"\":\n        return\
    \ 0\n    count = 0\n    for i in range(0, len(s), 2):\n        c = s[i]\n    \
    \    if c in VOWELS and c.isupper():\n            count += 1\n    return count\n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8gimjw8y.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8gimjw8y.py\", line 29,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp8gimjw8y.py\", line\
    \ 20, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmp8gimjw8y.py\"\
    , line 15, in count_upper\n    if c in VOWELS and c.isupper():\nNameError: name\
    \ 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') ==\
    \ 0\nassert count_upper('dBBE') == 0\n \n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpor85ag4c.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpor85ag4c.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpor85ag4c.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    counter = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n            counter\
    \ += 1\n    return counter\ncount_upper('dBBE')\n\ndef check(candidate):\n   \
    \ assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert\
    \ candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert candidate('U')\
    \ == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef\
    \ test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8c6f_res.py\", line\
    \ 15, in <module>\n    count_upper('dBBE')\n  File \"/tmp/tmp8c6f_res.py\", line\
    \ 12, in count_upper\n    if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n\
    NameError: name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    vowel_index\
    \ = []\n    for i in range(0, len(s)):\n        if (s[i] == 'A' or s[i] == 'E'\
    \ or s[i] == 'I' or s[i] == 'O' or s[i] == 'U'):\n            vowel_index.append(i)\n\
    \    return len(vowel_index)\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnx_2y08y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnx_2y08y.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpnx_2y08y.py\", line\
    \ 19, in check\n    assert candidate('dBBE') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') ==\
    \ 0\nassert count_upper('dBBE') == 0\n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    #raise\
    \ NotImplementedError()\n    c = 0\n    v = ['A','E','I','O','U']\n    for i in\
    \ range(0,len(s),2):\n        if s[i] in v:\n            c += 1\n    return c\n\
    \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    evens = s[::2]\n    return sum(char\
    \ in 'AEIOU' for char in evens)\n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in VOWELS:\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ngjtli2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_ngjtli2.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp_ngjtli2.py\", line\
    \ 17, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmp_ngjtli2.py\"\
    , line 12, in count_upper\n    if i % 2 == 0 and s[i] in VOWELS:\nNameError: name\
    \ 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowel = 'aeiou'\n    count =\
    \ 0\n    for i in range(len(s)):\n        if s[i].isupper() and s[i] in vowel\
    \ and i % 2 == 0:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjcpj3h8b.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjcpj3h8b.py\", line 27,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpjcpj3h8b.py\", line\
    \ 18, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count =\
    \ 0\n    vowels = 'aeiouAEIOU'\n    for c in s:\n        if c in vowels and s.index(c)\
    \ % 2 == 0:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpss_p29aw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpss_p29aw.py\", line 28,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpss_p29aw.py\", line\
    \ 19, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    ### BEGIN SOLUTION\n    evens\
    \ = s[::2]\n    vowels = 'AEIOU'\n    return sum(1 for c in evens if c in vowels)\n\
    \    ### END SOLUTION\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\nassert count_upper('A') == 1\n \ndef\
    \ check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = \"AEIOU\"\n    count\
    \ = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n       \
    \     count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count =\
    \ 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n\
    \            count += 1\n    return count\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in \"AEIOU\":\n            count += 1\n    return\
    \ count\n    \n    \ndef check(candidate):\n    assert candidate('aBCdEf') ==\
    \ 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n\
    \    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(s[i] in 'AEIOU' for\
    \ i in range(len(s)) if i % 2 == 0)\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for idx, c in enumerate(s)\
    \ if c in 'AEIOU' and idx % 2 == 0)\n\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    ...\n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzx6w133.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpbzx6w133.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpbzx6w133.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    index = 0\n  \
    \  while index < len(s):\n        if s[index].isupper() and index % 2 == 0:\n\
    \            count += 1\n        index += 1\n    return count\n    # TODO: replace\
    \ above line with a one-line solution\n\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4chw86dj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4chw86dj.py\", line 30,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp4chw86dj.py\", line\
    \ 21, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = 'AEIOU'\n    ans\
    \ = 0\n    for i in range(0, len(s), 2):\n        if s[i] in upper_vowels:\n \
    \           ans += 1\n    return ans\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nassert count_upper('aBcD')\
    \ == 1\n \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13gic4em.py\", line\
    \ 19, in <module>\n    assert count_upper('aBcD') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    num = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in VOWELS:\n            num += 1\n    return num\n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_24z98n.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpq_24z98n.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpq_24z98n.py\", line\
    \ 17, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmpq_24z98n.py\"\
    , line 12, in count_upper\n    if s[i] in VOWELS:\nNameError: name 'VOWELS' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    s = s.upper()\n    s = s[::2]\n\
    \    counter = 0\n    for char in s:\n        if char in 'AEIOU':\n          \
    \  counter += 1\n    return counter\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94_t2uc_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp94_t2uc_.py\", line 28,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp94_t2uc_.py\", line\
    \ 19, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    #if type(s) == str:\n    c =\
    \ 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in \"AEIOU\"\
    :\n            c += 1\n    return c\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') ==\
    \ 0\nassert count_upper('dBBE') == 0\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    even = False\n\
    \    vowels = ('a', 'e', 'i', 'o', 'u')\n    for c in s:\n        if even and\
    \ c in vowels:\n            count += 1\n        even = not even\n    return count\n\
    \        \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3awic7w.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf3awic7w.py\", line 29,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpf3awic7w.py\", line\
    \ 20, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass # replace with your code\n\
    \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplc1ksona.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmplc1ksona.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmplc1ksona.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    even_upper\
    \ = 0\n    for i in range(len(s)):\n        if s[i] in vowels and i % 2 == 0:\n\
    \            even_upper += 1\n    return even_upper\ndef check(candidate):\n \
    \   assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n  \
    \  assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert candidate('U')\
    \ == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef\
    \ test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qurepph.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_qurepph.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp_qurepph.py\", line\
    \ 17, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # TODO: implement this function\n\
    \    pass\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeft4ks_d.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpeft4ks_d.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpeft4ks_d.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # this code is not optimal, I\
    \ think.\n    return sum(1 for i in range(len(s)) if s[i].isupper() and i % 2\
    \ == 0)\n\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u4utk3t.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5u4utk3t.py\", line 24,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp5u4utk3t.py\", line\
    \ 15, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n \n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9qca71dp.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9qca71dp.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp9qca71dp.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    counter = 0\n    for i in range(len(s)):\n\
    \        if (i % 2) == 0 and s[i] in 'AEIOU':\n            counter += 1\n    return\
    \ counter\n            \n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        char = s[i]\n        if is_vowel(char) and char.isupper():\n\
    \            count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\n\
    assert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n \ndef\
    \ check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkc3_sh4t.py\", line\
    \ 17, in <module>\n    assert count_upper('aBCdEf') == 1\n  File \"/tmp/tmpkc3_sh4t.py\"\
    , line 13, in count_upper\n    if is_vowel(char) and char.isupper():\nNameError:\
    \ name 'is_vowel' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rhd067d.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp0rhd067d.py\", line 24,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp0rhd067d.py\", line\
    \ 15, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmp0rhd067d.py\"\
    , line 11, in count_upper\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowel_count = 0\n    for i in\
    \ range(len(s)):\n        # Check if even index\n        if i % 2 == 0:\n    \
    \        # Check if uppercase vowel\n            if s[i] in ['A', 'E', 'I', 'O',\
    \ 'U']:\n                vowel_count += 1\n    return vowel_count\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for index, char\
    \ in enumerate(s) if char.isupper() and index % 2 == 0)\n\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60l0_ags.py\", line\
    \ 12, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # TODO: Implement this function\n\
    \    # Hint: You may want to use the `.upper()` method\n    n = 0\n    i = 0\n\
    \    while i < len(s):\n        if s[i].upper() in 'AEIOU':\n            n +=\
    \ 1\n        i += 2\n    return n\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88xqjr2o.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp88xqjr2o.py\", line 30,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp88xqjr2o.py\", line\
    \ 21, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return ...\ncount_upper('aBCdEf')\n\
    count_upper('abcdefg')\ncount_upper('dBBE')\n \n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppysokf4c.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppysokf4c.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmppysokf4c.py\", line\
    \ 17, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    #time:\
    \ O(n) space: O(1)\n    length = len(s)\n    vowels = ['A', 'E', 'I', 'O', 'U']\n\
    \    count = 0\n    for i in range(length):\n        if i % 2 == 0 and s[i] in\
    \ vowels:\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # count = 0\n    # for i in range(len(s)):\n\
    \    #     if i % 2 == 0 and s[i] in 'AEIOU':\n    #         count += 1\n    #\
    \ return count\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i]\
    \ in 'AEIOU')\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n\
    \    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n   \
    \ assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    v = 'AEIOU'\n    assert isinstance(s,\
    \ str)\n    # YOUR CODE HERE\n    #raise NotImplementedError()\n    count = 0\n\
    \    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in v:\n         \
    \   count += 1\n    return count\n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\n \n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfxs4r0o.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpkfxs4r0o.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpkfxs4r0o.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsq88lcgh.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpsq88lcgh.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpsq88lcgh.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    ### BEGIN SOLUTION\n    return\
    \ sum(1 for i, char in enumerate(s) if i % 2 == 0 and char.isupper())\n    ###\
    \ END SOLUTION\ntests.run_test(count_upper, 'test_count_upper')\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4doczzc.py\", line\
    \ 13, in <module>\n    tests.run_test(count_upper, 'test_count_upper')\nNameError:\
    \ name 'tests' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(len(s))\
    \ if i % 2 == 0 and s[i] in 'AEIOU')\n\ncount_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\
    \ncount_upper('dBBE')\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    num = 0\n\
    \    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            num\
    \ += 1\n    return num\n    raise NotImplementedError()\n    \n    \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    l=len(s)\n\
    \    count=0\n    for i in range(l):\n        if s[i].isupper() and i%2==0:\n\
    \            count+=1\n    return count\n            \n    raise NotImplementedError()\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\nprint('all tests pass!')\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbodmp40.py\", line\
    \ 19, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(len(s))\
    \ if s[i].isupper() and i % 2 == 0)\n    \n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsf4vnd36.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsf4vnd36.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpsf4vnd36.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    num_upper = 0\n    # TODO: Finish\
    \ function definition\n    return num_upper\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpntcziqzv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpntcziqzv.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpntcziqzv.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\n\
    \nprint()\n\ns = 'aBCdEf'\ns = 'abcdefg'\ns = 'dBBE'\nprint(s)\nprint('  '.join(s))\n\
    print(len(s))\nfor i in range(0, len(s), 2):\n    print(i, s[i])\n\nprint()\n\n\
    def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: "1\n0\n0\n\ndBBE\nd  B  B  E\n4\n0 d\n2 B\n\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count=0\n\
    \    for i in range(0,len(s),2):\n        if s[i] in 'AEIOU':\n            count+=1\n\
    \    return count\n\ndef check(candidate):\n    assert candidate('aBCdEf') ==\
    \ 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n\
    \    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s[::2]\
    \ if c in \"AEIOU\")\ncount_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\ncount_upper('dBBE')\n\
    \ \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # STUDENTS: Complete this function\n\
    \    pass\n    return 0\n\ncount_upper('aBCdEf')\n\ncount_upper('dBBE')\n\ndef\
    \ check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmheb3yrq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmheb3yrq.py\", line 28,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpmheb3yrq.py\", line\
    \ 19, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(0,\
    \ len(s), 2) if s[i] in VOWELS and s[i].isupper())\n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_79_geq7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_79_geq7.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp_79_geq7.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmp_79_geq7.py\"\
    , line 10, in count_upper\n    return sum(1 for i in range(0, len(s), 2) if s[i]\
    \ in VOWELS and s[i].isupper())\n  File \"/tmp/tmp_79_geq7.py\", line 10, in <genexpr>\n\
    \    return sum(1 for i in range(0, len(s), 2) if s[i] in VOWELS and s[i].isupper())\n\
    NameError: name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n    \nprint(count_upper('abCdEf'))\n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: "1\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn750jsr7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpn750jsr7.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpn750jsr7.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0 # replace this with\
    \ a working implementation\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6s6y73tc.py\", line\
    \ 11, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O',\
    \ 'U']\n    uppercase_count = 0\n    for i in range(0, len(s), 2):\n        if\
    \ s[i] in vowels:\n            uppercase_count += 1\n    return uppercase_count\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return\
    \ count\n \n \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n  \
    \  assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert\
    \ candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # todo implement this function\n\
    \    return 0\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_mz_k3e.py\", line\
    \ 13, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    for i in range(0, len(s), 2):\n\
    \        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] ==\
    \ 'u':\n            vowels = s.count(i)\n    return vowels\ncount_upper('dBBE')\n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_e16zj4.py\", line\
    \ 14, in <module>\n    count_upper('dBBE')\n  File \"/tmp/tmpv_e16zj4.py\", line\
    \ 13, in count_upper\n    return vowels\nUnboundLocalError: local variable 'vowels'\
    \ referenced before assignment\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeeensmox.py\", line\
    \ 13, in <module>\n    assert count_upper('aBCdEf') == 1\n  File \"/tmp/tmpeeensmox.py\"\
    , line 11, in count_upper\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    index =\
    \ 0\n    count = 0\n    while index < len(s):\n        if (index%2 == 0) and s[index]\
    \ in ('A','E','I','O','U'):\n            count += 1\n        index += 1\n    return\
    \ count\n    raise NotImplementedError()\n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    even_count = 0\n    for i in\
    \ range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n            even_count\
    \ += 1\n    return even_count\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppuc4k63_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppuc4k63_.py\", line 21,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmppuc4k63_.py\", line\
    \ 12, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count =\
    \ 0\n    for idx, c in enumerate(s):\n        if idx % 2 == 0 and c in vowels:\n\
    \            count += 1\n    return count\n\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\n\
    print(count_upper('dBBE'))\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: "1\n0\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # fill in code here\n    uppers\
    \ = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in 'AEIOU':\n\
    \            uppers += 1\n    return uppers\n \n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    assert\
    \ type(s) == str, 's must be a string.'\n    upper_vowels = ['A', 'E', 'I', 'O',\
    \ 'U']\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and\
    \ s[i] in upper_vowels:\n            count += 1\n    return count\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0 #TODO\n \n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqeobcter.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpqeobcter.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpqeobcter.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1uf6sje.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpb1uf6sje.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpb1uf6sje.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\n \n \n \n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe4mhnff7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpe4mhnff7.py\", line 25,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpe4mhnff7.py\", line\
    \ 16, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = \"AEIOU\"\n    count\
    \ = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n       \
    \     count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(len(s))\
    \ if i % 2 == 0 and s[i] in 'AEIOU')\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    if len(s) == 0:\n        return\
    \ 0\n    elif s[0].isupper() and s[0] in VOWELS and len(s) % 2 == 0:\n       \
    \ return 1 + count_upper(s[1:])\n    else:\n        return count_upper(s[1:])\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8x8vy0y.py\", line\
    \ 17, in <module>\n    assert count_upper('aBCdEf') == 1\n  File \"/tmp/tmpp8x8vy0y.py\"\
    , line 15, in count_upper\n    return count_upper(s[1:])\n  File \"/tmp/tmpp8x8vy0y.py\"\
    , line 12, in count_upper\n    elif s[0].isupper() and s[0] in VOWELS and len(s)\
    \ % 2 == 0:\nNameError: name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(\n        s[i].upper()\
    \ in 'AEIOU' for i in range(len(s)) if i % 2 == 0\n    )\n\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrc_tbiu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbrc_tbiu.py\", line 25,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpbrc_tbiu.py\", line\
    \ 16, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return # TODO\n\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfvuduuo.py\", line\
    \ 12, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    #raise\
    \ NotImplementedError()\n    vowel = \"AEIOU\"\n    num = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in vowel:\n            num += 1\n    return num\n\
    def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for index, letter\
    \ in enumerate(s):\n        if index % 2 == 0 and letter in 'AEIOU':\n       \
    \     count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\n \n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcatsg1lt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpcatsg1lt.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpcatsg1lt.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    n = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            n += 1\n    return n\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count =\
    \ 0\n    for i in range(0, len(s), 2):\n        if (s[i] in \"AEIOU\"):\n    \
    \        count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\nassert count_upper('dBBEe')\
    \ == 1\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgk9aojdd.py\", line\
    \ 20, in <module>\n    assert count_upper('dBBEe') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8pkkiqou.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8pkkiqou.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp8pkkiqou.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\nprint(count_upper('aBCdEf'))\nprint(count_upper('abcdefg'))\nprint(count_upper('dBBE'))\n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: "1\n0\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    result = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            result += 1\n    return\
    \ result\n\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n   \
    \ assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert\
    \ candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = 'AEIOU'\n    count\
    \ = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in upper_vowels:\n\
    \            count += 1\n    return count\n\n \n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    ...\ncount_upper('aBCdEf')\n\
    count_upper('abcdefg')\ncount_upper('dBBE')\n \ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3_a7ogoo.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3_a7ogoo.py\", line 25,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp3_a7ogoo.py\", line\
    \ 16, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2k9txd3n.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2k9txd3n.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp2k9txd3n.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    total = 0\n    vowels = set(['A',\
    \ 'E', 'I', 'O', 'U'])\n    for i in range(len(s)):\n        if i % 2 == 0 and\
    \ s[i] in vowels:\n            total += 1\n    return total\ncount_upper('aBCdEf')\n\
    count_upper('abcdefg')\ncount_upper('dBBE')\n \n \n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count =\
    \ 0\n    for c in s:\n        if c.isupper() and s.index(c) % 2 == 0:\n      \
    \      count += 1\n    return count\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8zbe46b_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8zbe46b_.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp8zbe46b_.py\", line\
    \ 17, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    from numpy.testing import assert_equal\nassert_equal(count_upper('aBCdEf'), 1)\n\
    assert_equal(count_upper('abcdefg'), 0)\nassert_equal(count_upper('dBBE'), 0)\n\
    \ \nprint(\"Success!\")\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ndef check(candidate):\n   \
    \ assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert\
    \ candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert candidate('U')\
    \ == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef\
    \ test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_46j76h.py\", line\
    \ 12, in <module>\n    from numpy.testing import assert_equal\nModuleNotFoundError:\
    \ No module named 'numpy'\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in vowels and s[i].isupper():\n            count\
    \ += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpur178xbw.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpur178xbw.py\", line 27,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpur178xbw.py\", line\
    \ 18, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmpur178xbw.py\"\
    , line 12, in count_upper\n    if i % 2 == 0 and s[i] in vowels and s[i].isupper():\n\
    NameError: name 'vowels' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count =\
    \ 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n      \
    \      count += 1\n    return count\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowel_set = set('AEIOU')\n  \
    \  upper_vowel_count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in\
    \ vowel_set:\n            upper_vowel_count += 1\n    return upper_vowel_count\n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    raise NotImplementedError\ncount_upper('aBCdEf')\n\
    count_upper('abcdefg')\ncount_upper('dBBE')\n \n \n    \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgszyh0e4.py\", line\
    \ 11, in <module>\n    count_upper('aBCdEf')\n  File \"/tmp/tmpgszyh0e4.py\",\
    \ line 10, in count_upper\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n   \
    \ assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert\
    \ candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # Your code goes here\n    \n\
    \    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpol0962c1.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpol0962c1.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpol0962c1.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    #numUpper = 0\n    #for i in\
    \ range(len(s)):\n    #    if s[i].isupper() and i % 2 == 0:\n    #        numUpper\
    \ += 1\n    #return numUpper\n    return len([c for c in s if c.isupper() and\
    \ s.index(c) % 2 == 0])\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmgf5znkm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmgf5znkm.py\", line 27,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpmgf5znkm.py\", line\
    \ 18, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # remove this pass statement\
    \ and write your code here\n    vowels = \"AEIOU\"\n    count = 0\n    for i in\
    \ range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n \
    \   return count\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n\
    \    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n   \
    \ assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for (idx, ch)\
    \ in enumerate(s):\n        if idx % 2 == 0 and ch in \"AEIOU\":\n           \
    \ count += 1\n    return count\n\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppltak6to.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppltak6to.py\", line 21,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmppltak6to.py\", line\
    \ 12, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass # Implement me!\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpss_tbgi1.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpss_tbgi1.py\", line 21,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpss_tbgi1.py\", line\
    \ 12, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = {'A', 'E', 'I', 'O',\
    \ 'U'}\n    return len([c for i, c in enumerate(s) if c in vowels and i % 2 ==\
    \ 0])\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\n\
    assert count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    ...\n \ncount_upper('aBCdEf')\n\
    count_upper('abcdefg')\ncount_upper('dBBE')\n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkhol1f84.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkhol1f84.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpkhol1f84.py\", line\
    \ 17, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return len([i for i in range(0,\
    \ len(s), 2) if s[i].isupper() and s[i] in 'AEIOU'])\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count =\
    \ 0\n    for i in range(len(s)):\n        if s[i] in vowels and i % 2 == 0:\n\
    \            count += 1\n    return count\nassert count_upper('aBCdEf') == 1\n\
    assert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n \ndef\
    \ check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowel = ['A', 'E', 'I', 'O',\
    \ 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowel:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    upper_vowels = [letter for letter\
    \ in s if letter.isupper() and letter in 'AEIOU']\n    return len(upper_vowels)//2\n\
    \    # count = 0\n    # i = 0\n    # while i < len(s):\n    #     if s[i].isupper()\
    \ and s[i] in 'AEIOU':\n    #         count += 1\n    #     i += 2\n    # return\
    \ count // 2\n\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n\
    \    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n   \
    \ assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6g2_uriv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6g2_uriv.py\", line 31,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp6g2_uriv.py\", line\
    \ 22, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    \ \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2bdjbc8.py\", line\
    \ 11, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    upper_count = 0\n    for i in\
    \ range(len(s)):\n        if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n\
    \            upper_count += 1\n    return upper_count\ncount_upper('aBCdEf')\n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9bbl8w4.py\", line\
    \ 15, in <module>\n    count_upper('aBCdEf')\n  File \"/tmp/tmpj9bbl8w4.py\",\
    \ line 12, in count_upper\n    if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n\
    NameError: name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(0,\
    \ len(s), 2) if s[i] in 'AEIOU')\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(map(lambda ch: ch.upper()\
    \ in 'AEIOU' and ord(ch)%2 == 0, s))\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps7d1q3pq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmps7d1q3pq.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmps7d1q3pq.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    assert type(s) == str, 's is\
    \ not a string: {}'.format(s)\n    return 0\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbn2nksj5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpbn2nksj5.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpbn2nksj5.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in ('A', 'E', 'I', 'O', 'U'):\n            count\
    \ += 1\n    return count\n \n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for idx, val in\
    \ enumerate(s) if val in 'AEIOU' and idx % 2 == 0)\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\ns = 'aBCdEf'\nprint(s)\nprint(count_upper(s))\ns = 'abcdefg'\nprint(s)\n\
    print(count_upper(s))\ns = 'dBBE'\nprint(s)\nprint(count_upper(s))\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: "aBCdEf\n1\nabcdefg\n0\ndBBE\n0\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # TODO complete me\n    return\
    \ 0\n \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjeyql7ow.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpjeyql7ow.py\", line 24,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpjeyql7ow.py\", line\
    \ 15, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    num_upper = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i].isupper():\n            num_upper += 1\n    return\
    \ num_upper\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwf37m32.py\", line\
    \ 15, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return None\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplu7g1j50.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplu7g1j50.py\", line 21,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmplu7g1j50.py\", line\
    \ 12, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(map(str.isupper, s[::2]))\n\
    count_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\ncount_upper('dBBE')\n\nassert\
    \ count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE')\
    \ == 0\n \n \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n   \
    \ assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert\
    \ candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_9nl_dd8.py\", line\
    \ 17, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    total = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            total\
    \ += 1\n    return total\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhdrjapn.py\", line\
    \ 15, in <module>\n    assert count_upper('aBCdEf') == 1\n  File \"/tmp/tmpwhdrjapn.py\"\
    , line 12, in count_upper\n    if s[i] in vowels and s[i].isupper():\nNameError:\
    \ name 'vowels' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(0,\
    \ len(s), 2) if s[i] in 'AEIOU')\n\ncount_upper('dBBE')\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    counter = 0\n    vowels = ['A',\
    \ 'E', 'I', 'O', 'U']\n    for i in range(len(s)):\n        if i % 2 == 0 and\
    \ s[i] in vowels:\n            counter += 1\n    return counter\n\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n\
    assert count_upper('fghijklmn') == 0\n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count =\
    \ 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n        \
    \    count += 1\n    return count\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return s.count('A') + s.count('E')\
    \ + s.count('I') + s.count('O') + s.count('U')\ncount_upper('aBCdEf')\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprhwdqanz.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprhwdqanz.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmprhwdqanz.py\", line\
    \ 16, in check\n    assert candidate('dBBE') == 0\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # your code here\n    count =\
    \ 0\n    for i in range(0, len(s), 2):\n        if s[i] in \"AEIOU\":\n      \
    \      count += 1\n    return count\ncount_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\
    \ncount_upper('dBBE')\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # STUDENTS: Add code here\n \
    \   count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and (i %\
    \ 2 == 0):\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn8wwx50g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpn8wwx50g.py\", line 27,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpn8wwx50g.py\", line\
    \ 18, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\n \n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgahyc_ba.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgahyc_ba.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpgahyc_ba.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # DIFFICULTY 1\n    # HINT: how\
    \ to check for even indices?\n    count = 0\n    for i in range(len(s)):\n   \
    \     if i % 2 == 0 and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count\
    \ += 1\n    return count\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return count_vowels(s, upper=True,\
    \ even=True)\n \n \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n\
    \    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n   \
    \ assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprk2k_f4o.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprk2k_f4o.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmprk2k_f4o.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmprk2k_f4o.py\"\
    , line 10, in count_upper\n    return count_vowels(s, upper=True, even=True)\n\
    NameError: name 'count_vowels' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    raise NotImplementedError()\n\
    count_upper('aBCdEf')\n \n \n \n \n\ncount_upper('abcdefg')\n \n \n \n \n\ncount_upper('dBBE')\n\
    \ \n \n \n \n\ncount_upper('aeiouAEIOU')\n \n \n \n \n\ncount_upper('ABCDEFG')\n\
    \ \n \n \n \n\ncount_upper('pig')\n \n \n \n \n\ncount_upper('aBcDe')\n \n \n\
    \ \n \n\ncount_upper('aBc')\n \n \n \n \n\ncount_upper('BcD')\n \n \n \n \n\n\
    count_upper('abcd')\n \n \n \n \n\ncount_upper('AbCdE')\n \n \n \n \n\ncount_upper('aBCdE')\n\
    \ \n \n \n \n\ncount_upper('aBCde')\n \n \n \n \n\ncount_upper('aeiouAEIOU')\n\
    \ \n \n \n \n\ncount_upper('ABCDEFG')\n \n \n \n \n\ncount_upper('pig')\n \n \n\
    \ \n \n\ncount_upper('aBcDe')\n \n \n \n \n\ncount_upper('aBc')\n \n \n \n \n\n\
    count_upper('BcD')\n \n \n \n \n\ncount_upper('abcd')\n \n \n \n \n\ncount_upper('AbCdE')\n\
    \ \n \n \n \n\ncount_upper('aBCdE')\n \n \n \n \n\ncount_upper('aBCde')\n \n \n\
    \ \n \n\ncount_upper('aeiouAEIOU')\n \n \n \n \n\ncount_upper('ABCDEFG')\n \n\
    \ \n \n \n\ncount_upper('pig')\n \n \n \n \n\ncount_upper('aBcDe')\n \n \n \n\
    \ \n\ncount_upper('\ndef check(candidate):\n    assert candidate('aBCdEf') ==\
    \ 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n\
    \    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpm152o4ap.py\", line 173\n    count_upper('\n         \
    \       ^\nSyntaxError: EOL while scanning string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for c in s[::2]\
    \ if c in string.ascii_uppercase)\n\nimport pytest\n\n@pytest.mark.parametrize('input,\
    \ expected', [\n    ('aBCdEf', 1),\n    ('abcdefg', 0),\n    ('dBBE', 0),\n])\n\
    def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpev14t90m.py\", line\
    \ 12, in <module>\n    import pytest\nModuleNotFoundError: No module named 'pytest'\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass # TODO\n    \n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kgp5so_.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1kgp5so_.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp1kgp5so_.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcgd22otf.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpcgd22otf.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpcgd22otf.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmpcgd22otf.py\"\
    , line 11, in count_upper\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    assert type(s) == str\n    return\
    \ 0\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxuxiu43t.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxuxiu43t.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpxuxiu43t.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \ \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrfmeb3b.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprrfmeb3b.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmprrfmeb3b.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmprrfmeb3b.py\"\
    , line 11, in count_upper\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyi5rjfpl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyi5rjfpl.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpyi5rjfpl.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\ncount_upper('aBCdEf') ==\
    \ 1\ncount_upper('abcdefg') == 0\ncount_upper('dBBE') == 0\n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmta87kqr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmta87kqr.py\", line 25,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpmta87kqr.py\", line\
    \ 16, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    assert type(s) == str, 'input\
    \ is not a string: {}'.format(s)\n    assert s.isalpha(), 'input is not all alphabetic:\
    \ {}'.format(s)\n    count = 0\n    for i in range(0, len(s), 2):\n        if\
    \ s[i] in 'AEIOU':\n            count += 1\n    return count\n \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbm7spgmq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbm7spgmq.py\", line 28,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpbm7spgmq.py\", line\
    \ 24, in check\n    assert candidate('') == 0\n  File \"/tmp/tmpbm7spgmq.py\"\
    , line 11, in count_upper\n    assert s.isalpha(), 'input is not all alphabetic:\
    \ {}'.format(s)\nAssertionError: input is not all alphabetic: \n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    vowels = 'aeiouAEIOU'\n\
    \    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count\
    \ += 1\n    return count\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdae7lbpw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdae7lbpw.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpdae7lbpw.py\", line\
    \ 17, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = 'AEIOU'\n    count =\
    \ 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n         \
    \   count += 1\n    return count\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccmraxqu.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpccmraxqu.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpccmraxqu.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for idx, char\
    \ in enumerate(s):\n        if char in 'AEIOU' and idx % 2 == 0:\n           \
    \ count += 1\n    return count\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n\nprint('All tests passed!')\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: "All tests passed!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    return\n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm42k22ey.py\", line\
    \ 276, in <module>\n    test_check()\n  File \"/tmp/tmpm42k22ey.py\", line 274,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpm42k22ey.py\", line\
    \ 265, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qs45bfl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp8qs45bfl.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp8qs45bfl.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(1 for i in range(0,\
    \ len(s), 2) if s[i] in 'AEIOU')\n\nassert count_upper('aBCdEf') == 1\nassert\
    \ count_upper('abcdefg') == 0\nassert count_upper('dBBE') == 0\n \n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    cnt = 0\n    for i in range(len(s)):\n\
    \        if (i % 2 == 0) and (s[i] in 'AEIOU'):\n            cnt += 1\n    return\
    \ cnt\n    \n    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n\nprint('All tests pass!')\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: "All tests pass!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return sum(s[::2].count(c) for\
    \ c in 'AEIOU')\n    #return sum(1 for c in s[::2] if c in 'AEIOU') # itertools.count()\
    \ is faster\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n  \
    \  assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert\
    \ candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count =\
    \ 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n        \
    \    count += 1\n    \n    return count\ns = 'aBCdEf'\ns[1::2]\n\ncount_upper(s)\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\nassert count_upper('dBBE') == 0\n\nprint(\"Success!\"\
    )\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: "Success!\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    raise NotImplementedError\n \n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9amo9q0n.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp9amo9q0n.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp9amo9q0n.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmp9amo9q0n.py\"\
    , line 10, in count_upper\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    count_upper('aBCdEf')\ndef check(candidate):\n    assert candidate('aBCdEf') ==\
    \ 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n\
    \    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpimqzygb_.py\", line\
    \ 12, in <module>\n    count_upper('aBCdEf')\n  File \"/tmp/tmpimqzygb_.py\",\
    \ line 11, in count_upper\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    c = 0\n    for i in range(len(s)):\n\
    \        if s[i].isupper() and i % 2 == 0:\n            c += 1\n    return c\n\
    \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30wngl4o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp30wngl4o.py\", line 27,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp30wngl4o.py\", line\
    \ 18, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    s = s.upper()\n\
    \    count = 0\n    for i in range(len(s)):\n        if s[i] in ('A', 'E', 'I',\
    \ 'O', 'U') and i % 2 == 0:\n            count += 1\n    return count\n    raise\
    \ NotImplementedError()\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n \n \ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdyu5g2y1.py\", line\
    \ 18, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    up_count\
    \ = 0\n    vowel = ['A', 'E', 'I', 'O', 'U']\n    for x in range(0, len(s), 2):\n\
    \        if s[x] in vowel:\n            up_count += 1\n    return up_count\ndef\
    \ check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7dn3varc.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7dn3varc.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp7dn3varc.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return count_vowels(s, True)\n\
    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4qj2n0ri.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp4qj2n0ri.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp4qj2n0ri.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmp4qj2n0ri.py\"\
    , line 10, in count_upper\n    return count_vowels(s, True)\nNameError: name 'count_vowels'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpesxn1i7s.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpesxn1i7s.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpesxn1i7s.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O',\
    \ 'U']\n    return sum([1 for i in range(0, len(s), 2) if s[i] in vowels])\n\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    assert type(s) == str\n    assert\
    \ len(s) >= 0\n    \n    count = 0\n    for i in range(0, len(s), 2):\n      \
    \  if s[i] in 'AEIOU':\n            count += 1\n    return count\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('aBCdEf') == 1\nassert count_upper('dBBE') == 0\nassert\
    \ count_upper('dBBE') == 0\nassert count_upper('dBbE') == 0\nassert count_upper('dBbE')\
    \ == 0\nassert count_upper('dBBbE') == 1\nassert count_upper('dBbE') == 0\ndef\
    \ check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return len([i for i in range(0,\
    \ len(s), 2) if is_upper_vowel(s[i])])\n\ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpniz722w0.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpniz722w0.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpniz722w0.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmpniz722w0.py\"\
    , line 10, in count_upper\n    return len([i for i in range(0, len(s), 2) if is_upper_vowel(s[i])])\n\
    \  File \"/tmp/tmpniz722w0.py\", line 10, in <listcomp>\n    return len([i for\
    \ i in range(0, len(s), 2) if is_upper_vowel(s[i])])\nNameError: name 'is_upper_vowel'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n        \ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzt39od7u.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpzt39od7u.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpzt39od7u.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    counter\
    \ = 0\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    for i in range(0, len(s), 2):\n\
    \        if s[i] in vowels:\n            counter += 1\n    return counter\nassert\
    \ count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE')\
    \ == 0\n \n \n \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n\
    \    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n   \
    \ assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    evens = s[::2]\n    count = 0\n\
    \    upper_vowels = 'AEIOU'\n    for x in evens:\n        if x in upper_vowels:\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # TODO: Implement this function\n\
    \    pass\n\nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n \n \ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46fubtaq.py\", line\
    \ 13, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    count =\
    \ 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n\
    \            count += 1\n    return count\n    raise NotImplementedError()\nassert\
    \ count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert count_upper('dBBE')\
    \ == 0\n \n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdktnvume.py\", line\
    \ 17, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \ndef check(candidate):\n    assert candidate('aBCdEf') ==\
    \ 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n\
    \    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gk_z32i.py\", line\
    \ 276, in <module>\n    test_check()\n  File \"/tmp/tmp2gk_z32i.py\", line 274,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp2gk_z32i.py\", line\
    \ 265, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n            count\
    \ += 1\n    return count\ncount_upper('aBCdEf')\n\ncount_upper('dBBE')\ncount_upper('abcdefg')\n\
    def check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjb90_9xm.py\", line\
    \ 15, in <module>\n    count_upper('aBCdEf')\n  File \"/tmp/tmpjb90_9xm.py\",\
    \ line 12, in count_upper\n    if i % 2 == 0 and s[i] in VOWELS and s[i].isupper():\n\
    NameError: name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # Your code here. Use a loop\
    \ and/or a conditional.\n    counter = 0\n    for i in range(len(s)):\n      \
    \  if s[i].isupper() and (i % 2 == 0):\n            counter += 1\n    return counter\n\
    assert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8se6cm6i.py\", line\
    \ 16, in <module>\n    assert count_upper('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5t6v_tpx.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp5t6v_tpx.py\", line 22,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp5t6v_tpx.py\", line\
    \ 13, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    n = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            n += 1\n    return n\n\
    \ \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\nassert count_upper('a') == 0\nassert count_upper('ab')\
    \ == 0\nassert count_upper('abc') == 0\nassert count_upper('abcd') == 0\nassert\
    \ count_upper('abce') == 1\nassert count_upper('ABCD') == 2\nassert count_upper('ABCE')\
    \ == 2\nassert count_upper('ABCF') == 1\nassert count_upper('ABCG') == 0\nassert\
    \ count_upper('ABCDE') == 2\nassert count_upper('ABCEF') == 1\nassert count_upper('ABCEG')\
    \ == 0\n \n \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n   \
    \ assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert\
    \ candidate('B') == 0\n    assert candidate('U') == 1\n    assert candidate('')\
    \ == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnb1kh6n.py\", line\
    \ 23, in <module>\n    assert count_upper('abce') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    x = 0\n    for i in range(len(s)):\n\
    \        if s[i].isupper() and i % 2 == 0:\n            x += 1\n    return x\n\
    \    \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp55q17ae8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp55q17ae8.py\", line 26,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp55q17ae8.py\", line\
    \ 17, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    counter = 0\n    for i in range(0,\
    \ len(s), 2):\n        if s[i] in 'AEIOU':\n            counter += 1\n    return\
    \ counter\n \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg')\
    \ == 0\nassert count_upper('dBBE') == 0\n \n \ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return 0  # stub\n\n\ndef check(candidate):\n\
    \    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n \
    \   assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n    assert\
    \ candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprvyp5k1s.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprvyp5k1s.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmprvyp5k1s.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    i = 0\n    while\
    \ i < len(s):\n        if (s[i] in VOWELS) and s[i].isupper():\n            count\
    \ += 1\n        i += 2\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('aBCdEf') == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE')\
    \ == 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9h8pnrc1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9h8pnrc1.py\", line 29,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmp9h8pnrc1.py\", line\
    \ 20, in check\n    assert candidate('aBCdEf') == 1\n  File \"/tmp/tmp9h8pnrc1.py\"\
    , line 13, in count_upper\n    if (s[i] in VOWELS) and s[i].isupper():\nNameError:\
    \ name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    return len([c for i, c in enumerate(s)\
    \ if c in ['A', 'E', 'I', 'O', 'U'] and i % 2 == 0])\ncount_upper('aBCdEf')\n\n\
    count_upper('abcdefg')\n\ncount_upper('dBBE')\n\ncount_upper('AEiou')\n\ncount_upper('er5t')\n\
    \ \ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert candidate('abcdefg')\
    \ == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B') == 0\n  \
    \  assert candidate('U') == 1\n    assert candidate('') == 0\n    assert candidate('EEEE')\
    \ == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    c = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            c += 1\n    return c\n\
    count_upper('aBCdEf')\n\ncount_upper('abcdefg')\n\ncount_upper('dBBE')\n\ncount_upper('aBbCcDdEeFf')\n\
    \ncount_upper('AbCdEf')\n\nassert count_upper('abcdefg') == 0\nassert count_upper('aBCdEf')\
    \ == 1\nassert count_upper('dBBE') == 0\n\nassert count_upper('aBbCcDdEeFf') ==\
    \ 2\nassert count_upper('AbCdEf') == 3\n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb8djp50t.py\", line\
    \ 29, in <module>\n    assert count_upper('aBbCcDdEeFf') == 2\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n\
    \        if i % 2 == 0 and s[i] in 'AEIOU':\n            count += 1\n    return\
    \ count\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\n\ndef check(candidate):\n    assert candidate('aBCdEf') == 1\n    assert\
    \ candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')\
    \ == 0\n    assert candidate('U') == 1\n    assert candidate('') == 0\n    assert\
    \ candidate('EEEE') == 2\n\ndef test_check():\n    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxfici4m.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpaxfici4m.py\", line 23,\
    \ in test_check\n    check(count_upper)\n  File \"/tmp/tmpaxfici4m.py\", line\
    \ 14, in check\n    assert candidate('aBCdEf') == 1\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count\
    \ the number of uppercase vowels in even indices.\n    \n    For example:\n  \
    \  count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n   \
    \ count_upper('dBBE') returns 0\n    \"\"\"\n    # YOUR CODE HERE\n    raise NotImplementedError()\n\
    \nassert count_upper('aBCdEf') == 1\nassert count_upper('abcdefg') == 0\nassert\
    \ count_upper('dBBE') == 0\n \ndef check(candidate):\n    assert candidate('aBCdEf')\
    \ == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') ==\
    \ 0\n    assert candidate('B') == 0\n    assert candidate('U') == 1\n    assert\
    \ candidate('') == 0\n    assert candidate('EEEE') == 2\n\ndef test_check():\n\
    \    check(count_upper)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlm96tex.py\", line\
    \ 13, in <module>\n    assert count_upper('aBCdEf') == 1\n  File \"/tmp/tmpxlm96tex.py\"\
    , line 11, in count_upper\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
