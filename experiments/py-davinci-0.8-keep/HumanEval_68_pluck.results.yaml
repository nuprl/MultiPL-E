name: HumanEval_68_pluck
language: py
results:
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    res = []\n    for i, num in enumerate(arr):\n        if not num % 2:\n  \
    \          if not res:\n                res = [num, i]\n            else:\n  \
    \              if num < res[0]:\n                    res = [num, i]\n        \
    \        elif num == res[0]:\n                    if i < res[1]:\n           \
    \             res = [num, i]\n    return res\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    return [2, 1]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbspmlr0q.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpbspmlr0q.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpbspmlr0q.py\", line 42, in\
    \ check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjm55p5wb.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpjm55p5wb.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpjm55p5wb.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_idx = [i for i, n in enumerate(arr)\
    \ if n % 2 == 0]\n    if not even_idx:\n        return []\n    even_nums = [arr[i]\
    \ for i in even_idx]\n    min_idx = even_idx[even_nums.index(min(even_nums))]\n\
    \    return [arr[min_idx], min_idx]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    res = []\n    for i, x in enumerate(arr):\n        if x % 2 == 0:\n     \
    \       if not res:\n                res = [x, i]\n            else:\n       \
    \         if x < res[0]:\n                    res = [x, i]\n    return res\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = list(filter(lambda x: x\
    \ % 2 == 0, arr))\n    if len(evens) == 0:\n        return []\n    min_even =\
    \ min(evens)\n    return [min_even, arr.index(min_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = list(filter(lambda n: n % 2 == 0, arr))\n    evens.sort()\n    if\
    \ len(evens) > 0:\n        return [evens[0], arr.index(evens[0])]\n    return\
    \ []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3ft9ea_.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpl3ft9ea_.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpl3ft9ea_.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    even_values = []\n    # Check if\
    \ there is any even values\n    for i in range(len(arr)):\n        if arr[i] %\
    \ 2 == 0:\n            even_values.append(arr[i])\n    if len(even_values) ==\
    \ 0:\n        return []\n    even_values.sort()\n    lowest_even = even_values[0]\n\
    \    # Check for lowest even index\n    for i in range(len(arr)):\n        if\
    \ arr[i] == lowest_even:\n            return [lowest_even, i]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    smallest_even_value = None\n    smallest_even_index\
    \ = None\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n\
    \            if smallest_even_value is None or value < smallest_even_value:\n\
    \                smallest_even_value = value\n                smallest_even_index\
    \ = index\n    if smallest_even_value is None:\n        return []\n    return\
    \ [smallest_even_value, smallest_even_index]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    smallest_value, smallest_index\
    \ = 0, 0\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n          \
    \  if smallest_value == 0:\n                smallest_value, smallest_index = v,\
    \ i\n            elif v < smallest_value:\n                smallest_value, smallest_index\
    \ = v, i\n    if smallest_value == 0:\n        return []\n    return [smallest_value,\
    \ smallest_index]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptiphwxho.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmptiphwxho.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptiphwxho.py\", line 53, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_even = min(x for x in arr if x %\
    \ 2 == 0)\n    min_even_idx = arr.index(min_even)\n    return [min_even, min_even_idx]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl5uyjzym.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpl5uyjzym.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpl5uyjzym.py\", line 51, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpl5uyjzym.py\"\
    , line 39, in pluck\n    min_even = min(x for x in arr if x % 2 == 0)\nValueError:\
    \ min() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_values = [x for x in arr if x % 2 == 0]\n    if even_values:\n     \
    \   smallest_even = min(even_values)\n        smallest_index = arr.index(smallest_even)\n\
    \        return [smallest_even, smallest_index]\n    return []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    #find minimum even value\n    min_even = 10000\n    min_index = 0\n    if\
    \ arr:\n        for index, value in enumerate(arr):\n            if value % 2\
    \ == 0 and value < min_even:\n                min_even = value\n             \
    \   min_index = index\n        if min_even == 10000:\n            return []\n\
    \        else:\n            return [min_even, min_index]\n    else:\n        return\
    \ []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n\
    \        return []\n    min_value = min(evens)\n    return [min_value, arr.index(min_value)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even = -1\n    smallest_even_idx = -1\n    for idx, num in enumerate(arr):\n\
    \        if num % 2 == 0:\n            if smallest_even == -1:\n             \
    \   smallest_even = num\n                smallest_even_idx = idx\n           \
    \ else:\n                if num < smallest_even:\n                    smallest_even\
    \ = num\n                    smallest_even_idx = idx\n    if smallest_even !=\
    \ -1:\n        return [smallest_even, smallest_even_idx]\n    return []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # if there is a zero in the list, then this is the smallest even value\n\
    \    if 0 in arr:\n        # return the first zero and its index\n        return\
    \ [0, arr.index(0)]\n    # if there are no even values, the the smallest even\
    \ value is not found, return []\n    if all(n % 2 != 0 for n in arr):\n      \
    \  return []\n    # find the smallest even value\n    min_even = min(i for i in\
    \ arr if i % 2 == 0)\n    # find the index of the smallest even value\n    min_even_idx\
    \ = arr.index(min_even)\n    # return the list that contains the smallest even\
    \ value and its index\n    return [min_even, min_even_idx]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_even = min(list(filter(lambda x:\
    \ x%2 == 0, arr)))\n    return [min_even, arr.index(min_even)]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjql1mp4e.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpjql1mp4e.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpjql1mp4e.py\", line 50, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpjql1mp4e.py\"\
    , line 39, in pluck\n    min_even = min(list(filter(lambda x: x%2 == 0, arr)))\n\
    ValueError: min() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    min_val = min(arr)\n    if min_val\
    \ % 2 == 0:\n        return [min_val, arr.index(min_val)]\n    else:\n       \
    \ for n in arr:\n            if n % 2 == 0:\n                return [n, arr.index(n)]\n\
    \        return []\n\ntests = [\n    [4,2,3],\n    [1,2,3],\n    [],\n    [5,\
    \ 0, 3, 0, 4, 2]\n]\n\nfor t in tests:\n    print(pluck(t))\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: "[2, 1]\n[2, 1]\n[]\n[0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even = float('inf')\n    smallest_even_idx = float('inf')\n    for\
    \ idx, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_even:\n\
    \            smallest_even = val\n            smallest_even_idx = idx\n    return\
    \ [smallest_even, smallest_even_idx] if smallest_even_idx != float('inf') else\
    \ []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    return [x for x in arr if x % 2 == 0]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jaf6qth.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp1jaf6qth.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp1jaf6qth.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even = sorted(filter(lambda x: x % 2 == 0, arr))\n    if not even:\n    \
    \    return []\n    return [even[0], arr.index(even[0])]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # If given array is empty return empty list\n    if not arr:\n        return\
    \ []\n\n    # Find the minimum even value, and first index of the minimum even\
    \ value\n    minimum = float('inf')\n    minimum_index = float('inf')\n    for\
    \ i, val in enumerate(arr):\n        if val % 2 == 0 and val < minimum:\n    \
    \        minimum = val\n            minimum_index = i\n\n    # If no even numbers,\
    \ return empty list\n    if minimum == float('inf'):\n        return []\n\n  \
    \  # Else return minimum even value and its index\n    return [minimum, minimum_index]\n\
    \nprint(pluck([4,2,3]))\nprint(pluck([1,2,3]))\nprint(pluck([]))\nprint(pluck([5,\
    \ 0, 3, 0, 4, 2]))\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: "[2, 1]\n[2, 1]\n[]\n[0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # check for empty array\n    if not arr:\n        return []\n\n    # check\
    \ if any even values exist\n    for node in arr:\n        if node % 2 == 0:\n\
    \            # break if there is at least one even value\n            break\n\
    \    else:\n        # otherwise return empty array\n        return []\n\n    #\
    \ collect all the even values and the index of the node\n    # but only the smallest\
    \ even value and its index\n    smallest_even_value = 0\n    smallest_even_index\
    \ = 0\n    for i, node in enumerate(arr):\n        if node % 2 == 0:\n       \
    \     if node < smallest_even_value:\n                smallest_even_value = node\n\
    \                smallest_even_index = i\n\n    return [smallest_even_value, smallest_even_index]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0cs14bpe.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmp0cs14bpe.py\", line 72,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0cs14bpe.py\", line 62, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_even = float('inf')\n    min_idx = -1\n    for i, a in enumerate(arr):\n\
    \        if a % 2 == 0 and a < min_even:\n            min_even = a\n         \
    \   min_idx = i\n    return [min_even, min_idx] if min_idx >= 0 else []\n\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    temp = []\n    for i, v in enumerate(arr):\n        if v % 2 == 0:\n    \
    \        temp.append((v, i))\n    if not temp:\n        return []\n    t = min(temp)\n\
    \    return [t[0], t[1]]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    #this will keep track of the index of\
    \ the smallest even value\n    # and will be set to infinity if no even values\
    \ are found\n    index = math.inf\n\n    #this will keep track of the smallest\
    \ even value\n    # and will be set to infinit if no even values are found\n \
    \   smallest_even = math.inf\n\n    for idx, value in enumerate(arr):\n      \
    \  if value % 2 == 0:\n            if value < smallest_even:\n               \
    \ smallest_even = value\n                index = idx\n            #if there is\
    \ a tie, use the smallest index\n            elif value == smallest_even:\n  \
    \              if idx < index:\n                    index = idx\n    #if no even\
    \ values are found, the index and smallest even will be infinity\n    if index\
    \ == math.inf:\n        return []\n    return [smallest_even, index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62mij8na.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmp62mij8na.py\", line 72,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp62mij8na.py\", line 62, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmp62mij8na.py\"\
    , line 41, in pluck\n    index = math.inf\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyp2j9g2_.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpyp2j9g2_.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpyp2j9g2_.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens) == 0:\n\
    \        return []\n    else:\n        return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [v for v in arr if v % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    return []\n\n\nfrom utils import Test\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1uxzokld.py\", line\
    \ 40, in <module>\n    from utils import Test\nModuleNotFoundError: No module\
    \ named 'utils'\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Return empty list if arr is empty\n    if len(arr) == 0:\n        return\
    \ []\n\n    # Initialize the smallest even value and the index to None\n    smallest_even_value\
    \ = None\n    index = None\n\n    # Iterate through the array to find the smallest\
    \ even value\n    for i in range(len(arr)):\n        # If the current value is\
    \ even and it is smallest, update the smallest even value and index\n        if\
    \ arr[i] % 2 == 0 and smallest_even_value == None or arr[i] % 2 == 0 and arr[i]\
    \ < smallest_even_value:\n            smallest_even_value = arr[i]\n         \
    \   index = i\n\n    # If the smallest even value is None, return empty list,\
    \ otherwise return the result\n    if smallest_even_value == None:\n        return\
    \ []\n    else:\n        return [smallest_even_value, index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) > 0:\n        for index, node in enumerate(arr):\n          \
    \  if node % 2 == 0:\n                return [node, index]\n    \n    return []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4ixe7jw.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpc4ixe7jw.py\", line 55,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpc4ixe7jw.py\", line 45, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = []\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n\
    \            evens.append([val, i])\n    \n    if len(evens) == 0:\n        return\
    \ []\n    \n    evens.sort()\n    return evens[0]\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    if len(arr) == 1:\n        return [arr[0],\
    \ 0]\n    even = [n for n in arr if n % 2 == 0]\n    if not even:\n        return\
    \ []\n    return [min(even), arr.index(min(even))]\ndef check(candidate):\n  \
    \  assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even_value = min([node for node in arr if node % 2 == 0], default=0)\n\
    \    smallest_even_value_index = arr.index(smallest_even_value) if smallest_even_value\
    \ != 0 else 0\n    return [smallest_even_value, smallest_even_value_index]\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_l8i_yzq.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp_l8i_yzq.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp_l8i_yzq.py\", line 43, in\
    \ check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = []\n    indices = []\n    for i, n in enumerate(arr):\n        if\
    \ n % 2 == 0:\n            evens.append(n)\n            indices.append(i)\n  \
    \  if len(evens) > 0:\n        return [evens[0], indices[0]]\n    return []\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpus7ekiex.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpus7ekiex.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpus7ekiex.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    min_even_value = min([x for x in\
    \ arr if x % 2 == 0])\n    return [min_even_value, arr.index(min_even_value)]\n\
    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_iwy5yo.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpv_iwy5yo.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpv_iwy5yo.py\", line 51, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpv_iwy5yo.py\"\
    , line 39, in pluck\n    min_even_value = min([x for x in arr if x % 2 == 0])\n\
    ValueError: min() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    smallest_even = float('inf')\n    smallest_index\
    \ = float('inf')\n    for i, val in enumerate(arr):\n        if val % 2 == 0 and\
    \ val < smallest_even:\n            smallest_even = val\n            smallest_index\
    \ = i\n    if smallest_even != float('inf'):\n        return [smallest_even, smallest_index]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    small = [math.inf, math.inf]\n    for i, n in enumerate(arr):\n        if\
    \ n > 0 and n % 2 == 0 and n < small[0]:\n            small = [n, i]\n    return\
    \ small if small[0] != math.inf else []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp48mc4p4d.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmp48mc4p4d.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp48mc4p4d.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmp48mc4p4d.py\"\
    , line 37, in pluck\n    small = [math.inf, math.inf]\nNameError: name 'math'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = None\n    idx = None\n    smallest_idx = None\n    for i, n in\
    \ enumerate(arr):\n        if n % 2 == 0:\n            if smallest is None or\
    \ n < smallest:\n                smallest = n\n                smallest_idx =\
    \ i\n    if smallest_idx is not None:\n        return [arr[smallest_idx], smallest_idx]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = None\n    idx = None\n    for i, num in enumerate(arr):\n    \
    \    if num % 2 == 0:\n            if smallest is None or num < smallest:\n  \
    \              smallest = num\n                idx = i\n    return [smallest,\
    \ idx] if smallest is not None else []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Filter the array to just even values\n    # Sort by value, in the case\
    \ of a tie, sort by the index\n    # Return the first item in the array\n    pass\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr3jrvxw5.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpr3jrvxw5.py\", line 52,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpr3jrvxw5.py\", line 42, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = []\n    for i, n in enumerate(arr):\n\
    \        if n % 2 == 0:\n            evens.append([n, i])\n    if len(evens) ==\
    \ 0:\n        return []\n    return sorted(evens)[0]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    else:\n        res = []\n        for\
    \ i, v in enumerate(arr):\n            if not v % 2:\n                res.append([v,\
    \ i])\n        if not res:\n            return []\n        else:\n           \
    \ res.sort()\n            return res[0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # evens = [x for x in arr if x % 2 == 0]\n    # if evens:\n    #     return\
    \ [min(evens), arr.index(min(evens))]\n    # return []\n\n    evens = [x for x\
    \ in arr if x % 2 == 0]\n    if evens:\n        idx = arr.index(min(evens))\n\
    \        return [arr[idx], idx]\n    return []\n\n\ndef check(candidate):\n  \
    \  assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    index = 0\n    res = []\n    for i, num in enumerate(arr):\n        if num\
    \ % 2 == 0:\n            if len(res) == 0:\n                res.append(num)\n\
    \                index = i\n            else:\n                if num < res[0]:\n\
    \                    res[0] = num\n                    index = i\n    if len(res)\
    \ == 0:\n        return []\n    else:\n        return [res[0], index]\n\ntestcases\
    \ = [\n    ([4,2,3], [2, 1]),\n    ([1,2,3], [2, 1]),\n    ([], []),\n    ([5,\
    \ 0, 3, 0, 4, 2], [0, 1]),\n    ([5, 0, 3, 0, 4, 2, 5, 7, 8, 9, 10, 3, 4, 12,\
    \ 6, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,\
    \ 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108,\
    \ 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124,\
    \ 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,\
    \ 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156,\
    \ 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmps08m7kpx.py\", line 59\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = []\n    for i, node in enumerate(arr):\n\
    \        if node%2 == 0:\n            evens.append((node, i))\n    if not evens:\n\
    \        return []\n    return min(evens)\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxm9gqqz.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpzxm9gqqz.py\", line 57,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpzxm9gqqz.py\", line 47, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even: int = 0\n    index: int = 0\n    for i, val in enumerate(arr):\n  \
    \      if val % 2 == 0:\n            if even == 0:\n                even = val\n\
    \                index = i\n            else:\n                if val < even:\n\
    \                    even = val\n                    index = i\n    return [even,\
    \ index] if even > 0 else []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp347rlue5.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp347rlue5.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp347rlue5.py\", line 53, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    is_empty = len(arr) == 0\n    if is_empty:\n        return []\n\n    evens\
    \ = [e for e in arr if e % 2 == 0]\n    if len(evens) == 0:\n        return []\n\
    \n    evens.sort()\n    min_even = evens[0]\n    min_even_idx = arr.index(min_even)\n\
    \    return [min_even, min_even_idx]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Edge cases\n    if not arr:\n        return []\n    # Get all the even\
    \ values in the array\n    even_numbers = [x for x in arr if x % 2 == 0]\n   \
    \ # Check if there are even values or not\n    if not even_numbers:\n        return\
    \ []\n    # Get the smallest value from the even numbers list\n    smallest_even\
    \ = min(even_numbers)\n    # Get the index of the smallest value in the array\n\
    \    smallest_even_index = arr.index(smallest_even)\n    # Create the list with\
    \ the format [smallest_value, index]\n    even_index = [smallest_even, smallest_even_index]\n\
    \    # Return the list\n    return even_index\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # create array of even nodes, if none return []\n    even_nodes = [node for\
    \ node in arr if node % 2 == 0]\n    if len(even_nodes) == 0:\n        return\
    \ []\n    else:\n        # find smallest even node\n        smallest_even = min(even_nodes)\n\
    \        # find the index of that node\n        smallest_even_index = arr.index(smallest_even)\n\
    \        # return node in list\n        return [smallest_even, smallest_even_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_value = arr[0]\n    smallest_value_index = 0\n    for i in range(1,\
    \ len(arr)):\n        if arr[i] < smallest_value:\n            smallest_value\
    \ = arr[i]\n            smallest_value_index = i\n    if smallest_value % 2 ==\
    \ 0:\n        return [smallest_value, smallest_value_index]\n    else:\n     \
    \   return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplme6izju.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmplme6izju.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplme6izju.py\", line 49, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_so_far = math.inf\n    min_index\
    \ = 0\n    for i, n in enumerate(arr):\n        if n % 2 == 0 and n < min_so_far:\n\
    \            min_so_far = n\n            min_index = i\n    if min_so_far == math.inf:\n\
    \        return []\n    return [min_so_far, min_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcxk_itac.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpcxk_itac.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcxk_itac.py\", line 49, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmpcxk_itac.py\"\
    , line 39, in pluck\n    min_so_far = math.inf\nNameError: name 'math' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    try:\n        return [smallest, arr.index(smallest)]\n\
    \    except ValueError:\n        return []\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfc9wrdr.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpzfc9wrdr.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpzfc9wrdr.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = None\n    index = None\n    for i, x in enumerate(arr):\n    \
    \    if x % 2 == 0:\n            if smallest is None or x < smallest:\n      \
    \          smallest = x\n                index = i\n    return [smallest, index]\
    \ if smallest is not None else []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    smallest = min(evens)\n    return [smallest, arr.index(smallest)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n\
    \            return [arr[i], i]\n    return []\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3nomazto.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmp3nomazto.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp3nomazto.py\", line 44, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [a for a in arr if a % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_nums = []\n    for i, num in enumerate(arr):\n\
    \        if num % 2 == 0:\n            even_nums.append((num, i))\n    if not\
    \ even_nums:\n        return []\n    even_nums.sort()\n    return [even_nums[0][0],\
    \ even_nums[0][1]]\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    return [x for x in arr if not x % 2][:1]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf3ya8uyl.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpf3ya8uyl.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpf3ya8uyl.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = []\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n   \
    \         evens.append((n, i))\n    evens.sort()\n    if evens:\n        return\
    \ [evens[0][0], evens[0][1]]\n    return []\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    even_values = [n for n in arr if\
    \ n % 2 == 0]\n    if len(even_values) == 0:\n        return []\n    smallest_even\
    \ = min(even_values)\n    smallest_even_index = arr.index(smallest_even)\n   \
    \ return [smallest_even, smallest_even_index]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = None\n    smallest_index = None\n    for i, node in enumerate(arr):\n\
    \        if node % 2 == 0:\n            if smallest is None or node < smallest:\n\
    \                smallest = node\n                smallest_index = i\n    if smallest\
    \ is None:\n        return []\n    return [smallest, smallest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_value = None\n    smallest_value_idx = -1\n    for i, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            if smallest_value is None or value <\
    \ smallest_value:\n                smallest_value = value\n                smallest_value_idx\
    \ = i\n            elif value == smallest_value:\n                smallest_value_idx\
    \ = min(smallest_value_idx, i)\n    return [smallest_value, smallest_value_idx]\
    \ if smallest_value is not None else []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [_ for _ in arr if _ % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppyfqxzts.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmppyfqxzts.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppyfqxzts.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = sorted([e for e in arr if e %\
    \ 2 == 0])\n    idx = arr.index(evens[0])\n    return [evens[0], idx]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi711pter.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpi711pter.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpi711pter.py\", line 51, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpi711pter.py\"\
    , line 40, in pluck\n    idx = arr.index(evens[0])\nIndexError: list index out\
    \ of range\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    return next(x for x in arr if x % 2 == 0)\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm1_84s90.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpm1_84s90.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpm1_84s90.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = arr[0]\n    index = 0\n    for i, a in enumerate(arr):\n     \
    \   if a > 0 and a % 2 == 0 and a < smallest:\n            smallest = a\n    \
    \        index = i\n    \n    if smallest == arr[0]:\n        return []\n    else:\n\
    \        return [smallest, index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu8f_vz95.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpu8f_vz95.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpu8f_vz95.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = 0\n    for node in arr:\n        if node % 2 == 0:\n         \
    \   smallest = node\n            break\n    for idx, node in enumerate(arr):\n\
    \        if node % 2 == 0 and node < smallest:\n            smallest = node\n\
    \            smallest_idx = idx\n    try:\n        return [smallest, smallest_idx]\n\
    \    except:\n        return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfd8b9kf.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpqfd8b9kf.py\", line 62,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpqfd8b9kf.py\", line 53, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_even = -1\n    min_even_idx = -1\n    for i, num in enumerate(arr):\n\
    \        if num % 2 == 0:\n            if min_even == -1:\n                min_even\
    \ = num\n                min_even_idx = i\n            else:\n               \
    \ if num < min_even:\n                    min_even = num\n                   \
    \ min_even_idx = i\n    if min_even_idx == -1:\n        return []\n    return\
    \ [min_even, min_even_idx]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # filter out non-even\n    filtered = list(filter(lambda x: x % 2 == 0, arr))\n\
    \    #  if they exist, get the smallest value and its index\n    #  else return\
    \ []\n    return [min(filtered), arr.index(min(filtered))] if filtered else []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    res = [x for x in arr if x % 2 == 0]\n    if not res:\n        return []\n\
    \    else:\n        min_val = min(res)\n        for i, x in enumerate(arr):\n\
    \            if x == min_val:\n                return [x, i]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_val = float('inf')\n    min_idx = -1\n    for i, v in enumerate(arr):\n\
    \        if v % 2 == 0 and v < min_val:\n            min_val = v\n           \
    \ min_idx = i\n    return [min_val, min_idx] if min_idx != -1 else []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_even_value = None\n    min_even_value_idx = -1\n    for idx, node in\
    \ enumerate(arr):\n        if node % 2 == 0:\n            if min_even_value is\
    \ None or node < min_even_value:\n                min_even_value = node\n    \
    \            min_even_value_idx = idx\n    if min_even_value is None:\n      \
    \  return []\n    return [min_even_value, min_even_value_idx]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Find lowest even number if any\n    lowest = None\n    lowest_idx = None\n\
    \    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if lowest\
    \ is None or num < lowest:\n                lowest = num\n                lowest_idx\
    \ = i\n    \n    if lowest is None:\n        return []\n    else:\n        return\
    \ [lowest, lowest_idx]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = [el for el in arr if el\
    \ % 2 == 0]\n    if len(evens) == 0:\n        return []\n    min_even = min(evens)\n\
    \    min_idx = arr.index(min_even)\n    return [min_even, min_idx]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    ret = []\n    for idx, item in enumerate(arr):\n        if not item % 2:\n\
    \            if not ret:\n                ret = [item, idx]\n            elif\
    \ item < ret[0]:\n                ret = [item, idx]\n    return ret\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # if the array is empty, return an empty array\n    if len(arr) < 1:\n  \
    \      return []\n    # filter the even nodes out\n    evens = [even for even\
    \ in arr if even % 2 == 0]\n    # if the array of evens is empty, return an empty\
    \ array\n    if len(evens) < 1:\n        return []\n    else:\n        # sort\
    \ the array of evens from smallest to largest\n        evens.sort()\n        #\
    \ if there is only one even value, return it\n        if len(evens) == 1:\n  \
    \          # find the index of the even value\n            i = arr.index(evens[0])\n\
    \            # return a new array containing the even value, and its index\n \
    \           return [evens[0], i]\n        else:\n            # find the first\
    \ even value in the array\n            plucked = evens[0]\n            # find\
    \ the index of the first even value\n            i = arr.index(plucked)\n    \
    \        # return a new array containing the even value, and its index\n     \
    \       return [plucked, i]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = 10001\n    smallest_even = []\n    if not arr:\n        return\
    \ []\n    else:\n        for x in range(len(arr)):\n            if arr[x] < smallest\
    \ and arr[x] % 2 == 0:\n                smallest = arr[x]\n                smallest_even\
    \ = [smallest, x]\n            elif arr[x] == smallest and arr[x] % 2 == 0:\n\
    \                smallest_even = [smallest, x]\n        return smallest_even\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzd0pfjxa.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpzd0pfjxa.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpzd0pfjxa.py\", line 53, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [ x for x in arr if x % 2 == 0 ]\n    if len(evens) > 0:\n      \
    \  idx = arr.index(min(evens))\n        return [ arr[idx], idx ]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_val = min(arr)\n    count = arr.count(min_val)\n\
    \    if count != 1 and count != 0:\n        return [min_val, arr.index(min_val)]\n\
    \    return [min_val, arr.index(min_val) + 1]\n\nprint(pluck([4,2,3]))\nprint(pluck([1,2,3]))\n\
    print(pluck([]))\nprint(pluck([5, 0, 3, 0, 4, 2]))\ndef check(candidate):\n  \
    \  assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: "[2, 2]\n[1, 1]\n[]\n[0, 1]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphl5rmugf.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphl5rmugf.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphl5rmugf.py\", line 50, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    value_list = [v for v in arr if v % 2\
    \ == 0]\n    if not value_list:\n        return []\n    min_value = min(value_list)\n\
    \    index = arr.index(min_value)\n    return [min_value, index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    # Find the even values.\n    evens =\
    \ [n for n in arr if n % 2 == 0]\n    # Return the first even value.\n    if evens:\n\
    \        return [evens[0], arr.index(evens[0])]\n    return []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw9cmtw54.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpw9cmtw54.py\", line 56,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpw9cmtw54.py\", line 46, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    for idx, v in enumerate(arr):\n        if v % 2 == 0:\n            return\
    \ [v, idx]\n    return []\n    \n    \n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3hho713o.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp3hho713o.py\", line 55,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp3hho713o.py\", line 45, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    return [ [node, index] for index, node in enumerate(arr) if node % 2 == 0\
    \ ]\n\n\nprint(pluck([4,2,3]))  # [2, 1]\nprint(pluck([1,2,3]))  # [2, 1]\nprint(pluck([]))\
    \       # []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # [0, 1]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: "[[4, 0], [2, 1]]\n[[2, 1]]\n[]\n[[0, 1], [0, 3], [4, 4], [2, 5]]\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7_6fq0k5.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmp7_6fq0k5.py\", line 55,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp7_6fq0k5.py\", line 45, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_nums = [x for x in arr if x % 2\
    \ == 0]\n    if not even_nums:\n        return []\n    smallest_even = min(even_nums)\n\
    \    return [smallest_even, arr.index(smallest_even)]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    out = [arr[0], 0]\n    for index,\
    \ val in enumerate(arr):\n        if val%2 == 0 and val < out[0]:\n          \
    \  out = [val, index]\n    return out\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpht_9m2av.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpht_9m2av.py\", line 55,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpht_9m2av.py\", line 46, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    even = [x for x in arr if x % 2\
    \ == 0]\n    if len(even) == 0:\n        return []\n    else:\n        return\
    \ [min(even), arr.index(min(even))]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \na = [4,2,3]\nb = [1,2,3]\nc = []\nd = [5, 0, 3, 0, 4, 2]\n\nprint(pluck(a))\n\
    print(pluck(b))\nprint(pluck(c))\nprint(pluck(d))\ndef check(candidate):\n   \
    \ assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: "[2, 1]\n[2, 1]\n[]\n[0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    else:\n        evens = []\n   \
    \     for index, value in enumerate(arr):\n            if value % 2 == 0:\n  \
    \              evens.append([value, index])\n        if evens:\n            evens.sort()\n\
    \            return evens[0]\n        else:\n            return []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    ...\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4uvns04y.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp4uvns04y.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4uvns04y.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = []\n    for i, v in enumerate(arr):\n\
    \        if v % 2 == 0:\n            evens.append((v, i))\n    if not evens:\n\
    \        return []\n    return min(evens)\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2546ds71.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp2546ds71.py\", line 57,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp2546ds71.py\", line 47, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    ans = []\n    if not arr:\n        return ans\n    small = 10 ** 10\n   \
    \ idx = -1\n    for i, elem in enumerate(arr):\n        if elem % 2 == 0 and elem\
    \ < small:\n            small = elem\n            idx = i\n    if idx == -1:\n\
    \        return ans\n    return [small, idx]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = []\n    for i, v in enumerate(arr):\n\
    \        if v % 2 == 0:\n            evens.append((v, i))\n    if not evens:\n\
    \        return []\n    return min(evens)\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ldhondk.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp0ldhondk.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0ldhondk.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Sort list of even numbers in ascending order\n    evens = sorted([num for\
    \ num in arr if num % 2 == 0])\n    # Find first even\n    first_even = evens[0]\
    \ if evens else None\n    # If first even is None or False, return []\n    if\
    \ not first_even:\n        return []\n    # Else, find index of first even and\
    \ return result\n    index = arr.index(first_even)\n    return [first_even, index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp43e88_gu.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp43e88_gu.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp43e88_gu.py\", line 52, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    return [item for item in arr if item % 2 == 0]\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    # for item in\
    \ arr:\n    #     if item % 2 == 0:\n    #         return item\n    # return [None]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ekwqhxy.py\", line\
    \ 82, in <module>\n    test_check()\n  File \"/tmp/tmp1ekwqhxy.py\", line 80,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp1ekwqhxy.py\", line 70, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # pick out only the even values\n    even_nums = list(filter(lambda x: x\
    \ % 2 == 0, arr))\n    # if there are no even values return empty list\n    if\
    \ len(even_nums) == 0:\n        return []\n    # else, get the smallest even value\n\
    \    min_even = min(even_nums)\n    # get the index of the smallest even value\n\
    \    min_index = arr.index(min_even)\n    # return list with smallest even value\
    \ and its index\n    return [min_even, min_index]\ndef check(candidate):\n   \
    \ assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    even_vals = [x for x in arr if x % 2\
    \ == 0]\n    if not even_vals:\n        return []\n    min_val = min(even_vals)\n\
    \    return [min_val, arr.index(min_val)]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    res = []\n    for idx, val in enumerate(arr):\n\
    \        if val % 2 == 0:\n            res.append((val, idx))\n    if not res:\n\
    \        return []\n    res.sort()\n    return [res[0][0], res[0][1]]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_even = min(x for x in arr if x % 2 == 0)\n    if min_even is None:\n\
    \        return []\n    return [min_even, arr.index(min_even)]\n\nassert pluck([4,2,3])\
    \ == [2, 1]\nassert pluck([1,2,3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppycg_3tt.py\", line\
    \ 44, in <module>\n    assert pluck([]) == []\n  File \"/tmp/tmppycg_3tt.py\"\
    , line 37, in pluck\n    min_even = min(x for x in arr if x % 2 == 0)\nValueError:\
    \ min() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    else:\n        evens = list(filter(lambda\
    \ x: x % 2 == 0, arr))\n        if not evens:\n            return []\n       \
    \ else:\n            min_even = min(evens)\n            min_even_idx = arr.index(min_even)\n\
    \            return [min_even, min_even_idx]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    result = []\n    for i, value in enumerate(arr):\n        if value % 2 ==\
    \ 0:\n            if not result:\n                result = [value, i]\n      \
    \      else:\n                if value < result[0]:\n                    result\
    \ = [value, i]\n                elif value == result[0]:\n                   \
    \ if i < result[1]:\n                        result = [value, i]\n    return result\n\
    \    \n    \n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even_value = None\n    smallest_even_index = None\n    for i, node\
    \ in enumerate(arr):\n        if node % 2 == 0:\n            if smallest_even_value\
    \ is None or node < smallest_even_value:\n                smallest_even_value\
    \ = node\n                smallest_even_index = i\n    if smallest_even_value\
    \ is None:\n        return []\n    return [smallest_even_value, smallest_even_index]\n\
    \nprint(pluck([4,2,3]))\nprint(pluck([1,2,3]))\nprint(pluck([]))\nprint(pluck([5,\
    \ 0, 3, 0, 4, 2]))\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: "[2, 1]\n[2, 1]\n[]\n[0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even_val = None\n    smallest_even_index = None\n    for i, n in\
    \ enumerate(arr):\n        if n % 2 == 0:\n            if smallest_even_val is\
    \ None or n < smallest_even_val:\n                smallest_even_val = n\n    \
    \            smallest_even_index = i\n    if smallest_even_val is None:\n    \
    \    return []\n    return [smallest_even_val, smallest_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even = None\n    smallest_even_idx = None\n    for i, val in enumerate(arr):\n\
    \        if val % 2 == 0:\n            if smallest_even == None or val < smallest_even:\n\
    \                smallest_even = val\n                smallest_even_idx = i\n\
    \    if smallest_even == None:\n        return []\n    return [smallest_even,\
    \ smallest_even_idx]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # [0] is the smallest even value\n    # [1] is the index of the first node\
    \ with [0] value\n    even_idx = [0, 0]\n\n    # iterate over each node\n    for\
    \ idx, node in enumerate(arr):\n        # if the node is even, check if it is\
    \ less than or equal to the current smallest even value\n        if node % 2 ==\
    \ 0 and node <= even_idx[0]:\n            # if it is, update even_idx\n      \
    \      even_idx[0] = node\n            even_idx[1] = idx\n\n    return even_idx\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwntyo3ky.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpwntyo3ky.py\", line 61,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwntyo3ky.py\", line 51, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_even = -1\n    min_even_index = -1\n    for idx, val in enumerate(arr):\n\
    \        if val % 2 == 0:\n            if min_even == -1 or val < min_even:\n\
    \                min_even = val\n                min_even_index = idx\n    return\
    \ [min_even, min_even_index] if min_even_index != -1 else []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    else:\n        evens = []\n        for\
    \ num in arr:\n            if num % 2 == 0:\n                evens.append(num)\n\
    \        if evens:\n            min_even = min(evens)\n            return [min_even,\
    \ arr.index(min_even)]\n        else:\n            return []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = filter(lambda x: x % 2 == 0, arr)\n    return [] if len(evens) ==\
    \ 0 else [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_mq5uwe.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmph_mq5uwe.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmph_mq5uwe.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\n  File \"/tmp/tmph_mq5uwe.py\"\
    , line 38, in pluck\n    return [] if len(evens) == 0 else [min(evens), arr.index(min(evens))]\n\
    TypeError: object of type 'filter' has no len()\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    for idx, n in enumerate(arr):\n        if n % 2 == 0:\n            return\
    \ [n, idx]\n    return []\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzw5enkfn.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpzw5enkfn.py\", line 53,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpzw5enkfn.py\", line 43, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    results = []\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n \
    \           results.append([n, i])\n    return sorted(results)[0] if results else\
    \ []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = []\n    for index, node in enumerate(arr):\n        if node %\
    \ 2 == 0:\n            if not smallest:\n                smallest = [node, index]\n\
    \            elif node < smallest[0]:\n                smallest = [node, index]\n\
    \    return smallest\n\nprint(pluck([4,2,3]))\nprint(pluck([1,2,3]))\nprint(pluck([]))\n\
    print(pluck([5, 0, 3, 0, 4, 2]))\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: "[2, 1]\n[2, 1]\n[]\n[0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    else:\n        evens = [i for i in arr\
    \ if i % 2 == 0]\n        evens.sort()\n        return [evens[0], arr.index(evens[0])]\
    \ if evens else []\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = []\n    for idx, item in\
    \ enumerate(arr):\n        if item % 2 == 0:\n            evens.append([item,\
    \ idx])\n    if len(evens) == 0:\n        return []\n    else:\n        return\
    \ min(evens)\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = []\n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            evens.append([value, index])\n    if len(evens) == 0:\n \
    \       return []\n    else:\n        return min(evens)\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even_index = 0\n    smallest_even_value = float('inf')\n    for\
    \ i, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n\
    \            smallest_even_value = value\n            smallest_even_index = i\n\
    \    if smallest_even_value == float('inf'):\n        return []\n    return [smallest_even_value,\
    \ smallest_even_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_even = float('inf')\n    index =\
    \ None\n    for i, e in enumerate(arr):\n        if e % 2 == 0 and e < min_even:\n\
    \            min_even = e\n            index = i\n    if index is None:\n    \
    \    return []\n    return [min_even, index]\n\nassert pluck([4,2,3]) == [2, 1]\n\
    assert pluck([1,2,3]) == [2, 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3,\
    \ 0, 4, 2]) == [0, 1]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [val for val in arr if val %\
    \ 2 == 0]\n    if not evens:\n        return []\n    min_val = min(evens)\n  \
    \  min_ind = arr.index(min_val)\n    return [min_val, min_ind]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # get all even values\n    even_vals = [item for item in arr if item % 2\
    \ == 0]\n    if not even_vals:\n        return []\n    min_val = min(even_vals)\n\
    \    min_idx = arr.index(min_val)\n    return [min_val, min_idx]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    even_nums = []\n    for i, val\
    \ in enumerate(arr):\n        if val % 2 == 0:\n            even_nums.append([val,\
    \ i])\n    if len(even_nums) == 0:\n        return []\n    even_nums.sort()\n\
    \    return even_nums[0]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nodes = [i for i in arr if i % 2 == 0]\n    if even_nodes:\n       \
    \ even_min = min(even_nodes)\n        return [even_min, arr.index(even_min)]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    tree = []\n    for i, node in enumerate(arr):\n\
    \        if not node % 2:\n            tree.append((node, i))\n    if len(tree)\
    \ == 0:\n        return []\n    else:\n        tree.sort()\n        return tree[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnumwyae.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpxnumwyae.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpxnumwyae.py\", line 50, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # find the smallest even number in the list\n    sml_even = -1\n    index\
    \ = -1\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n      \
    \      if sml_even == -1:\n                sml_even = val\n                index\
    \ = idx\n            elif val < sml_even:\n                sml_even = val\n  \
    \              index = idx\n    \n    if sml_even == -1:\n        return []\n\
    \    else:\n        return [sml_even, index]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [el for el in arr if el % 2 ==\
    \ 0]\n    if not evens:\n        return []\n    even_min = min(evens)\n    even_min_idx\
    \ = arr.index(even_min)\n    return [even_min, even_min_idx]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        min_even =\
    \ min(evens)\n        return [min_even, arr.index(min_even)]\n    return []\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Placeholder\n    smallest_value = float('inf')\n    smallest_index = float('inf')\n\
    \    for idx, val in enumerate(arr):\n        if val % 2 == 0 and val < smallest_value:\n\
    \            smallest_value = val\n            smallest_index = idx\n    return\
    \ [smallest_value, smallest_index] if smallest_value != float('inf') else []\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        if\
    \ arr[0] % 2 == 0:\n            return [arr[0], 0]\n        else:\n          \
    \  return []\n    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if len(evens)\
    \ == 0:\n        return []\n    else:\n        smallest = evens[0]\n        index\
    \ = arr.index(smallest)\n        for i in range(1, len(evens)):\n            if\
    \ evens[i] < smallest:\n                smallest = evens[i]\n                index\
    \ = arr.index(smallest)\n        return [smallest, index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even = None\n    smallest_even_idx = -1\n    for idx, val in enumerate(arr):\n\
    \        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n\
    \                smallest_even = val\n                smallest_even_idx = idx\n\
    \    return [smallest_even, smallest_even_idx] if smallest_even is not None else\
    \ []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93qc_hxu.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp93qc_hxu.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp93qc_hxu.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprej6v0ua.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmprej6v0ua.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprej6v0ua.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = []\n    for i, node in enumerate(arr):\n        if node == 0:\n \
    \           return [0, i]\n        if node % 2 == 0:\n            evens.append([node,\
    \ i])\n    if not evens:\n        return []\n    evens.sort()\n    return evens[0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    return min([[i, arr.index(i)] for i in arr if i % 2 == 0], default=[])\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_even_index\
    \ = arr.index(min_even)\n    return [min_even, min_even_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        return [min(evens),\
    \ arr.index(min(evens))]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    lst = []\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n \
    \           lst.append([val, i])\n    if lst:\n        return min(lst)\n    return\
    \ []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    res = []\n    for i, x in enumerate(arr):\n\
    \        if x % 2 == 0:\n            res.append([x, i])\n    if not res:\n   \
    \     return []\n    res.sort()\n    return res[0]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_values = []\n    for i, value in enumerate(arr):\n        if not value\
    \ % 2:\n            even_values.append([value, i])\n    if not even_values:\n\
    \        return []\n    return min(even_values)\n\nprint(pluck([4,2,3])) # [2,\
    \ 1]\nprint(pluck([1,2,3])) # [2, 1]\nprint(pluck([])) # []\nprint(pluck([5, 0,\
    \ 3, 0, 4, 2])) # [0, 1]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: "[2, 1]\n[2, 1]\n[]\n[0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Check for an empty array or an array with no even numbers.\n    if not\
    \ arr or not any(n % 2 == 0 for n in arr):\n        return []\n\n    # Get the\
    \ index of the smallest even number.\n    even_values = [i for i, n in enumerate(arr)\
    \ if n % 2 == 0]\n    smallest_even_index = even_values[0]\n    for n in even_values:\n\
    \        if arr[n] < arr[smallest_even_index]:\n            smallest_even_index\
    \ = n\n\n    return [arr[smallest_even_index], smallest_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [num for num in arr if num % 2 == 0]\n    if evens:\n        min_even\
    \ = min(evens)\n        min_even_index = arr.index(min_even)\n        return [min_even,\
    \ min_even_index]\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_node = []\n    for index, node in enumerate(arr):\n        if node %\
    \ 2 == 0:\n            even_node.append([node, index])\n    if even_node:\n  \
    \      return sorted(even_node)[0]\n    return []\ndef check(candidate):\n   \
    \ assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) < 1:\n        return []\n    # sort array and filter odd values\n\
    \    sorted_arr = sorted(filter(lambda x: x % 2 == 0, arr))\n    # pop off even\
    \ values\n    val = sorted_arr.pop(0)\n    # determine index\n    idx = arr.index(val)\n\
    \    return [val, idx]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxletvv_d.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpxletvv_d.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpxletvv_d.py\", line 55, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpxletvv_d.py\"\
    , line 42, in pluck\n    val = sorted_arr.pop(0)\nIndexError: pop from empty list\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    elif len(arr) == 1:\n        return\
    \ [arr[0], 0]\n    result: List[int] = [arr[0], 0]\n    for i in range(1, len(arr)):\n\
    \        if result[0] > arr[i]:\n            result = [arr[i], i]\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxlyu_u9e.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpxlyu_u9e.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpxlyu_u9e.py\", line 49, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    from math import inf\n    min_value = inf\n    min_index = -1\n    for index,\
    \ value in enumerate(arr):\n        if value % 2 == 0 and value < min_value:\n\
    \            min_value = value\n            min_index = index\n    return [min_value,\
    \ min_index] if min_value != inf else []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    nums = []\n    min_val = float('inf')\n\
    \    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if val\
    \ < min_val:\n                nums = [val, i]\n                min_val = val\n\
    \            elif val == min_val:\n                nums = [val, i]\n    return\
    \ nums\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprn0cqp2o.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmprn0cqp2o.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmprn0cqp2o.py\", line 53, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    evens = [i for i in arr if i %\
    \ 2 == 0]\n    if len(evens) == 0:\n        return []\n    return [min(evens),\
    \ arr.index(min(evens))]\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    e = []\n    for n in arr:\n        if n == 0:\n            e.append(n)\n\
    \        elif n % 2 == 0:\n            e.append(n)\n    return [min(e), arr.index(min(e))]\
    \ if e else []\n\nassert pluck([4,2,3]) == [2, 1]\nassert pluck([1,2,3]) == [2,\
    \ 1]\nassert pluck([]) == []\nassert pluck([5, 0, 3, 0, 4, 2]) == [0, 1]\ndef\
    \ check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even = None\n    for i, n in enumerate(arr):\n        if n % 2 ==\
    \ 0:\n            if smallest_even is None:\n                smallest_even = [n,\
    \ i]\n            elif n < smallest_even[0]:\n                smallest_even =\
    \ [n, i]\n    return smallest_even\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqp4kh9t.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpwqp4kh9t.py\", line 57,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwqp4kh9t.py\", line 49, in\
    \ check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n        idx = arr.index(min(evens))\n\
    \        return [arr[idx], idx]\n    return []\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    min_index\
    \ = arr.index(min_even)\n    return [min_even, min_index]\n\nfrom collections\
    \ import deque\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    def is_even(x: int) -> bool:\n        return x % 2 == 0\n\n    def get_smallest_even(arr:\
    \ List[int]) -> int:\n        smallest_even = None\n        for i in arr:\n  \
    \          if smallest_even is None:\n                smallest_even = i\n    \
    \        elif is_even(i) and i < smallest_even:\n                smallest_even\
    \ = i\n        return smallest_even\n\n    smallest_even = get_smallest_even(arr)\n\
    \    if smallest_even is None:\n        return []\n    else:\n        return [smallest_even,\
    \ arr.index(smallest_even)]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9u1mav8k.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmp9u1mav8k.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp9u1mav8k.py\", line 56, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_idx = []\n    result = []\n    for idx, val in enumerate(arr):\n   \
    \     if val % 2 == 0:\n            even_idx.append(idx)\n    if even_idx:\n \
    \       min_idx = min(even_idx)\n        min_val = arr[min_idx]\n        result\
    \ = [min_val, min_idx]\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp37o2vqsy.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp37o2vqsy.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp37o2vqsy.py\", line 49, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [e for e in arr if e % 2 == 0]\n\
    \    smallest = min(evens)\n    idx = arr.index(smallest)\n    return [smallest,\
    \ idx]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n \
    \   assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n  \
    \  assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppk75cr1i.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmppk75cr1i.py\", line 55,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppk75cr1i.py\", line 52, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmppk75cr1i.py\"\
    , line 40, in pluck\n    smallest = min(evens)\nValueError: min() arg is an empty\
    \ sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    best = [1e7, 0]\n    for i, node in enumerate(arr):\n        if node % 2\
    \ == 0 and node < best[0]:\n            best = [node, i]\n    return best if best[0]\
    \ != 1e7 else []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # first filter all even values\n    # after filter sort them\n    # get the\
    \ first value and its index\n    # if the value is None then return []\n    res\
    \ = [None, -1]\n    evens = sorted(filter(lambda x: x % 2 == 0, arr))\n    if\
    \ evens:\n        res[0] = evens[0]\n        res[1] = arr.index(evens[0])\n  \
    \  return res if res[0] is not None else []\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    else:\n        evens = []\n        for\
    \ idx, num in enumerate(arr):\n            if num % 2 == 0:\n                evens.append([num,\
    \ idx])\n        if evens:\n            evens.sort()\n            return evens[0]\n\
    \        else:\n            return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = list(filter(lambda x: x % 2 == 0, arr))\n    if not evens:\n    \
    \    return []\n    return [min(evens), arr.index(min(evens))]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = None\n    smallest_idx = 0\n    for idx, value in enumerate(arr):\n\
    \        if value % 2 == 0:\n            if smallest == None:\n              \
    \  smallest = value\n                smallest_idx = idx\n            elif value\
    \ < smallest:\n                smallest = value\n                smallest_idx\
    \ = idx\n    if smallest == None:\n        return []\n    return [smallest, smallest_idx]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_nums = list(filter(lambda x: x % 2 == 0, arr))\n    if len(even_nums)\
    \ > 0:\n        num = min(even_nums)\n        idx = arr.index(num)\n        return\
    \ [num, idx]\n    return []\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Test if the array is empty and return empty list if it is\n    if not arr:\n\
    \        return []\n\n    # Test if the array has any even values and if it has\
    \ any\n    # assign the min even value to min_even\n    min_even = min([item for\
    \ item in arr if item % 2 == 0]) if any(item % 2 == 0 for item in arr) else None\n\
    \n    # Test if min_even has been set and if it has return [min_even, arr.index(min_even)]\n\
    \    # else return []\n    return [min_even, arr.index(min_even)] if min_even\
    \ else []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5x0k1aup.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp5x0k1aup.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp5x0k1aup.py\", line 52, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaugeluub.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpaugeluub.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaugeluub.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [e for e in arr if e % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \nprint(pluck([4,2,3]))\nprint(pluck([1,2,3]))\nprint(pluck([]))\nprint(pluck([5,\
    \ 0, 3, 0, 4, 2]))\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: "[2, 1]\n[2, 1]\n[]\n[0, 1]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    idx = arr.index(min_even)\n\
    \    return [min_even, idx]\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    smallest = arr[0]\n    index = 0\n  \
    \  for num in arr:\n        if (num % 2 == 0) and (num < smallest):\n        \
    \    smallest = num\n            index = arr.index(num)\n    return [smallest,\
    \ index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpibkx7ar8.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpibkx7ar8.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpibkx7ar8.py\", line 49, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    index = len(arr)\n    cur_min = 10001\n    for i, val in enumerate(arr):\n\
    \        if val % 2 == 0 and val < cur_min:\n            cur_min = val\n     \
    \       index = i\n    if index < len(arr):\n        return [cur_min, index]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    def _find_even(arr: List[int]) -> int:\n\
    \        return next((num for num in arr if num % 2 == 0), -1)\n    min_even_value\
    \ = _find_even(arr)\n    if min_even_value == -1:\n        return []\n    return\
    \ [min_even_value, arr.index(min_even_value)]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpexwhdine.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpexwhdine.py\", line 57,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpexwhdine.py\", line 47, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_value = float('inf')\n    smallest_index = float('inf')\n    for\
    \ i,v in enumerate(arr):\n        if v % 2 == 0 and v < smallest_value:\n    \
    \        smallest_value = v\n            smallest_index = i\n    return [smallest_value,\
    \ smallest_index] if smallest_value != float('inf') else []\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [x for x in arr if x % 2 == 0]\n    if evens:\n        smallest =\
    \ min(evens)\n        for i, x in enumerate(arr):\n            if x == smallest:\n\
    \                return [x, i]\n    return []\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # TODO: Implement me\n    return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6dmpkfs.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpq6dmpkfs.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq6dmpkfs.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_even_value = None\n    min_even_index\
    \ = None\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n          \
    \  if min_even_value is None or n < min_even_value:\n                min_even_value\
    \ = n\n                min_even_index = i\n    if min_even_value is None:\n  \
    \      return []\n    return [min_even_value, min_even_index]\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even = float('inf')\n    small_idx = float('inf')\n    for idx,val\
    \ in enumerate(arr):\n        if val == 0:\n            return [0, idx]\n    \
    \    if val % 2 == 0 and val < smallest_even:\n            smallest_even = val\n\
    \            small_idx = idx\n    if smallest_even == float('inf'):\n        return\
    \ []\n    return [smallest_even, small_idx]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return\
    \ [arr[0], 0] if arr[0] % 2 == 0 else []\n    smallest = 2**31 - 1\n    for i\
    \ in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest:\n   \
    \         smallest = arr[i]\n    if smallest == 2**31 - 1:\n        return []\n\
    \    else:\n        return [smallest, arr.index(smallest)]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    idx = -1\n    min = None\n    for i, val in enumerate(arr):\n        if val\
    \ % 2 == 0:\n            if min is None or val < min:\n                min = val\n\
    \                idx = i\n    return [min, idx] if idx != -1 else []\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = [v for i, v in enumerate(arr) if v % 2 == 0]\n    if evens:\n   \
    \     smallest = min(evens)\n        return [smallest, arr.index(smallest)]\n\
    \    return []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    index = -1\n    min_value = 0\n    for\
    \ i, val in enumerate(arr):\n        if not val % 2:\n            if index ==\
    \ -1:\n                index = i\n                min_value = val\n          \
    \  elif val < min_value:\n                index = i\n                min_value\
    \ = val\n    if index == -1:\n        return []\n    return [min_value, index]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest = arr[0]\n    smallest_idx = 0\n    if not arr:\n        return\
    \ []\n    for idx, num in enumerate(arr):\n        if num % 2 == 0 and num < smallest:\n\
    \            smallest = num\n            smallest_idx = idx\n    return [smallest,\
    \ smallest_idx]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vla2fzv.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp1vla2fzv.py\", line 57,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp1vla2fzv.py\", line 48, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    smallest_even_val, smallest_even_val_idx = None, -1\n    for i, val in enumerate(arr):\n\
    \        if val % 2 == 0:\n            if smallest_even_val is None or val < smallest_even_val:\n\
    \                smallest_even_val = val\n                smallest_even_val_idx\
    \ = i\n    return [smallest_even_val, smallest_even_val_idx] if smallest_even_val\
    \ is not None else []\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_value = float('inf')\n    min_index = -1\n    for index, value in enumerate(arr):\n\
    \        if value % 2 == 0 and value < min_value:\n            min_value = value\n\
    \            min_index = index\n    return [min_value, min_index] if min_index\
    \ != -1 else []\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n\
    \    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n \
    \   assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptcy1kdea.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmptcy1kdea.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptcy1kdea.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    evens = []\n    for (i, n) in enumerate(arr):\n        if n % 2 == 0:\n \
    \           evens.append([n, i])\n    \n    if not evens:\n        return []\n\
    \    \n    evens.sort()\n    return evens[0]\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    d = {}\n    for i, n in enumerate(arr):\n        if n % 2 == 0:\n       \
    \     d[n] = i\n    if d:\n        return [min(d.keys()), d[min(d.keys())]]\n\
    \    return []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpds6w1b2n.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmpds6w1b2n.py\", line 56,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpds6w1b2n.py\", line 49, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    res = [x for x in arr if x % 2 == 0]\n    return [min(res), arr.index(min(res))]\
    \ if res else []\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if not arr:\n        return []\n    min_even = 0\n    min_index = 0\n   \
    \ found = False\n    for index, value in enumerate(arr):\n        if value % 2\
    \ == 0:\n            if not found:\n                min_even = value\n       \
    \         min_index = index\n                found = True\n            elif value\
    \ < min_even:\n                min_even = value\n                min_index = index\n\
    \    if found:\n        return [min_even, min_index]\n    return []\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    if len(arr) == 0:\n        return []\n    even_vals = [val for val in arr\
    \ if val % 2 == 0]\n    if len(even_vals) == 0:\n        return []\n    smalest_even\
    \ = min(even_vals)\n    idx = arr.index(smalest_even)\n    return [smalest_even,\
    \ idx]\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # Empty array given\n    if not arr:\n        return []\n\n    # If no even\
    \ value, return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n\n    # Find the smallest even value, and the first index\
    \ of it.\n    smallest_even = min(evens)\n    return [smallest_even, arr.index(smallest_even)]\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_even_value = 100001\n    min_index = -1\n    for i, x in enumerate(arr):\n\
    \        if x % 2 == 0 and x < min_even_value:\n            min_even_value = x\n\
    \            min_index = i\n    if min_index == -1:\n        return []\n    return\
    \ [min_even_value, min_index]\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    even_index = []\n    for i,x in enumerate(arr):\n        if x % 2 == 0:\n\
    \            even_index.append([x,i])\n    if even_index:\n        return min(even_index)\n\
    \    else:\n        return []\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # if arr = []:\n    #     return []\n    # # find the smallest even\n   \
    \ # small_even = sys.maxsize\n    # index = 0\n    # count = 0\n    # while index\
    \ < len(arr):\n    #     if arr[index] < small_even and arr[index] % 2 == 0:\n\
    \    #         small_even = arr[index]\n    #         count = index\n    #   \
    \  index += 1\n    # if small_even != sys.maxsize:\n    #     return [small_even,\
    \ count]\n    # else:\n    #     return []\n    if arr == []:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if evens == []:\n      \
    \  return []\n    else:\n        return [min(evens), arr.index(min(evens))]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    min_even_val = min(filter(lambda x: x % 2 == 0, arr)) if len(arr) > 0 else\
    \ None\n    return [min_even_val, arr.index(min_even_val)] if min_even_val is\
    \ not None else []\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyjqf_e_m.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpyjqf_e_m.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpyjqf_e_m.py\", line 47, in\
    \ check\n    assert candidate([7, 9, 7, 1]) == []\n  File \"/tmp/tmpyjqf_e_m.py\"\
    , line 37, in pluck\n    min_even_val = min(filter(lambda x: x % 2 == 0, arr))\
    \ if len(arr) > 0 else None\nValueError: min() arg is an empty sequence\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    indexes = []\n    minimum_value = float('inf')\n    for idx, node in enumerate(arr):\n\
    \        if node % 2 == 0 and node < minimum_value:\n            indexes = [idx]\n\
    \            minimum_value = node\n        elif node % 2 == 0 and node == minimum_value:\n\
    \            indexes.append(idx)\n    if indexes:\n        return [minimum_value,\
    \ min(indexes)]\n    return []\n\ntest_cases = [([4,2,3], [2, 1]),\n         \
    \     ([1,2,3], [2, 1]),\n              ([], []),\n              ([5, 0, 3, 0,\
    \ 4, 2], [0, 1])]\n\nfor input_value, expected_output in test_cases:\n    assert\
    \ pluck(input_value) == expected_output, f\"FAILED: pluck({input_value}) == {expected_output}\"\
    \n\nprint(\"PASSED\")\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: "PASSED\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    def get_next_smallest_even(arr: List[int]) -> int:\n        for item in arr:\n\
    \            if item % 2 == 0:\n                return item\n        return -1\n\
    \n    def get_next_smallest_even_index(arr: List[int], next_value: int) -> int:\n\
    \        for i, item in enumerate(arr):\n            if item == next_value:\n\
    \                return i\n        return -1\n\n    # Edge cases\n    if len(arr)\
    \ == 0:\n        return []\n\n    # Get the next smallest even number in the array\n\
    \    next_value = get_next_smallest_even(arr)\n    if next_value == -1:\n    \
    \    return []\n\n    # Get the first index of the next smallest even value\n\
    \    next_index = get_next_smallest_even_index(arr, next_value)\n    if next_index\
    \ == -1:\n        return []\n\n    return [next_value, next_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0g4nyys9.py\", line\
    \ 78, in <module>\n    test_check()\n  File \"/tmp/tmp0g4nyys9.py\", line 76,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0g4nyys9.py\", line 66, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output:\
    \ [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n \
    \       Explanation: 2 has the smallest even value, and 2 has the smallest index.\
    \ \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example\
    \ 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n                     so\
    \ we will choose the first zero, which has the smallest index.\n\n    Constraints:\n\
    \        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\
    \    # first pass through the array and find the lowest even number\n    # save\
    \ the lowest even number and the index\n    lowest_even = float('inf')\n    lowest_even_index\
    \ = float('inf')\n    for i, el in enumerate(arr):\n        if el % 2 == 0 and\
    \ el < lowest_even:\n            lowest_even = el\n            lowest_even_index\
    \ = i\n    # once we find the lowest even number and its index, return the pair\n\
    \    if lowest_even != float('inf'):\n        return [lowest_even, lowest_even_index]\n\
    \    # otherwise, return []\n    return []\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
