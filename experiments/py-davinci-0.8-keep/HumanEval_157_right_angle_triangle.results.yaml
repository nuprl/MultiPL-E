name: HumanEval_157_right_angle_triangle
language: py
results:
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a + b > c and a + c > b and b + c > a:\n\
    \        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Let's assume `a` is the hypotenuse.\n    #\
    \ According to Pythagorean theorem, the sum of the squares of the sides\n    #\
    \ `a` and `b` should be equal to the square of `c`.\n    return a ** 2 + b **\
    \ 2 == c ** 2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpredvxlct.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpredvxlct.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpredvxlct.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    p = (a + b + c) / 2\n    return a**2 + b**2\
    \ == c**2 and a <= p and b <= p and c <= p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3tmrl1y9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3tmrl1y9.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3tmrl1y9.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\nright_angle_triangle(4,\
    \ 3, 5)\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkj5jqkh8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkj5jqkh8.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpkj5jqkh8.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    triangle_sides = sorted([a, b, c])\n    return\
    \ triangle_sides[2] ** 2 == triangle_sides[0] ** 2 + triangle_sides[1] ** 2\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a_sqr = a ** 2\n    b_sqr = b ** 2\n    c_sqr\
    \ = c ** 2\n    return c_sqr == a_sqr + b_sqr or b_sqr == a_sqr + c_sqr or a_sqr\
    \ == b_sqr + c_sqr\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    max_side = max(a, b, c)\n    if max_side ==\
    \ a:\n        return a**2 == b**2 + c**2\n    elif max_side == b:\n        return\
    \ b**2 == a**2 + c**2\n    else:\n        return c**2 == a**2 + b**2\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 +\
    \ c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    elif c > a and c > b:\n        return c ** 2 == a ** 2 + b **\
    \ 2\n    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pythagorean_triplet = (a**2 + b**2 == c**2)\
    \ or (b**2 + c**2 == a**2) or (a**2 + c**2 == b**2)\n    return pythagorean_triplet\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    longest_side = max(a, b, c)\n    return (longest_side\
    \ ** 2) == (a ** 2 + b ** 2 + c ** 2 - longest_side ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    res = False\n    if a > 0 and b > 0 and c >\
    \ 0:\n        if a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 ==\
    \ b**2:\n            res = True\n    return res\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8coo6nqu.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8coo6nqu.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8coo6nqu.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (a + b > c) and (a + c > b) and (b + c >\
    \ a):\n        x = sorted([a, b, c])\n        return (x[0] ** 2) + (x[1] ** 2)\
    \ == (x[2] ** 2)\n    return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_uqd8gr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmph_uqd8gr.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmph_uqd8gr.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    raise NotImplementedError\n \n \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqdya__ar.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqdya__ar.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqdya__ar.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpqdya__ar.py\"\
    , line 11, in right_angle_triangle\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n    \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3c8ttts.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpb3c8ttts.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpb3c8ttts.py\"\
    , line 14, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk89lcusv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk89lcusv.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpk89lcusv.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if is_triangle(a, b, c):\n        if a**2 +\
    \ b**2 == c**2:\n            return True\n        elif a**2 + c**2 == b**2:\n\
    \            return True\n        elif b**2 + c**2 == a**2:\n            return\
    \ True\n        else:\n            return False\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyc_d5ii7.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpyc_d5ii7.py\", line 37,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpyc_d5ii7.py\"\
    , line 24, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpyc_d5ii7.py\"\
    , line 11, in right_angle_triangle\n    if is_triangle(a, b, c):\nNameError: name\
    \ 'is_triangle' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    max_side = max(a, b, c)\n    # Length of the\
    \ two smallest sides\n    s = (a + b + c) - max_side\n    # Length of the hypotenuse\n\
    \    h = max_side\n    return s**2 + h**2 == h**2\n    \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6g3493nt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6g3493nt.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6g3493nt.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a **\
    \ 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    abc = sorted([a, b, c])\n    return abc[0]**2\
    \ + abc[1]**2 == abc[2]**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = sorted([a, b, c])\n    if sides[0] *\
    \ sides[0] + sides[1] * sides[1] == sides[2] * sides[2]:\n        return True\n\
    \    return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    ab, bc, ac = a ** 2 + b ** 2, b ** 2 + c **\
    \ 2, a ** 2 + c ** 2\n    _max = max(ab, bc, ac)\n    if _max == ab:\n       \
    \ if ab == c ** 2:\n            return True\n    elif _max == bc:\n        if\
    \ bc == a ** 2:\n            return True\n    elif _max == ac:\n        if ac\
    \ == b ** 2:\n            return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp961rlpd0.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp961rlpd0.py\", line 39,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp961rlpd0.py\"\
    , line 26, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ynd0lmg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1ynd0lmg.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1ynd0lmg.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    arr = sorted([a, b, c])\n    return arr[0] **\
    \ 2 + arr[1] ** 2 == arr[2] ** 2\n\n\n@slow\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6euup8ia.py\", line\
    \ 15, in <module>\n    @slow\nNameError: name 'slow' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a**2 ==\
    \ b**2 + c**2\n    elif b > a and b > c:\n        return b**2 == a**2 + c**2\n\
    \    elif c > a and c > b:\n        return c**2 == a**2 + b**2\n    else:\n  \
    \      return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\nprint(right_angle_triangle(1,\
    \ 2, 3))\nprint(right_angle_triangle(5, 12, 13))\nprint(right_angle_triangle(1,\
    \ 2, 4))\n\n'''\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp8ufyrb0_.py\", line 38\n    test_check()\n           \
    \    ^\nSyntaxError: EOF while scanning triple-quoted string literal\n"
  exit_code: 1
  status: SyntaxError
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    hypotenuse = max(a, b, c)\n    if hypotenuse\
    \ == a:\n        return a**2 == b**2 + c**2\n    elif hypotenuse == b:\n     \
    \   return b**2 == a**2 + c**2\n    elif hypotenuse == c:\n        return c**2\
    \ == a**2 + b**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    ab = a**2 + b**2\n    bc = b**2 + c**2\n   \
    \ ac = a**2 + c**2\n    return (ab == c**2) or (bc == a**2) or (ac == b**2)\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == 0 or b == 0 or c == 0:\n        return\
    \ False\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2\
    \ == a**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # your code here\n    if a > 0 and b > 0 and\
    \ c > 0:\n        if a*a + b*b == c*c or b*b + c*c == a*a or a*a + c*c == b*b:\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n    else:\n        if c**2 == a**2 + b**2:\n            return True\n\
    \        elif a**2 == b**2 + c**2:\n            return True\n        elif b**2\
    \ == a**2 + c**2:\n            return True\n        else:\n            return\
    \ False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a == b == c:\n        return False\n    return\
    \ a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (c * c) == (a * a) + (b * b):\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62i8zgx1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp62i8zgx1.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp62i8zgx1.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    c = sorted([a, b, c])\n    return (c[0] ** 2)\
    \ + (c[1] ** 2) == (c[2] ** 2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a**2\
    \ + b**2 == c**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsa5kos5e.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpsa5kos5e.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpsa5kos5e.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]\
    \ ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2 or a ** 2 +\
    \ c ** 2 == b ** 2 or b ** 2 + c ** 2 == a ** 2\n\n\ndef check(candidate):\n \
    \   assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4kau0f2.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_4kau0f2.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp_4kau0f2.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2)\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp10l0n9gu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp10l0n9gu.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp10l0n9gu.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return c ** 2 == a ** 2 + b ** 2\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp20pn_4wr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp20pn_4wr.py\", line 26,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp20pn_4wr.py\"\
    , line 15, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cf86_z5.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1cf86_z5.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp1cf86_z5.py\"\
    , line 14, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]**2\
    \ + sides[1]**2 == sides[2]**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7xa9zvvy.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7xa9zvvy.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7xa9zvvy.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    c = max(a, b, c)\n    a, b = (a, b) if a < c\
    \ else (b, a)\n    return (a ** 2 + b ** 2) == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwz7pfesk.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpwz7pfesk.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwz7pfesk.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    tri = [a, b, c]\n    tri.sort()\n    return\
    \ tri[0]**2 + tri[1]**2 == tri[2]**2\n    \n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (a**2) + (b**2) == (c**2):\n        return\
    \ True\n    elif (b**2) + (c**2) == (a**2):\n        return True\n    elif (c**2)\
    \ + (a**2) == (b**2):\n        return True\n    else:\n        return False\n\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # angle(a, b, c) = arccos((b*b + c*c - a*a)\
    \ / (2 * b * c))\n    return a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c\
    \ == a*a\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = sorted([a, b, c])\n    if sides[0] +\
    \ sides[1] <= sides[2]:\n        return False\n    return sides[0] ** 2 + sides[1]\
    \ ** 2 == sides[2] ** 2\n\n\n@test_function\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm0uz3usf.py\", line\
    \ 17, in <module>\n    @test_function\nNameError: name 'test_function' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (a < b + c) and (b < a + c) and (c < a +\
    \ b):\n        return (a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b **\
    \ 2) or (b ** 2 + c ** 2 == a ** 2)\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0]**2 + sides[1]**2 == sides[2]**2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > b and a > c:\n        return a ** 2 ==\
    \ b ** 2 + c ** 2\n    elif b > a and b > c:\n        return b ** 2 == a ** 2\
    \ + c ** 2\n    else:\n        return c ** 2 == a ** 2 + b ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\nassert right_angle_triangle(3,\
    \ 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False\n \n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzza0rr1h.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzza0rr1h.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzza0rr1h.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return abs(a**2 + b**2 - c**2) < 1e-9 or abs(a**2\
    \ + c**2 - b**2) < 1e-9 or abs(b**2 + c**2 - a**2) < 1e-9\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # I learned about this math after coding it\
    \ like this.\n    # The math is called Pythagorean theorem.\n    # return (a **\
    \ 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (c ** 2 + b ** 2 ==\
    \ a ** 2)\n    # This is the math shortcut.\n    return (a ** 2 + b ** 2 == c\
    \ ** 2) or (a ** 2 + c ** 2 == b ** 2) or (c ** 2 + b ** 2 == a ** 2)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (a**2 + b**2 == c**2) or (a**2 + c**2 ==\
    \ b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    cond1 = a ** 2 + b ** 2 == c ** 2\n    cond2\
    \ = b ** 2 + c ** 2 == a ** 2\n    cond3 = c ** 2 + a ** 2 == b ** 2\n    return\
    \ cond1 or cond2 or cond3\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    c2 = a**2 + b**2\n    c_real = c**2\n    return\
    \ c2 == c_real\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbb4mjdpi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbb4mjdpi.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbb4mjdpi.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2+b**2==c**2 or a**2+c**2==b**2 or\
    \ b**2+c**2==a**2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return False\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_ytvgxk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpn_ytvgxk.py\", line 26,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpn_ytvgxk.py\"\
    , line 13, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (b **\
    \ 2 + c ** 2 == a ** 2) or (a ** 2 + c ** 2 == b ** 2)\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(3, 5, 4))\nprint(right_angle_triangle(1,\
    \ 2, 3))\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: "True\nTrue\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl57xk41w.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpl57xk41w.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpl57xk41w.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return c ** 2 == a ** 2 + b ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6lxkfavf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6lxkfavf.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6lxkfavf.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0]**2 + sides[1]**2 == sides[2]**2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    l = [a, b, c]\n    l.sort()\n    return l[0]**2\
    \ + l[1]**2 == l[2]**2\n \ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (b**2 + c**2\
    \ == a**2) or (a**2 + c**2 == b**2)\n \n \n \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n    \n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    elif a ** 2 + c ** 2 == b ** 2:\n        return True\n    elif b **\
    \ 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a**2 + b**2 == c**2:\n        return True\n\
    \    elif b**2 + c**2 == a**2:\n        return True\n    elif a**2 + c**2 == b**2:\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # square each side\n    a2 = a * a\n    b2 =\
    \ b * b\n    c2 = c * c\n    # check if square of side a is equal to sum of squares\
    \ of the other two sides\n    if a2 == b2 + c2:\n        return True\n    # check\
    \ if square of side b is equal to sum of squares of the other two sides\n    elif\
    \ b2 == a2 + c2:\n        return True\n    # check if square of side c is equal\
    \ to sum of squares of the other two sides\n    elif c2 == a2 + b2:\n        return\
    \ True\n    else:\n        return False\n    \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    list_sides = [a, b, c]\n    list_sides.sort()\n\
    \    if list_sides[0]**2 + list_sides[1]**2 == list_sides[2]**2:\n        return\
    \ True\n    else:\n        return False\n\nassert right_angle_triangle(3, 4, 5)\
    \ == True\nassert right_angle_triangle(1, 2, 3) == False\nassert right_angle_triangle(0,\
    \ 0, 0) == False\nassert right_angle_triangle(1, 1, 1) == False\nassert right_angle_triangle(3,\
    \ 3, 3) == False\nassert right_angle_triangle(4, 4, 4) == False\nassert right_angle_triangle(5,\
    \ 5, 5) == False\nassert right_angle_triangle(6, 6, 6) == False\nassert right_angle_triangle(7,\
    \ 7, 7) == False\nassert right_angle_triangle(8, 8, 8) == False\nassert right_angle_triangle(9,\
    \ 9, 9) == False\nassert right_angle_triangle(10, 10, 10) == False\nassert right_angle_triangle(15,\
    \ 9, 10) == True\nassert right_angle_triangle(10, 15, 9) == True\nassert right_angle_triangle(15,\
    \ 10, 9) == True\nassert right_angle_triangle(9, 15, 10) == True\nassert right_angle_triangle(9,\
    \ 10, 15) == True\nassert right_angle_triangle(10, 9, 15) == True\nassert right_angle_triangle(15,\
    \ 15, 9) == False\nassert right_angle_triangle(9, 15, 15) == False\nassert right_angle_triangle(15,\
    \ 9, 15) == False\nassert right_angle_triangle(15, 15, 15) == False\nassert right_angle_triangle(24,\
    \ 26, 10) == True\nassert right_angle_triangle(10, 24, 26) == True\nassert right_angle_triangle(24,\
    \ 10, 26) == True\nassert right_angle_triangle(26, 24, 10) == True\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpljspj38o.py\", line\
    \ 20, in <module>\n    assert right_angle_triangle(0, 0, 0) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpby_xa5km.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpby_xa5km.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpby_xa5km.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90lj5ty2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp90lj5ty2.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp90lj5ty2.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Calculate square of all sides\n    a_square\
    \ = a**2\n    b_square = b**2\n    c_square = c**2\n    # Check if any of sides\
    \ is 0\n    if a == 0 or b == 0 or c == 0:\n        return False\n    # Hypotenuse\
    \ case\n    if a_square + b_square == c_square:\n        return True\n    # Adjacent\
    \ and Opposite case\n    if a_square + c_square == b_square:\n        return True\n\
    \    # Adjacent and Opposite case\n    if b_square + c_square == a_square:\n \
    \       return True\n    return False\n\nprint(right_angle_triangle(3, 4, 5))\n\
    print(right_angle_triangle(1, 2, 3))\nprint(right_angle_triangle(0, 0, 0))\nprint(right_angle_triangle(6,\
    \ 8, 10))\nprint(right_angle_triangle(6, 6, 6))\nprint(right_angle_triangle(8,\
    \ 5, 10))\nprint(right_angle_triangle(8, 5, 8))\nprint(right_angle_triangle(8,\
    \ 5, 5))\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: "True\nFalse\nFalse\nTrue\nFalse\nFalse\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1qvwxr3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw1qvwxr3.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpw1qvwxr3.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7aru4z1.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpt7aru4z1.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpt7aru4z1.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    elif a ** 2 + c ** 2 == b ** 2:\n        return True\n    elif b **\
    \ 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # We want to make sure the sides aren't negative\n\
    \    for side in [a, b, c]:\n        if side < 0:\n            return False\n\
    \    # We want to make sure one side isn't longer than the sum of the other two\n\
    \    # sides\n    if a > b + c or b > a + c or c > a + b:\n        return False\n\
    \    # Pythagorean theorem\n    if (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2)\
    \ or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxhzufmf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzxhzufmf.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpzxhzufmf.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    x, y, z = sorted([a, b, c])\n    return (x *\
    \ x) + (y * y) == (z * z)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    a,\
    \ b, c = sides\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Define a list of numbers that correspond to\
    \ the sides of a triangle\n    sides = [a, b, c]\n    # Sort the sides from smallest\
    \ to largest\n    # Calculate the largest side and the sum of the other two sides\n\
    \    sides.sort()\n    third_side = sides[2]\n    first_two_sides = sides[0] +\
    \ sides[1]\n    # If the longest side is the square root of the sum of the other\
    \ two sides\n    # squared, then it is a right angle triangle\n    if third_side**2\
    \ == first_two_sides**2:\n        return True\n    else:\n        return False\n\
    \ \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppinq5ks0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmppinq5ks0.py\", line 40,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppinq5ks0.py\"\
    , line 27, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return False\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjeycg3c.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdjeycg3c.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdjeycg3c.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return b ** 2 + c ** 2 == a ** 2\n\nassert right_angle_triangle(3,\
    \ 4, 5) == True\nassert right_angle_triangle(1, 2, 3) == False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcgrxn1f0.py\", line\
    \ 13, in <module>\n    assert right_angle_triangle(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    max_side = max(a, b, c)\n    if max_side ==\
    \ a:\n        is_right_triangle = a * a == b * b + c * c\n    elif max_side ==\
    \ b:\n        is_right_triangle = b * b == a * a + c * c\n    else:\n        is_right_triangle\
    \ = c * c == a * a + b * b\n    return is_right_triangle\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n \n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n    # return (a**2\
    \ + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n    # return\
    \ (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2)\n \n \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdim9hxw.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppdim9hxw.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppdim9hxw.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxl1xazl7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxl1xazl7.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpxl1xazl7.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    triangle_sides = [a, b, c]\n    triangle_sides.sort()\n\
    \    return pow(triangle_sides[0], 2) + pow(triangle_sides[1], 2) == pow(triangle_sides[2],\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprh479ufb.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmprh479ufb.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmprh479ufb.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (a**2 + b**2 == c**2) or (a**2 + c**2 ==\
    \ b**2) or (b**2 + c**2 == a**2):\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n  \
    \  assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a and b and c:\n        return True if round(a\
    \ ** 2 + b ** 2) == round(c ** 2) else False\n    return False\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfrmfxxd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcfrmfxxd.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcfrmfxxd.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5oxv7l9.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpe5oxv7l9.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpe5oxv7l9.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return c**2 == a**2 + b**2\nprint(right_angle_triangle(5,\
    \ 3, 4))\nprint(right_angle_triangle(7, 24, 25))\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: "False\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjaua7bx5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjaua7bx5.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpjaua7bx5.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    return\
    \ sides[0]**2 + sides[1]**2 == sides[2]**2\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (pow(a, 2) + pow(b, 2)) == pow(c, 2):\n \
    \       return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi4haw3_3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi4haw3_3.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpi4haw3_3.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    side_list = [a, b, c]\n    side_list.sort()\n\
    \    if side_list[0]**2 + side_list[1]**2 == side_list[2]**2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # max_side = max(a, b, c)\n    # rest_sides\
    \ = (a, b, c) - max_side\n    # if max_side ** 2 == rest_sides[0] ** 2 + rest_sides[1]\
    \ ** 2:\n    #     return True\n    # return False\n    return (a ** 2 + b **\
    \ 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (a > b and a > c):\n        side = a\n  \
    \      side1 = b\n        side2 = c\n    elif (b > a and b > c):\n        side\
    \ = b\n        side1 = a\n        side2 = c\n    else:\n        side = c\n   \
    \     side1 = a\n        side2 = b\n    if (side**2 == side1**2 + side2**2):\n\
    \        return True\n    else:\n        return False\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # edge cases\n    if a < 1 or b < 1 or c < 1:\n\
    \        return False\n    # check if a^2 + b^2 = c^2\n    hyp = a**2 + b**2\n\
    \    if hyp == c**2:\n        return True\n    # check if b^2 + c^2 = a^2\n  \
    \  hyp = b**2 + c**2\n    if hyp == a**2:\n        return True\n    # check if\
    \ c^2 + a^2 = b^2\n    hyp = c**2 + a**2\n    if hyp == b**2:\n        return\
    \ True\n    return False\n    # OR\n    return (\n        a**2 + b**2 == c**2\n\
    \        or b**2 + c**2 == a**2\n        or c**2 + a**2 == b**2\n    )\n    #\
    \ OR\n    return (\n        all(a > 0, b > 0, c > 0)\n        and sorted([a, b,\
    \ c])[-1]**2 == sum(sorted([a, b, c])[:-1])**2\n    )\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n    sides = [a, b, c]\n    sides.sort()\n    if (sides[0] ** 2) + (sides[1]\
    \ ** 2) == (sides[2] ** 2):\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\n@given(a=int(1,\
    \ 20), b=int(1, 20), c=int(1, 20))\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplctqme6u.py\", line\
    \ 13, in <module>\n    @given(a=int(1, 20), b=int(1, 20), c=int(1, 20))\nNameError:\
    \ name 'given' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppi3i10vv.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmppi3i10vv.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppi3i10vv.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # because we know the Pythagorean theorem (a^2\
    \ + b^2 = c^2)\n    # \n    # \n    #\n    pass\n\n\ndef check(candidate):\n \
    \   assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp03rkyq3v.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp03rkyq3v.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp03rkyq3v.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    max_side = max(sides)\n\
    \    # with help of Pythagorean theorem\n    return max_side**2 == sum(side**2\
    \ for side in sides if side != max_side)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    cathetus_lengths = sorted([a, b, c])\n    return\
    \ cathetus_lengths[0] ** 2 + cathetus_lengths[1] ** 2 == cathetus_lengths[2] **\
    \ 2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Check if the sides of the triangle can form\
    \ a triangle.\n    if ((a + b <= c) or (a + c <= b) or (b + c <= a)):\n      \
    \  return False\n    else:\n        # Check if the triangle is right angled or\
    \ not.\n        if ((a ** 2 + b ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2)\
    \ or (b ** 2 + c ** 2 == a ** 2)):\n            return True\n        else:\n \
    \           return False\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n    return (a ** 2 + b\
    \ ** 2 == c ** 2) or (a ** 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pv9bhod.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7pv9bhod.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7pv9bhod.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    assert isinstance(a, int) and isinstance(b,\
    \ int) and isinstance(c, int)\n    return a ** 2 + b ** 2 == c ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8uhe22oz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8uhe22oz.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp8uhe22oz.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n    if a**2 + b**2 == c**2:\n        return True\n    elif a**2 + c**2\
    \ == b**2:\n        return True\n    elif b**2 + c**2 == a**2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    m = max(a, b, c)\n    p = (a + b + c) - m\n\
    \    return p ** 2 == m ** 2 + ((a + b + c) - m - m) ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wle5szv.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4wle5szv.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4wle5szv.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if c ** 2 == a ** 2 + b ** 2:\n        return\
    \ True\n    return False\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v1529_b.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp7v1529_b.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp7v1529_b.py\"\
    , line 19, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return c**2 == a**2 + b**2\n \n \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq3mikhe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwq3mikhe.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpwq3mikhe.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    triangle_sides = [a, b, c]\n    triangle_sides.sort()\n\
    \    if triangle_sides[0] ** 2 + triangle_sides[1] ** 2 == triangle_sides[2] **\
    \ 2:\n        return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here\n    return c ** 2 == a **\
    \ 2 + b ** 2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3c83_iue.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3c83_iue.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp3c83_iue.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = sorted([a, b, c])\n    return sides[0]**2\
    \ + sides[1]**2 == sides[2]**2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    l = [a, b, c]\n    l.sort()\n    if l[0]**2\
    \ + l[1]**2 == l[2]**2:\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        return\
    \ False\n    list_sides = [a, b, c]\n    list_sides.sort()\n    return math.pow(list_sides[0],\
    \ 2) + math.pow(list_sides[1], 2) == math.pow(list_sides[2], 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfg_jvus9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfg_jvus9.py\", line 32,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfg_jvus9.py\"\
    , line 19, in check\n    assert candidate(3, 4, 5) == True\n  File \"/tmp/tmpfg_jvus9.py\"\
    , line 15, in right_angle_triangle\n    return math.pow(list_sides[0], 2) + math.pow(list_sides[1],\
    \ 2) == math.pow(list_sides[2], 2)\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return True if a**2 + b**2 == c**2 else False\n\
    \ \ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptd4of1ar.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmptd4of1ar.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptd4of1ar.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    (small, big) = sorted([a, b, c])[:2]\n    hyp\
    \ = (small**2 + big**2)**0.5\n    return small + big + hyp == c\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1wl5490.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpt1wl5490.py\", line 30,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpt1wl5490.py\"\
    , line 17, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_xjf5jt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4_xjf5jt.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp4_xjf5jt.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    longest_side = max(a, b, c)\n    sides = [a,\
    \ b, c]\n    sides.remove(longest_side)\n    if longest_side ** 2 == sum(sides)\
    \ ** 2:\n        return True\n    return False\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptd714brl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptd714brl.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmptd714brl.py\"\
    , line 20, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    square_sides = sorted([a**2, b**2, c**2])\n\
    \    return square_sides[0] + square_sides[1] == square_sides[2]\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Check if a is not smaller than other two sides\n\
    \    if a < b or a < c:\n        return False\n    else:\n        # Check if other\
    \ two sides are smaller than a\n        if (b*b + c*c) == a*a:\n            return\
    \ True\n        else:\n            return False\n        \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp56vvi_4g.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp56vvi_4g.py\", line 35,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp56vvi_4g.py\"\
    , line 22, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return (a **\
    \ 2) + (b ** 2) == (c ** 2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    def is_close(a, b):\n        return abs(a -\
    \ b) < 1e-6\n\n    hyp = max(a, b, c)\n    return is_close(hyp**2, (a**2 + b**2\
    \ + c**2 - hyp**2))\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return True if a * a + b * b == c * c else False\n\
    print(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1, 2, 3))\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: "True\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcjsqo50r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcjsqo50r.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcjsqo50r.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    list1 = [a, b, c]\n    list1.sort()\n    if\
    \ list1[2]**2 == list1[0]**2 + list1[1]**2:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (b**2 + c**2\
    \ == a**2) or (a**2 + c**2 == b**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    nums = [a, b, c]\n    nums.sort()\n    if nums[0]\
    \ ** 2 + nums[1] ** 2 == nums[2] ** 2:\n        return True\n    else:\n     \
    \   return False\n\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    right_angle = 90\n    a, b, c = sorted([a, b,\
    \ c])\n    if a**2 + b**2 == c**2:\n        return True\n    return False\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a ** 2 + b ** 2 == c ** 2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl15l9ek3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpl15l9ek3.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpl15l9ek3.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a*a+b*b==c*c or a*a+c*c==b*b or b*b+c*c==a*a\n\
    print(right_angle_triangle(3, 4, 5))\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: "True\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqbmpnupb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqbmpnupb.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpqbmpnupb.py\"\
    , line 14, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    elif a ** 2 + c ** 2 == b ** 2:\n        return True\n    elif b **\
    \ 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False\n\
    right_angle_triangle(3, 4, 5)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    A = pow(a, 2)\n    B = pow(b, 2)\n    C = pow(c,\
    \ 2)\n    if A + B == C or A + C == B or B + C == A:\n        return True\n  \
    \  else:\n        return False\n    \n    \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return (a**2\
    \ + b**2) == c**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) ==\
    \ True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8)\
    \ == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24,\
    \ 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return False\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5cdrydfg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5cdrydfg.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp5cdrydfg.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = [a, b, c]\n    sides.sort()\n    if\
    \ sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84h1qd0k.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp84h1qd0k.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp84h1qd0k.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return abs(c ** 2 - (a ** 2 + b ** 2)) < 1e-8\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkibjjc7.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkkibjjc7.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpkkibjjc7.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a * a + b * b == c * c or a * a + c *\
    \ c == b * b or b * b + c * c == a * a\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    list_of_sides = [a, b, c]\n    list_of_sides.sort()\n\
    \    return list_of_sides[0]**2 + list_of_sides[1]**2 == list_of_sides[2]**2\n\
    \n\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert\
    \ candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert\
    \ candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert\
    \ candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert\
    \ candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n   \
    \ assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\
    \ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a**2 + b**2 == c**2) or (a**2 + c**2\
    \ == b**2) or (b**2 + c**2 == a**2)\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here\n    if a<b and a<c:\n    \
    \    return a**2 + b**2 == c**2\n    elif b<a and b<c:\n        return b**2 +\
    \ a**2 == c**2\n    elif c<a and c<b:\n        return c**2 + a**2 == b**2\n  \
    \  else:\n        return False\n \n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvcfrxsq.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbvcfrxsq.py\", line 36,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpbvcfrxsq.py\"\
    , line 25, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a_2 = a**2\n    b_2 = b**2\n    c_2 = c**2\n\
    \    return a_2 + b_2 == c_2 or a_2 + c_2 == b_2 or b_2 + c_2 == a_2\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    sides = sorted([a, b, c])\n    hypotenuse =\
    \ sides[2]\n    cathetus_1 = sides[1]\n    cathetus_2 = sides[0]\n    return cathetus_1\
    \ ** 2 + cathetus_2 ** 2 == hypotenuse ** 2\n    \ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return  a**2 + b**2 == c**2 or a**2 + c**2 ==\
    \ b**2 or b**2 + c**2 == a**2\n    \n    \n    \ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return max([a, b, c]) ** 2 == sum([a, b, c])\
    \ ** 2 - max([a, b, c]) ** 2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ul75wq8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9ul75wq8.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp9ul75wq8.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    assert type(a) == int and type(b) == int and\
    \ type(c) == int, \"All parameters must be integers.\"\n    assert a > 0 and b\
    \ > 0 and c > 0, \"All parameters must be positive numbers.\"\n    if c ** 2 ==\
    \ a ** 2 + b ** 2:\n        return True\n    else:\n        return False\nassert\
    \ right_angle_triangle(3, 4, 5) == True\nassert right_angle_triangle(1, 2, 3)\
    \ == False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n \
    \   assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6s3ux69.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpa6s3ux69.py\", line 34,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpa6s3ux69.py\"\
    , line 23, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n\
    \    # if a^2 + b^2 = c^2 or a^2 + c^2 = b^2 or b^2 + c^2 = a^2, then it is a\
    \ right-angled triangle\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2\
    \ or b**2 + c**2 == a**2\n\n\ndef check(candidate):\n    assert candidate(3, 4,\
    \ 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if c ** 2 == a ** 2 + b ** 2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13ox_te1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp13ox_te1.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp13ox_te1.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > 0 and b > 0 and c > 0:\n        if a**2\
    \ + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return\
    \ True\n        else:\n            return False\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\nprint(right_angle_triangle(1,\
    \ 2, 3))\nprint(right_angle_triangle(4, 2, 3))\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return True\n\n\ndef check(candidate):\n   \
    \ assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcj6minb3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcj6minb3.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcj6minb3.py\"\
    , line 16, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    a, b, c = sorted([a, b, c])\n    return a **\
    \ 2 + b ** 2 == c ** 2\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    squares = sorted([a**2, b**2, c**2])\n    return\
    \ squares[0] + squares[1] == squares[2]\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if max(a, b, c) == a:\n        if (a ** 2) ==\
    \ (b ** 2) + (c ** 2):\n            return True\n        else:\n            return\
    \ False\n    elif max(a, b, c) == b:\n        if (b ** 2) == (a ** 2) + (c **\
    \ 2):\n            return True\n        else:\n            return False\n    elif\
    \ max(a, b, c) == c:\n        if (c ** 2) == (a ** 2) + (b ** 2):\n          \
    \  return True\n        else:\n            return False\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybaros3j.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpybaros3j.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpybaros3j.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    hypo = max(a, b, c)\n    if hypo == a:\n   \
    \     sides = (b, c)\n    elif hypo == b:\n        sides = (a, c)\n    else:\n\
    \        sides = (a, b)\n    if sides[0]**2 + sides[1]**2 == hypo**2:\n      \
    \  return True\n    return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Your code here:\n\n    ls = [a, b, c]\n  \
    \  ls.sort()\n    if ls[0]**2 + ls[1]**2 == ls[2]**2:\n        return True\n \
    \   else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a**2 + b**2 == c**2:\n        return True\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6pdf8gxn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6pdf8gxn.py\", line 31,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp6pdf8gxn.py\"\
    , line 20, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ecaalg_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0ecaalg_.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp0ecaalg_.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a > 0 and b > 0 and c > 0:\n        if a\
    \ ** 2 + b ** 2 == c ** 2:\n            return True\n        elif b ** 2 + c **\
    \ 2 == a ** 2:\n            return True\n        elif a ** 2 + c ** 2 == b **\
    \ 2:\n            return True\n        else:\n            return False\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a ** 2 + b ** 2 == c ** 2) or (a **\
    \ 2 + c ** 2 == b ** 2) or (b ** 2 + c ** 2 == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return max(a, b, c)**2 == a**2 + b**2 + c**2\
    \ - max(a, b, c)**2\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return (a*a + b*b == c*c) or (a*a + c*c == b*b)\
    \ or (b*b + c*c == a*a)\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return c**2 == a**2 + b**2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppaxl3wgf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppaxl3wgf.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmppaxl3wgf.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return c ** 2 == a ** 2 + b ** 2\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpanbelggv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpanbelggv.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpanbelggv.py\"\
    , line 17, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return a**2 + b**2 == c**2\n    \ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfyuov3b3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpfyuov3b3.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpfyuov3b3.py\"\
    , line 16, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return ((a ** 2 + b ** 2) == c ** 2) or ((a\
    \ ** 2 + c ** 2) == b ** 2) or ((b ** 2 + c ** 2) == a ** 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if (a * a + b * b == c * c) or (a * a + c *\
    \ c == b * b) or (b * b + c * c == a * a):\n        return True\n    else:\n \
    \       return False\n\n\ndef check(candidate):\n    assert candidate(3, 4, 5)\
    \ == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6,\
    \ 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Very long and complicated solution that does\
    \ not work!\n    if a == 0 or b == 0 or c == 0:\n        return False\n    # This\
    \ line is useful if you want to sort a, b, c\n    # a, b, c = sorted([a, b, c])\n\
    \    # Other possibility\n    c = max(a, b, c)\n    a = min(a, b, c)\n    b =\
    \ (a + b + c) - a - c\n    if a * a + b * b == c * c:\n        return True\n \
    \   return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdcqetyih.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpdcqetyih.py\", line 38,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpdcqetyih.py\"\
    , line 27, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n    # YOUR CODE HERE\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcbgcz6ff.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcbgcz6ff.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpcbgcz6ff.py\"\
    , line 16, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    p = (a, b, c)\n    p = sorted(p)\n    return\
    \ p[0] ** 2 + p[1] ** 2 == p[2] ** 2\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a ** 2 + b ** 2 == c ** 2:\n        return\
    \ True\n    elif a ** 2 + c ** 2 == b ** 2:\n        return True\n    elif b **\
    \ 2 + c ** 2 == a ** 2:\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate(3,\
    \ 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert candidate(10,\
    \ 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7,\
    \ 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5,\
    \ 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48,\
    \ 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2,\
    \ 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvel7v4kb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvel7v4kb.py\", line 27,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpvel7v4kb.py\"\
    , line 14, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    return False\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n\
    \    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n\
    \    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n\
    \    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n\
    \    assert candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n\
    \    assert candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw2k_7x9j.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw2k_7x9j.py\", line 28,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpw2k_7x9j.py\"\
    , line 15, in check\n    assert candidate(3, 4, 5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # Write your code here\n    if pow(a, 2) + pow(b,\
    \ 2) == pow(c, 2):\n        return True\n    else:\n        return False\n\nprint(right_angle_triangle(3,\
    \ 4, 5))\nprint(right_angle_triangle(1, 2, 3))\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80hh30rw.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp80hh30rw.py\", line 33,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmp80hh30rw.py\"\
    , line 22, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # write your code here\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(3, 4, 5) == True\n    assert candidate(1,\
    \ 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2,\
    \ 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10,\
    \ 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15,\
    \ 8, 17) == True\n    assert candidate(48, 55, 73) == True\n    assert candidate(1,\
    \ 1, 1) == False\n    assert candidate(2, 2, 10) == False\n\ndef test_check():\n\
    \    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc4ty2o79.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpc4ty2o79.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpc4ty2o79.py\"\
    , line 17, in check\n    assert candidate(1, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    if a**2 + b**2 == c**2:\n        return True\n\
    \    return False\n\ndef check(candidate):\n    assert candidate(3, 4, 5) == True\n\
    \    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n\
    \    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n\
    \    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n\
    \    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) ==\
    \ True\n    assert candidate(1, 1, 1) == False\n    assert candidate(2, 2, 10)\
    \ == False\n\ndef test_check():\n    check(right_angle_triangle)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmkf_pwod.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpmkf_pwod.py\", line 29,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpmkf_pwod.py\"\
    , line 18, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def right_angle_triangle(a: int, b: int, c: int) -> bool:\n    \"\"\"\n\
    \    Given the lengths of the three sides of a triangle. Return True if the three\n\
    \    sides form a right-angled triangle, False otherwise.\n    A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n    90 degree.\n\
    \    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1,\
    \ 2, 3) == False\n    \"\"\"\n    # 1-2-3 this is an example that it should return\
    \ False\n    # if the largest side is longer than the rest 2\n    if c > a + b:\n\
    \        return False\n    # if largest side is not longer than the rest 2\n \
    \   else:\n        # Take the square of all sides\n        a2 = a ** 2\n     \
    \   b2 = b ** 2\n        c2 = c ** 2\n        # If the two shorter sides equal\
    \ to the longest side\n        # then, it is a right-angled triangle\n       \
    \ if a2 + b2 == c2:\n            return True\n        else:\n            return\
    \ False\n\n\nprint(right_angle_triangle(3, 4, 5))\nprint(right_angle_triangle(1,\
    \ 2, 3))\nprint(right_angle_triangle(3, 5, 7))\nprint(right_angle_triangle(5,\
    \ 12, 13))\nprint(right_angle_triangle(5, 3, 4))\ndef check(candidate):\n    assert\
    \ candidate(3, 4, 5) == True\n    assert candidate(1, 2, 3) == False\n    assert\
    \ candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert\
    \ candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert\
    \ candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert\
    \ candidate(48, 55, 73) == True\n    assert candidate(1, 1, 1) == False\n    assert\
    \ candidate(2, 2, 10) == False\n\ndef test_check():\n    check(right_angle_triangle)\n\
    \ntest_check()\n"
  stdout: "True\nFalse\nFalse\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpml_k57s3.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpml_k57s3.py\", line 48,\
    \ in test_check\n    check(right_angle_triangle)\n  File \"/tmp/tmpml_k57s3.py\"\
    , line 37, in check\n    assert candidate(10, 6, 8) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
