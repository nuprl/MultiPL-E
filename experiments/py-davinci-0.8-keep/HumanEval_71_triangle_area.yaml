name: HumanEval_71_triangle_area
language: py
prompt: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
  \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
  \ rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
  \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
  \ is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5)\
  \ == 6.00\n    triangle_area(1, 2, 10) == -1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
  \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2,\
  \ 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7)\
  \ == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) ==\
  \ 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
  \ntest_check()\n"
completions: ["    if is_triangle(a, b, c):\n        # Calculate and return the area\
    \ of the triangle\n        s = (a + b + c) / 2\n        return round(math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        # Return -1 if the three\
    \ sides do not form a valid triangle\n        return -1\n        \ntriangle_area(3,\
    \ 4, 5)\n\ntriangle_area(1, 2, 10)\n", "    p = (a + b + c) / 2\n    return round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2) if a + b > c and a + c > b and b + c > a\
    \ else -1\n\n", "    # Get perimeter\n    perimeter = a + b + c\n    # Validate\
    \ triangle\n    if perimeter - max(a, b, c) > max(a, b, c):\n        # Semi-perimeter\n\
    \        sp = perimeter / 2\n        # Heron's formula\n        area = (sp * (sp\
    \ - a) * (sp - b) * (sp - c)) ** 0.5\n        return round(area, 2)\n    else:\n\
    \        return -1\n", "    # calculate semi-perimeter\n    s = (a + b + c) /\
    \ 2\n    # calculate area\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\
    \    if a + b > c and a + c > b and b + c > a:\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))  # 6.00\nprint(triangle_area(1,\
    \ 2, 10))  # -1", "    if a + b <= c or a + c <= b or b + c <= a:\n        return\
    \ -1\n    s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) **\
    \ 0.5\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))", " \
    \   # Check if the three sides form a valid triangle\n    if (a+b)>c and (a+c)>b\
    \ and (b+c)>a:\n        p = (a+b+c)/2\n        area = ((p*(p-a)*(p-b)*(p-c))**0.5)\n\
    \        return round(area, 2)\n    else:\n        return -1\n", "    def is_valid_triangle(a,\
    \ b, c):\n        return a + b > c and a + c > b and b + c > a\n\n    if is_valid_triangle(a,\
    \ b, c):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return\
    \ -1\n\n", "    p = (a + b + c) / 2\n    if p - a and p - b and p - c > 0:\n \
    \       return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    return\
    \ -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))", "  \
    \  p = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n      \
    \  return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n       \
    \ return -1\n\n", "    s = (a + b + c) / 2\n    if s - a > 0 and s - b > 0 and\
    \ s - c > 0:\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return\
    \ -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1, 2, 10))", "    #\
    \ Catch negative integers\n    for side in [a, b, c]:\n        if side < 0:\n\
    \            return -1\n    \n    # Catch any side greater than the sum of the\
    \ other two sides\n    max_side = max(a, b, c)\n    if max_side > a + b + c -\
    \ max_side:\n        return -1\n    \n    # Heron's formula\n    s = (a + b +\
    \ c) / 2.0\n    return sqrt(s * (s - a) * (s - b) * (s - c))\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(-1, -2, 10))\n",
  "    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n  \
    \      return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n\
    \        return -1\n", "    s = (a + b + c) / 2\n    if s >= c:\n        return\
    \ round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return\
    \ -1\n\n", "    # p = sum(a, b, c) / 2\n    # a = sqrt(p(p-a)(p-b)(p-c))\n   \
    \ pass\n", "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s -\
    \ c)) ** 0.5\n    if area <= 0:\n        return -1\n    return round(area, 2)\n\
    triangle_area(3, 4, 5)\n", "    if (a + b > c) and (a + c > b) and (b + c > a):\n\
    \        p = (a + b + c) / 2\n        area = round((p * (p - a) * (p - b) * (p\
    \ - c)) ** 0.5, 2)\n        return area\n    else:\n        return -1\n\n\nprint(triangle_area(1,\
    \ 2, 10))", "    # s = (a + b + c) / 2\n    # area = (s * (s - a) * (s - b) *\
    \ (s - c)) ** 0.5\n    # if area.is_integer():\n    #     return round(area, 2)\n\
    \    # else:\n    #     return -1\n    # tuple unpacking\n    s = sum(sorted([a,\
    \ b, c])[:2])\n    return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2) if\
    \ s > c else -1\n    \n\nassert triangle_area(2, 3, 4) == 2.90\nassert triangle_area(10,\
    \ 10, 10) == 43.30\nassert triangle_area(3, 4, 10) == -1\nassert triangle_area(2,\
    \ 3, -1) == -1\nassert triangle_area(2, 3, 0) == -1\n\n", "    return round(math.sqrt(sum([i\
    \ * (i - b) * (i - c) for i in sorted([a, b, c])[:2]]) * (\n            sum([i\
    \ * (i - b) * (i - c) for i in sorted([a, b, c])[:2]]) - c ** 2)) / 4, 2) if (\n\
    \                   sum([i * (i - b) * (i - c) for i in sorted([a, b, c])[:2]])\
    \ - c ** 2) > 0 else -1\n\n", "    pass\n\n", "    if a + b > c and a + c > b\
    \ and b + c > a:\n        p = (a + b + c) / 2\n        S = (p * (p - a) * (p -\
    \ b) * (p - c)) ** 0.5\n        return round(S, 2)\n    else:\n        return\
    \ -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n        p = (a + b\
    \ + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return\
    \ round(area, 2)\n    else:\n        return -1\nprint(triangle_area(3, 4, 5))",
  "    pass\n\n\n", "    p = (a + b + c) / 2\n    area = (p * (p - a) * (p - b) *\
    \ (p - c)) ** 0.5\n    return round(area, 2) if a + b > c and a + c > b and b\
    \ + c > a else -1\n", "    s = (a + b + c) / 2\n    if s - a > 0 and s - b > 0\
    \ and s - c > 0:\n        return round(sqrt(s * (s - a) * (s - b) * (s - c)),\
    \ 2)\n    return -1\n\n", "    sides = (a, b, c)\n    assert all(isinstance(s,\
    \ int) for s in sides)\n    assert min(sides) > 0\n    sides.sort()\n    if sides[0]\
    \ + sides[1] > sides[2]:\n        p = sum(sides) / 2\n        return round(sqrt(p\
    \ * (p - sides[0]) * (p - sides[1]) * (p - sides[2])), 2)\n    return -1\n\n\n\
    @pytest.mark.parametrize(\"a, b, c, area\", [\n    (3, 4, 5, 6.00),\n    (1, 2,\
    \ 10, -1),\n    (1, 1, 1, 0.43),\n    (4, 4, 4, 6.93),\n    (10, 10, 10, 43.30),\n\
    \    (27, 27, 27, 136.68),\n    (100, 100, 100, 433.01),\n    (500, 500, 500,\
    \ 8660.25),\n    (10000, 10000, 10000, 433310.00),\n    (100000, 100000, 100000,\
    \ 43301025.00),\n    (1600000000, 1600000000, 1600000000, 43499998053333000.00),\n\
    \    (20000000000, 20000000000, 20000000000, 434999980033330000.00),\n    (30000000000,\
    \ 30000000000, 30000000000, 434999973333330000.00),\n    (40000000000, 40000000000,\
    \ 40000000000, 434999973333330000.00),\n    (50000000000, 50000000000, 50000000000,\
    \ 434999973333330000.00),\n    (60000000000, 60000000000, 60000000000, 434999973333330000.00),\n\
    \    (70000000000, 70000000000, 70000000000, 434999973333330000.00),\n    (80000000000,\
    \ 80000000000, 80000000000, 434999973333330000.00),\n    (90000000000, 90000000000,\
    \ 90000000000, 434999973333330000.00),\n    (100000000000, 100000000000, 100000000000,\
    \ 434999973333330000.", "    if not is_triangle(a, b, c):\n        return -1\n\
    \    p = (a + b + c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\
    \n", "    area = 0.0\n    if(a > 0 and b > 0 and c > 0):\n        p = (a + b +\
    \ c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    return\
    \ round(area, 2)\n\n", "    if (a + b > c) and (a + c > b) and (b + c > a):\n\
    \        return round(math.sqrt((a + b + c) * (-a + b + c) * (a - b + c) * (a\
    \ + b - c)) / 4, 2)\n    else:\n        return -1\n```\n\n```python", "    s =\
    \ (a + b + c) / 2\n    if s - a > 0 and s - b > 0 and s - c > 0:\n        return\
    \ round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    return -1\n\n", "    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return\
    \ -1\n\n", "    s = (a + b + c) / 2\n    if s * (s - a) * (s - b) * (s - c) <=\
    \ 0:\n        return -1\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    return round(area, 2)\n\n", "    if (a + b) > c and (a + c) > b and (b +\
    \ c) > a:\n        p = (a + b + c) / 2\n        return round(sqrt(p * (p - a)\
    \ * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\n", "    if a + b >\
    \ c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        area =\
    \ (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n  \
    \  else:\n        return -1\n\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\nprint(triangle_area(1, 2, 3))\nprint(triangle_area(3, 4, 4))", "  \
    \  # The function should return -1 if the given side lengths can not form a \n\
    \    # valid triangle. So, we'll add that as the base case\n    if (a+b <= c)\
    \ or (a+c <= b) or (b+c <= a):\n        return -1\n    # We'll use Heron's formula\
    \ to calculate the area.\n    # https://www.mathopenref.com/heronsformula.html\n\
    \    # To make the output look good, we'll round it to 2 decimal places.\n   \
    \ s = (a+b+c)/2\n    area = (s*(s-a)*(s-b)*(s-c))**0.5\n    return round(area,\
    \ 2)\n\n", "    s = (a + b + c) / 2\n    triangle_area = (s * (s - a) * (s - b)\
    \ * (s - c)) ** 0.5\n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round(triangle_area, 2)\n    else:\n        return -1\n\n", "    if (a + b)\
    \ > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n        area\
    \ = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n", "    # Your code goes here!\n    def is_valid(a,\
    \ b, c):\n        if a + b <= c or a + c <= b or b + c <= a:\n            return\
    \ False\n        return True\n    if is_valid(a, b, c):\n        s = (a + b +\
    \ c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return\
    \ round(area, 2)\n    return -1\n\n\n", "    if (a + b > c) and (a + c > b) and\
    \ (b + c > a):\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p\
    \ - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return\
    \ -1\n", "    return -1\n\n", "    p = (a + b + c) / 2\n    area = math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n    if area > 0:\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n", "    perimeter = a + b + c\n    if a\
    \ + b > c and a + c > b and b + c > a:\n        p = (perimeter) / 2\n        s\
    \ = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n   \
    \ else:\n        return -1\n\n\n@pytest.mark.parametrize(\"a, b, c, expected\"\
    , [\n    (3, 4, 5, 6.00),\n    (1, 2, 10, -1),\n    (1, 2, 3, -1),\n    (2, 3,\
    \ 4, 2.90),\n    (3, 4, 2, 2.90),\n    (4, 2, 3, 2.90),\n    (15, 12, 17, 84.00),\n\
    \    (12, 17, 15, 84.00),\n    (17, 15, 12, 84.00),\n    (5, 4, 3, 6.00),\n  \
    \  (4, 3, 5, 6.00),\n    (3, 5, 4, 6.00),\n    (6, 3, 4, 5.33),\n    (3, 4, 6,\
    \ 5.33),\n    (4, 6, 3, 5.33),\n    (5, 10, 12, -1),\n    (10, 12, 5, -1),\n \
    \   (12, 5, 10, -1),\n    (2, 3, 4, 2.90),\n    (3, 4, 2, 2.90),\n    (4, 2, 3,\
    \ 2.90),\n    (2, 3, 4, 2.90),\n    (3, 4, 2, 2.90),\n    (4, 2, 3, 2.90),\n \
    \   (2, 3, 4, 2.90),\n    (3, 4, 2, 2.90),\n    (4, 2, 3, 2.90),\n    (5, 4, 3,\
    \ 6.00),\n    (4, 3, 5, 6.00),\n    (3, 5, 4, 6.00),\n    (3, 4, 5, 6.00),\n \
    \   (3, 4", "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s =\
    \ (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c)), 2)\n    else:\n        return -1\n\n", "    if (a + b > c) and (a + c >\
    \ b) and (b + c > a):\n        return round(math.sqrt((a + b + c) * (a + b - c)\
    \ * (a - b + c) * (-a + b + c)) / 4, 2)\n    else:\n        return -1\n\n", " \
    \   t = []\n    t.append(a)\n    t.append(b)\n    t.append(c)\n    t.sort()\n\
    \    if t[0] + t[1] > t[2]:\n        return float(t[0] * t[1] / 2)\n    else:\n\
    \        return -1\n    pass\n\n", "    # only when three sides make a valid triangle,\
    \ then calculate the area.\n    if a + b > c and a + c > b and b + c > a:\n  \
    \      p = (a + b + c) / 2\n        area = math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c))\n        return round(area, 2)\n    else:\n        return -1\n\n", " \
    \   p = (a + b + c) / 2\n    s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n  \
    \  return round(s, 2) if s > 0 else -1\n\n", "    p = (a + b + c) / 2\n    if\
    \ p < a or p < b or p < c:\n        return -1\n    else:\n        return round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n\n", "    if ((a + b > c) and (a + c > b)\
    \ and (b + c > a)):\n        # Heron's formula\n        s = (a + b + c) / 2\n\
    \        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(3,\
    \ 4, 6))\nprint(triangle_area(1, 2, 10))\nprint(triangle_area(2, 3, 4))\n\nassert\
    \ triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1, 2, 10) == -1\n\nprint(\"\
    All tests passed\")", "    if a + b <= c or a + c <= b or b + c <= a:\n      \
    \  return -1\n    p = (a + b + c) / 2\n    area = (p * (p - a) * (p - b) * (p\
    \ - c)) ** 0.5\n    return round(area, 2)\n\n", "    s = (a + b + c) / 2\n   \
    \ if s - a > 0 and s - b > 0 and s - c > 0:\n        return round(math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\n\nprint(triangle_area(2,\
    \ 3, 4))", "    perim = (a + b + c) / 2\n    if (perim - a) * (perim - b) * (perim\
    \ - c) > 0:\n        return (perim * (perim - a) * (perim - b) * (perim - c))\
    \ ** 0.5\n    else:\n        return -1\n\n", "    # Your code here\n    pass\n\
    \ \n ", "    num = (a+b+c)/2\n    area = math.sqrt(num*(num-a)*(num-b)*(num-c))\n\
    \    if a+b > c and a+c > b and b+c > a:\n        return area\n    else:\n   \
    \     return -1\n\n", "    p = (a + b + c) / 2\n    if p - a > 0 and p - b > 0\
    \ and p - c > 0:\n        return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n  \
    \  return -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n        s =\
    \ (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c)), 2)\n    else:\n        return -1\n\n", "    # Your code here\n    pass\n\
    \n", "    if not (a + b > c and a + c > b and b + c > a):\n        return -1\n\
    \n    # https://en.wikipedia.org/wiki/Heron%27s_formula\n    p = (a + b + c) /\
    \ 2\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\n", "    s = (a + b\
    \ + c) / 2\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\
    \    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n", "    s = (a\
    \ + b + c) / 2.0\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if\
    \ area > 0:\n        return round(area, 2)\n    else:\n        return -1\n", " \
    \   # method 1\n    if not (a + b > c and a + c > b and b + c > a):\n        return\
    \ -1\n    p = (a + b + c) / 2\n    return round(sqrt(p * (p - a) * (p - b) * (p\
    \ - c)), 2)\n\n    # method 2\n    # return round(sqrt(s * (s - a) * (s - b) *\
    \ (s - c)), 2) if s > 0 else -1\n    # where s = (a + b + c) / 2\n\n", "    if\
    \ a < b + c and b < a + c and c < a + b:\n        p = (a + b + c) / 2\n      \
    \  s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n\
    \    else:\n        return -1\n\n", "    return -1 if (a + b <= c) or (a + c <=\
    \ b) or (b + c <= a) else round(math.sqrt(p*(p-a)*(p-b)*(p-c)), 2)\n", "    x,\
    \ y, z = sorted([a, b, c])\n    if x + y > z:\n        p = (x + y + z) / 2\n \
    \       return (p * (p - x) * (p - y) * (p - z)) ** 0.5\n    return -1\n", " \
    \   x = a + b\n    y = b + c\n    z = a + c\n    if x < c or y < a or z < b:\n\
    \        return -1\n    else:\n        s = (a + b + c) / 2\n        area = (s\
    \ * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\nprint(triangle_area(1,\
    \ 2, 10))\nprint(triangle_area(5, 4, 3))\n", "    from math import sqrt\n    if\
    \ a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n      \
    \  a = sqrt(p * (p - a) * (p - b) * (p - c))\n        return round(a, 2)\n   \
    \ else:\n        return -1\n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    #######################################################################\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    #######################################################################\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    return -1\n\n", "    pass\n\
    \ \n", "    if a + b > c and a + c > b and b + c > a:\n        return round(0.5\
    \ * (a * b), 2)\n    else:\n        return -1\n\n", "    if a + b > c and a +\
    \ c > b and b + c > a:\n        p = (a + b + c) / 2\n        return round(sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\n\n", " \
    \   if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n \
    \       area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n", "    sides = [a, b, c]\n    sides.sort()\n\
    \    if sides[0] + sides[1] > sides[2]:\n        p = (a + b + c) / 2\n       \
    \ return round(math.sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n   \
    \     return -1\n\n", "    # Write your code here\n    # Calculate and return\
    \ the answer\n    s = (a + b + c) / 2\n    if (s - a) * (s - b) * (s - c) <= 0:\n\
    \        return -1\n    else:\n        return round(math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c)), 2)\n\n\n", "    s = (a + b + c) / 2\n    area = (s * (s - a)\
    \ * (s - b) * (s - c)) ** 0.5\n    if area > 0:\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n", "    if (a + b > c) and (a + c > b) and (b\
    \ + c > a):\n        p = (a + b + c) / 2\n        return round(math.sqrt(p * (p\
    \ - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\n", "    if a\
    \ < 0 or b < 0 or c < 0:\n        return -1\n    s = (a + b + c) / 2\n    if s\
    \ < a or s < b or s < c:\n        return -1\n    return math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n\n", "    if a+b > c and a+c > b and b+c > a:\n      \
    \  p = (a+b+c)/2\n        s = (p*(p-a)*(p-b)*(p-c))**0.5\n        return round(s,\
    \ 2)\n    else:\n        return -1\n    \ntriangle_area(3, 4, 5)\n\nassert_equal(triangle_area(1,\
    \ 2, 10), -1)\nassert_equal(triangle_area(3, 4, 5), 6.00)\nassert_equal(triangle_area(1,\
    \ 1, 1), 0.43)\nassert_equal(triangle_area(2, 3, 4), 2.90)\nassert_equal(triangle_area(5,\
    \ 6, 7), 14.70)\nassert_equal(triangle_area(10, 10, 10), 43.30)\n", "    s = sorted([a,\
    \ b, c])\n    if s[0] + s[1] > s[2]:\n        return round(s[0] * s[1] / 2, 2)\n\
    \    else:\n        return -1\n\n", "    ss = sorted([a, b, c])\n    if ss[0]\
    \ + ss[1] <= ss[2]:\n        return -1\n    s = (a + b + c) / 2\n    return round(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n\n", "    # your code here\n    if ((a+b)>c)\
    \ and ((a+c)>b) and ((b+c)>a):\n        S=(a+b+c)/2\n        Area=(S*(S-a)*(S-b)*(S-c))**0.5\n\
    \        return round(Area,2)\n    else:\n        return -1\n    \n    \n    \n\
    \    \n    \n    \n    \n", "    # solution \n    # p = (a + b + c) / 2\n    #\
    \ s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    # return round(s, 2) if s\
    \ > 0 else -1\n    sorted_sides = sorted([a, b, c])\n    return -1 if sorted_sides[0]\
    \ + sorted_sides[1] <= sorted_sides[2] else (sum(sorted_sides) / 2) * (sum(sorted_sides)\
    \ / 2 - sorted_sides[0]) * (sum(sorted_sides) / 2 - sorted_sides[1]) * (sum(sorted_sides)\
    \ / 2 - sorted_sides[2]) ** 0.5\n    \n    \n    ", "    return float(round(0.25\
    \ * sqrt((a + b + c) * (b + c - a) * (a + c - b) * (a + b - c)), 2)) \\\n    \
    \    if all(a + b > c for a, b, c in combinations([a, b, c], 2)) else -1\n\n",
  "    s = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a:\n      \
    \  return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n  \
    \      return -1\n\n", "    if (a + b > c) and (a + c > b) and (b + c > a):\n\
    \        s = (a + b + c) / 2\n        x = (s * (s - a) * (s - b) * (s - c)) **\
    \ 0.5\n        return round(x, 2)\n    else:\n        return -1\n\n", "    p =\
    \ (a + b + c) / 2\n    if p - a <= 0 or p - b <= 0 or p - c <= 0:\n        return\
    \ -1\n    return (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\n", "    pass\n```\n\
    \n```py", "    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c)), 2) if a + b > c and a + c > b and b + c > a else -1\n\n", " \
    \   if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n \
    \       res = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(res,\
    \ 2)\n    else:\n        return -1\n\n", "    ...\n\n", "    # if the longest\
    \ side is too long\n    if max(a, b, c) >= a + b + c - max(a, b, c):\n       \
    \ return -1\n    # else compute the area and return it\n    p = (a + b + c) /\
    \ 2\n    s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n    return round(s, 2)\n\
    \n", "    p = (a + b + c) / 2\n    return -1 if max(a, b, c) >= p else math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n", "    if (a + b > c) and (a + c > b) and (b\
    \ + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b)\
    \ * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return\
    \ -1\n\n", "    return -1\n", "    if a + b > c and a + c > b and b + c > a:\n\
    \        p = (a + b + c) / 2\n        return round(math.sqrt(p * (p - a) * (p\
    \ - b) * (p - c)), 2)\n    else:\n        return -1\n    \nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(1, 2, 10))\n", "    semi_perimeter = (a + b + c)\
    \ / 2\n    triangle_area = sqrt(semi_perimeter * (semi_perimeter - a) * (semi_perimeter\
    \ - b) * (semi_perimeter - c))\n    if triangle_area > 0:\n        return round(triangle_area,\
    \ 2)\n    else:\n        return -1\n\n", "    # perimeter of the triangle\n  \
    \  p = (a + b + c) / 2\n\n    # Heron's formula: https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    area = sqrt(p * (p - a) * (p - b) * (p - c))\n\n    # Return -1 if the three\
    \ sides do not form a valid triangle\n    if a + b <= c or a + c <= b or b + c\
    \ <= a:\n        return -1\n\n    return round(area, 2)\n\n", "    p = (a + b\
    \ + c) / 2\n    s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    if (s == 0)\
    \ or (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return -1\n    return\
    \ round(s, 2)\n\n", "    # if a is greater than b and c add b and c\n    # else\
    \ if b is greater than a and c add a and c\n    # else if c is greater than a\
    \ and b add a and b\n    # else area = -1\n    # return area\n    a, b, c = sorted([a,\
    \ b, c])\n    if a + b > c:\n        p = (a + b + c) / 2\n        area = (p *\
    \ (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    return\
    \ -1\n\n", "    p = (a + b + c) / 2\n    area = (p * (p - a) * (p - b) * (p -\
    \ c)) ** 0.5\n    return round(area, 2) if area > 0 else -1\n", "    # Not a triangle\
    \ if the longest side is equal to or greater than the sum of the other two\n \
    \   if max(a, b, c) >= a + b + c - max(a, b, c):\n        return -1\n    # Heron's\
    \ formula for triangle area\n    s = (a + b + c) / 2\n    return round(sqrt(s\
    \ * (s - a) * (s - b) * (s - c)), 2)\n\n", "    p = (a + b + c) / 2\n    if p\
    \ - a > 0 and p - b > 0 and p - c > 0:\n        return round(sqrt(p * (p - a)\
    \ * (p - b) * (p - c)), 2)\n    return -1\n\n\nprint(triangle_area(1, 2, 3)) \
    \ # -1\nprint(triangle_area(3, 4, 5))  # 6.00\nprint(triangle_area(3, 1, 1)) \
    \ # -1\nprint(triangle_area(1, 2, 10))  # -1", "    sides = [a, b, c]\n    sides.sort()\n\
    \    if sides[0] + sides[1] > sides[2]:\n        return 0.5 * sides[0] * sides[2]\n\
    \    else:\n        return -1\n\n", '    pass', "    try:\n        p = (a + b\
    \ + c) / 2\n        A = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return\
    \ round(A, 2)\n    except:\n        return -1\n\n", "    # Your code here\n  \
    \  return -1\nassert triangle_area(1, 2, 10) == -1\nassert triangle_area(3, 4,\
    \ 5) == 6.00\n ", "    if a + b > c and a + c > b and b + c > a:\n        p =\
    \ (a + b + c) / 2\n        return round(math.sqrt(p * (p - a) * (p - b) * (p -\
    \ c)), 2)\n    else:\n        return -1\n    pass\n\n", "    if (a + b > c) and\
    \ (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n        return round(math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\n", "   \
    \ s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n \
    \   if a + b > c and a + c > b and b + c > a:\n        return round(area, 2)\n\
    \    else:\n        return -1\n\n\n@pytest.mark.parametrize(\"a, b, c, expected\"\
    , [\n    (3, 4, 5, 6.00),\n    (1, 2, 10, -1),\n    (5, 12, 13, 30.00),\n    (6,\
    \ 8, 10, 24.00),\n    (2, 3, 2, 1.98),\n    (8, 15, 17, 60.25),\n    (3, 4, 4,\
    \ -1),\n    (7, 15, 6, 27.01),\n    (5, 10, 11, -1),\n    (7, 12, 8, 26.83),\n\
    \    (4, 4, 4, 6.93),\n    (2, 3, 4, 2.90),\n    (3, 3, 3, 3.89),\n    (2, 2,\
    \ 2, 1.73),\n    (9, 9, 9, 28.74),\n    (4, 7, 5, 10.39),\n    (2, 3, 8, -1),\n\
    \    (3, 4, 2, 2.90),\n    (2, 4, 3, 2.90),\n    (6, 8, 9, 26.83),\n    (7, 9,\
    \ 6, 20.21),\n    (3, 3, 4, 3.89),\n    (5, 3, 4, 6.00),\n    (6, 8, 7, 24.00),\n\
    \    (5, 12, 8, 30.00),\n    (8, 8, 8, 27.71),\n    (9, 12, 15, 54.00),\n    (5,\
    \ 5, 5, 10.83),\n    (6, 6, 6, 13.51),\n    (2, 8, 9, -1),\n    (8, 15, 10, 60.25),\n\
    \    (4, 4, 2, 3.89", "    a, b, c = sorted([a, b, c])\n    if a + b <= c:\n \
    \       return -1\n    p = (a + b + c) / 2\n    return round(sqrt(p * (p - a)\
    \ * (p - b) * (p - c)), 2)\n \n", "    # Solution:\n    if a + b > c and a + c\
    \ > b and b + c > a:\n        p = (a + b + c) / 2\n        s = (p * (p - a) *\
    \ (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n    else:\n        return\
    \ -1\n\n", "    p = sum([a, b, c]) / 2\n    area = (p * (p - a) * (p - b) * (p\
    \ - c)) ** 0.5\n    return round(area, 2) if area > 0 else -1\n\n\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(1, 2, 10))", "    if a < b + c and b < a + c and\
    \ c < a + b:\n        s = (a + b + c) / 2\n        return round(sqrt(s * (s -\
    \ a) * (s - b) * (s - c)), 2)\n    else:\n        return -1\n\n", "    pass\n\
    import math\n", "    p = (a + b + c) / 2.0\n    if a + b <= c or a + c <= b or\
    \ b + c <= a:\n        return -1\n    else:\n        return round(sqrt(p * (p\
    \ - a) * (p - b) * (p - c)), 2)\n\n", "    if a + b > c and a + c > b and b +\
    \ c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) *\
    \ (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\
    \n", "    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    s = 0.5 * (a\
    \ + b + c)\n    return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n", " \
    \   pass\n\n", "    return round(Decimal(0.25 * sqrt((a + b + c) * (-a + b + c)\
    \ * (a - b + c) * (a + b - c))), 2) \\\n        if (a < b + c) and (b < a + c)\
    \ and (c < a + b) else -1\n\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1,\
    \ 2, 10) == -1\nassert triangle_area(1, 2, 3) == -1\nassert triangle_area(5, 4,\
    \ 3) == 6.00\n\n\"\"\"\n5.\n\nWrite a function to return the maximum of three\
    \ numbers.\nExample:\nmax_of_three(1, 0, 1) == 1\nmax_of_three(0, -1, 1) == 1\n\
    \"\"\"\n\n", "    if (a + b > c) and (a + c > b) and (b + c > a):\n        p =\
    \ (a + b + c) / 2\n        s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    \
    \    return round(s, 2)\n    else:\n        return -1\n\nprint(triangle_area(3,\
    \ 4, 5))\nprint(triangle_area(1, 2, 10))", "    s = (a + b + c) / 2\n    area\
    \ = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if a + b > c and a + c > b and\
    \ b + c > a:\n        return round(area, 2)\n    else:\n        return -1\n\n\n\
    @pytest.mark.parametrize(\"a, b, c, expected\", [\n    (3, 4, 5, 6.00),\n    (1,\
    \ 2, 10, -1),\n    (1, 2, 3, -1),\n    (4, 2, 1, -1),\n    (5, 2, 1, -1),\n  \
    \  (3, 2, 1, -1),\n    (3, 4, 1, -1),\n    (3, 5, 1, -1),\n    (3, 6, 1, -1),\n\
    \    (3, 4, 5, 6.00),\n    (1, 2, 2, -1),\n    (4, 4, 4, 6.93),\n    (9, 9, 9,\
    \ 26.83),\n    (6, 6, 6, 15.59),\n    (3, 3, 3, 4.24),\n    (7, 7, 7, 20.22),\n\
    \    (8, 8, 8, 27.71),\n    (9, 9, 9, 26.83),\n    (10, 10, 10, 33.00),\n    (11,\
    \ 11, 11, 40.01),\n    (12, 12, 12, 46.55),\n    (13, 13, 13, 53.52),\n    (14,\
    \ 14, 14, 60.93),\n    (15, 15, 15, 68.78),\n    (16, 16, 16, 77.09),\n    (17,\
    \ 17, 17, 85.85),\n    (18, 18, 18, 95.08),\n    (19, 19, 19, 104.78),\n    (20,\
    \ 20, 20, 114.97),\n    (21, 21, 21, 125.65),\n    (22, 22, 22, 136.84),\n   \
    \ (23, 23, 23, 148.55),\n    (", "    if not(a+b>c and a+c>b and b+c>a):\n   \
    \     return -1\n    s = (a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c))**0.5\n\n",
  "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\
    \    if area <= 0:\n        return -1\n    return round(area, 2)\n\n", "    if\
    \ a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n      \
    \  area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n\n", "    # fill in code here\n    ", " \
    \   p = (a + b + c) / 2\n    a = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\n\
    \    if a > 0:\n        return round(a, 2)\n    else:\n        return -1\n\n",
  "    # Write your code here\n    if a + b > c and a + c > b and b + c > a:\n   \
    \     p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) **\
    \ 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n", "   \
    \ # your code here\n    p = (a + b + c) / 2\n    s = p * (p - a) * (p - b) * (p\
    \ - c)\n    if s <= 0:\n        return -1\n    return round(math.sqrt(s), 2)\n\
    \ \nprint(triangle_area(3, 4, 5) == 6.00)\nprint(triangle_area(1, 2, 10) == -1)\n",
  "    # Your code here\n    if not(a+b > c) or not(a+c > b) or not(b+c > a):\n  \
    \      return -1\n    p = (a+b+c)/2\n    return (p*(p-a)*(p-b)*(p-c))**0.5\n \
    \   # return a*b*c/2\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    # If a side is longer than\
    \ the sum of the other two, return -1\n    if a + b < c or a + c < b or b + c\
    \ < a:\n        return -1\n    # The formula for the area of a triangle is the\
    \ square root of half \n    # the product of the sum of the squares of the three\
    \ sides and the \n    # difference of the three sides\n    return round(((a +\
    \ b + c) * (b + c - a) * (a + c - b) * (a + b - c)) ** 0.5 / 4, 2)\n    \n", " \
    \   p = (a + b + c) / 2\n    if (p - a) * (p - b) * (p - c) > 0:\n        return\
    \ (p * (p - a) * (p - b) * (p - c)) ** 0.5\n    else:\n        return -1\n\n",
  "    # use built-in max to find the longest side\n    if max(a, b, c) < a + b +\
    \ c - max(a, b, c):\n        return (a + b + c) / 2 - max(a, b, c)\n    else:\n\
    \        return -1\n\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1,\
    \ 2, 10) == -1\nassert triangle_area(10, 20, 10) == 90.00\nprint(\"Passed\")",
  "    s = (a + b + c) / 2.0\n    if s - a > 0 and s - b > 0 and s - c > 0:\n    \
    \    a = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(a, 2)\n\
    \    else:\n        return -1\n\n", "    s = (a + b + c) / 2\n    area = (s *\
    \ (s - a) * (s - b) * (s - c)) ** 0.5\n    if area > 0:\n        return round(area,\
    \ 2)\n    else:\n        return -1\n", "    s = (a + b + c) / 2\n    area = (s\
    \ * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area > 0:\n        return round(area,\
    \ 2)\n    else:\n        return -1", "    s = (a + b + c) / 2\n    area = (s *\
    \ (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2) if area > 0 else\
    \ -1\n\n", "    sides = [a, b, c]\n    sides.sort()\n    side_a, side_b, side_c\
    \ = sides\n    if side_a + side_b <= side_c:\n        return -1\n    semi_perimeter\
    \ = sum(sides) / 2\n    area = sqrt(semi_perimeter * (semi_perimeter - side_a)\
    \ * (semi_perimeter - side_b) * (semi_perimeter - side_c))\n    return round(area,\
    \ 2)\n\n", "    pass\n```\n\nAn example of passing tests:\n\n```python", "   \
    \ if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n   \
    \     area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n", "    pass\n    # YOUR CODE HERE\n   \
    \ sides_list = [a, b, c]\n    sides_list.sort()\n    if sides_list[0] + sides_list[1]\
    \ > sides_list[2]:\n        return round(0.5 * math.sqrt(sides_list[0] * sides_list[1]\
    \ * (sides_list[0] + sides_list[1] - sides_list[2]) * (sides_list[0] + sides_list[2]\
    \ - sides_list[1])), 2)\n    else:\n        return -1\n\n", "    return -1 if\
    \ not is_triangle(a, b, c) else round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n\
    \n", "    if is_triangle(a, b, c):\n        s = (a + b + c) / 2\n        return\
    \ round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return\
    \ -1\n\n", "    pass\n\n", "    p = (a + b + c) / 2\n    s = math.sqrt(p * (p\
    \ - a) * (p - b) * (p - c))\n    if (a + b > c) and (a + c > b) and (b + c > a):\n\
    \        return round(s, 2)\n    else:\n        return -1\n\n", "    if not ((a+b)\
    \ > c and (a+c) > b and (b+c) > a):\n        return -1\n    per = (a+b+c)/2\n\
    \    return sqrt(per*(per-a)*(per-b)*(per-c))\n\n", "    pass\n \n", "    if a\
    \ + b <= c or a + c <= b or b + c <= a:\n        return -1\n    else:\n      \
    \  p = (a + b + c) / 2\n        s = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\
    \        return round(s, 2)\n\n", "    if a + b > c and a + c > b and b + c >\
    \ a:\n        p = (a + b + c) / 2\n        return round(sqrt(p * (p - a) * (p\
    \ - b) * (p - c)), 2)\n    else:\n        return -1\n\n", "    if (a + b > c)\
    \ and (a + c > b) and (b + c > a):\n        p = (a + b + c) / 2\n        s = (p\
    \ * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n    else:\n\
    \        return -1\n    \n    \n    \n    ", "    s = (a + b + c) / 2\n    area\
    \ = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area > 0:\n        return\
    \ round(area, 2)\n    else:\n        return -1\n", "    # Your code here\n   \
    \ return -1\n\n", "    s = (a + b + c) / 2\n    x = s * (s - a) * (s - b) * (s\
    \ - c)\n    if x < 0:\n        return -1\n    else:\n        return round(math.sqrt(x),\
    \ 2)\n\n", "    pass\n\n", "    pass\n\n", "    # replace return None with your\
    \ solution\n    s = (a + b + c) / 2\n    if a < 0 or b < 0 or c < 0:\n       \
    \ return -1\n    elif (a < b + c) and (b < a + c) and (c < a + b):\n        return\
    \ (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    else:\n        return -1\n", " \
    \   # assert triangle_area(3, 4, 5) == 6.00\n    # assert triangle_area(1, 2,\
    \ 10) == -1\n    # assert triangle_area(3, 4, -5) == -1\n    # assert triangle_area(0,\
    \ 4, 5) == -1\n    # assert triangle_area(1, 1, 2) == -1\n    # assert triangle_area(1,\
    \ 2, 1) == -1\n    # assert triangle_area(2, 1, 1) == -1\n    # assert triangle_area(2,\
    \ 5, 8) == -1\n    # assert triangle_area(4, 2, 6) == -1\n    # assert triangle_area(7,\
    \ 6, 5) == -1\n    # assert triangle_area(6, 7, 5) == -1\n    # assert triangle_area(5,\
    \ 6, 7) == -1\n    # assert triangle_area(5, 5, 5) == -1\n    # assert triangle_area(13,\
    \ 13, 13) == -1\n    # assert triangle_area(99, 20, 97) == -1\n    # assert triangle_area(100,\
    \ 100, 10) == -1\n    # assert triangle_area(100, 50, 30) == -1\n    # assert\
    \ triangle_area(100, 50, 40) == -1\n    # assert triangle_area(70, 40, 30) ==\
    \ -1\n    # assert triangle_area(60, 60, 60) == -1\n    # assert triangle_area(80,\
    \ 80, 80) == -1\n    # assert triangle_area(90, 90, 90) == -1\n    # assert triangle_area(70,\
    \ 80, 90) == -1\n    # assert triangle_area(30, 40, 50) == 600.00\n    # assert\
    \ triangle_area(0, 0, 0) == -1\n    # assert triangle_area(1, 1, 1) == 0.43\n\
    \    # assert triangle_area(300, 400, 500) == 600.00\n    # assert triangle_area(1000,\
    \ 1, 1) == -1\n    # assert triangle_area(1, 1000, 1) == -1\n    # assert triangle_area(1,\
    \ 1, 1000)", "    # Your code here:\n    import math\n    if a+b>c and a+c>b and\
    \ b+c>a:\n        s=(a+b+c)/2\n        area=math.sqrt(s*(s-a)*(s-b)*(s-c))\n \
    \       return round(area,2)\n    else:\n        return -1\n", "    try:\n   \
    \     s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) **\
    \ 0.5\n        return round(area, 2)\n    except:\n        return -1\n\n", " \
    \   if a+b>c and a+c>b and b+c>a:\n        p = (a+b+c)/2\n        return (p*(p-a)*(p-b)*(p-c))**0.5\n\
    \    else:\n        return -1\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))", "    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) *\
    \ (s - b) * (s - c)), 2) if a + b > c else -1\n\n\nprint(triangle_area(3, 4, 5))\n\
    print(triangle_area(1, 2, 10))", "    if a + b > c and a + c > b and b + c > a:\n\
    \        p = (a + b + c) / 2\n        triangle_area = (p * (p - a) * (p - b) *\
    \ (p - c)) ** 0.5\n        return round(triangle_area, 2)\n    else:\n       \
    \ return -1\n\n", "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b)\
    \ * (s - c)) ** 0.5\n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ float('{:.2f}'.format(area))\n    else:\n        return -1\n\nprint(triangle_area(1,\
    \ 2, 10))", "    # TODO\n    return -1\n\n", "    if a + b > c and a + c > b and\
    \ b + c > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p -\
    \ b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return\
    \ -1\n\n", "    sides = sorted([a, b, c])\n    if sides[0] + sides[1] > sides[2]:\n\
    \        p = sum(sides) / 2\n        return round(sqrt(p * (p - sides[0]) * (p\
    \ - sides[1]) * (p - sides[2])), 2)\n    return -1\n\n", "    # [my solution]\n\
    \    if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n\
    \        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area,\
    \ 2)\n    else:\n        return -1\n\n    # [best solution]\n    if a + b > c\
    \ and a + c > b and b + c > a:\n        return round(1/4 * (a + b + c) * (1/2\
    \ * (a + b + c) - a) * (1/2 * (a + b + c) - b) * (1/2 * (a + b + c) - c), 2)\n\
    \    else:\n        return -1\n\n", "    if ((a + b) > c) and ((a + c) > b) and\
    \ ((b + c) > a):\n        s = 0.5 * (a + b + c)\n        area = (s * (s - a) *\
    \ (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n      \
    \  return -1\n\n", "    t = sorted([a, b, c])\n    if t[0] + t[1] > t[2]:\n  \
    \      return round(t[0] * t[1] / 2, 2)\n    else:\n        return -1\n\n", " \
    \   # your code here\n    max_side = max(a, b, c)\n    if max_side < a + b + c\
    \ - max_side:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p -\
    \ b) * (p - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return\
    \ -1\n\n", "    if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a\
    \ + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \
    \    return round(area, 2)\n    else:\n        return -1\n\n", "    # raise NotImplementedError(\"\
    Please implement the triangle_area function\")\n    if (a + b > c) and (a + c\
    \ > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s -\
    \ a) * (s - b) * (s - c)) ** 0.5\n        area = round(area, 2)\n        return\
    \ area\n    else:\n        return -1\nprint(triangle_area(3, 4, 5))\nprint(triangle_area(1,\
    \ 2, 10))\n\n", "    s = (a + b + c) / 2\n    if a < s and b < s and c < s:\n\
    \        return sqrt(s * (s - a) * (s - b) * (s - c))\n    return -1\n\n", " \
    \   if a + b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n \
    \       return round(sqrt(p * (p - a) * (p - b) * (p - c)), 2)\n    else:\n  \
    \      return -1\n\n", "    pass\n\n", "    s = (a + b + c) / 2\n    area = (s\
    \ * (s - a) * (s - b) * (s - c)) ** 0.5\n    if area < 0:\n        return -1\n\
    \    return round(area, 2)\n\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(1,\
    \ 2, 10) == -1\nassert triangle_area(3, 4, 4) == 3.89\nassert triangle_area(7,\
    \ 12, 8) == 30.00\nassert triangle_area(3, 4, 5) == 6.00\nassert triangle_area(7,\
    \ 8, 9) == 26.83\nassert triangle_area(7, 12, 8) == 30.00\nassert triangle_area(7,\
    \ 12, 5) == -1\nassert triangle_area(7, 7, 7) == 15.58\nassert triangle_area(3,\
    \ 4, 4) == 3.89\nassert triangle_area(5, 7, 5) == 12.00\nassert triangle_area(5,\
    \ 7, 4) == -1\n", "    s = (a + b + c) / 2\n    return -1 if s - a <= 0 or s -\
    \ b <= 0 or s - c <= 0 else round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n\n",
  "    pass\n\n", "    def is_valid_triangle(a, b, c):\n        return a + b > c and\
    \ a + c > b and b + c > a\n\n    if is_valid_triangle(a, b, c):\n        s = (a\
    \ + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    \
    \    return round(area, 2)\n    else:\n        return -1\n\n", "    s = 0.5 *\
    \ (a + b + c)\n    if (s - a) * (s - b) * (s - c) <= 0:\n        return -1\n \
    \   else:\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n", "   \
    \ pass\n\n", "    p = (a + b + c) / 2\n    if a + b > c and a + c > b and b +\
    \ c > a:\n        area = sqrt(p * (p - a) * (p - b) * (p - c))\n        return\
    \ round(area, 2)\n    else:\n        return -1\n\n", "    return -1\n", "    if\
    \ is_triangle(a, b, c):\n        p = (a + b + c) / 2\n        area = math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n        return round(area, 2)\n    else:\n \
    \       return -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n     \
    \   s = (a + b + c) / 2\n        return (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\
    \    else:\n        return -1\n", "    if a+b<=c or a+c<=b or b+c<=a:\n      \
    \  return -1\n    p = (a+b+c)/2\n    return round(sqrt(p*(p-a)*(p-b)*(p-c)),2)",
  "    if not is_triangle(a, b, c):\n        return -1\n    s = (a + b + c) / 2\n\
    \    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\n",
  "    arr = [a, b, c]\n    arr.sort()\n    if arr[0] + arr[1] > arr[2]:\n       \
    \ return round(math.sqrt(arr[2] * (arr[2] - arr[0]) * (arr[2] - arr[1]) * (arr[2]\
    \ - arr[0])), 2)\n    else:\n        return -1\n\n", "    if a + b > c and a +\
    \ c > b and b + c > a:\n        p = (a + b + c) / 2\n        return round(math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c)), 2)\n    else:\n        return -1\n\n\n@pytest.mark.parametrize(\"\
    a, b, c, result\",\n                         [\n                             (3,\
    \ 4, 5, 6.00),\n                             (1, 2, 10, -1),\n               \
    \              (1, 1, 1, 0.43),\n                             (0, 0, 0, -1),\n\
    \                             (4, 6, 3, 5.33),\n                             (1,\
    \ 1, 2, -1),\n                             (5, 4, 3, 6.00),\n                \
    \             (10, 10, 10, 43.30),\n                             (1, 2, 1, -1),\n\
    \                             (2, 3, 1, -1),\n                             (3,\
    \ 4, 1, -1),\n                             (4, 5, 1, -1),\n                  \
    \           (5, 6, 1, -1),\n                             (6, 7, 1, -1),\n    \
    \                         (7, 8, 1, -1),\n                             (8, 9,\
    \ 1, -1),\n                             (9, 10, 1, -1),\n                    \
    \         (10, 11, 1, -1),\n                             (11, 12, 1, -1),\n  \
    \                           (12, 13, 1, -1),\n                             (13,\
    \ 14, 1, -1),\n                             (14, 15, 1, -1),\n               \
    \              (15, 16, 1, -1),\n                             (16, 17, 1, -1),\n\
    \                             (17, 18, 1, -1),\n                             (18,\
    \ 19, 1, -1),\n                             (19, 20, 1, -1),\n               \
    \              (20, 21, 1, -1),\n                             (21, 22, 1, -1),\n\
    \                             (22, 23, 1, -1),\n                             (23,\
    \ 24, 1, -1),\n                             (24,", "    pass\n\n", "    if a +\
    \ b > c and a + c > b and b + c > a:\n        p = (a + b + c) / 2\n        s =\
    \ (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(s, 2)\n    else:\n\
    \        return -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n    \
    \    s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) **\
    \ 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n", "   \
    \ if (a + b) > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n\
    \        s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n        return float(format(s,\
    \ '.2f'))\n    else:\n        return -1\n\n", "    a, b, c = sorted([a, b, c])\n\
    \    if a + b <= c:\n        return -1\n    p = (a + b + c) / 2\n    area = (p\
    \ * (p - a) * (p - b) * (p - c)) ** 0.5\n    return round(area, 2)\n", "    pass\n",
  "    sides = [a, b, c]\n    if max(sides) >= sum(sides) - max(sides):\n        return\
    \ -1\n\n    p = sum(sides) / 2\n    return round(sqrt(p * (p - a) * (p - b) *\
    \ (p - c)), 2)\n\n", "    s = (a + b + c) / 2.0\n    if (s - a > 0) and (s - b\
    \ > 0) and (s - c > 0):\n        area = math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\n        return round(area, 2)\n    else:\n        return -1\n\n", "   \
    \ if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n   \
    \     return round(sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n    \
    \    return -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n        p\
    \ = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n\
    \        return round(area, 2)\n    else:\n        return -1\n\n", "    pass\n",
  "    pass\n\n", "    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s\
    \ - c)) ** 0.5\n    return round(area, 2) if all(a + b > c for a, b, c in combinations([a,\
    \ b, c], 2)) else -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n  \
    \      p = (a + b + c) / 2\n        return round(math.sqrt(p * (p - a) * (p -\
    \ b) * (p - c)), 2)\n    else:\n        return -1\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
