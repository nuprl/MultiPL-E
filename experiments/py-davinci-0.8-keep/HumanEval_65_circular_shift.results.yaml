name: HumanEval_65_circular_shift
language: py
results:
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    str_x = str(x)\n    shift = shift % len(str_x)\n  \
    \  return str_x[-shift:] + str_x[:-shift]\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgw0xsdju.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpgw0xsdju.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpgw0xsdju.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return\
    \ x[::-1]\n    return x[-shift:] + x[:-shift]\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return circular_shift_left(str(x), shift)\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvzw7_wln.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpvzw7_wln.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpvzw7_wln.py\", line\
    \ 14, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpvzw7_wln.py\"\
    , line 10, in circular_shift\n    return circular_shift_left(str(x), shift)\n\
    NameError: name 'circular_shift_left' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # split number into a list of its digits\n    # reverse\
    \ list\n    # shift right\n    # join together and return\n    return \"\".join(shift_right(list(str(x)),\
    \ shift)[::-1])\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb81n7soy.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpb81n7soy.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpb81n7soy.py\", line\
    \ 18, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpb81n7soy.py\"\
    , line 14, in circular_shift\n    return \"\".join(shift_right(list(str(x)), shift)[::-1])\n\
    NameError: name 'shift_right' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = math.floor(math.log10(x)) + 1\n    if\
    \ shift >= num_digits:\n        return str(x)[::-1]\n    return str(x)[-shift:]\
    \ + str(x)[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp60eq14bu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp60eq14bu.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp60eq14bu.py\", line\
    \ 17, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmp60eq14bu.py\"\
    , line 10, in circular_shift\n    num_digits = math.floor(math.log10(x)) + 1\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # convert x to a string\n    string_x = str(x)\n  \
    \  length = len(string_x)\n    # shift the string by length - shift\n    shifted_string\
    \ = string_x[length - shift: ] + string_x[0: length - shift]\n    return shifted_string\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rknf65u.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4rknf65u.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp4rknf65u.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    number_of_digits = len(str(x))\n    shift = shift %\
    \ number_of_digits\n    if shift == 0:\n        return str(x)\n    digits = [int(digit)\
    \ for digit in str(x)]\n    shift_digits = digits[-shift:] + digits[:-shift]\n\
    \    return ''.join(str(digit) for digit in shift_digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt0iw18fa.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpt0iw18fa.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpt0iw18fa.py\", line\
    \ 22, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9aknbv1o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9aknbv1o.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp9aknbv1o.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    result = str(x)\n    if shift > len(result):\n    \
    \    return result[::-1]\n    return result[-shift:] + result[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    assert isinstance(x, int)\n    assert isinstance(shift,\
    \ int)\n    string_x = str(x)\n    num_digits = len(string_x)\n    if shift >=\
    \ num_digits:\n        return string_x[::-1]\n    else:\n        return string_x[-shift:]\
    \ + string_x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2)\
    \ == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) ==\
    \ '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) ==\
    \ '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqagstvx8.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqagstvx8.py\", line 28,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpqagstvx8.py\", line\
    \ 22, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift >= len(str(x)):\n        return str(x)[::-1]\n\
    \    elif shift < 0:\n        return str(x)\n    else:\n        return str(x)[-shift:]\
    \ + str(x)[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsmot1ft1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsmot1ft1.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpsmot1ft1.py\", line\
    \ 20, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return\
    \ s[::-1]\n    shift = shift % len(s)\n    return s[-shift:] + s[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    return str(x)[-shift:] + str(x)[:-shift]\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    x_len = len(x_str)\n    # x_len\
    \ = int(math.log10(x)) + 1\n    if shift > x_len:\n        x_str = x_str[::-1]\n\
    \    else:\n        x_str = x_str[-shift:] + x_str[:x_len - shift]\n    return\
    \ x_str\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n  \
    \  assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert\
    \ candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n\
    \    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = int(math.log10(x)) + 1\n    if shift >\
    \ num_digits:\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:]\
    \ + str(x)[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpebnnarlq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpebnnarlq.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpebnnarlq.py\", line\
    \ 18, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpebnnarlq.py\"\
    , line 10, in circular_shift\n    num_digits = int(math.log10(x)) + 1\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n    \n\
    \    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert\
    \ candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12,\
    \ 1) == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n   \
    \ check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    return (s[-shift:] + s[:-shift])\n\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1p9t2osy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1p9t2osy.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp1p9t2osy.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return\
    \ s[::-1]\n    r = s[shift:] + s[:shift]\n    return r\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoudef04n.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoudef04n.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpoudef04n.py\", line\
    \ 18, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    str_x = str(x)\n    if shift > len(str_x):\n      \
    \  return str_x[::-1]\n    else:\n        return str_x[-shift:] + str_x[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    shift = shift % len(x)\n    return\
    \ x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaub4sf8m.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpaub4sf8m.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpaub4sf8m.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jergyew.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp4jergyew.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp4jergyew.py\", line\
    \ 16, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    return (s[-shift:] + s[:-shift])[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc9d59u8o.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpc9d59u8o.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpc9d59u8o.py\", line\
    \ 15, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    s = str(x)\n    if shift\
    \ > num_digits:\n        return s[::-1]\n    else:\n        s = s[num_digits -\
    \ shift:] + s[:num_digits - shift]\n        return s\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return\
    \ x[::-1]\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n\
    \        return \"\".join(str(d) for d in reversed(digits))\n    return \"\".join(str(d)\
    \ for d in (digits[-shift:] + digits[:-shift]))\n\n\ndef check(candidate):\n \
    \   assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n \
    \   assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n   \
    \ assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy73plaom.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpy73plaom.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpy73plaom.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    shifted = digits[shift:]\
    \ + digits[:shift]\n    return \"\".join(shifted)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02hffupg.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp02hffupg.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp02hffupg.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return circular_shift_loop(str(x), shift)\n\n\n@functools.lru_cache(maxsize=None)\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8h1pvcws.py\", line\
    \ 13, in <module>\n    @functools.lru_cache(maxsize=None)\nNameError: name 'functools'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    n = number_of_digits(x)\n    if shift > n:\n      \
    \  return reverse_digits(x)\n    else:\n        return (x // (10 ** shift)) %\
    \ (10 ** n) + (x % (10 ** shift)) * (10 ** (n - shift))\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqmdubjas.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpqmdubjas.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpqmdubjas.py\", line\
    \ 17, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpqmdubjas.py\"\
    , line 10, in circular_shift\n    n = number_of_digits(x)\nNameError: name 'number_of_digits'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    if len(x) > shift:\n        shift =\
    \ shift % len(x)\n        x = x[-shift:] + x[:-shift]\n    else:\n        x =\
    \ x[::-1]\n    return x\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_9oyvzt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmps_9oyvzt.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmps_9oyvzt.py\", line\
    \ 21, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return reverse(str(x))\n\
    \    shift_str = str(x)[-shift:]\n    return shift_str + str(x)[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpawztj72_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpawztj72_.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpawztj72_.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\n  File \"/tmp/tmpawztj72_.py\"\
    , line 11, in circular_shift\n    return reverse(str(x))\nNameError: name 'reverse'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    length = len(digits)\n    if shift\
    \ >= length:\n        digits = digits[::-1]\n    else:\n        digits = digits[length\
    \ - shift:] + digits[:length - shift]\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp88kat9z_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp88kat9z_.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp88kat9z_.py\", line\
    \ 21, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    n = len(s)\n    shift = shift % n\n\
    \    shift_index = n - shift\n    return s[shift_index:] + s[:shift_index]\n\n\
    \n@lru_cache(None)\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu_c28666.py\", line\
    \ 17, in <module>\n    @lru_cache(None)\nNameError: name 'lru_cache' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num = str(x)\n    shift = shift % len(num)\n    return\
    \ num[-shift:] + num[:-shift]\n\n\n@overload\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3f60je9.py\", line\
    \ 15, in <module>\n    @overload\nNameError: name 'overload' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift == 0:\n        return\
    \ x_str\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvbly1v1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptvbly1v1.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmptvbly1v1.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # Extract the digits of x in reverse order,\n    #\
    \ and shift them to the right\n    digits = []\n    while x > 0:\n        x, digit\
    \ = divmod(x, 10)\n        digits.append(digit)\n    for i in range(shift):\n\
    \        digits.insert(0, digits.pop())\n    return \"\".join(str(digit) for digit\
    \ in digits)\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jvn6ihw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8jvn6ihw.py\", line 29,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp8jvn6ihw.py\", line\
    \ 22, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    xs = str(x)\n    shift = shift % len(xs)\n    xs =\
    \ xs[shift:] + xs[:shift]\n    return xs\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9yuysmgn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9yuysmgn.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp9yuysmgn.py\", line\
    \ 17, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift >= len(digits):\n\
    \        return ''.join(reversed(digits))\n    shifted = digits[-shift:] + digits[:-shift]\n\
    \    return ''.join(shifted)\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplb163amq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplb163amq.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmplb163amq.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x) if shift > len(str(x)) else str(x)[-shift:]\
    \ + str(x)[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp187bvw59.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp187bvw59.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp187bvw59.py\", line\
    \ 16, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num = str(x)\n    shift = shift % len(num)\n    return\
    \ num[-shift:] + num[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnkpcp66y.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpnkpcp66y.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpnkpcp66y.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[shift:] + str(x)[:shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyp6msybh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpyp6msybh.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpyp6msybh.py\", line\
    \ 17, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [char for char in str(x)]\n    shifted = digits[-shift:]\
    \ + digits[:-shift]\n    return \"\".join(shifted)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3aqkh5j_.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp3aqkh5j_.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp3aqkh5j_.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    length = len(digits)\n    if shift\
    \ >= length:\n        return digits[::-1]\n    return digits[length - shift:]\
    \ + digits[:length - shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpavop6ucc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpavop6ucc.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpavop6ucc.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if len(digits) <= shift:\n   \
    \     return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo85ih9wt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo85ih9wt.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpo85ih9wt.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = len(str(x))\n    if shift >= digits:\n   \
    \     return str(x)[::-1]\n    else:\n        return str(x)[-shift:] + str(x)[:digits\
    \ - shift]\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n \
    \   assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n   \
    \ assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\ndef\
    \ test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazy5yzdz.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpazy5yzdz.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpazy5yzdz.py\", line\
    \ 18, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    shift = shift % len(s)\n    return\
    \ s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcffsaokv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpcffsaokv.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpcffsaokv.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    shift = shift % len(x)\n    return\
    \ x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3lhri_6s.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp3lhri_6s.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp3lhri_6s.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5lw1fmpo.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp5lw1fmpo.py\", line 20,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp5lw1fmpo.py\", line\
    \ 15, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return reverse(str(x))[shift:] + reverse(str(x))[:shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprv3vxg22.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmprv3vxg22.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmprv3vxg22.py\", line\
    \ 14, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmprv3vxg22.py\"\
    , line 10, in circular_shift\n    return reverse(str(x))[shift:] + reverse(str(x))[:shift]\n\
    NameError: name 'reverse' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    assert x >= 0\n    assert shift >= 0\n    digits =\
    \ str(x)\n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4djito17.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp4djito17.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp4djito17.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    shift = shift % len(digits)\n    else:\n        return digits[shift:] + digits[:shift]\n\
    \    return digits[shift:] + digits[:shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp64pqyly7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp64pqyly7.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp64pqyly7.py\", line\
    \ 19, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if x >= 0:\n        text = str(x)\n        reverse\
    \ = False\n    else:\n        text = str(x)[1:]\n        reverse = True\n    shift\
    \ = shift % len(text)\n    if reverse:\n        return '-' + text[-shift:] + text[:-shift]\n\
    \    else:\n        return text[-shift:] + text[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqj9cngyl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqj9cngyl.py\", line 31,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpqj9cngyl.py\", line\
    \ 26, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return\
    \ s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    if shift > num_digits:\n\
    \        return str(x)[::-1]\n    left = str(x)[:num_digits - shift]\n    right\
    \ = str(x)[num_digits - shift:]\n    return right + left\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    str_x = str(x)\n    if shift > len(str_x):\n      \
    \  return \"\".join(reversed(str_x))\n    return str_x[-shift:] + str_x[:-shift]\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    string = str(x)\n    shift = shift % len(string)\n\
    \    return string[shift:] + string[:shift]\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnrv_5zw1.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpnrv_5zw1.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpnrv_5zw1.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    n_chars = num_chars(x)\n    if shift >= n_chars:\n\
    \        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu5cueca5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpu5cueca5.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpu5cueca5.py\", line\
    \ 17, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpu5cueca5.py\"\
    , line 10, in circular_shift\n    n_chars = num_chars(x)\nNameError: name 'num_chars'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    list_shift = list(str(x))\n    list_shift.reverse()\n\
    \    if shift > len(list_shift):\n        return ''.join(list_shift)\n    return\
    \ ''.join(list_shift[shift:] + list_shift[:shift])\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnhnm85ro.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnhnm85ro.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpnhnm85ro.py\", line\
    \ 18, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digit_list = list(str(x))\n    shifted_list = digit_list[-shift:]\
    \ + digit_list[:-shift]\n    return \"\".join(shifted_list)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vf1ah4l.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0vf1ah4l.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp0vf1ah4l.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift >= len(digits):\n\
    \        return \"\".join(reversed(digits))\n    else:\n        return \"\".join(digits[-shift:]\
    \ + digits[:-shift])\n\n\ndef check(candidate):\n    assert candidate(100, 2)\
    \ == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) ==\
    \ '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) ==\
    \ '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphpwjg5cf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphpwjg5cf.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmphpwjg5cf.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    c = str(x)\n    if shift > len(c):\n        return\
    \ c[::-1]\n    else:\n        return c[-shift:] + c[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift %= len(digits)\n    if shift\
    \ == 0:\n        return digits\n    return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_253wv5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpj_253wv5.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpj_253wv5.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    # shift = shift % len(digits)\n\
    \    # c = len(digits) - shift\n    return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihramkax.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpihramkax.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpihramkax.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift == 0:\n        return str(x)\n    shift %=\
    \ len(str(x))\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1er9k8h.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpy1er9k8h.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpy1er9k8h.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n@exception_safe\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxka_xlu.py\", line\
    \ 12, in <module>\n    @exception_safe\nNameError: name 'exception_safe' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # Store the digits of x in a list, keeping the original\
    \ order\n    digits = [int(digit) for digit in str(x)]\n    # Shift the digits\
    \ of x right by shift\n    digits = digits[-shift:] + digits[:-shift]\n    # Convert\
    \ digits back to an integer and return\n    return ''.join(str(digit) for digit\
    \ in digits)\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8wn54w8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpq8wn54w8.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpq8wn54w8.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    number_of_digits = int(log10(x)) + 1\n    return str(x)[shift:]\
    \ + str(x)[:shift] if shift < number_of_digits else str(x)[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqmph8b48.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqmph8b48.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpqmph8b48.py\", line\
    \ 15, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpqmph8b48.py\"\
    , line 10, in circular_shift\n    number_of_digits = int(log10(x)) + 1\nNameError:\
    \ name 'log10' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    return (str(x) + str(x))[(shift\
    \ % num_digits):(shift % num_digits + num_digits)]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9m4jxcsr.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp9m4jxcsr.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp9m4jxcsr.py\", line\
    \ 15, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    return digits[-shift:] + digits[:-shift]\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprmx6qhvu.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmprmx6qhvu.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmprmx6qhvu.py\", line\
    \ 16, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    string = str(x)\n    if shift > len(string):\n    \
    \    return string[::-1]\n    return string[-shift:] + string[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if len(s) > shift:\n        return\
    \ s[-shift:] + s[:-shift]\n    else:\n        return s[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdbts6_v0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdbts6_v0.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpdbts6_v0.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [d for d in str(x)]\n    # if we want to shift\
    \ more than the number of digits in the number, we want\n    # to reverse the\
    \ digits\n    return ''.join(digits[-shift:] + digits[:-shift])\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppic_cr7m.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppic_cr7m.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmppic_cr7m.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    shifted = [char for char in str(x)]\n    while shift\
    \ > 0:\n        shifted.insert(0, shifted.pop())\n        shift -= 1\n    return\
    \ \"\".join(shifted)\n\n\ndef check(candidate):\n    assert candidate(100, 2)\
    \ == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) ==\
    \ '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) ==\
    \ '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2scczo6a.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2scczo6a.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp2scczo6a.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift < len(digits):\n    \
    \    return digits[-shift:] + digits[:-shift]\n    else:\n        return digits[::-1]\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfcdlvew1.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfcdlvew1.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpfcdlvew1.py\", line\
    \ 18, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    ndigits = len(str(x))\n    ndigits_rev = ndigits -\
    \ shift\n    return str(x)[ndigits_rev:] + str(x)[:ndigits_rev]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvvmn5w8k.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvvmn5w8k.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpvvmn5w8k.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    t = str(x)\n    shift = shift % len(t)\n    return\
    \ t[-shift:] + t[:-shift]\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuq3z2w74.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpuq3z2w74.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpuq3z2w74.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    y = str(x)\n    if len(y) < shift:\n        y = y[::-1]\n\
    \    else:\n        y = y[-shift:] + y[:-shift]\n    return y\n\n\n@functools.lru_cache(maxsize=None)\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbkcrylja.py\", line\
    \ 18, in <module>\n    @functools.lru_cache(maxsize=None)\nNameError: name 'functools'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  x_str = x_str[::-1]\n    else:\n        x_str = x_str[-shift:] + x_str[:-shift]\n\
    \    return x_str\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    string_x = str(x)\n    if shift > len(string_x):\n\
    \        return string_x[::-1]\n    else:\n        return string_x[-shift:] +\
    \ string_x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    string = str(x)\n    if shift > len(string):\n    \
    \    return string[::-1]\n    #    return ''.join(reversed(string))\n    else:\n\
    \        return string[-shift:] + string[:-shift]\n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    digits = len(x)\n    shift = shift\
    \ % digits\n    return x[-shift:] + x[:-shift]\n    # x_lst = list(x)\n    # x_lst.insert(0,\
    \ x_lst.pop(-1))\n    # return ''.join(x_lst)\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe5guxjgs.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpe5guxjgs.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpe5guxjgs.py\", line\
    \ 22, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    n = len(str(x))\n    if shift < n:\n        shift_index\
    \ = n - shift\n        return str(x)[shift_index:] + str(x)[:shift_index]\n  \
    \  else:\n        return str(x)[::-1]\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuaimedgn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpuaimedgn.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpuaimedgn.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_list = list(str(x))\n    if shift > len(x_list):\n\
    \        return x_list[::-1]\n    return \"\".join(x_list[-shift:] + x_list[:-shift])\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptuzhh9bv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmptuzhh9bv.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmptuzhh9bv.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if x < 0:\n        x = -x\n    elif x == 0:\n     \
    \   return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(x %\
    \ 10)\n        x //= 10\n    shifted = deque(digits)\n    shifted.rotate(shift)\n\
    \    return \"\".join(str(digit) for digit in shifted)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpri070rlc.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpri070rlc.py\", line 31,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpri070rlc.py\", line\
    \ 24, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpri070rlc.py\"\
    , line 18, in circular_shift\n    shifted = deque(digits)\nNameError: name 'deque'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return\
    \ s[::-1]\n    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [c for c in str(x)]\n    if shift > len(digits):\n\
    \        digits.reverse()\n    else:\n        tmp = digits[-shift:]\n        digits\
    \ = digits[:-shift]\n        digits = tmp + digits\n    return \"\".join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    a = x\n    b = x\n    for _ in range(shift):\n    \
    \    a = a//10\n        b = b%10\n        x = 10*b + a\n    return str(x)\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdb3dklqp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdb3dklqp.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpdb3dklqp.py\", line\
    \ 19, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9xhh189.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmph9xhh189.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmph9xhh189.py\", line\
    \ 16, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # write your code here\n    return None\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr85uzxxj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpr85uzxxj.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpr85uzxxj.py\", line\
    \ 15, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift %= len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqp9ato9l.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqp9ato9l.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpqp9ato9l.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    shift = shift % len(s)\n    if shift\
    \ == 0:\n        return s\n    else:\n        return s[-shift:] + s[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34qz5hhd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp34qz5hhd.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp34qz5hhd.py\", line\
    \ 21, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    shift = shift % len(x_str)\n  \
    \  if shift == 0:\n        return x_str\n    return x_str[-shift:] + x_str[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mf9jnes.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3mf9jnes.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp3mf9jnes.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift == 0:\n        return s\n\
    \    if shift > len(s):\n        return \"\".join(reversed(s))\n    return s[-shift:]\
    \ + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift > len(digits):\n\
    \        return digits[::-1]\n    return \"\".join(digits[-shift:] + digits[:-shift])\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9zhw8mh.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpa9zhw8mh.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpa9zhw8mh.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    if len(x) < shift:\n        return\
    \ x[::-1]\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # TODO: Complete this function\n    return str(x)[-shift:]\
    \ + str(x)[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb58r07ch.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpb58r07ch.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpb58r07ch.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digit_list = list(str(x))\n    digit_list.reverse()\n\
    \    result = digit_list[shift:] + digit_list[:shift]\n    result.reverse()\n\
    \    return \"\".join(result)\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2a159cd.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk2a159cd.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpk2a159cd.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_of_digits = len(str(x))\n    shift %= num_of_digits\n\
    \    if shift == 0:\n        return str(x)\n    x = list(str(x))\n    x = x[-shift:]\
    \ + x[:-shift]\n    return ''.join(x)\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsvr142nl.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpsvr142nl.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpsvr142nl.py\", line\
    \ 22, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift %= len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkluwtgcg.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpkluwtgcg.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpkluwtgcg.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    n = len(digits)\n    if\
    \ shift >= n:\n        return ''.join(reversed(digits))\n    return ''.join(digits[n\
    \ - shift:] + digits[:n - shift])\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqxv2foi0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqxv2foi0.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpqxv2foi0.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift >= 1:\n        a = str(x)\n        return\
    \ str(a[-shift:] + a[:-shift])\n    else:\n        a = str(x)\n        return\
    \ str(a[::-1])\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp3d2o5fv.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpp3d2o5fv.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpp3d2o5fv.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = number_to_digits(x)\n    n = len(digits)\n\
    \    shift = shift % n\n    new_digits = digits[shift:] + digits[:shift]\n   \
    \ return \"\".join(str(digit) for digit in new_digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptlxt4u1g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptlxt4u1g.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmptlxt4u1g.py\", line\
    \ 18, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmptlxt4u1g.py\"\
    , line 10, in circular_shift\n    digits = number_to_digits(x)\nNameError: name\
    \ 'number_to_digits' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift >= len(s):\n        return\
    \ s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuj2nbr2r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpuj2nbr2r.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpuj2nbr2r.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    a = str(x)[-shift:]\n    b = str(x)[:-shift]\n    return a + b\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = num_digits_in_int(x)\n    if shift > num_digits:\n\
    \        return reverse_digits(x)\n    else:\n        return str(x)[shift:] +\
    \ str(x)[:shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbh1n0qe.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzbh1n0qe.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpzbh1n0qe.py\", line\
    \ 18, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpzbh1n0qe.py\"\
    , line 10, in circular_shift\n    num_digits = num_digits_in_int(x)\nNameError:\
    \ name 'num_digits_in_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  return ''.join(reversed(x_str))\n    return x_str[-shift:] + x_str[:-shift]\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if len(s) <= shift:\n        return\
    \ s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86lgo5ns.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp86lgo5ns.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp86lgo5ns.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_digits = list(str(x))\n    x_digits = [x_digits[-1]]\
    \ + x_digits[:-1]\n    return \"\".join(x_digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb9tcs6at.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpb9tcs6at.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpb9tcs6at.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    n = len(digits)\n    if shift\
    \ >= n:\n        return digits[::-1]\n    else:\n        return digits[-shift:]\
    \ + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpleyalcm7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpleyalcm7.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpleyalcm7.py\", line\
    \ 20, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if x < 0:\n        raise Exception(\"Input must be\
    \ a positive integer.\")\n    if shift == 0:\n        return str(x)\n    digits\
    \ = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    for i in range(shift):\n\
    \        last = digits.pop()\n        digits.insert(0, last)\n    return ''.join(str(d)\
    \ for d in digits)\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp593e1zyj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp593e1zyj.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp593e1zyj.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    new_shift = shift % len(str(x))\n    return str(x)[-new_shift:]\
    \ + str(x)[:-new_shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoep4gejy.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpoep4gejy.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpoep4gejy.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    if shift >= num_digits:\n\
    \        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ofnfftm.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7ofnfftm.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp7ofnfftm.py\", line\
    \ 17, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    shift = shift % len(x)\n    if shift\
    \ == 0:\n        return x\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr6mcddo5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpr6mcddo5.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpr6mcddo5.py\", line\
    \ 20, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        last_digit = x % 10\n        x = x // 10\n        x = last_digit\
    \ * 10 ** (len(str(x)) + 1) + x\n        return str(x)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa73fevhf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpa73fevhf.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpa73fevhf.py\", line\
    \ 20, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    length = len(x_str)\n    shift\
    \ = shift % length\n    return x_str[-shift:] + x_str[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpua6137lm.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpua6137lm.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpua6137lm.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    str_x = str(x)\n    return str_x[-shift:] + str_x[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19hra6ot.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp19hra6ot.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp19hra6ot.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [int(c) for c in str(x)]\n    result = []\n\
    \    if shift < len(digits):\n        shift = -1 * shift\n        result = digits[shift:]\
    \ + digits[:shift]\n    else:\n        result = digits[::-1]\n    return \"\"\
    .join([str(i) for i in result])\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi__mz6ta.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpi__mz6ta.py\", line 28,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpi__mz6ta.py\", line\
    \ 22, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    shift = shift % len(s)\n    return\
    \ s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxpnvq53.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmppxpnvq53.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmppxpnvq53.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    if shift > len(x):\n        return\
    \ x[::-1]\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    if shift > len(x_str):\n      \
    \  x_str = x_str[::-1]\n    else:\n        x_str = x_str[-shift:] + x_str[:-shift]\n\
    \    return x_str\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    shift = -shift\n    if len(digits)\
    \ < abs(shift):\n        return ''.join(reversed(digits))\n    return ''.join(digits[shift:]\
    \ + digits[:shift])\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return\
    \ ''.join(reversed(s))\n    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digs = get_digits(x)\n    return \"\".join(list(reversed(digs)))\
    \ if shift > len(digs) else \"\".join(list(reversed(digs))[:-shift]) + \"\".join(list(reversed(digs))[-shift:])\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hx0xah5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2hx0xah5.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp2hx0xah5.py\", line\
    \ 15, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmp2hx0xah5.py\"\
    , line 10, in circular_shift\n    digs = get_digits(x)\nNameError: name 'get_digits'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    str_x = str(x)\n    res = \"\".join(str_x[-shift:]\
    \ + str_x[:-shift])\n    return res\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5d6gukjm.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5d6gukjm.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp5d6gukjm.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    for i in range(shift):\n\
    \        digits.insert(0, digits.pop())\n    return \"\".join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0gtz5n2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg0gtz5n2.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpg0gtz5n2.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2sqgoaqj.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2sqgoaqj.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp2sqgoaqj.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift == 0:\n        return str(x)\n    digits =\
    \ [int(i) for i in str(x)]\n    if shift >= len(digits):\n        return \"\"\
    .join([str(i) for i in digits[::-1]])\n    return \"\".join([str(i) for i in digits[-shift:]\
    \ + digits[:-shift]])\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnzdhutb1.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpnzdhutb1.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpnzdhutb1.py\", line\
    \ 19, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = floor(log10(x)) + 1\n    if shift > num_digits:\n\
    \        return str(x)[::-1]\n    divisor = 10 ** shift\n    remainder = x % divisor\n\
    \    return str(remainder) + str(x // divisor)\n\n\ndef check(candidate):\n  \
    \  assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n  \
    \  assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjydasmy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprjydasmy.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmprjydasmy.py\", line\
    \ 19, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmprjydasmy.py\"\
    , line 10, in circular_shift\n    num_digits = floor(log10(x)) + 1\nNameError:\
    \ name 'floor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    shift = shift % len(s)\n    return\
    \ s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6td_to9.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpe6td_to9.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpe6td_to9.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = digits_list(x)\n    i = 0\n    if shift ==\
    \ 0:\n        return ''.join(map(str, digits))\n    while i < shift:\n       \
    \ digits.insert(0, digits.pop())\n        i += 1\n    return ''.join(map(str,\
    \ digits))\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpql0mgkpk.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpql0mgkpk.py\", line 28,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpql0mgkpk.py\", line\
    \ 21, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpql0mgkpk.py\"\
    , line 10, in circular_shift\n    digits = digits_list(x)\nNameError: name 'digits_list'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    assert isinstance(x, int)\n    digits = str(x)\n  \
    \  shift %= len(digits)\n    return digits[-shift:] + digits[:-shift]\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8a5zv9jq.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8a5zv9jq.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp8a5zv9jq.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = get_number_of_digits(x)\n    if shift\
    \ > num_digits:\n        return str(x)[::-1]\n    digits = str(x)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2mbc1vx0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2mbc1vx0.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp2mbc1vx0.py\", line\
    \ 18, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmp2mbc1vx0.py\"\
    , line 10, in circular_shift\n    num_digits = get_number_of_digits(x)\nNameError:\
    \ name 'get_number_of_digits' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # Using % to wrap around the digit and get the last\
    \ digit\n    if shift > len(str(x)):\n        return str(x)[::-1]\n    digit =\
    \ x % (10 ** shift)\n    return str(digit) + str(x // (10 ** shift))\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbviee8bf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbviee8bf.py\", line 25,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpbviee8bf.py\", line\
    \ 18, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # First number - last number.\n    f = str(x)[0]\n\
    \    l = str(x)[-1]\n    if shift == 1:\n        # The first number becomes the\
    \ last, last becomes first\n        return l + str(x)[1:-1] + f\n    elif shift\
    \ == 2:\n        # The first two numbers become the last two, last two become\
    \ first two\n        return str(x)[-2:] + str(x)[:-2]\n    else:\n        # Any\
    \ other shift will reverse the number\n        return str(x)[::-1]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return\
    \ s[::-1]\n    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    string_x = str(x)\n    if shift > len(string_x):\n\
    \        return string_x[::-1]\n    return string_x[-shift:] + string_x[:-shift]\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    return s[-shift:] + s[:-shift]\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4txfb2m5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp4txfb2m5.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp4txfb2m5.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    c = str(x)\n    shift = shift % len(c)\n    return\
    \ c[shift:] + c[:shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01eo0u3g.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp01eo0u3g.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp01eo0u3g.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    n = len(str(x))\n    shift = shift % n\n    return\
    \ str(x)[shift:] + str(x)[:shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprlc2x_7t.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprlc2x_7t.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmprlc2x_7t.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift < 0:\n        shift += len(str(x))\n    s\
    \ = str(x)\n    return s[-shift:] + s[:-shift]\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8embhfdo.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8embhfdo.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp8embhfdo.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    num_digits = len(digits)\n\
    \    if shift < num_digits:\n        digits = digits[-shift:] + digits[:-shift]\n\
    \    else:\n        digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94wq1gt_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp94wq1gt_.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp94wq1gt_.py\", line\
    \ 21, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    if shift > len(digits):\n\
    \        return \"\".join(reversed(digits))\n    else:\n        return \"\".join(digits[-shift:]\
    \ + digits[:-shift])\n\n\ndef check(candidate):\n    assert candidate(100, 2)\
    \ == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) ==\
    \ '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) ==\
    \ '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    return s[-shift:] + s[: -shift]\n\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdt9s0dwo.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdt9s0dwo.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpdt9s0dwo.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    # digits.reverse()  # because\
    \ we want to shift right\n    while shift:\n        shift -= 1\n        digits.insert(0,\
    \ digits.pop())\n    return \"\".join(digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalwim36t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpalwim36t.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpalwim36t.py\", line\
    \ 21, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = get_digits(x)\n    shift = shift % len(digits)\n\
    \    return \"\".join(digits[-shift:] + digits[:-shift])\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprn06r2z0.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprn06r2z0.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmprn06r2z0.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmprn06r2z0.py\"\
    , line 10, in circular_shift\n    digits = get_digits(x)\nNameError: name 'get_digits'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # Convert to string\n    x_str = str(x)\n    x_len\
    \ = len(x_str)\n    if shift > x_len:\n        return x_str[::-1]\n    else:\n\
    \        return x_str[-shift:] + x_str[:-shift]\n\n\n@timefn\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn_njt6gh.py\", line\
    \ 19, in <module>\n    @timefn\nNameError: name 'timefn' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # convert x to string for ease of manipulation\n  \
    \  str_x = str(x)\n    # len(str_x) is also the number of digits in x\n    len_x\
    \ = len(str_x)\n    # right shift by shift, which may be > len_x\n    right_shift\
    \ = shift % len_x\n    # shift left by (len_x - right_shift)\n    left_shift =\
    \ len_x - right_shift\n    # perform the shift, add shifted left portion to end\
    \ of shifted right portion\n    return str_x[left_shift:] + str_x[:left_shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1sd90pfs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp1sd90pfs.py\", line 30,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp1sd90pfs.py\", line\
    \ 25, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift %= len(digits)\n    return\
    \ digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbtr1wchu.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpbtr1wchu.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpbtr1wchu.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift < len(str(x)):\n        # nothing to circular\
    \ shift\n        return str(x)\n    else:\n        # convert to string, \n   \
    \     # shift digits rightward by shift,\n        # reverse and return\n     \
    \   digits = str(x)\n        shift = shift % len(digits)\n        return digits[shift:]\
    \ + digits[:shift]\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpziuruuuv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpziuruuuv.py\", line 29,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpziuruuuv.py\", line\
    \ 22, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # Calculate the number of digits of x\n    digits =\
    \ int(math.log10(x)) + 1\n    # Get the digits and reverse them\n    digits_reversed\
    \ = [int(i) for i in str(x)][::-1]\n    # Do the shift\n    shift = shift % digits\n\
    \    shifted = digits_reversed[shift:] + digits_reversed[:shift]\n    # Build\
    \ the result string\n    result = \"\"\n    for i in shifted:\n        result\
    \ += str(i)\n    return result\n\nprint(circular_shift(12, 1))\nprint(circular_shift(12,\
    \ 2))\nprint(circular_shift(5, 3))\nprint(circular_shift(5, 10))\nprint(circular_shift(123456789,\
    \ 11))\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert\
    \ candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12,\
    \ 1) == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n   \
    \ check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6t8nsw1.py\", line\
    \ 23, in <module>\n    print(circular_shift(12, 1))\n  File \"/tmp/tmpy6t8nsw1.py\"\
    , line 11, in circular_shift\n    digits = int(math.log10(x)) + 1\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = int_to_digits(x)\n    return digits_to_int(circular_shift_digits(digits,\
    \ shift))\n\n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n\
    \    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n  \
    \  assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfy2_cejz.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpfy2_cejz.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpfy2_cejz.py\", line\
    \ 15, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpfy2_cejz.py\"\
    , line 10, in circular_shift\n    digits = int_to_digits(x)\nNameError: name 'int_to_digits'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_digits = len(str(x))\n    if shift > num_digits:\n\
    \        return reverse_digits(x)\n    else:\n        shift = shift % num_digits\n\
    \        digits = digits_from_int(x)\n        new_digits = digits[-shift:] + digits[:-shift]\n\
    \        return str(int_from_digits(new_digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplk0d8wy1.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplk0d8wy1.py\", line 28,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmplk0d8wy1.py\", line\
    \ 21, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmplk0d8wy1.py\"\
    , line 15, in circular_shift\n    digits = digits_from_int(x)\nNameError: name\
    \ 'digits_from_int' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbk8f0w_a.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpbk8f0w_a.py\", line 20,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpbk8f0w_a.py\", line\
    \ 15, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    numstr = str(x)\n    shift = shift % len(numstr)\n\
    \    return numstr[-shift:] + numstr[:-shift]\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn3z122us.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpn3z122us.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpn3z122us.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x = str(x)\n    shift = shift % len(x)\n    if shift\
    \ == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0t_sa75t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0t_sa75t.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp0t_sa75t.py\", line\
    \ 21, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    for i in range(shift):\n\
    \        digits.insert(0, digits.pop())\n    return \"\".join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_ziek_l.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpp_ziek_l.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpp_ziek_l.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    d_len = len(digits)\n  \
    \  if shift >= d_len:\n        return ''.join(reversed(digits))\n    else:\n \
    \       shift = d_len - shift\n        return ''.join(digits[shift:] + digits[:shift])\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69e865pn.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp69e865pn.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp69e865pn.py\", line\
    \ 21, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = get_digits(x)\n    # print(digits)\n    length\
    \ = len(digits)\n    if shift > length:\n        # print(\"length\", length)\n\
    \        shift = shift % length\n        # print(\"new shift\", shift)\n    shifted\
    \ = digits[length - shift:] + digits[:length - shift]\n    new_x = \"\".join(shifted)\n\
    \    return new_x\n\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ezihn2z.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9ezihn2z.py\", line 30,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp9ezihn2z.py\", line\
    \ 23, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmp9ezihn2z.py\"\
    , line 10, in circular_shift\n    digits = get_digits(x)\nNameError: name 'get_digits'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    if shift > len(s):\n        return\
    \ s[::-1]\n    return s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    string = str(x)\n    if len(string) < shift:\n    \
    \    return string[::-1]\n    else:\n        return string[-shift:] + string[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = list(str(x))\n    shift = shift % len(digits)\n\
    \    return \"\".join(digits[-shift:] + digits[:-shift])\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjzerrmyy.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpjzerrmyy.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpjzerrmyy.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    digits_reversed = digits[::-1]\n\
    \    if shift > len(digits):\n        return digits_reversed\n    digits_shifted\
    \ = digits_reversed[:shift]\n    digits_shifted += digits_reversed[shift:]\n \
    \   return digits_shifted[::-1]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiaj4wlw3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpiaj4wlw3.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpiaj4wlw3.py\", line\
    \ 20, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n\
    \        digits.reverse()\n    else:\n        digits = digits[-shift:] + digits[:-shift]\n\
    \    return \"\".join(str(d) for d in digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # Convert the integer to a string, reverse the string\
    \ and\n    # then reverse the digits of the string.\n    return \"\".join(reversed(str(x))[:shift][::-1])\
    \ + \"\".join(reversed(str(x))[shift:])\n\n\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplehdobex.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmplehdobex.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmplehdobex.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmplehdobex.py\"\
    , line 12, in circular_shift\n    return \"\".join(reversed(str(x))[:shift][::-1])\
    \ + \"\".join(reversed(str(x))[shift:])\nTypeError: 'reversed' object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    x_len = len(x_str)\n    if shift\
    \ > x_len:\n        return x_str[::-1]\n    x_str_rev = x_str[::-1]\n    x_str_rev_shifted\
    \ = x_str_rev[shift:] + x_str_rev[:shift]\n    return x_str_rev_shifted[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    res = [x // 10**i % 10 for i in range(int(math.log10(x))\
    \ + 1)]\n    if shift > len(res):\n        return ''.join(str(d) for d in reversed(res))\n\
    \    return ''.join(str(d) for d in res[-shift:] + res[:-shift])\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxsqj5761.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxsqj5761.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpxsqj5761.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpxsqj5761.py\"\
    , line 10, in circular_shift\n    res = [x // 10**i % 10 for i in range(int(math.log10(x))\
    \ + 1)]\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    string = str(x)\n    if shift >= len(string):\n   \
    \     return string[::-1]\n    if shift < 0:\n        shift = len(string) + shift\n\
    \    return string[-shift:] + string[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgjwr6tz7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgjwr6tz7.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpgjwr6tz7.py\", line\
    \ 20, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return x[-shift:] + x[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1tcqydys.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp1tcqydys.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp1tcqydys.py\", line\
    \ 14, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmp1tcqydys.py\"\
    , line 10, in circular_shift\n    return x[-shift:] + x[:-shift]\nTypeError: 'int'\
    \ object is not subscriptable\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    res = 0\n    for _ in range(0, shift):\n        res\
    \ = res * 10 + x % 10\n        x = x // 10\n    if x == 0:\n        x = res\n\
    \        res = 0\n        while x > 0:\n            res = res * 10 + x % 10\n\
    \            x = x // 10\n    return str(res)\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswubgitz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpswubgitz.py\", line 31,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpswubgitz.py\", line\
    \ 24, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if x == 0:\n        return \"0\"\n    shift = shift\
    \ % len(str(x))\n    if shift == 0:\n        return str(x)\n    else:\n      \
    \  digits = str(x)\n        return digits[-shift:] + digits[:-shift]\n\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqj0y_72n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqj0y_72n.py\", line 28,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpqj0y_72n.py\", line\
    \ 23, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    def shift_helper(x: int, shift: int) -> str:\n    \
    \    if x < 10:\n            return str(x)\n        else:\n            return\
    \ shift_helper(x // 10, shift) + str(x % 10)\n    s = shift_helper(x, shift)\n\
    \    return s[shift:] + s[:shift]\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0alsqtbc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0alsqtbc.py\", line 26,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp0alsqtbc.py\", line\
    \ 19, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    #x_str = str(x)\n    #if shift >= len(x_str):\n   \
    \ #    return x_str[::-1]\n    #else:\n    #    return x_str[-shift:] + x_str[:-shift]\n\
    \    #return x_str[-shift:] + x_str[:-shift]\n    return str(x)[-shift:] + str(x)[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_2qpn4o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpq_2qpn4o.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpq_2qpn4o.py\", line\
    \ 22, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    string = str(x)\n    shift = shift % len(string)\n\
    \    return string[-shift:] + string[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprw0kwwt4.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmprw0kwwt4.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmprw0kwwt4.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    # reverse digits\n    s = s[::-1]\n\
    \    # take n elements and put in front\n    s = s[:shift] + s[shift:]\n    #\
    \ reverse digits again\n    s = s[::-1]\n    return s\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp881jf264.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp881jf264.py\", line 28,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp881jf264.py\", line\
    \ 21, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    if shift > len(digits):\n\
    \        digits.reverse()\n    else:\n        digits = digits[-shift:] + digits[:-shift]\n\
    \    return \"\".join(str(d) for d in digits)\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    num_str = str(x)\n    for i in range(shift):\n    \
    \    num_str = num_str[-1] + num_str[:-1]\n    return num_str\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7digglbb.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7digglbb.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp7digglbb.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3offmy43.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp3offmy43.py\", line 21,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp3offmy43.py\", line\
    \ 16, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if x == 0:\n        return \"0\"\n    while shift >\
    \ 0:\n        x, m = divmod(x, 10)\n        if m == 0:\n            shift += 1\n\
    \        else:\n            x = (x + (m * 10 ** shift))\n            shift -=\
    \ 1\n    return str(x)\n\n\ndef check(candidate):\n    assert candidate(100, 2)\
    \ == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) ==\
    \ '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) ==\
    \ '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    shift = shift % len(s)\n    return\
    \ s[-shift:] + s[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt1v4ceor.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpt1v4ceor.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpt1v4ceor.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    str_x = str(x)\n    shift %= len(str_x)\n    return\
    \ str_x[-shift:] + str_x[:-shift]\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmputizkdwz.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmputizkdwz.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmputizkdwz.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    return str(x)[-shift:] + str(x)[:-shift]\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvqkkjii5.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvqkkjii5.py\", line 20,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpvqkkjii5.py\", line\
    \ 15, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = [int(d) for d in str(x)]\n    l = len(digits)\n\
    \    while shift > l:\n        shift -= l\n    if shift == 0:\n        return\
    \ \"\".join(str(d) for d in digits)\n    return \"\".join(str(d) for d in digits[-shift:]\
    \ + digits[:-shift])\n\n\ndef check(candidate):\n    assert candidate(100, 2)\
    \ == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) ==\
    \ '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) ==\
    \ '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpca37mhc6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpca37mhc6.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpca37mhc6.py\", line\
    \ 22, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift == 0:\n        return str(x)\n    elif shift\
    \ > len(str(x)):\n        return ''.join(reversed(str(x)))\n    elif shift > 0:\n\
    \        string = str(x)\n        return string[-shift:] + string[:-shift]\n \
    \   else:\n        string = str(x)\n        return string[-shift:] + string[:-shift]\n\
    \ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    if shift > len(digits):\n    \
    \    return digits[::-1]\n    return digits[-shift:] + digits[:-shift]\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    number_of_digits = len(str(x))\n    shift = shift %\
    \ number_of_digits\n    if shift == 0:\n        return str(x)\n    if shift >\
    \ number_of_digits:\n        return str(x)[::-1]\n    else:\n        return str(x)[-shift:]\
    \ + str(x)[:-shift]\n\ndef check(candidate):\n    assert candidate(100, 2) ==\
    \ '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8) == '79'\n\
    \    assert candidate(12, 1) == '21'\n    assert candidate(11, 101) == '11'\n\n\
    def test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn2w37da7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpn2w37da7.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpn2w37da7.py\", line\
    \ 22, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    str_x = str(x)\n    if shift >= len(str_x):\n     \
    \   return ''.join(reversed(str_x))\n    else:\n        return str_x[-shift:]\
    \ + str_x[:-shift]\n\n\n@lru_cache(maxsize=None)\ndef check(candidate):\n    assert\
    \ candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert\
    \ candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11,\
    \ 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3laorzhk.py\", line\
    \ 17, in <module>\n    @lru_cache(maxsize=None)\nNameError: name 'lru_cache' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if x < 10:\n        return str(x)\n    digits = str(x)\n\
    \    for n in range(shift):\n        # shift each digit right\n        last_digit\
    \ = digits[-1]\n        digits = last_digit + digits[:-1]\n    return digits\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclx09zks.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpclx09zks.py\", line 28,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpclx09zks.py\", line\
    \ 23, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = str(x)\n    shift = shift % len(digits)\n\
    \    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n   \
    \ assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n   \
    \ assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptpioyipn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmptpioyipn.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmptpioyipn.py\", line\
    \ 18, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    # TODO\n    digits = str(x)\n    if len(digits) ==\
    \ 1:\n        return digits\n\n    if shift > len(digits):\n        return digits[::-1]\n\
    \n    return digits[-shift:] + digits[:-shift]\n\n\ndef check(candidate):\n  \
    \  assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n  \
    \  assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n    assert\
    \ candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    str_x = str(x)\n    return str_x[-shift:] + str_x[:-shift]\n\
    \n\ndef check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi025q77a.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpi025q77a.py\", line 22,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpi025q77a.py\", line\
    \ 17, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    x_str = str(x)\n    x_str_len = len(x_str)\n    if\
    \ shift >= x_str_len:\n        x_str = x_str[::-1]\n    else:\n        x_str =\
    \ x_str[x_str_len - shift:] + x_str[:x_str_len - shift]\n    return x_str\n\n\n\
    def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1r9gyz6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo1r9gyz6.py\", line 27,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpo1r9gyz6.py\", line\
    \ 21, in check\n    assert candidate(12, 2) == '12'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    digits = int_to_digits(x)\n    digits = digits[-shift:]\
    \ + digits[:-shift]\n    return digits_to_str(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy03_monx.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpy03_monx.py\", line 23,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpy03_monx.py\", line\
    \ 16, in check\n    assert candidate(100, 2) == '001'\n  File \"/tmp/tmpy03_monx.py\"\
    , line 10, in circular_shift\n    digits = int_to_digits(x)\nNameError: name 'int_to_digits'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    else:\n        return str(x)[shift:] + str(x)[:shift]\n\n\ndef check(candidate):\n\
    \    assert candidate(100, 2) == '001'\n    assert candidate(12, 2) == '12'\n\
    \    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) == '21'\n  \
    \  assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp05m5x7m9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp05m5x7m9.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmp05m5x7m9.py\", line\
    \ 17, in check\n    assert candidate(100, 2) == '001'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    s = str(x)\n    n = len(s)\n    s = s[n - shift:] +\
    \ s[:n - shift]\n    return s\n\n\ndef check(candidate):\n    assert candidate(100,\
    \ 2) == '001'\n    assert candidate(12, 2) == '12'\n    assert candidate(97, 8)\
    \ == '79'\n    assert candidate(12, 1) == '21'\n    assert candidate(11, 101)\
    \ == '11'\n\ndef test_check():\n    check(circular_shift)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpozawrg1y.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpozawrg1y.py\", line 24,\
    \ in test_check\n    check(circular_shift)\n  File \"/tmp/tmpozawrg1y.py\", line\
    \ 19, in check\n    assert candidate(97, 8) == '79'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
    \ the digits of the integer x, shift the digits right by shift\n    and return\
    \ the result as a string.\n    If shift > number of digits, return digits reversed.\n\
    \    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n  \
    \  \"12\"\n    \"\"\"\n    if shift > len(str(x)):\n        return str(x)[::-1]\n\
    \    shift %= len(str(x))\n    return str(x)[-shift:] + str(x)[:-shift]\n\ndef\
    \ check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
    \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1)\
    \ == '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
