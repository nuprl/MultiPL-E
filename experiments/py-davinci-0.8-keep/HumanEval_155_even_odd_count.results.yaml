name: HumanEval_155_even_odd_count
language: py
results:
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkarnelf.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdkarnelf.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpdkarnelf.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n    \
    \    else:\n            odd += 1\n        num //= 10\n    return even, odd\n\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # your code\
    \ here\n    even_num = 0\n    odd_num = 0\n    if num < 0:\n        num = -num\n\
    \    for i in str(num):\n        if int(i) % 2 == 0:\n            even_num +=\
    \ 1\n        else:\n            odd_num += 1\n    return (even_num, odd_num)\n\
    print(even_odd_count(-12))\n\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: "(1, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    odd = 0\n  \
    \  even = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return even, odd\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnnw9uweu.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpnnw9uweu.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    while num != 0:\n        digit = num % 10\n      \
    \  if digit % 2 == 0:\n            even_count += 1\n        else:\n          \
    \  odd_count += 1\n        num = num // 10\n    return even_count, odd_count\n\
    \ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n   \
    \         even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\
    \n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpd4qdn5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvpd4qdn5.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpvpd4qdn5.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpvpd4qdn5.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for ch in str(num):\n        if int(ch) % 2 == 0:\n            even\
    \ += 1\n        else:\n            odd += 1\n    return even, odd\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsxfn8hgz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsxfn8hgz.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpsxfn8hgz.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpsxfn8hgz.py\"\
    , line 12, in even_odd_count\n    if int(ch) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for n in str(num):\n        if int(n) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpic81950h.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpic81950h.py\"\
    , line 13, in even_odd_count\n    if int(n) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even\
    \ += 1\n        else:\n            odd += 1\n    return even, odd\n\neven_odd_count(-12)\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpso9g3yrv.py\", line\
    \ 18, in <module>\n    even_odd_count(-12)\n  File \"/tmp/tmpso9g3yrv.py\", line\
    \ 12, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for c in str(num):\n        c = int(c)\n        if c % 2 == 0:\n \
    \           even += 1\n        else:\n            odd += 1\n    return even, odd\n\
    \nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0cplxk_.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpy0cplxk_.py\"\
    , line 12, in even_odd_count\n    c = int(c)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # YOUR CODE\
    \ HERE\n    return (0, 0)\n\n\nassert even_odd_count(-12) == (1, 1)\nassert even_odd_count(123)\
    \ == (1, 2)\n\n \ndef check(candidate):\n    assert candidate(7) == (0, 1)\n \
    \   assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n  \
    \  assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvo5g9hig.py\", line\
    \ 14, in <module>\n    assert even_odd_count(-12) == (1, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\n\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppkmdulvw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppkmdulvw.py\", line 25,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmppkmdulvw.py\", line\
    \ 15, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # your code\
    \ here\n\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5uymrbb7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5uymrbb7.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp5uymrbb7.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuujnujfi.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpuujnujfi.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpuujnujfi.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    #how to add negative?\n    if num < 0:\n        num = -num\n\
    \    for n in str(num):\n        if int(n) % 2 == 0:\n            even += 1\n\
    \        else:\n            odd += 1\n    return (even, odd)\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num_str = str(num)\n\
    \    even = 0\n    odd = 0\n    for x in num_str:\n        if int(x) % 2 == 0:\n\
    \            even += 1\n        else:\n            odd += 1\n    return (even,\
    \ odd)\n    # one-liner solution\n    # return (len([x for x in num_str if int(x)\
    \ % 2 == 0]), len([x for x in num_str if int(x) % 2 != 0]))\n\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyrun52ot.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpyrun52ot.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpyrun52ot.py\", line\
    \ 25, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpyrun52ot.py\"\
    , line 14, in even_odd_count\n    if int(x) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2\
    \ == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return (even_count, odd_count)\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt2dwp57f.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpt2dwp57f.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpt2dwp57f.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpt2dwp57f.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9p9w83vj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9p9w83vj.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp9p9w83vj.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # remember,\
    \ 0 is even \n    num = abs(num)\n    even, odd = 0, 0\n    while num > 0:\n \
    \       d = num % 10\n        if d % 2 == 0:\n            even += 1\n        else:\n\
    \            odd += 1\n        num //= 10\n    return even, odd\nassert even_odd_count(-12)\
    \ == (1, 1)\nassert even_odd_count(123) == (1, 2)\n \n \n \ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyt90unse.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpyt90unse.py\", line 37,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpyt90unse.py\", line\
    \ 34, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    ...\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj5ed3rtl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpj5ed3rtl.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpj5ed3rtl.py\", line\
    \ 13, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for x in str(num):\n        if int(x) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0_phcdg8.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp0_phcdg8.py\"\
    , line 13, in even_odd_count\n    if int(x) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n        \
    \    even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dknmj45.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9dknmj45.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp9dknmj45.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp9dknmj45.py\"\
    , line 12, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhuxt6ke.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxhuxt6ke.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpxhuxt6ke.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = [i for\
    \ i in str(num) if int(i) % 2 == 0]\n    odd = [i for i in str(num) if int(i)\
    \ % 2 != 0]\n    return (len(even), len(odd))\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpky0dde7k.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpky0dde7k.py\", line 38,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpky0dde7k.py\", line\
    \ 29, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpky0dde7k.py\"\
    , line 10, in even_odd_count\n    even = [i for i in str(num) if int(i) % 2 ==\
    \ 0]\n  File \"/tmp/tmpky0dde7k.py\", line 10, in <listcomp>\n    even = [i for\
    \ i in str(num) if int(i) % 2 == 0]\nValueError: invalid literal for int() with\
    \ base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxrks5wi.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpyxrks5wi.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpyxrks5wi.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl3x_3tav.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpl3x_3tav.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpl3x_3tav.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    while num != 0:\n        if num % 2 == 0:\n            even +=\
    \ 1\n        else:\n            odd += 1\n        num = num // 10\n    return\
    \ (even, odd)\n\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n\
    \    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n \
    \   assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    assert isinstance(num,\
    \ int), 'input must be an integer'\n    even = 0\n    odd = 0\n    if num < 0:\n\
    \        num = abs(num)\n    while num > 0:\n        remainder = num % 10\n  \
    \      if remainder % 2 == 0:\n            even += 1\n        else:\n        \
    \    odd += 1\n        num = num // 10\n    return (even, odd)\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp73sqk9gy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp73sqk9gy.py\", line 35,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp73sqk9gy.py\", line\
    \ 32, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for d in str(num):\n        if int(d) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\n\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprw0s4ybl.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmprw0s4ybl.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmprw0s4ybl.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmprw0s4ybl.py\"\
    , line 13, in even_odd_count\n    if int(d) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (sum(num\
    \ % 2 == 0 for num in str(num)), sum(num % 2 == 1 for num in str(num)))\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxw8bx0a_.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxw8bx0a_.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpxw8bx0a_.py\", line\
    \ 13, in check\n    assert candidate(7) == (0, 1)\n  File \"/tmp/tmpxw8bx0a_.py\"\
    , line 10, in even_odd_count\n    return (sum(num % 2 == 0 for num in str(num)),\
    \ sum(num % 2 == 1 for num in str(num)))\n  File \"/tmp/tmpxw8bx0a_.py\", line\
    \ 10, in <genexpr>\n    return (sum(num % 2 == 0 for num in str(num)), sum(num\
    \ % 2 == 1 for num in str(num)))\nTypeError: not all arguments converted during\
    \ string formatting\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Your code\
    \ goes here\n    even_count, odd_count = 0, 0\n    for i in str(num):\n      \
    \  if int(i) % 2 == 0:\n            even_count += 1\n        else:\n         \
    \   odd_count += 1\n    return even_count, odd_count\n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpea16_t8k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpea16_t8k.py\", line 32,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpea16_t8k.py\", line\
    \ 23, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpea16_t8k.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Your code\
    \ goes here\n    even, odd = 0, 0\n    for i in str(num):\n        if int(i) %\
    \ 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return\
    \ even, odd\n\neven_odd_count(int(input()))\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphcanr60a.py\", line\
    \ 19, in <module>\n    even_odd_count(int(input()))\nEOFError: EOF when reading\
    \ a line\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfjxev9v8.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfjxev9v8.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpfjxev9v8.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpfjxev9v8.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    while num:\n        if num % 2 == 0:\n            even += 1\n\
    \        else:\n            odd += 1\n        num //= 10\n    return even, odd\n\
    \n\neven_odd_count(-12)\neven_odd_count(123)\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([i\
    \ for i in str(num) if int(i) % 2 == 0]), len([i for i in str(num) if int(i) %\
    \ 2 != 0]))\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwiqrn1e.py\", line\
    \ 12, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpzwiqrn1e.py\"\
    , line 10, in even_odd_count\n    return (len([i for i in str(num) if int(i) %\
    \ 2 == 0]), len([i for i in str(num) if int(i) % 2 != 0]))\n  File \"/tmp/tmpzwiqrn1e.py\"\
    , line 10, in <listcomp>\n    return (len([i for i in str(num) if int(i) % 2 ==\
    \ 0]), len([i for i in str(num) if int(i) % 2 != 0]))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # split_num\
    \ = [i for i in str(num)]\n    # even = 0\n    # odd = 0\n    # for i in split_num:\n\
    \    #     if int(i) % 2 == 0:\n    #         even += 1\n    #     else:\n   \
    \ #         odd += 1\n    # return even, odd\n    even = 0\n    odd = 0\n    for\
    \ i in str(num):\n        if int(i) % 2 == 0:\n            even += 1\n       \
    \ else:\n            odd += 1\n    return even, odd\n\n\nassert even_odd_count(-12)\
    \ == (1, 1)\nassert even_odd_count(123) == (1, 2)\nassert even_odd_count(100)\
    \ == (2, 1)\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa7iojqbo.py\", line\
    \ 29, in <module>\n    assert even_odd_count(-12) == (1, 1)\n  File \"/tmp/tmpa7iojqbo.py\"\
    , line 22, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for char in str(num):\n        if int(char) % 2 == 0:\n     \
    \       even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\
    \nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbz4hsna_.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpbz4hsna_.py\"\
    , line 13, in even_odd_count\n    if int(char) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (0, 0)\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwgk1by4_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwgk1by4_.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpwgk1by4_.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for d in str(num):\n        if int(d) % 2 == 0:\n            even\
    \ += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy73tqkb_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy73tqkb_.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpy73tqkb_.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpy73tqkb_.py\"\
    , line 12, in even_odd_count\n    if int(d) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (  sum(\
    \ int(digit) % 2 == 0 for digit in str(num) ), sum( int(digit) % 2 == 1 for digit\
    \ in str(num) )  )\n\n\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfb72roeg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpfb72roeg.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpfb72roeg.py\", line\
    \ 15, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpfb72roeg.py\"\
    , line 10, in even_odd_count\n    return (  sum( int(digit) % 2 == 0 for digit\
    \ in str(num) ), sum( int(digit) % 2 == 1 for digit in str(num) )  )\n  File \"\
    /tmp/tmpfb72roeg.py\", line 10, in <genexpr>\n    return (  sum( int(digit) %\
    \ 2 == 0 for digit in str(num) ), sum( int(digit) % 2 == 1 for digit in str(num)\
    \ )  )\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\n\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp810bybig.py\", line\
    \ 18, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp810bybig.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    digits = str(num)\n    for dig in digits:\n      \
    \  if int(dig) % 2 == 0:\n            even_count += 1\n        else:\n       \
    \     odd_count += 1\n    return (even_count, odd_count)\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppemia6_p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppemia6_p.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmppemia6_p.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmppemia6_p.py\"\
    , line 14, in even_odd_count\n    if int(dig) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in range(len(str(num))):\n        if int(str(num)[i]) %\
    \ 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return\
    \ (even, odd)\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n  \
    \  assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n   \
    \ assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpobi7453v.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpobi7453v.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpobi7453v.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpobi7453v.py\"\
    , line 13, in even_odd_count\n    if int(str(num)[i]) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    str_num = str(num)\n\
    \    even = 0\n    odd = 0\n    for i in str_num:\n        if int(i) % 2 == 0:\n\
    \            even += 1\n        else:\n            odd += 1\n    return (even,\
    \ odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2e6qx13p.py\", line\
    \ 20, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp2e6qx13p.py\"\
    , line 14, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    num_str = str(num)\n    for n in num_str:\n      \
    \  n = int(n)\n        if n % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return (even_count, odd_count)\n\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqa2eg4uv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqa2eg4uv.py\", line 33,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpqa2eg4uv.py\", line\
    \ 24, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpqa2eg4uv.py\"\
    , line 14, in even_odd_count\n    n = int(n)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    if num < 0:\n        num = abs(num)\n    while num\
    \ > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even_count\
    \ += 1\n        else:\n            odd_count += 1\n        num = num // 10\n \
    \   return (even_count, odd_count)\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqn6j9em8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqn6j9em8.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpqn6j9em8.py\", line\
    \ 31, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ even_count, odd_count\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpafdtriix.py\", line\
    \ 18, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpafdtriix.py\"\
    , line 12, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplcrwyuq3.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplcrwyuq3.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmplcrwyuq3.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = {'even':\
    \ 0, 'odd': 0}\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n\
    \            count['even'] += 1\n        else:\n            count['odd'] += 1\n\
    \    return count['even'], count['odd']\n\n\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkc09f3y5.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkc09f3y5.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpkc09f3y5.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpkc09f3y5.py\"\
    , line 12, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return ...\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6blb4uvf.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6blb4uvf.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp6blb4uvf.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    abs_num = abs(num)\n    while abs_num > 0:\n     \
    \   digit = abs_num % 10\n        if digit % 2 == 0:\n            even_count +=\
    \ 1\n        else:\n            odd_count += 1\n        abs_num //= 10\n    return\
    \ even_count, odd_count\n\n\nprint(even_odd_count(-12))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprjdyr8q9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprjdyr8q9.py\", line 35,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmprjdyr8q9.py\", line\
    \ 32, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    while num:\n        if num % 2 == 0:\n           \
    \ even_count += 1\n        else:\n            odd_count += 1\n        num //=\
    \ 10\n    return even_count, odd_count\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    while num != 0:\n        digit = num % 10\n        if digit % 2 ==\
    \ 0:\n            even += 1\n        else:\n            odd += 1\n        num\
    \ //= 10\n    return even, odd\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    num_abs = abs(num)\n    while num_abs > 0:\n     \
    \   digit = num_abs % 10\n        if digit % 2 == 0:\n            even_count +=\
    \ 1\n        else:\n            odd_count += 1\n        num_abs //= 10\n    return\
    \ even_count, odd_count\n\n\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprat52l0o.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmprat52l0o.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmprat52l0o.py\", line\
    \ 31, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n\
    \    even = 0\n    odd = 0\n    while num != 0:\n        digit = num % 10\n  \
    \      if digit % 2 == 0:\n            even += 1\n        else:\n            odd\
    \ += 1\n        num //= 10\n    return even, odd\n\nassert even_odd_count(-12)\
    \ == (1, 1)\nassert even_odd_count(123) == (1, 2)\ndef check(candidate):\n   \
    \ assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt7_1p0v_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpt7_1p0v_.py\", line 35,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpt7_1p0v_.py\", line\
    \ 32, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return len([i\
    \ for i in str(num) if int(i) % 2 == 0]), len([i for i in str(num) if int(i) %\
    \ 2 != 0])\n\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n   \
    \ assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert\
    \ candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert\
    \ candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert\
    \ candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwq03gzqv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwq03gzqv.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpwq03gzqv.py\", line\
    \ 15, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpwq03gzqv.py\"\
    , line 10, in even_odd_count\n    return len([i for i in str(num) if int(i) %\
    \ 2 == 0]), len([i for i in str(num) if int(i) % 2 != 0])\n  File \"/tmp/tmpwq03gzqv.py\"\
    , line 10, in <listcomp>\n    return len([i for i in str(num) if int(i) % 2 ==\
    \ 0]), len([i for i in str(num) if int(i) % 2 != 0])\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\n\
    print(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9869rt3.py\", line\
    \ 20, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpp9869rt3.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    num = str(num)\n    for i in num:\n        if int(i) % 2 == 0:\n \
    \           even += 1\n        else:\n            odd += 1\n    return even, odd\n\
    \n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6vbjhmk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpz6vbjhmk.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpz6vbjhmk.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpz6vbjhmk.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Solution 1\n\
    \    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        digit\
    \ = int(digit)\n        if digit % 2 == 0:\n            even_count += 1\n    \
    \    else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\
    \    # Solution 2\n    # return (sum(1 for digit in str(num) if int(digit) % 2\
    \ == 0), sum(1 for digit in str(num) if int(digit) % 2 == 1))\n\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_zb3srba.py\", line\
    \ 25, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp_zb3srba.py\"\
    , line 14, in even_odd_count\n    digit = int(digit)\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp87nsk0no.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp87nsk0no.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp87nsk0no.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    num = abs(num)\n    while num != 0:\n        digit = num % 10\n\
    \        if digit % 2 == 0:\n            even += 1\n        else:\n          \
    \  odd += 1\n        num //= 10\n    return even, odd\n\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj6jxratq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpj6jxratq.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpj6jxratq.py\", line\
    \ 31, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2\
    \ == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return (even_count, odd_count)\n\neven_odd_count(-12)\n\neven_odd_count(123)\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeaf_ilpq.py\", line\
    \ 19, in <module>\n    even_odd_count(-12)\n  File \"/tmp/tmpeaf_ilpq.py\", line\
    \ 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    str_num = str(num)\n    for c in str_num:\n      \
    \  if c in \"02468\":\n            even_count += 1\n        else:\n          \
    \  odd_count += 1\n    return even_count, odd_count\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzu6wf7yj.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzu6wf7yj.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpzu6wf7yj.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n   \
    \         even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\
    \ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp66gn5v4c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp66gn5v4c.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp66gn5v4c.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp66gn5v4c.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num\
    \ / 2) * 2, (num % 2) * 2\n\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3ytcmo8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpv3ytcmo8.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpv3ytcmo8.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_odd = (0,\
    \ 0)\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even_odd\
    \ = (even_odd[0] + 1, even_odd[1])\n        else:\n            even_odd = (even_odd[0],\
    \ even_odd[1] + 1)\n    return even_odd\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnsfbz1ik.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpnsfbz1ik.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpnsfbz1ik.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpnsfbz1ik.py\"\
    , line 12, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5efi9kv5.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp5efi9kv5.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp5efi9kv5.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\n\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp25a60ep4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp25a60ep4.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp25a60ep4.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp25a60ep4.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return len([i\
    \ for i in str(num) if int(i) % 2 == 0]), len([i for i in str(num) if int(i) %\
    \ 2 != 0])\n\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n   \
    \ assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert\
    \ candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert\
    \ candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert\
    \ candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpas_p4bt2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpas_p4bt2.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpas_p4bt2.py\", line\
    \ 15, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpas_p4bt2.py\"\
    , line 10, in even_odd_count\n    return len([i for i in str(num) if int(i) %\
    \ 2 == 0]), len([i for i in str(num) if int(i) % 2 != 0])\n  File \"/tmp/tmpas_p4bt2.py\"\
    , line 10, in <listcomp>\n    return len([i for i in str(num) if int(i) % 2 ==\
    \ 0]), len([i for i in str(num) if int(i) % 2 != 0])\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([i\
    \ for i in str(num) if int(i) % 2 == 0]), len([i for i in str(num) if int(i) %\
    \ 2 != 0]))\n\nprint(even_odd_count(-12))\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphwx2mcau.py\", line\
    \ 12, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmphwx2mcau.py\"\
    , line 10, in even_odd_count\n    return (len([i for i in str(num) if int(i) %\
    \ 2 == 0]), len([i for i in str(num) if int(i) % 2 != 0]))\n  File \"/tmp/tmphwx2mcau.py\"\
    , line 10, in <listcomp>\n    return (len([i for i in str(num) if int(i) % 2 ==\
    \ 0]), len([i for i in str(num) if int(i) % 2 != 0]))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    if num < 0:\n        num = abs(num)\n    while num > 0:\n   \
    \     if num % 2 == 0:\n            even += 1\n        else:\n            odd\
    \ += 1\n        num = num // 10\n    return (even, odd)\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2a6kir4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpb2a6kir4.py\", line 33,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpb2a6kir4.py\", line\
    \ 30, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgw2350zg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgw2350zg.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpgw2350zg.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    temp = num\n    while temp:\n        if temp % 2 == 0:\n    \
    \        even += 1\n        else:\n            odd += 1\n        temp //= 10\n\
    \    return even, odd\n\n\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    if num == 0:\n        return even, odd\n    else:\n        while num\
    \ != 0:\n            if num % 2 == 0:\n                even += 1\n           \
    \ else:\n                odd += 1\n            num = num // 10\n        return\
    \ even, odd\n\n\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n\
    \    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n \
    \   assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_cnt = 0\n\
    \    odd_cnt = 0\n    num = str(num)\n\n    for i in num:\n        if int(i) %\
    \ 2 == 0:\n            even_cnt += 1\n        else:\n            odd_cnt += 1\n\
    \n    return (even_cnt, odd_cnt)\n\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01mtlx3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp01mtlx3c.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp01mtlx3c.py\", line\
    \ 25, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp01mtlx3c.py\"\
    , line 15, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (0, 0)\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaeq2iz48.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpaeq2iz48.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpaeq2iz48.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for d in str(num):\n        if int(d) % 2 == 0:\n            even\
    \ += 1\n        else:\n            odd += 1\n    return even, odd\n\n\nassert\
    \ even_odd_count(-12) == (1, 1)\nassert even_odd_count(123) == (1, 2)\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpemb3w56m.py\", line\
    \ 19, in <module>\n    assert even_odd_count(-12) == (1, 1)\n  File \"/tmp/tmpemb3w56m.py\"\
    , line 12, in even_odd_count\n    if int(d) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    new_number = str(num)\n    for i in new_number:\n        if int(i)\
    \ % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return\
    \ (even, odd)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3oyg0xwi.py\", line\
    \ 20, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp3oyg0xwi.py\"\
    , line 14, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf48rwld.py\", line\
    \ 29, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpwf48rwld.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = [int(i)\
    \ for i in str(num) if int(i) % 2 == 0]\n    odd = [int(i) for i in str(num) if\
    \ int(i) % 2 != 0]\n    return len(even), len(odd)\n\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgpm2dv_d.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgpm2dv_d.py\", line 26,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpgpm2dv_d.py\", line\
    \ 17, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpgpm2dv_d.py\"\
    , line 10, in even_odd_count\n    even = [int(i) for i in str(num) if int(i) %\
    \ 2 == 0]\n  File \"/tmp/tmpgpm2dv_d.py\", line 10, in <listcomp>\n    even =\
    \ [int(i) for i in str(num) if int(i) % 2 == 0]\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([x\
    \ for x in str(num) if x in \"02468\"]), len([x for x in str(num) if x in \"13579\"\
    ]))\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for char in str(num):\n        if int(char) % 2 == 0:\n          \
    \  even += 1\n        else:\n            odd += 1\n    return even, odd\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpooee8j2h.py\", line\
    \ 18, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpooee8j2h.py\"\
    , line 12, in even_odd_count\n    if int(char) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    num = abs(num)\n    while num != 0:\n        remainder = num\
    \ % 10\n        if remainder % 2 == 0:\n            even += 1\n        else:\n\
    \            odd += 1\n        num = num // 10\n    return (even, odd)\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpismcdbyu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpismcdbyu.py\", line 33,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpismcdbyu.py\", line\
    \ 30, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for i in range(abs(num)):\n        if not i % 2:\n            even\
    \ += 1\n        else:\n            odd += 1\n    return even, odd\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcpck0nzd.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpcpck0nzd.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpcpck0nzd.py\", line\
    \ 19, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    n = abs(num)\n    while n:\n        if n % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    \
    \    n //= 10\n    return even_count, odd_count\n\ndef check(candidate):\n   \
    \ assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph78st32u.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmph78st32u.py\", line 32,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmph78st32u.py\", line\
    \ 29, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    evn_count =\
    \ 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            evn_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (evn_count, odd_count)\n\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwm8wrgd.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzwm8wrgd.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpzwm8wrgd.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpzwm8wrgd.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_num, odd_num\
    \ = 0, 0\n    num = abs(num)\n    while num > 0:\n        num, rem = divmod(num,\
    \ 10)\n        if rem % 2 == 0:\n            even_num += 1\n        else:\n  \
    \          odd_num += 1\n    return even_num, odd_num\n\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: "(1, 1)\n(1, 2)\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5z70kfd1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5z70kfd1.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp5z70kfd1.py\", line\
    \ 31, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([x\
    \ for x in str(num) if int(x) % 2 == 0]), len([x for x in str(num) if int(x) %\
    \ 2 != 0]))\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe647ndr9.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpe647ndr9.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpe647ndr9.py\", line\
    \ 14, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpe647ndr9.py\"\
    , line 10, in even_odd_count\n    return (len([x for x in str(num) if int(x) %\
    \ 2 == 0]), len([x for x in str(num) if int(x) % 2 != 0]))\n  File \"/tmp/tmpe647ndr9.py\"\
    , line 10, in <listcomp>\n    return (len([x for x in str(num) if int(x) % 2 ==\
    \ 0]), len([x for x in str(num) if int(x) % 2 != 0]))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Given the\
    \ number \"num\", check if the last digit is even or odd.\n    # If the digit\
    \ is even, add 1 to the even_count and add 1 to the\n    # odd_count if it is\
    \ odd.\n    # Repeat the process until there are no more digits left.\n    # Return\
    \ the even_count and odd_count as a tuple.\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxh9txd2_.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpxh9txd2_.py\", line 27,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpxh9txd2_.py\", line\
    \ 17, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for c in str(num):\n        c = int(c)\n        if c % 2 == 0:\n\
    \            even += 1\n        else:\n            odd += 1\n    return (even,\
    \ odd)\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15ewcq4u.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp15ewcq4u.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp15ewcq4u.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp15ewcq4u.py\"\
    , line 13, in even_odd_count\n    c = int(c)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    x = str(num)\n\
    \    even, odd = 0, 0\n    for i in x:\n        if int(i) % 2 == 0:\n        \
    \    even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\
    print(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpactoyoai.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpactoyoai.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n        \
    \    even += 1\n        else:\n            odd += 1\n    return even, odd\n\n\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmevs0rnn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmevs0rnn.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpmevs0rnn.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpmevs0rnn.py\"\
    , line 12, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxp4mknkq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpxp4mknkq.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpxp4mknkq.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpxp4mknkq.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqsfr0wzf.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpqsfr0wzf.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpqsfr0wzf.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    positive_num\
    \ = abs(num)\n    count_even = 0\n    count_odd = 0\n    if num == 0:\n      \
    \  return (1, 0)\n    else:\n        for i in str(positive_num):\n           \
    \ if int(i) % 2 == 0:\n                count_even += 1\n            else:\n  \
    \              count_odd += 1\n        return (count_even, count_odd)\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\nprint(even_odd_count(0))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n(1, 2)\n(1, 0)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn2ikxl7o.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpn2ikxl7o.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpn2ikxl7o.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n\
    \    even_count = 0\n    odd_count = 0\n    while num > 0:\n        if num % 2\
    \ == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n        num //= 10\n    return even_count, odd_count\n\nprint(even_odd_count(-12))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazosiv2l.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpazosiv2l.py\", line 33,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpazosiv2l.py\", line\
    \ 30, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    if num < 0:\n        num = -num\n    while num != 0:\n      \
    \  if num % 2 == 0:\n            even += 1\n        else:\n            odd +=\
    \ 1\n        num = num // 10\n    return (even, odd)\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9z9g1ir.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpo9z9g1ir.py\", line 33,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpo9z9g1ir.py\", line\
    \ 30, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # get the numbers\
    \ in the integer\n    numbers = [int(i) for i in str(num)]\n    # get even numbers\
    \ from the list\n    even_numbers = [num for num in numbers if num % 2 == 0]\n\
    \    # get odd numbers from the list\n    odd_numbers = [num for num in numbers\
    \ if num % 2 != 0]\n    # return a tuple with the counts of even and odd numbers\
    \ respectively\n    return (len(even_numbers), len(odd_numbers))\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwtqb249w.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpwtqb249w.py\"\
    , line 11, in even_odd_count\n    numbers = [int(i) for i in str(num)]\n  File\
    \ \"/tmp/tmpwtqb249w.py\", line 11, in <listcomp>\n    numbers = [int(i) for i\
    \ in str(num)]\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_counter\
    \ = 0\n    odd_counter = 0\n    if num < 0:\n        num = abs(num)\n    while\
    \ num > 0:\n        rem = num % 10\n        if rem % 2 == 0:\n            even_counter\
    \ += 1\n        else:\n            odd_counter += 1\n        num = num // 10\n\
    \    return (even_counter, odd_counter)\n\n\nprint(even_odd_count(-12))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkpp610i.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpdkpp610i.py\", line 36,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpdkpp610i.py\", line\
    \ 33, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = odd =\
    \ 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even +=\
    \ 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmge3tml.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmmge3tml.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpmmge3tml.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpmmge3tml.py\"\
    , line 12, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # your code\
    \ goes here\n    evens = sum(1 for c in str(num) if int(c) % 2 == 0)\n    odds\
    \ = sum(1 for c in str(num) if int(c) % 2 != 0)\n    return (evens, odds)\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5gixqm_p.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5gixqm_p.py\", line 25,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp5gixqm_p.py\", line\
    \ 16, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp5gixqm_p.py\"\
    , line 11, in even_odd_count\n    evens = sum(1 for c in str(num) if int(c) %\
    \ 2 == 0)\n  File \"/tmp/tmp5gixqm_p.py\", line 11, in <genexpr>\n    evens =\
    \ sum(1 for c in str(num) if int(c) % 2 == 0)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuod9upjl.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpuod9upjl.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpuod9upjl.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2dbf6q28.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp2dbf6q28.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp2dbf6q28.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # your code\
    \ here\n    digits = str(num)\n    even_count = 0\n    odd_count = 0\n    for\
    \ digit in digits:\n        if (digit == '-') or (digit == '+'):\n           \
    \ continue\n        digit = int(digit)\n        if digit % 2 == 0:\n         \
    \   even_count += 1\n        else:\n            odd_count += 1\n    return (even_count,\
    \ odd_count)\n\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n \
    \   assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n  \
    \  assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    num = abs(num)\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            even += 1\n        else:\n            odd += 1\n    return even,\
    \ odd\n\nprint(even_odd_count(-12))\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: "(1, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Method 1\n\
    \    # even_count = 0\n    # odd_count = 0\n    # for n in str(num):\n    #  \
    \   if int(n) % 2 == 0:\n    #         even_count += 1\n    #     else:\n    #\
    \         odd_count += 1\n    # return even_count, odd_count\n\n    # Method 2\n\
    \    return tuple(len(tuple(filter(lambda x: int(x) % 2 == i, str(num)))) for\
    \ i in range(2))\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxxau6je.py\", line\
    \ 23, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpaxxau6je.py\"\
    , line 21, in even_odd_count\n    return tuple(len(tuple(filter(lambda x: int(x)\
    \ % 2 == i, str(num)))) for i in range(2))\n  File \"/tmp/tmpaxxau6je.py\", line\
    \ 21, in <genexpr>\n    return tuple(len(tuple(filter(lambda x: int(x) % 2 ==\
    \ i, str(num)))) for i in range(2))\n  File \"/tmp/tmpaxxau6je.py\", line 21,\
    \ in <lambda>\n    return tuple(len(tuple(filter(lambda x: int(x) % 2 == i, str(num))))\
    \ for i in range(2))\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count_even =\
    \ 0\n    count_odd = 0\n    while num != 0:\n        last_digit = num % 10\n \
    \       if last_digit % 2 == 0:\n            count_even += 1\n        else:\n\
    \            count_odd += 1\n        num = num // 10\n    return (count_even,\
    \ count_odd)\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n   \
    \ assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert\
    \ candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert\
    \ candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert\
    \ candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymob0l2y.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpymob0l2y.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpymob0l2y.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # A good place\
    \ to start is a function that given an integer returns a list\n    # of its digits.\n\
    \    pass # TODO: implement the function\n\n\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63mzu623.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp63mzu623.py\", line 26,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp63mzu623.py\", line\
    \ 16, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return sum(int(x)\
    \ % 2 == 0 for x in str(num)), sum(int(x) % 2 == 1 for x in str(num))\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4nttu2n.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpg4nttu2n.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpg4nttu2n.py\", line\
    \ 14, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpg4nttu2n.py\"\
    , line 10, in even_odd_count\n    return sum(int(x) % 2 == 0 for x in str(num)),\
    \ sum(int(x) % 2 == 1 for x in str(num))\n  File \"/tmp/tmpg4nttu2n.py\", line\
    \ 10, in <genexpr>\n    return sum(int(x) % 2 == 0 for x in str(num)), sum(int(x)\
    \ % 2 == 1 for x in str(num))\nValueError: invalid literal for int() with base\
    \ 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    while num != 0:\n        r = num % 10\n        if r % 2 == 0:\n  \
    \          even += 1\n        else:\n            odd += 1\n        num //= 10\n\
    \    return even, odd\n\n\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_lkahv9t.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp_lkahv9t.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even\
    \ += 1\n        else:\n            odd += 1\n    return even, odd\n\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5h91zs3y.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp5h91zs3y.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp5h91zs3y.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp5h91zs3y.py\"\
    , line 12, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    while num != 0:\n        num, last_digit = divmod(num,\
    \ 10)\n        if last_digit % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return even_count, odd_count\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # no need to\
    \ do that\n    # num = abs(num)\n    even = 0\n    odd = 0\n    for digit in str(num):\n\
    \        if int(digit) % 2 == 0:\n            even += 1\n        else:\n     \
    \       odd += 1\n    return even, odd\n\n\n\nprint(even_odd_count(-123))\nprint(even_odd_count(123))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqku2uql.py\", line\
    \ 23, in <module>\n    print(even_odd_count(-123))\n  File \"/tmp/tmprqku2uql.py\"\
    , line 15, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    count = [0,\
    \ 0]\n    for n in str(num):\n        if int(n) % 2 == 0:\n            count[0]\
    \ += 1\n        else:\n            count[1] += 1\n    return tuple(count)\n\n\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnmh3i45c.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnmh3i45c.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpnmh3i45c.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpnmh3i45c.py\"\
    , line 12, in even_odd_count\n    if int(n) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # even = 0\n\
    \    # odd = 0\n    # if num < 0:\n    #     num = -num\n    # while num:\n  \
    \  #     digit = num % 10\n    #     if digit % 2 == 0:\n    #         even +=\
    \ 1\n    #     else:\n    #         odd += 1\n    #     num //= 10\n    # return\
    \ even, odd\n    pass\n\n\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0yj61a47.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0yj61a47.py\", line 36,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp0yj61a47.py\", line\
    \ 26, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for d in str(num):\n        if int(d) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhevjbow.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpqhevjbow.py\"\
    , line 13, in even_odd_count\n    if int(d) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    if num >= 0:\n        n = num\n    else:\n       \
    \ n = -num\n    while n != 0:\n        digit = n % 10\n        if digit % 2 ==\
    \ 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\
    \        n = n // 10\n    return even_count, odd_count\n\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: "(1, 1)\n(1, 2)\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8u7yzcqo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8u7yzcqo.py\", line 39,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp8u7yzcqo.py\", line\
    \ 36, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_cnt = odd_cnt\
    \ = 0\n    while num != 0:\n        if num % 2 == 0:\n            even_cnt +=\
    \ 1\n        else:\n            odd_cnt += 1\n        num //= 10\n    return even_cnt,\
    \ odd_cnt\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for n in str(num):\n        if int(n) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\n\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_f42t1k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4_f42t1k.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp4_f42t1k.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp4_f42t1k.py\"\
    , line 13, in even_odd_count\n    if int(n) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n    while num > 0:\n\
    \        if num % 2 == 0:\n            even_count += 1\n        else:\n      \
    \      odd_count += 1\n        num = num // 10\n    return even_count, odd_count\n\
    \n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1di0cbu5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp1di0cbu5.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp1di0cbu5.py\", line\
    \ 31, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgelu4x8j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpgelu4x8j.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpgelu4x8j.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpgelu4x8j.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    num = abs(num)\n    while num:\n        digit = num\
    \ % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n        num //= 10\n    return even_count, odd_count\n\
    \n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29_x0vbp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp29_x0vbp.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp29_x0vbp.py\", line\
    \ 31, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    str_num = str(num)\n    for s in str_num:\n      \
    \  if int(s) % 2 == 0:\n            even_count += 1\n        else:\n         \
    \   odd_count += 1\n    return (even_count, odd_count)\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wez0y86.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp0wez0y86.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp0wez0y86.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp0wez0y86.py\"\
    , line 14, in even_odd_count\n    if int(s) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (num)\n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi28a4lwz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpi28a4lwz.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpi28a4lwz.py\", line\
    \ 20, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return 0, 0\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_n20339b.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp_n20339b.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp_n20339b.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = odd =\
    \ 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return even, odd\n    \n\
    \    \n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\nprint(even_odd_count(0))\n\
    print(even_odd_count(123456789))\nprint(even_odd_count(1020))\nprint(even_odd_count(100))\n\
    print(even_odd_count(1010101))\nprint(even_odd_count(22222))\nprint(even_odd_count(9999999999))\n\
    print(even_odd_count(11223344))\nprint(even_odd_count(111111))\nprint(even_odd_count(987654321))\n\
    print(even_odd_count(98989898))\nprint(even_odd_count(1))\nprint(even_odd_count(101))\n\
    print(even_odd_count(111))\nprint(even_odd_count(11))\nprint(even_odd_count(20))\n\
    print(even_odd_count(1234567890))\nprint(even_odd_count(13579))\nprint(even_odd_count(22))\n\
    print(even_odd_count(3333333333))\nprint(even_odd_count(2222222222))\nprint(even_odd_count(2222222222))\n\
    print(even_odd_count(16))\nprint(even_odd_count(1666666666))\nprint(even_odd_count(2000000000))\n\
    print(even_odd_count(1234567899))\nprint(even_odd_count(1666666666))\nprint(even_odd_count(1235))\n\
    print(even_odd_count(1234567))\nprint(even_odd_count(1234567891))\nprint(even_odd_count(9999999999))\n\
    print(even_odd_count(9999999999))\nprint(even_odd_count(9999999999))\nprint(even_odd_count(9999999999))\n\
    print(even_odd_count(9999\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpblx_audj.py\", line 57\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    str_num = str(num)\n    for i in str_num:\n        if int(i)\
    \ % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return\
    \ (even, odd)\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n  \
    \  assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n   \
    \ assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fnmtmh3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9fnmtmh3.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp9fnmtmh3.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp9fnmtmh3.py\"\
    , line 14, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([x\
    \ for x in str(num) if int(x) % 2 == 0]), len([x for x in str(num) if int(x) %\
    \ 2 != 0]))\n\nprint(even_odd_count(-12))\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiuk46hzu.py\", line\
    \ 12, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpiuk46hzu.py\"\
    , line 10, in even_odd_count\n    return (len([x for x in str(num) if int(x) %\
    \ 2 == 0]), len([x for x in str(num) if int(x) % 2 != 0]))\n  File \"/tmp/tmpiuk46hzu.py\"\
    , line 10, in <listcomp>\n    return (len([x for x in str(num) if int(x) % 2 ==\
    \ 0]), len([x for x in str(num) if int(x) % 2 != 0]))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (1, 1)\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpseuo7hl7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpseuo7hl7.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpseuo7hl7.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([n\
    \ for n in str(num) if int(n) % 2 == 0]), len([n for n in str(num) if int(n) %\
    \ 2 != 0]))\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph_2e7q61.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmph_2e7q61.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmph_2e7q61.py\", line\
    \ 14, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmph_2e7q61.py\"\
    , line 10, in even_odd_count\n    return (len([n for n in str(num) if int(n) %\
    \ 2 == 0]), len([n for n in str(num) if int(n) % 2 != 0]))\n  File \"/tmp/tmph_2e7q61.py\"\
    , line 10, in <listcomp>\n    return (len([n for n in str(num) if int(n) % 2 ==\
    \ 0]), len([n for n in str(num) if int(n) % 2 != 0]))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnto7eiw.py\", line\
    \ 18, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpqnto7eiw.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    s = str(num)\n\
    \    s = s.replace('-', '')\n    even, odd = 0, 0\n    for i in s:\n        if\
    \ int(i) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\
    \    return even, odd\n\n\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # your code\
    \ here\n\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp796lve3b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp796lve3b.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp796lve3b.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digits\
    \ = 0\n    odd_digits = 0\n    for digit in num:\n        if digit.isdigit():\n\
    \            if int(digit) % 2 == 0:\n                even_digits += 1\n     \
    \       else:\n                odd_digits += 1\n        else:\n            pass\n\
    \    return even_digits, odd_digits\n\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2pc9ml_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmph2pc9ml_.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmph2pc9ml_.py\", line\
    \ 24, in check\n    assert candidate(7) == (0, 1)\n  File \"/tmp/tmph2pc9ml_.py\"\
    , line 12, in even_odd_count\n    for digit in num:\nTypeError: 'int' object is\
    \ not iterable\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    num = abs(num)\n\
    \n    even_count = 0\n    odd_count = 0\n\n    for digit in str(num):\n      \
    \  digit = int(digit)\n        if digit % 2 == 0:\n            even_count += 1\n\
    \        else:\n            odd_count += 1\n\n    return even_count, odd_count\n\
    \nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n(1, 2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\neven_odd_count(-12)\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqdq779o.py\", line\
    \ 19, in <module>\n    even_odd_count(-12)\n  File \"/tmp/tmpcqdq779o.py\", line\
    \ 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6a3m6rkk.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp6a3m6rkk.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp6a3m6rkk.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpad3wq91a.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpad3wq91a.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    #return 0, 0\n\
    \    #return (1, 2)\n    # your code here\n\n\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfj_0ezuo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfj_0ezuo.py\", line 26,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpfj_0ezuo.py\", line\
    \ 16, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return 0, 0\n\
    \n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph14gr1cy.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmph14gr1cy.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmph14gr1cy.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkterafim.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpkterafim.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqaptiyt5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqaptiyt5.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpqaptiyt5.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpqaptiyt5.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([d\
    \ for d in str(num) if int(d) % 2 == 0]),\n            len([d for d in str(num)\
    \ if int(d) % 2 == 1]))\n\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp95kg3fe6.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp95kg3fe6.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp95kg3fe6.py\", line\
    \ 15, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp95kg3fe6.py\"\
    , line 10, in even_odd_count\n    return (len([d for d in str(num) if int(d) %\
    \ 2 == 0]),\n  File \"/tmp/tmp95kg3fe6.py\", line 10, in <listcomp>\n    return\
    \ (len([d for d in str(num) if int(d) % 2 == 0]),\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_digits\
    \ = 0\n    odd_digits = 0\n    for digit in str(num):\n        if int(digit) %\
    \ 2 == 0:\n            even_digits += 1\n        else:\n            odd_digits\
    \ += 1\n    return (even_digits, odd_digits)\n\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeiya572d.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpeiya572d.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpeiya572d.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpeiya572d.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2\
    \ == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return (even_count, odd_count)\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5l8staet.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5l8staet.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp5l8staet.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp5l8staet.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n            even\
    \ += 1\n        else:\n            odd += 1\n    return even, odd\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gu28hc5.py\", line\
    \ 18, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp2gu28hc5.py\"\
    , line 12, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    if num == 0:\n        return (0, 0)\n    if num < 0:\n        num\
    \ = abs(num)\n    while num:\n        if num % 2 == 0:\n            even += 1\n\
    \        else:\n            odd += 1\n        num //= 10\n    return (even, odd)\n\
    \nprint(even_odd_count(-12))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: "(1, 1)\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3vke42i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpt3vke42i.py\", line 35,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpt3vke42i.py\", line\
    \ 32, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    if num < 0:\n        num = abs(num)\n    while num > 0:\n   \
    \     if num % 2 == 0:\n            even += 1\n        else:\n            odd\
    \ += 1\n        num = num // 10\n    return (even, odd)\n\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphle1bf6r.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphle1bf6r.py\", line 33,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmphle1bf6r.py\", line\
    \ 30, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return num,\
    \ num\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpamrzrrfg.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpamrzrrfg.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpamrzrrfg.py\", line\
    \ 13, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08xazje2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp08xazje2.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp08xazje2.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp08xazje2.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjbhlwxy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvjbhlwxy.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpvjbhlwxy.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpvjbhlwxy.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9iiafyq3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9iiafyq3.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp9iiafyq3.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp9iiafyq3.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for c in str(num):\n        c = int(c)\n        if\
    \ c % 2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n    return even_count, odd_count\n\n\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfvywers.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpdfvywers.py\", line 32,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpdfvywers.py\", line\
    \ 23, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpdfvywers.py\"\
    , line 13, in even_odd_count\n    c = int(c)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\n\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9wy3pib.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp9wy3pib.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpp9wy3pib.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpp9wy3pib.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    if num == 0:\n        return (1, 0)\n    else:\n \
    \       num = abs(num)\n        while num > 0:\n            rem = num % 10\n \
    \           if rem % 2 == 0:\n                even_count += 1\n            else:\n\
    \                odd_count += 1\n            num = num // 10\n        return (even_count,\
    \ odd_count)\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n(1, 2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n\
    \        num = -num\n    even, odd = 0, 0\n    while num:\n        last_digit\
    \ = num % 10\n        if last_digit % 2 == 0:\n            even += 1\n       \
    \ else:\n            odd += 1\n        num //= 10\n    return even, odd\n\n\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpilx7i34s.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpilx7i34s.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpilx7i34s.py\", line\
    \ 31, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Solved using\
    \ string concatenation\n    # num_str = str(num)\n    # even_count = 0\n    #\
    \ odd_count = 0\n    # for i in num_str:\n    #     if int(i) % 2 == 0:\n    #\
    \         even_count += 1\n    #     else:\n    #         odd_count += 1\n   \
    \ # return (even_count, odd_count)\n\n    # Solved using integer division\n  \
    \  even_count = 0\n    odd_count = 0\n    if num < 0:\n        num = -num\n  \
    \  while num > 0:\n        if num % 2 == 0:\n            even_count += 1\n   \
    \     else:\n            odd_count += 1\n        num = num // 10\n    return (even_count,\
    \ odd_count)\n\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n \
    \   assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n  \
    \  assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptx81mv2h.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmptx81mv2h.py\", line 46,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmptx81mv2h.py\", line\
    \ 43, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n\
    \        num = -num\n    odd_count = 0\n    even_count = 0\n    while num > 0:\n\
    \        digit = num % 10\n        if digit % 2 == 0:\n            even_count\
    \ += 1\n        else:\n            odd_count += 1\n        num = num // 10\n \
    \   return even_count, odd_count\n\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjdmmflvw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjdmmflvw.py\", line 35,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpjdmmflvw.py\", line\
    \ 32, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = odd =\
    \ 0\n    for n in str(num):\n        if int(n) % 2 == 0:\n            even +=\
    \ 1\n        else:\n            odd += 1\n    return even, odd\n\nprint(even_odd_count(-12))\n\
    print(even_odd_count(123))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6w2q54o5.py\", line\
    \ 18, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp6w2q54o5.py\"\
    , line 12, in even_odd_count\n    if int(n) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for digit in str(num):\n        digit = int(digit)\n        if\
    \ digit % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\
    \    return (even, odd)\n    pass\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\
    print(even_odd_count(1))\nprint(even_odd_count(0))\nprint(even_odd_count(12345))\n\
    print(even_odd_count(1234))\nprint(even_odd_count(12))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count(0))\n\
    print(even_odd_count(0))\nprint(even_odd_count(0))\nprint(even_odd_count\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpth0_p4_k.py\", line 62\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (len([n\
    \ for n in str(num) if int(n) % 2 == 0]), len([n for n in str(num) if int(n) %\
    \ 2 != 0]))\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefyxq830.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpefyxq830.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpefyxq830.py\", line\
    \ 14, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpefyxq830.py\"\
    , line 10, in even_odd_count\n    return (len([n for n in str(num) if int(n) %\
    \ 2 == 0]), len([n for n in str(num) if int(n) % 2 != 0]))\n  File \"/tmp/tmpefyxq830.py\"\
    , line 10, in <listcomp>\n    return (len([n for n in str(num) if int(n) % 2 ==\
    \ 0]), len([n for n in str(num) if int(n) % 2 != 0]))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2\
    \ == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return (even_count, odd_count)\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc42aimgr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc42aimgr.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpc42aimgr.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpc42aimgr.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # your code\
    \ goes here\n    pass\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: "None\nNone\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnsg_z9kf.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnsg_z9kf.py\", line 27,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpnsg_z9kf.py\", line\
    \ 17, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkurbbjl.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgkurbbjl.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpgkurbbjl.py\", line\
    \ 13, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if int(i) % 2 == 0:\n           \
    \ even += 1\n        else:\n            odd += 1\n    return (even, odd)\n\n\n\
    print(even_odd_count(-12))\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkdk9nsy.py\", line\
    \ 20, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpdkdk9nsy.py\"\
    , line 13, in even_odd_count\n    if int(i) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in range(len(str(num))):\n        if abs(num) % 2 == 0:\n\
    \            even += 1\n        else:\n            odd += 1\n    return (even,\
    \ odd)\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpptw2kl_h.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpptw2kl_h.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpptw2kl_h.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    while num != 0:\n        if num % 2 == 0:\n            even +=\
    \ 1\n        else:\n            odd += 1\n        num = num // 10\n    return\
    \ (even, odd)\n\nnum = 123\neven, odd = even_odd_count(num)\nprint(f\"even: {even},\
    \ odd: {odd}\")\n\nnum = -12\neven, odd = even_odd_count(num)\nprint(f\"even:\
    \ {even}, odd: {odd}\")\ndef check(candidate):\n    assert candidate(7) == (0,\
    \ 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n\
    \    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3,\
    \ 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2,\
    \ 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    for ch in str(num):\n        if ch.isdigit():\n            if int(ch)\
    \ % 2 == 0:\n                even += 1\n            else:\n                odd\
    \ += 1\n    return even, odd\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2\
    \ == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return (even_count, odd_count)\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqirteilp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqirteilp.py\", line 29,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpqirteilp.py\", line\
    \ 20, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpqirteilp.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe23z9o0_.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpe23z9o0_.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpe23z9o0_.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    num_abs = abs(num)\n    while num_abs > 0:\n     \
    \   if num_abs % 2 == 0:\n            even_count += 1\n        else:\n       \
    \     odd_count += 1\n        num_abs //= 10\n    return even_count, odd_count\n\
    \n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n(1, 2)\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuioc6e6r.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpuioc6e6r.py\", line 35,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpuioc6e6r.py\", line\
    \ 32, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if i.isdigit():\n            if int(i)\
    \ % 2 == 0:\n                even += 1\n            else:\n                odd\
    \ += 1\n    return (even, odd)\n\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnsnvb8dg.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpnsnvb8dg.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpnsnvb8dg.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm85d064k.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpm85d064k.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpm85d064k.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    while num != 0:\n        if num % 2 == 0:\n            even +=\
    \ 1\n        else:\n            odd += 1\n        num = num // 10\n    return\
    \ (even, odd)\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n  \
    \  assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n   \
    \ assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (1,1)\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwy75dgr7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpwy75dgr7.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpwy75dgr7.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (sum(1\
    \ for i in str(num) if i in [str(n) for n in range(10) if n % 2 == 0]),\n    \
    \        sum(1 for i in str(num) if i in [str(n) for n in range(10) if n % 2 !=\
    \ 0]))\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # return (0,\
    \ 0)\n    even = 0\n    odd = 0\n    if num < 0:\n        num = num * -1\n   \
    \ while num > 0:\n        if num % 2 == 0:\n            even += 1\n        else:\n\
    \            odd += 1\n        num = num // 10\n    return (even, odd)\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5lb98uft.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp5lb98uft.py\", line 34,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp5lb98uft.py\", line\
    \ 31, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    #TODO\n    num\
    \ = abs(num)\n    even = odd = 0\n    for char in str(num):\n        if int(char)\
    \ % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return\
    \ (even, odd)\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n  \
    \  assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n   \
    \ assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n\
    \    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n\
    \    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for n in str(num):\n        n = int(n)\n        if\
    \ n%2 == 0:\n            even_count += 1\n        else:\n            odd_count\
    \ += 1\n    return (even_count, odd_count)\n\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkmohtk1g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpkmohtk1g.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpkmohtk1g.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpkmohtk1g.py\"\
    , line 13, in even_odd_count\n    n = int(n)\nValueError: invalid literal for\
    \ int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for x in str(num):\n        if int(x) % 2 == 0:\n\
    \            even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ (even_count, odd_count)\n\ndef check(candidate):\n    assert candidate(7) ==\
    \ (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2,\
    \ 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) ==\
    \ (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) ==\
    \ (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8uzij8cs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp8uzij8cs.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp8uzij8cs.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmp8uzij8cs.py\"\
    , line 13, in even_odd_count\n    if int(x) % 2 == 0:\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even, odd =\
    \ 0, 0\n    if num < 0:\n        num = -num\n    while num > 0:\n        if num\
    \ % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    \
    \    num //= 10\n    return even, odd\n\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx91bedfh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpx91bedfh.py\", line 33,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpx91bedfh.py\", line\
    \ 30, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2\
    \ == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return (even_count, odd_count)\n\ndef check(candidate):\n    assert candidate(7)\
    \ == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) ==\
    \ (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjnjkacy_.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpjnjkacy_.py\", line 30,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpjnjkacy_.py\", line\
    \ 21, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpjnjkacy_.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if num < 0:\n\
    \        num = -num\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n\
    \        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n\
    \            odd_count += 1\n    return even_count, odd_count\n    \n    \nprint(even_odd_count(-12))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for ch in str(num):\n        if ch in '02468':\n \
    \           even_count += 1\n        else:\n            odd_count += 1\n    return\
    \ even_count, odd_count\neven_odd_count(1234)\n\ndef check(candidate):\n    assert\
    \ candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452)\
    \ == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821)\
    \ == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347)\
    \ == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfshuhisj.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfshuhisj.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpfshuhisj.py\", line\
    \ 22, in check\n    assert candidate(-78) == (1, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even = 0\n \
    \   odd = 0\n    for i in str(num):\n        if i != '-':\n            i = int(i)\n\
    \            if i % 2 == 0:\n                even += 1\n            else:\n  \
    \              odd += 1\n    return (even, odd)\n\nprint(even_odd_count(-12))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: "(1, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxakoue7a.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpxakoue7a.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpxakoue7a.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # evens = 0\n\
    \    # odds = 0\n    # for d in str(num):\n    #     if int(d) % 2 == 0:\n   \
    \ #         evens += 1\n    #     else:\n    #         odds += 1\n    # return\
    \ evens, odds\n\n    return tuple(map(lambda x: len(x), filter(lambda x: int(x)\
    \ % 2 == 0, str(num))))\n\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp63fje2kx.py\", line\
    \ 22, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmp63fje2kx.py\"\
    , line 19, in even_odd_count\n    return tuple(map(lambda x: len(x), filter(lambda\
    \ x: int(x) % 2 == 0, str(num))))\n  File \"/tmp/tmp63fje2kx.py\", line 19, in\
    \ <lambda>\n    return tuple(map(lambda x: len(x), filter(lambda x: int(x) % 2\
    \ == 0, str(num))))\nValueError: invalid literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    is_even = lambda\
    \ n: n % 2 == 0\n    even_digits = sum(map(is_even, map(int, str(abs(num)))))\n\
    \    return even_digits, len(str(abs(num))) - even_digits\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    n = abs(num)\n\
    \    even, odd = 0, 0\n    while n > 0:\n        if n % 2 == 0:\n            even\
    \ += 1\n        else:\n            odd += 1\n        n //= 10\n    return even,\
    \ odd\n\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppj_vlj_l.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmppj_vlj_l.py\", line 31,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmppj_vlj_l.py\", line\
    \ 28, in check\n    assert candidate(0) == (1, 0)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    ...\n    # return\
    \ even, odd\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1xnb7b1.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpb1xnb7b1.py\", line 23,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpb1xnb7b1.py\", line\
    \ 13, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    return (sum(1\
    \ for d in str(num) if int(d) % 2 == 0), sum(1 for d in str(num) if int(d) % 2\
    \ != 0))\ndef check(candidate):\n    assert candidate(7) == (0, 1)\n    assert\
    \ candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdm79tdsq.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpdm79tdsq.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpdm79tdsq.py\", line\
    \ 13, in check\n    assert candidate(-78) == (1, 1)\n  File \"/tmp/tmpdm79tdsq.py\"\
    , line 10, in even_odd_count\n    return (sum(1 for d in str(num) if int(d) %\
    \ 2 == 0), sum(1 for d in str(num) if int(d) % 2 != 0))\n  File \"/tmp/tmpdm79tdsq.py\"\
    , line 10, in <genexpr>\n    return (sum(1 for d in str(num) if int(d) % 2 ==\
    \ 0), sum(1 for d in str(num) if int(d) % 2 != 0))\nValueError: invalid literal\
    \ for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgp_qdcel.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpgp_qdcel.py\", line 24,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmpgp_qdcel.py\", line\
    \ 14, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7xya9aot.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7xya9aot.py\", line 22,\
    \ in test_check\n    check(even_odd_count)\n  File \"/tmp/tmp7xya9aot.py\", line\
    \ 12, in check\n    assert candidate(7) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for char in str(num):\n        if int(char) % 2 ==\
    \ 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\
    \    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmvrqzk_.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpvmvrqzk_.py\"\
    , line 13, in even_odd_count\n    if int(char) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_odd = {\n\
    \        'even': 0,\n        'odd': 0\n    }\n    num = str(num)\n    if num[0]\
    \ == '-':\n        num = num[1:]\n    for digit in num:\n        if int(digit)\
    \ % 2 == 0:\n            even_odd['even'] += 1\n        else:\n            even_odd['odd']\
    \ += 1\n    return (even_odd['even'], even_odd['odd'])\ndef check(candidate):\n\
    \    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert\
    \ candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert\
    \ candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert\
    \ candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\ndef test_check():\n\
    \    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import Tuple\n\ndef even_odd_count(num: int) -> Tuple[int,\
    \ int]:\n    \"\"\"Given an integer. return a tuple that has the number of even\
    \ and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==>\
    \ (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    even_count =\
    \ 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2\
    \ == 0:\n            even_count += 1\n        else:\n            odd_count +=\
    \ 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))\n\
    def check(candidate):\n    assert candidate(7) == (0, 1)\n    assert candidate(-78)\
    \ == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211)\
    \ == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2)\
    \ == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) ==\
    \ (1, 0)\n\ndef test_check():\n    check(even_odd_count)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnd6afx9.py\", line\
    \ 19, in <module>\n    print(even_odd_count(-12))\n  File \"/tmp/tmpxnd6afx9.py\"\
    , line 13, in even_odd_count\n    if int(digit) % 2 == 0:\nValueError: invalid\
    \ literal for int() with base 10: '-'\n"
  exit_code: -1
  status: Exception
