name: HumanEval_11_string_xor
language: py
prompt: "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings\
  \ a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs\
  \ and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('111000', '101010') == '010010'\n\
  \    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') ==\
  \ '0101'\n\ndef test_check():\n    check(string_xor)\n\ntest_check()\n"
completions: ["    return ''.join(str(1 - int(pair[0]) ^ int(pair[1])) for pair in\
    \ zip(a, b))\n\n", "    assert len(a) == len(b)\n    return ''.join(chr(ord(x)\
    \ ^ ord(y)) for x, y in zip(a, b))\n\n", "    ret = ''.join(map(lambda x: '1'\
    \ if x[0] != x[1] else '0', zip(a, b)))\n    return ret\n\n", "    return bin(int(a,\
    \ 2) ^ int(b, 2))[2:]\n\n", "    raise NotImplementedError\n\n", "    a = int(a,\
    \ 2)\n    b = int(b, 2)\n    return '{0:b}'.format(a ^ b)\n\n", "    return ''.join([str(int(x)\
    \ ^ int(y)) for x, y in zip(a, b)])\n\n", "    return ''.join([str(int(x) ^ int(y))\
    \ for x, y in zip(a, b)])\n", "    a_b = binary_xor(int(a, 2), int(b, 2))\n  \
    \  return bin(a_b)[2:]\n\n", "    a = int(a, 2)\n    b = int(b, 2)\n    c = a\
    \ ^ b\n    c = bin(c)\n    return c[2:]\n\n", "    return str(int(a) ^ int(b))\n\
    \n", "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n",
  "    a_bits = np.array([int(i) for i in a])\n    b_bits = np.array([int(i) for i\
    \ in b])\n    return ''.join(np.array(a_bits ^ b_bits, dtype=str))\n\n", "   \
    \ return ''.join(map(lambda x: str(int(x[0]) ^ int(x[1])), zip(a, b)))\n\n", " \
    \   pass\n\n", "    return \"\".join(str(int(ch1) ^ int(ch2)) for ch1, ch2 in\
    \ zip(a, b))\n\n", "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\
    \n", "    return ''.join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n\n", " \
    \   c = []\n    for i in range(len(a)):\n        c.append(str(int(a[i]) ^ int(b[i])))\n\
    \    return ''.join(c)\n\n", "    return ''.join(str(int(x) ^ int(y)) for x, y\
    \ in zip(a, b))\n", "    return ''.join(\n        '0' if a == b else '1'\n   \
    \     for a, b in zip(a, b)\n    )\n\n", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n\
    \n", "    return ''.join([str(int(pair[0]) ^ int(pair[1])) for pair in zip(a,\
    \ b)])\n\n", "    return ''.join(['1' if a[i] != b[i] else '0' for i in range(len(a))])\n",
  "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    return\
    \ ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n", "    return ''.join(str(int(i)\
    \ ^ int(j)) for i, j in zip(a, b))\n\n", "    xor_res = ''.join(str(int(n1) ^\
    \ int(n2)) for n1, n2 in zip(a, b))\n    return xor_res\n\n", "    return bin(int(a,\
    \ 2) ^ int(b, 2))[2:]\n\n", "    return ''.join(['1' if a[i] != b[i] else '0'\
    \ for i in range(len(a))])\n", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n  \
    \  #return bin(int(a, 2) ^ int(b, 2))\n", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n\
    \n", "    #convert both to integers\n    a = int(a, 2)\n    b = int(b, 2)\n  \
    \  #xor\n    c = a ^ b\n    # convert back to binary\n    c = bin(c)[2:]\n   \
    \ return c\n", "    a_int = int(a, 2)\n    b_int = int(b, 2)\n    c_int = a_int\
    \ ^ b_int\n    return bin(c_int)[2:]\n", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n\
    \n", "    if len(a) != len(b):\n        return 'Length of inputs is not equal'\n\
    \    else:\n        output = ''.join(\n            str(int(a[i]) ^ int(b[i]))\
    \ for i in range(len(a))\n        )\n        return output\n\n", "    return \"\
    \".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "    return ''.join([str(int(a_i)\
    \ ^ int(b_i)) for a_i, b_i in zip(a, b)])\n\n", "    assert len(a) == len(b)\n\
    \    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    return\
    \ ''.join(str(int(ch1) ^ int(ch2)) for ch1, ch2 in zip(a, b))\n\n", "    return\
    \ ''.join(\n        str(int(i) ^ int(j))\n        for i, j in zip(a, b)\n    )\n\
    \n", "    return \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", " \
    \   return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n", "    res\
    \ = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n\
    \    return res\n\n", "    assert len(a) == len(b)\n    return ''.join(str(int(elem_a)\
    \ ^ int(elem_b)) for elem_a, elem_b in zip(a, b))\n\n", "    s = \"\"\n    for\
    \ i in range(len(a)):\n        if a[i] == b[i]:\n            s += '0'\n      \
    \  else:\n            s += '1'\n    return s\n\n", "    return \"\".join([str(int(i)\
    \ ^ int(j)) for i, j in zip(a, b)])\n", "    return ''.join(str(int(a[i]) ^ int(b[i]))\
    \ for i in range(len(a)))\n\n", "    assert(len(a) == len(b))\n    return ''.join(['1'\
    \ if a[i] != b[i] else '0' for i in range(len(a))])\n\n", "    c = ''\n    for\
    \ i in range(len(a)):\n        c += str(int(a[i]) ^ int(b[i]))\n    return c\n\
    \n", "    str1 = hex_string_to_bytes(a)\n    str2 = hex_string_to_bytes(b)\n \
    \   str3 = str1 ^ str2\n    str4 = bytes_to_hex_string(str3)\n    return str4\n\
    \n", "    return \"\".join([\"1\" if a[i] != b[i] else \"0\" for i in range(len(a))])\n\
    \n", "    assert len(a) == len(b)\n    return ''.join(str(x ^ y) for x, y in zip(a,\
    \ b))\n\n", "    assert len(a) == len(b)\n\n    a_bit_array = np.array([int(x)\
    \ for x in a])\n    b_bit_array = np.array([int(x) for x in b])\n\n    xor_bit_array\
    \ = np.logical_xor(a_bit_array, b_bit_array)\n\n    return ''.join(xor_bit_array.astype(int).astype(str))\n",
  "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    return\
    \ \"\".join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    if len(a) !=\
    \ len(b):\n        raise Exception('The inputs should be of equal length.')\n\
    \    output = ''\n    for i in range(len(a)):\n        output += str(int(a[i])\
    \ ^ int(b[i]))\n    return output\n", "    return ''.join(str(int(i) ^ int(j))\
    \ for i, j in zip(a, b))\n\n", "    return format(int(a, 2) ^ int(b, 2), 'b')\n\
    \n", "    a = int(a, 2)\n    b = int(b, 2)\n    return bin(a ^ b)[2:]\n\n", " \
    \   return ''.join(str(int(a_) ^ int(b_)) for a_, b_ in zip(a, b))\n\n", "   \
    \ return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    a = int(a,\
    \ 2)\n    b = int(b, 2)\n    return bin(a ^ b)[2:]\n\n", "    return ''.join([str(int(a[i])\
    \ ^ int(b[i])) for i in range(min(len(a), len(b)))])\n\n", "    return \"\".join(str(int(not\
    \ a[i] == b[i])) for i in range(len(a)))\n\n", "    return ''.join([str(int(x)\
    \ ^ int(y)) for x, y in zip(a, b)])\n\n", "    assert a.replace('0', '').replace('1',\
    \ '') == ''\n    assert b.replace('0', '').replace('1', '') == ''\n    ret = ''\n\
    \    for i in range(len(a)):\n        ret += str(int(a[i]) ^ int(b[i]))\n    return\
    \ ret\n\n", "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n",
  "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n", "   \
    \ return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    a_bin\
    \ = int(a, 2)\n    b_bin = int(b, 2)\n    c_bin = a_bin ^ b_bin\n    return f'{c_bin:b}'\n\
    \n", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n", "    assert len(a) == len(b)\n\
    \    return ''.join(str(int(aa) ^ int(bb)) for aa, bb in zip(a, b))\n\n", "  \
    \  return \"\".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n\n", "    #\
    \ bin() method converts a number into a binary string prefixed with 0b\n    return\
    \ bin(int(a, 2) ^ int(b, 2))[2:]\n\n", "    assert len(a) == len(b)\n    return\
    \ ''.join(map(lambda p: str(int(p[0]) ^ int(p[1])), zip(a, b)))\n\n", "    return\
    \ bin(int(a, 2) ^ int(b, 2))[2:]\n\n", "    if len(a) != len(b):\n        raise\
    \ ValueError(\"Input strings of different lengths\")\n    return \"\".join([str(int(x)\
    \ ^ int(y)) for x, y in zip(a, b)])\n\n", "    assert type(a) == str and type(b)\
    \ == str\n    assert a.isalpha() == False and b.isalpha() == False\n    assert\
    \ a.isdigit() and b.isdigit()\n    return str(int(a, 2) ^ int(b, 2))\n\n", " \
    \   return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\n", " \
    \   return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "   \
    \ return \"\".join(str(bin(int(x, 2) ^ int(y, 2))[2:].zfill(1)) for x, y in zip(a,\
    \ b))\n", "    assert isinstance(a, str) and isinstance(b, str)\n    assert all(c\
    \ in '01' for c in a) and all(c in '01' for c in b)\n    assert len(a) == len(b)\n\
    \    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    if\
    \ len(a) != len(b):\n        raise ValueError(\"Input strings must be of equal\
    \ length\")\n    return \"\".join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\
    \n", "    a = str(a)\n    b = str(b)\n    return_string = ''\n    for i in range(len(a)):\n\
    \        if a[i] == b[i]:\n            return_string += '0'\n        else:\n \
    \           return_string += '1'\n    return return_string\n\n", "    return ''.join(str(int(ai)\
    \ ^ int(bi)) for ai, bi in zip(a, b))\n", "    out = \"\"\n    for i in range(len(a)):\n\
    \        out += str(int(a[i]) ^ int(b[i]))\n    return out\n\n", "    string =\
    \ ''\n    for ai, bi in zip(a, b):\n        string += str(int(ai) ^ int(bi))\n\
    \    return string\n\n", "    return ''.join(str(int(bit_xor(a[i], b[i]))) for\
    \ i in range(len(a)))\n\n", "    return \"\".join([str(int(x) ^ int(y)) for x,\
    \ y in zip(a, b)])\n\n", "    return ''.join(str(i ^ j) for i, j in zip(a, b))\n",
  "    assert type(a) == str and type(b) == str\n    assert len(a) == len(b)\n   \
    \ assert re.match(r'^[01]*$', a)\n    assert re.match(r'^[01]*$', b)\n    res\
    \ = \"\"\n    for i in range(len(a)):\n        res += str(int(a[i]) ^ int(b[i]))\n\
    \    return res\n\n", "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a,\
    \ b))\n\n", "    if len(a) != len(b):\n        raise ValueError('Strings are not\
    \ equal')\n    else:\n        res = []\n        for i in range(len(a)):\n    \
    \        res.append(str(int(a[i]) ^ int(b[i])))\n        return ''.join(res)\n\
    \n", "    # Your code here\n\n", "    assert len(a) == len(b)\n    return ''.join(map(lambda\
    \ x: str(int(x[0]) ^ int(x[1])), zip(a, b)))\n\n", "    a_str = int(a, 2)\n  \
    \  b_str = int(b, 2)\n    return str(bin(a_str ^ b_str))[2:]\n\n", "    output\
    \ = \"\"\n    for (i, j) in zip(a, b):\n        output += str(int(i) ^ int(j))\n\
    \    return output\n\n", "    return \"\".join(map(lambda x: str(int(x[0]) ^ int(x[1])),\
    \ zip(a, b)))\n\n", "    if len(a) != len(b):\n        raise ValueError(\"Both\
    \ inputs must be of equal length.\")\n    xor = \"\"\n    for i in range(len(a)):\n\
    \        if a[i] == b[i]:\n            xor += \"0\"\n        else:\n         \
    \   xor += \"1\"\n    return xor\n\n", "    # your code here\n    a_int = int(a,\
    \ 2)\n    b_int = int(b, 2)\n    xor_int = a_int ^ b_int\n    xor_str = str(bin(xor_int))[2:]\n\
    \    return xor_str\n\n", "    assert len(a) == len(b)\n    assert all([x in \"\
    01\" for x in a])\n    assert all([x in \"01\" for x in b])\n    return \"\".join([str(int(bool(int(x))\
    \ ^ bool(int(y)))) for x, y in zip(a, b)])\n\n", "    return b''\n\n", "    assert\
    \ all(c in '01' for c in a), \"a should consist only of 1s and 0s\"\n    assert\
    \ all(c in '01' for c in b), \"b should consist only of 1s and 0s\"\n    assert\
    \ len(a) == len(b), \"a and b should have the same length\"\n    return ''.join(str(ord(i)\
    \ ^ ord(j)) for i, j in zip(a, b))\n\n", "    return \"\".join(str(x ^ y) for\
    \ x, y in zip(to_int(a), to_int(b)))\n\n", "    # return ''.join(str(int(x) ^\
    \ int(y)) for x, y in zip(a, b))\n    return ''.join(chr(ord(a) ^ ord(b)) for\
    \ a, b in zip(a, b))\n\n", "    return \"\".join(\n        str(int(bool(int(a_i))\
    \ ^ bool(int(b_i)))) for a_i, b_i in zip(a, b)\n    )\n\n", "    xored = int(a,\
    \ 2) ^ int(b, 2)\n    return format(xored, 'b')\n\n", "    return ''.join(str(int(bit_a)\
    \ ^ int(bit_b)) for bit_a, bit_b in zip(a, b))\n", "    assert len(a) == len(b)\n\
    \    return ''.join(bin(int(i) ^ int(j))[2:] for i, j in zip(a, b))\n\n", "  \
    \  return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    return\
    \ ''.join(['1' if i==j else '0' for i,j in zip(a,b)])\n", "    res = []\n    for\
    \ i in range(len(a)):\n        res.append(str(int(a[i]) ^ int(b[i])))\n    return\
    \ ''.join(res)\n\n", "    return ''.join(map(lambda x: str(int(x[0]) ^ int(x[1])),\
    \ zip(a, b)))\n\n", "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(len(a)))\n\
    \n", "    res = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n  \
    \          res += '0'\n        else:\n            res += '1'\n    return res\n\
    \n", "    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", " \
    \   a = int(a, 2)\n    b = int(b, 2)\n    res = a ^ b\n    return bin(res)[2:]\n\
    \n", "    assert len(a) == len(b)\n    res = []\n    for i in range(len(a)):\n\
    \        res.append(('1' if a[i] != b[i] else '0'))\n    return ''.join(res)\n\
    \n", "    return ''.join(str(int(a[i]) ^ int(b[i])) for i in range(min(len(a),\
    \ len(b))))\n\n", "    if len(a) != len(b):\n        raise ValueError('Inputs\
    \ should be of equal length')\n    res = ''\n    for i in range(len(a)):\n   \
    \     res += str(int(a[i]) ^ int(b[i]))\n    return res\n\n", "    return \"{0:b}\"\
    .format(int(a, 2) ^ int(b, 2))\n\n", "    if len(a) != len(b):\n        raise\
    \ ValueError('unequal lengths of inputs')\n    out = ''\n    for idx in range(len(a)):\n\
    \        if a[idx] == b[idx]:\n            out += '0'\n        else:\n       \
    \     out += '1'\n    return out\n\n", "    assert len(a) == len(b)\n    assert\
    \ all([c in '01' for c in a])\n    assert all([c in '01' for c in b])\n    return\
    \ \"\".join([str(int(c1) ^ int(c2)) for c1, c2 in zip(a, b)])\n\n", "    # Using\
    \ zip(), list comprehension, and join()\n    # Convert strings to list of bits\n\
    \    a_bits = [int(a_bit) for a_bit in a]\n    b_bits = [int(b_bit) for b_bit\
    \ in b]\n    # Binary XOR\n    xor_bits = [str(a_bit ^ b_bit) for a_bit, b_bit\
    \ in zip(a_bits, b_bits)]\n    return ''.join(xor_bits)\n\n", "    return bin(int(a,\
    \ 2) ^ int(b, 2))[2:]\n\n", "    return ''.join(str(int(x) ^ int(y)) for x, y\
    \ in zip(a, b))\n\n", "    x = int(a, 2)\n    y = int(b, 2)\n    z = x ^ y\n \
    \   return bin(z)[2:]\n\n", "    x = ''\n    for i in range(len(a)):\n       \
    \ if a[i] == b[i]:\n            x += '0'\n        else:\n            x += '1'\n\
    \    return x\n\n", "    assert len(a) == len(b)\n    c = \"\"\n    for x, y in\
    \ zip(a, b):\n        if x == y:\n            c += \"0\"\n        else:\n    \
    \        c += \"1\"\n    return c\n\n", "    return ''.join(['1' if x != y else\
    \ '0' for x, y in zip(a, b)])\n\n", "    bits = int(a, 2) ^ int(b, 2)\n    return\
    \ bin(bits)[2:]\n\n", "    return \"\".join([str(int(aa) ^ int(bb)) for aa, bb\
    \ in zip(a, b)])\n\n", "    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a,\
    \ b))\n\n", "    return ''.join(str(int(a) ^ int(b)) for a, b in zip(a, b))\n\n\
    print(string_xor('010', '110'))", "    xor = int(a, 2) ^ int(b, 2)\n    return\
    \ '{0:b}'.format(xor)\n\n", "    output = []\n    for i in range(len(a)):\n  \
    \      if a[i] == b[i]:\n            output.append('0')\n        else:\n     \
    \       output.append('1')\n    return ''.join(output)\n", "    assert len(a)\
    \ == len(b)\n    return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n",
  "    return ''.join(\n        '0' if x == y else '1'\n        for x, y in zip(a,\
    \ b)\n    )\n\n", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n\n", "    return\
    \ ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n\n", "    assert len(a)\
    \ == len(b)\n    assert all([c in '01' for c in a])\n    assert all([c in '01'\
    \ for c in b])\n    c = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n\
    \            c += '0'\n        else:\n            c += '1'\n    return c\n\n",
  "    a_b = [int(x) for x in a]\n    b_b = [int(x) for x in b]\n    return \"\".join([str(a_b[i]\
    \ ^ b_b[i]) for i in range(len(a_b))])\n\n", "    assert len(a) == len(b)\n  \
    \  out = []\n    for i in range(len(a)):\n        out.append(str(int(a[i]) ^ int(b[i])))\n\
    \    return ''.join(out)\n", "    res = ''\n    for i in range(len(a)):\n    \
    \    res += str(int(a[i]) ^ int(b[i]))\n    return res\n\n", "    return \"\"\
    .join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n\n", "    return \"\".join([\"\
    0\" if a[i] == b[i] else \"1\" for i in range(len(a))])\n\n", "    assert len(a)\
    \ == len(b)\n\n    res = ''\n    for i in range(len(a)):\n        res += str(int(a[i])\
    \ ^ int(b[i]))\n\n    return res\n\n", "    return ''.join([str(int(ch1) ^ int(ch2))\
    \ for ch1, ch2 in zip(a, b)])\n\n", "    out = ''\n    for i in range(0, len(a)):\n\
    \        out += str(int(a[i]) ^ int(b[i]))\n    return out\n\n", "    return \"\
    \".join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n\n", "    return ''.join(chr(int(x)\
    \ ^ int(y)) for x, y in zip(a, b))\n\n", "    return bin(int(a, 2) ^ int(b, 2))[2:]\n\
    \n", "    return ''.join(map(lambda x: str(int(x[0]) ^ int(x[1])), zip(a, b)))\n\
    \n", "    ans = ''\n    # https://stackoverflow.com/questions/15831564/how-to-perform-bitwise-xor-on-python-strings-of-binary-digits\n\
    \    for i in range(len(a)):\n        ans += str(int(a[i]) ^ int(b[i]))\n    return\
    \ ans\n\n", "    xor_list = []\n    for i in range(len(a)):\n        if a[i] ==\
    \ b[i]:\n            xor_list.append(0)\n        else:\n            xor_list.append(1)\n\
    \    return ''.join(str(e) for e in xor_list)\n\n", "    if len(a) == len(b):\n\
    \        output = ''\n        for i in range(len(a)):\n            if a[i] ==\
    \ b[i]:\n                output += '0'\n            else:\n                output\
    \ += '1'\n        return output\n    else:\n        return\n\n", "    return \"\
    \".join([str(int(i) ^ int(j)) for i, j in zip(a, b)])\n\n", "    return ''.join(str(int(x)\
    \ ^ int(y)) for x, y in zip(a, b))\n\n", "    return ''.join([str(int(x) ^ int(y))\
    \ for x, y in zip(a, b)])\n\n", "    assert len(a) == len(b)\n    return ''.join(str(int(x)\
    \ ^ int(y)) for x, y in zip(a, b))\n\n", "    assert len(a) == len(b)\n    return\
    \ ''.join(str(ord(x) ^ ord(y)) for x, y in zip(a, b))\n\n", "    return \"\".join(str(int(n)\
    \ ^ int(m)) for n, m in zip(a, b))\n\n", "    # convert strings to numbers\n \
    \   a_num = int(a, 2)\n    b_num = int(b, 2)\n    # bitwise xor (^)\n    output\
    \ = a_num ^ b_num\n    # convert output to binary string\n    output_bin = '{0:08b}'.format(output)\n\
    \    return output_bin\n\n", "    return ''.join(['1' if (a[i] != b[i]) else '0'\
    \ for i in range(len(a))])\n\n", "    return ''.join([str(int(i) ^ int(j)) for\
    \ i, j in zip(a, b)])\n", "    return ''.join([str(int(x) ^ int(y)) for x, y in\
    \ zip(a, b)])\n\n", "    assert len(a) == len(b)\n    c = ''\n    for i in range(len(a)):\n\
    \        c += str(int(a[i]) ^ int(b[i]))\n    return c\n\n", "    return \"\"\
    .join(str(x) for x in list(map(lambda x, y: x ^ y, map(int, a), map(int, b))))\n\
    \n", "    return \"\".join([str(ord(x) ^ ord(y)) for x, y in zip(a, b)])\n\n",
  "    if len(a) == len(b):\n        return \"\".join(map(lambda x: \"1\" if x[0]\
    \ != x[1] else \"0\", zip(a, b)))\n    return None\n\n", "    xor = ''\n    for\
    \ i in range(len(a)):\n        if a[i] == b[i]:\n            xor += '0'\n    \
    \    else:\n            xor += '1'\n    return xor\n", "    output = \"\"\n  \
    \  for i in range(len(a)):\n        if a[i] == b[i]:\n            output += \"\
    0\"\n        else:\n            output += \"1\"\n    return output\n\n", "   \
    \ return ''.join(['1' if (aa != bb) else '0' for aa, bb in zip(a, b)])\n\n", " \
    \   xor_list = [chr(ord(x) ^ ord(y)) for x, y in zip(a, b)]\n    return ''.join(xor_list)\n\
    \n", "    return ''.join(str(x^y) for x, y in zip(string_to_int(a), string_to_int(b)))\n\
    \n", "    return ''.join(str(int(i) ^ int(j)) for i, j in zip(a, b))\n\n", " \
    \   assert len(a) == len(b)\n    a = int(a, 2)\n    b = int(b, 2)\n    return\
    \ format(a ^ b, 'b')\n\n", "    # First convert a and b to integers (bases 2,\
    \ resp. 10)\n    int_a = int(a, 2)\n    int_b = int(b, 2)\n    # then perform\
    \ XOR in base 10\n    result = int_a ^ int_b\n    # convert the result back to\
    \ base 2\n    return \"{0:b}\".format(result)\n\n", "    assert(len(a) == len(b))\n\
    \    return ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n", "    return\
    \ ''.join([str(int(x) ^ int(y)) for x, y in zip(a, b)])\n\n", "    return ''.join([str(int(n1)\
    \ ^ int(n2)) for n1, n2 in zip(a, b)])\n\n", "    res = []\n    for i in range(len(a)):\n\
    \        res.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(res)\n\n",
  "    xored = [int(ai) ^ int(bi) for ai, bi in zip(a, b)]\n    return ''.join(map(str,\
    \ xored))\n\n", "    assert len(a) == len(b)\n    assert set(a) <= {'0', '1'}\n\
    \    assert set(b) <= {'0', '1'}\n    return ''.join(str(int(ai) ^ int(bi)) for\
    \ ai, bi in zip(a, b))\n\n", "    xored = [str(int(x) ^ int(y)) for x, y in zip(a,\
    \ b)]\n    return ''.join(xored)\n\n", "    a_int = int(a, 2)\n    b_int = int(b,\
    \ 2)\n    return bin(a_int ^ b_int)[2:]\n\n", "    return ''.join(map(lambda x:\
    \ str(int(x[0]) ^ int(x[1])), zip(a, b)))\n\n", "    return bin(int(a, 2) ^ int(b,\
    \ 2))[2:]\n\n", "    assert len(a) == len(b)\n    if len(a) == 0:\n        return\
    \ ''\n    if len(a) == 1:\n        if a == b:\n            return '0'\n      \
    \  else:\n            return '1'\n    mid = len(a) // 2\n    left_a = a[:mid]\n\
    \    right_a = a[mid:]\n    left_b = b[:mid]\n    right_b = b[mid:]\n    return\
    \ string_xor(left_a, left_b) + string_xor(right_a, right_b)\n\n", "    return\
    \ ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])\n\n", "    return\
    \ ''.join(str(int(x != y)) for x, y in zip(a, b))\n\n", "    return ''.join(str(int(a_bit)\
    \ ^ int(b_bit)) for a_bit, b_bit in zip(a, b))\n\n", "    return ''.join([str(int(char1)\
    \ ^ int(char2)) for char1, char2 in zip(a, b)])\n\n", "    return b''.join(bytes([i\
    \ ^ j]) for i, j in zip(bytes(a, 'ascii'), bytes(b, 'ascii'))).decode('ascii')\n\
    \n", "    if len(a) != len(b):\n        raise RuntimeError(\"Can't perform XOR,\
    \ size of input strings are not equal.\")\n    bin_a = int(a, 2)\n    bin_b =\
    \ int(b, 2)\n    return bin(bin_a ^ bin_b)[2:]\n    ", "    return ''.join(str(int(a_char)\
    \ ^ int(b_char)) for a_char, b_char in zip(a, b))\n\n", "    return \"\".join([str(int(x)\
    \ ^ int(y)) for x, y in zip(a, b)])\n\n", "    assert set(a) == {'0', '1'} and\
    \ set(b) == {'0', '1'}\n    assert len(a) == len(b)\n    assert len(a) > 0\n \
    \   # Create a mapping table for all possible pairwise XOR outputs:\n    xor_lookup\
    \ = {'00': '0', '01': '1', '10': '1', '11': '0'}\n    # Actually perform the operation\
    \ using this mapping table\n    return ''.join([xor_lookup[i + j] for i, j in\
    \ zip(a, b)])\n\n", "    return \"\".join(\n        \"1\" if (a[i] != b[i]) else\
    \ \"0\" for i in range(min(len(a), len(b)))\n    )\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
