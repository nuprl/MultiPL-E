name: HumanEval_93_encode
language: py
results:
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    \n    vowels = \"AEIOUaeiou\"\n    new_message = \"\"\n    for char in message:\n\
    \        if char in vowels:\n            idx = (alphabet.index(char) + 2) % len(alphabet)\n\
    \            new_message += alphabet[idx]\n        else:\n            new_message\
    \ += char.swapcase()\n    return new_message\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfthkqejh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfthkqejh.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpfthkqejh.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv7k1kuzt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpv7k1kuzt.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpv7k1kuzt.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    if len(message) ==\
    \ 0:\n        return message\n    return ''.join([encode_character(char) for char\
    \ in message])\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qyj5i9m.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6qyj5i9m.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6qyj5i9m.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp6qyj5i9m.py\"\
    , line 17, in encode\n    return ''.join([encode_character(char) for char in message])\n\
    \  File \"/tmp/tmp6qyj5i9m.py\", line 17, in <listcomp>\n    return ''.join([encode_character(char)\
    \ for char in message])\nNameError: name 'encode_character' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # replace vowels with\
    \ values 2 characters ahead in the alphabet\n    vowels = {'a': 'c', 'e': 'g',\
    \ 'i': 'k', 'o': 'q', 'u': 'w'}\n    for letter in vowels:\n        message =\
    \ message.replace(letter, vowels[letter])\n        message = message.replace(letter.upper(),\
    \ vowels[letter].upper())\n    return message\n\nencode('This is a message')\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu2188ydk.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpu2188ydk.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpu2188ydk.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(map(new_char,\
    \ message))\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxbj3elz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkxbj3elz.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpkxbj3elz.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpkxbj3elz.py\"\
    , line 15, in encode\n    return ''.join(map(new_char, message))\nNameError: name\
    \ 'new_char' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    code = {'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'y'}\n    output = ''\n \
    \   for char in message:\n        if char.lower() in vowels:\n            output\
    \ += code[char.lower()]\n        elif char.isupper():\n            output += char.lower()\n\
    \        else:\n            output += char.upper()\n    return output\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpadxrl1kt.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpadxrl1kt.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpadxrl1kt.py\", line 29, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    lower = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    vowels = 'aeiou'\n    encoded =\
    \ ''\n    for letter in message:\n        if letter in lower:\n            letter\
    \ = upper[lower.index(letter)]\n            if letter in vowels:\n           \
    \     letter = upper[(lower.index(letter) + 2) % len(lower)]\n        encoded\
    \ += letter\n    return encoded\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq828_y1k.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpq828_y1k.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpq828_y1k.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Your code here\n\
    \    \n    \n    \n    \ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb55uvyxn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpb55uvyxn.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpb55uvyxn.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = message.swapcase()\n\
    \    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in range(len(new_message)):\n\
    \        if new_message[i] in vowels:\n            new_message = new_message[:i]\
    \ + \\\n                          chr(ord(new_message[i]) + 2) + \\\n        \
    \                  new_message[i + 1:]\n    return new_message\nprint(encode('test'))\n\
    print(encode('This is a message'))\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "TEST\ntHIS IS A MESSAGE\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_50lbn94.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp_50lbn94.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_50lbn94.py\", line 28, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    temp = ''\n    vowels\
    \ = ('a', 'e', 'i', 'o', 'u')\n    for letter in message:\n        # if the letter\
    \ is uppercase, swap to lowercase\n        if letter.isupper():\n            temp\
    \ += letter.lower()\n        # if the letter is lowercase, swap to uppercase\n\
    \        elif letter.islower():\n            temp += letter.upper()\n        #\
    \ if the letter is a vowel, add the next 2 vowels in the string\n        if letter\
    \ in vowels:\n            temp += vowels[(vowels.index(letter) + 2) % len(vowels)]\n\
    \        # else just add the original letter to the string\n        else:\n  \
    \          temp += letter\n    return temp\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczin_e9a.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpczin_e9a.py\", line 41,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpczin_e9a.py\", line 34, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(encode_letter(letter)\
    \ for letter in message)\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cw19hxi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_cw19hxi.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_cw19hxi.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp_cw19hxi.py\"\
    , line 15, in encode\n    return ''.join(encode_letter(letter) for letter in message)\n\
    \  File \"/tmp/tmp_cw19hxi.py\", line 15, in <genexpr>\n    return ''.join(encode_letter(letter)\
    \ for letter in message)\nNameError: name 'encode_letter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = ''\n\
    \    for letter in message:\n        if letter.isupper():\n            encoded_message\
    \ += letter.lower()\n        elif letter.islower():\n            encoded_message\
    \ += letter.upper()\n        else:\n            encoded_message += letter\n  \
    \  vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message\
    \ = ''.join([vowels.get(letter, letter) for letter in encoded_message])\n    return\
    \ encoded_message\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpddqgtshr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpddqgtshr.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpddqgtshr.py\", line 29, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # check if input is\
    \ a string\n    if not isinstance(message, str):\n        raise ValueError(\"\
    message must be a string\")\n    \n    # encode string\n    result = ''\n    lookup\
    \ = {'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W', 'Y': 'A'}\n    for char\
    \ in message:\n        # swap case\n        if char.isupper():\n            result\
    \ += char.lower()\n        elif char.islower():\n            result += char.upper()\n\
    \        else:\n            result += char\n        \n        # replace vowels\n\
    \        if char.upper() in lookup:\n            result = result[:-1] + lookup[char.upper()]\n\
    \    \n    return result\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp98c01m_p.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp98c01m_p.py\", line 46,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp98c01m_p.py\", line 39, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: write code\
    \ here\n    return \"\"\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps60qz52p.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmps60qz52p.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmps60qz52p.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ip8ey4w.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3ip8ey4w.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3ip8ey4w.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # first find all vowels\n\
    \    vowels = ['a', 'e', 'i', 'o', 'u']\n    message = message.swapcase()\n  \
    \  return ''.join([message[i + 2] if char in vowels else char for i, char in enumerate(message)])\n\
    \    \n    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n \
    \   assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkn9puk1j.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpkn9puk1j.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpkn9puk1j.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptksnfry4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptksnfry4.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptksnfry4.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy3v7_n4o.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpy3v7_n4o.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpy3v7_n4o.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return None\n\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v1ad6w9.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6v1ad6w9.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6v1ad6w9.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = ''\n\
    \    for character in message:\n        if character.isalpha():\n            if\
    \ character.islower():\n                encoded_message += character.upper()\n\
    \            else:\n                encoded_message += character.lower()\n   \
    \         if character in VOWELS:\n                encoded_message = encoded_message[:-1]\
    \ + chr(ord(character) + 2)\n        else:\n            encoded_message += character\n\
    \    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp057k38rq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp057k38rq.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp057k38rq.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp057k38rq.py\"\
    , line 22, in encode\n    if character in VOWELS:\nNameError: name 'VOWELS' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(swap_vowel(c.swapcase())\
    \ for c in message.lower())\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmd35cjs8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmd35cjs8.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpmd35cjs8.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpmd35cjs8.py\"\
    , line 15, in encode\n    return ''.join(swap_vowel(c.swapcase()) for c in message.lower())\n\
    \  File \"/tmp/tmpmd35cjs8.py\", line 15, in <genexpr>\n    return ''.join(swap_vowel(c.swapcase())\
    \ for c in message.lower())\nNameError: name 'swap_vowel' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(\n \
    \       chr(ord(ch) + 2)\n        if ch in VOWELS\n        else ch\n        for\
    \ ch in message.swapcase()\n    )\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc9so42zt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpc9so42zt.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpc9so42zt.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpc9so42zt.py\"\
    , line 15, in encode\n    return ''.join(\n  File \"/tmp/tmpc9so42zt.py\", line\
    \ 17, in <genexpr>\n    if ch in VOWELS\nNameError: name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    encoded = \"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for c in message:\n\
    \        if c.isalpha():\n            encoded += c.upper() if c.islower() else\
    \ c.lower()\n            if c.lower() in vowels:\n                encoded = encoded[:-1]\
    \ + vowels[(vowels.index(c.lower()) + 2) % 5]\n    return encoded\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4s8p5qgb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4s8p5qgb.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp4s8p5qgb.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    code = []\n    for letter in message:\n        if letter.lower() in vowels:\n\
    \            index = vowels.index(letter.lower())\n            code.append(vowels[(index\
    \ + 2) % 5].upper())\n        else:\n            code.append(letter.swapcase())\n\
    \    return ''.join(code)\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzz201sup.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzz201sup.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpzz201sup.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    vowels = 'AEIOU'\n    encoded = ''\n    for letter in message:\n        if\
    \ letter.isalpha():\n            encoded_letter = letter.swapcase()\n        \
    \    if encoded_letter in vowels:\n                index = alpha.index(encoded_letter)\n\
    \                encoded_letter = alpha[(index + 2) % len(alpha)]\n          \
    \  encoded += encoded_letter\n        else:\n            encoded += letter\n \
    \   return encoded\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5izshz8e.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5izshz8e.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp5izshz8e.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = \"\
    \"\n    vowels = \"aeiou\"\n    for letter in message:\n        if letter in vowels:\n\
    \            new_letter = chr(ord(letter) + 2)\n            encoded_message +=\
    \ new_letter\n        else:\n            encoded_message += letter.swapcase()\n\
    \    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxaj_e_3x.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpxaj_e_3x.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpxaj_e_3x.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = \"\
    \"\n    for char in message:\n        char = char.upper()\n        if char in\
    \ alphabets:\n            if char in vowels:\n                encoded_message\
    \ += alphabets[alphabets.index(char) + 2]\n            else:\n               \
    \ encoded_message += char\n        else:\n            encoded_message += char\n\
    \    return encoded_message.lower()\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjif1h57.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdjif1h57.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpdjif1h57.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpdjif1h57.py\"\
    , line 18, in encode\n    if char in alphabets:\nNameError: name 'alphabets' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return message\n\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpup6zv4e0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpup6zv4e0.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpup6zv4e0.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb6o62ijq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpb6o62ijq.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpb6o62ijq.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmui3_ci4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmui3_ci4.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpmui3_ci4.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'AEIOUaeiou'\n\
    \    encoded = ''\n    for char in message:\n        if char in vowels:\n    \
    \        encoded += chr(ord(char) + 2)\n        else:\n            encoded +=\
    \ char\n    return encoded.swapcase()\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    encode_dict = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'y'}\n    message\
    \ = message.lower()\n    new_message = ''\n    for c in message:\n        if c\
    \ in vowels:\n            new_message += encode_dict[c]\n        else:\n     \
    \       new_message += c\n    return new_message.upper()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl705o_np.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpl705o_np.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpl705o_np.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.swapcase()\n\
    \    vowels = 'aeiou'\n    def f(c):\n        if c in vowels:\n            return\
    \ vowels[(vowels.index(c) + 2) % len(vowels)]\n        return c\n    return ''.join(f(c)\
    \ for c in message)\nencode('a i o w w')\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq70h6lzo.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpq70h6lzo.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpq70h6lzo.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxv9yods.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzxv9yods.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpzxv9yods.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: write code\n\
    \    raise NotImplementedError\n \ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttun4m34.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpttun4m34.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpttun4m34.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpttun4m34.py\"\
    , line 16, in encode\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # your code here\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkvpz2p70.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkvpz2p70.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpkvpz2p70.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n    result = \"\"\n    for char in message:\n        if char\
    \ in vowels:\n            index = vowels.index(char)\n            result += vowels[(index\
    \ + 2) % len(vowels)]\n        else:\n            result += char.upper() if char.islower()\
    \ else char.lower()\n    return result\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphlrwsjhg.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphlrwsjhg.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmphlrwsjhg.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    vowels = \"aeiou\"\n    result = \"\"\n    for i in message:\n        if\
    \ i.lower() in vowels:\n            index = vowels.index(i.lower())\n        \
    \    if index + 2 >= len(vowels):\n                result += vowels[index + 2\
    \ - len(vowels)].upper()\n            else:\n                result += vowels[index\
    \ + 2].upper()\n        else:\n            result += i.swapcase()\n    return\
    \ result\n        \n    #raise NotImplementedError()\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6dwmj8d.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpt6dwmj8d.py\", line 39,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpt6dwmj8d.py\", line 32, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptaoe_zcv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptaoe_zcv.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptaoe_zcv.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn3504igx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpn3504igx.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpn3504igx.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj6zcudgm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj6zcudgm.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpj6zcudgm.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu6dygn21.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu6dygn21.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpu6dygn21.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpls7kma5u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpls7kma5u.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpls7kma5u.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ('a', 'e',\
    \ 'i', 'o', 'u')\n    output = ''\n    for letter in message:\n        if letter\
    \ in vowels:\n            output += chr(ord(letter) + 2)\n        else:\n    \
    \        output += letter.upper()\n    return output\n\nprint(encode('test'))\n\
    print(encode('This is a message'))\n\n\"\"\"\ntime complexity: linear O(n)\nspace\
    \ complexity: linear O(n)\n\"\"\"\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "TgST\nTHkS kS c MgSScGg\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjeicvkki.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpjeicvkki.py\", line 39,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjeicvkki.py\", line 32, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\".join(encode_letter(c)\
    \ for c in message)\n\n\ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpouzln69z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpouzln69z.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpouzln69z.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpouzln69z.py\"\
    , line 15, in encode\n    return \"\".join(encode_letter(c) for c in message)\n\
    \  File \"/tmp/tmpouzln69z.py\", line 15, in <genexpr>\n    return \"\".join(encode_letter(c)\
    \ for c in message)\nNameError: name 'encode_letter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Create a list of\
    \ letters, and vowels based on the \n    # alphabet\n    # Create a mapping dictionary\
    \ to store the pairs\n    # Loop through the message\n    # Check if the letter\
    \ is uppercase or lowercase\n    # Check if the letter is a vowel\n    # Store\
    \ the letter in the mapping dictionary with its mapped letter\n    # Use the mapping\
    \ dictionary to swap the letters\n    # Join the letters and return the encoded\
    \ message\n    pass\n\ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphz21kci5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphz21kci5.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmphz21kci5.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    def encoder(letter):\n        if letter.lower() in vowels:\n            return\
    \ chr(ord(letter) + 2)\n        return letter.upper() if letter.islower() else\
    \ letter.lower()\n    return ''.join(map(encoder, message))\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo2moss4.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpoo2moss4.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpoo2moss4.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ig5i4xp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3ig5i4xp.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3ig5i4xp.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = []\n\
    \    vowels = \"aeiou\"\n    alphabet = string.ascii_lowercase\n    for char in\
    \ message:\n        if char.lower() in vowels:\n            index = alphabet.index(char.lower())\n\
    \            if index + 2 >= len(alphabet):\n                new_message.append(alphabet[abs(len(alphabet)\
    \ - (index + 2))])\n            else:\n                new_message.append(alphabet[index\
    \ + 2])\n        else:\n            new_message.append(char.upper())\n    return\
    \ \"\".join(new_message)\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5o9b9g9k.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp5o9b9g9k.py\", line 38,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp5o9b9g9k.py\", line 31, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp5o9b9g9k.py\"\
    , line 17, in encode\n    alphabet = string.ascii_lowercase\nNameError: name 'string'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppz9od6gf.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppz9od6gf.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmppz9od6gf.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''\n    \n \
    \   \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3dyf0et.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpv3dyf0et.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpv3dyf0et.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpur8ls71r.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpur8ls71r.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpur8ls71r.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiou'\n    new_message = ''\n    for c in message:\n        if\
    \ c in vowels:\n            if alphabet.index(c.lower())+2 > 25:\n           \
    \     new_message += alphabet[alphabet.index(c.lower())+2-26].upper()\n      \
    \      else:\n                new_message += alphabet[alphabet.index(c.lower())+2].upper()\n\
    \        else:\n            new_message += c.upper()\n    return new_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfp44kgv2.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfp44kgv2.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpfp44kgv2.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    def _encode(char: str)\
    \ -> str:\n        if char.isalpha():\n            if char.isupper():\n      \
    \          char = char.lower()\n            else:\n                char = char.upper()\n\
    \            if char in \"aeiou\":\n                char = chr(ord(char) + 2)\n\
    \        return char\n    return \"\".join([_encode(char) for char in message])\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5c0h3fa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd5c0h3fa.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpd5c0h3fa.py\", line 28, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yp_4r0o.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8yp_4r0o.py\", line 24,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8yp_4r0o.py\", line 17, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.swapcase()\n\
    \    for i in message:\n        for j in VOWELS:\n            if i == j:\n   \
    \             message = message.replace(i, VOWELS[VOWELS.index(j) + 2])\n    return\
    \ message\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2tcecc_i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp2tcecc_i.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2tcecc_i.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp2tcecc_i.py\"\
    , line 17, in encode\n    for j in VOWELS:\nNameError: name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpid5e00qa.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpid5e00qa.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpid5e00qa.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''\n\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphrk634jr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphrk634jr.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmphrk634jr.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ('a', 'e',\
    \ 'i', 'o', 'u')\n    replaced = ''\n    for letter in message:\n        if letter.lower()\
    \ in vowels:\n            new_letter = chr(ord(letter) + 2)\n            replaced\
    \ += new_letter\n        else:\n            replaced += letter.swapcase()\n  \
    \  return replaced\n    # TODO: Write the encode function\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb3fxqjwy.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpb3fxqjwy.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpb3fxqjwy.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4o55ixay.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4o55ixay.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp4o55ixay.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\"\n    \n\
    \ \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xj62rp0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8xj62rp0.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8xj62rp0.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\"\n\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfhlxrlw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjfhlxrlw.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjfhlxrlw.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\"\n\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8vlahwab.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8vlahwab.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8vlahwab.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # placeholder to hold\
    \ string\n    placeholder = \"\"\n    # constant of list of vowels\n    VOWELS\
    \ = \"aeiou\"\n    # loop over message\n    for char in message:\n        # get\
    \ lowercase letter\n        char = char.lower()\n        # check for vowels\n\
    \        if char in VOWELS:\n            # get index of char in VOWELS\n     \
    \       index = VOWELS.index(char)\n            # get index of char 2 letters\
    \ ahead in VOWELS\n            index = (index + 2) % len(VOWELS)\n           \
    \ # get the letter\n            char = VOWELS[index]\n        # capitalize the\
    \ letter\n        char = char.upper()\n        # add the letter to placeholder\n\
    \        placeholder += char\n    # return the placeholder\n    return placeholder\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4c8pb2ia.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp4c8pb2ia.py\", line 46,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp4c8pb2ia.py\", line 39, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(map(lambda\
    \ x: \n                       encode_symbol(x), message))\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpic_ij_9l.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpic_ij_9l.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpic_ij_9l.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpic_ij_9l.py\"\
    , line 15, in encode\n    return ''.join(map(lambda x: \n  File \"/tmp/tmpic_ij_9l.py\"\
    , line 16, in <lambda>\n    encode_symbol(x), message))\nNameError: name 'encode_symbol'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(ALPHABET[ALPHABET.index(c)\
    \ + 2 if c in VOWELS else ALPHABET.index(c) - 2] for c in message.upper())\n\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyhd007ez.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyhd007ez.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpyhd007ez.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpyhd007ez.py\"\
    , line 15, in encode\n    return ''.join(ALPHABET[ALPHABET.index(c) + 2 if c in\
    \ VOWELS else ALPHABET.index(c) - 2] for c in message.upper())\n  File \"/tmp/tmpyhd007ez.py\"\
    , line 15, in <genexpr>\n    return ''.join(ALPHABET[ALPHABET.index(c) + 2 if\
    \ c in VOWELS else ALPHABET.index(c) - 2] for c in message.upper())\nNameError:\
    \ name 'ALPHABET' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # TODO: write the contents\
    \ of your function here\n    return \"\"\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp79k3cedj.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp79k3cedj.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp79k3cedj.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n    # YOUR CODE\
    \ HERE\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk9m4465v.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk9m4465v.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpk9m4465v.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    a = string.ascii_letters\n\
    \    b = a[2:] + a[:2]\n    table = str.maketrans(a, b)\n    return message.translate(table)\n\
    \nprint(encode('This is a message'))\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcyoe02_h.py\", line\
    \ 20, in <module>\n    print(encode('This is a message'))\n  File \"/tmp/tmpcyoe02_h.py\"\
    , line 15, in encode\n    a = string.ascii_letters\nNameError: name 'string' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = list(message)\n\
    \    VOWELS = {'a', 'e', 'i', 'o', 'u'}\n    VOWELS_CYCLE = 'aeiouaeiouaeiou'\n\
    \    ALPHABET = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET_CYCLE = 'bcdefghijklmnopqrstuvwxyzabc'\n\
    \    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n\
    \            if char.islower():\n                encoded_message += char.upper()\n\
    \            else:\n                encoded_message += char.lower()\n        else:\n\
    \            encoded_message += char\n    encoded_message = list(encoded_message)\n\
    \    for index, char in enumerate(encoded_message):\n        if char in VOWELS:\n\
    \            vowel_index = VOWELS.index(char)\n            encoded_message[index]\
    \ = VOWELS_CYCLE[vowel_index + 2]\n        elif char.isalpha():\n            char_index\
    \ = ALPHABET.index(char)\n            encoded_message[index] = ALPHABET_CYCLE[char_index\
    \ + 2]\n    return ''.join(encoded_message)\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprd41brq5.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmprd41brq5.py\", line 47,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmprd41brq5.py\", line 40, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmprd41brq5.py\"\
    , line 32, in encode\n    vowel_index = VOWELS.index(char)\nAttributeError: 'set'\
    \ object has no attribute 'index'\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    out = \"\"\n    for\
    \ x in message:\n        if x.isupper():\n            out += x.lower()\n     \
    \   elif x.islower():\n            out += x.upper()\n        else:\n         \
    \   out += x\n    for vowel in \"aeiou\":\n        out = out.replace(vowel, chr(ord(vowel)\
    \ + 2))\n    return out\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptheos6pv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptheos6pv.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptheos6pv.py\", line 29, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = ''\n\
    \    for character in message:\n        if character.islower():\n            encoded_message\
    \ += character.upper()\n        elif character.isupper():\n            encoded_message\
    \ += character.lower()\n        else:\n            encoded_message += character\n\
    \    translated_vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'y'}\n\
    \    for char, translated_char in translated_vowels.items():\n        encoded_message\
    \ = encoded_message.replace(char, translated_char)\n    return encoded_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxqo4w7wx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpxqo4w7wx.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpxqo4w7wx.py\", line 30, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.upper()\n\
    \    vowels = ['A', 'E', 'I', 'O', 'U']\n    new_message = ''\n    new_letter\
    \ = ''\n    for letter in message:\n        if letter in vowels:\n           \
    \ new_letter = vowels[(vowels.index(letter) + 2) % 5]\n        else:\n       \
    \     new_letter = letter\n        new_message += new_letter\n    return new_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2f8i1rzc.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp2f8i1rzc.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2f8i1rzc.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoder = Encoder(message)\n\
    \    return encoder.encode()\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo97di7g2.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpo97di7g2.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpo97di7g2.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpo97di7g2.py\"\
    , line 15, in encode\n    encoder = Encoder(message)\nNameError: name 'Encoder'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    raise NotImplementedError\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnsoksrf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxnsoksrf.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpxnsoksrf.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpxnsoksrf.py\"\
    , line 15, in encode\n    raise NotImplementedError\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = ''\n\
    \    for letter in message:\n        if letter.isupper():\n            encoded_message\
    \ += letter.lower()\n        elif letter.islower():\n            encoded_message\
    \ += letter.upper()\n        elif letter in vowels:\n            encoded_message\
    \ += (vowels[vowels.index(letter) + 2] if vowels.index(letter) < len(vowels) -\
    \ 2 \n                                else vowels[(vowels.index(letter) + 2) %\
    \ len(vowels)])\n        else:\n            encoded_message += letter\n    return\
    \ encoded_message\n\nprint(encode('test'))\nprint(encode('This is a message'))\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: "TEST\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3s0lnj0x.py\", line\
    \ 29, in <module>\n    print(encode('This is a message'))\n  File \"/tmp/tmp3s0lnj0x.py\"\
    , line 21, in encode\n    elif letter in vowels:\nNameError: name 'vowels' is\
    \ not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(alphabet[alphabet.index(l.upper())\
    \ + 2] if l.upper() in VOWELS else l.swapcase() for l in message)\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbl9fy4pi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpbl9fy4pi.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpbl9fy4pi.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpbl9fy4pi.py\"\
    , line 15, in encode\n    return ''.join(alphabet[alphabet.index(l.upper()) +\
    \ 2] if l.upper() in VOWELS else l.swapcase() for l in message)\n  File \"/tmp/tmpbl9fy4pi.py\"\
    , line 15, in <genexpr>\n    return ''.join(alphabet[alphabet.index(l.upper())\
    \ + 2] if l.upper() in VOWELS else l.swapcase() for l in message)\nNameError:\
    \ name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    def func(c):\n    \
    \    if c.islower():\n            c = c.upper()\n        else:\n            c\
    \ = c.lower()\n        return VOWELS.get(c, c)\n    return ''.join(map(func, message))\n\
    \    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr74grg0l.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpr74grg0l.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpr74grg0l.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpr74grg0l.py\"\
    , line 21, in encode\n    return ''.join(map(func, message))\n  File \"/tmp/tmpr74grg0l.py\"\
    , line 20, in func\n    return VOWELS.get(c, c)\nNameError: name 'VOWELS' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps98it_84.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmps98it_84.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmps98it_84.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gx_7b55.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1gx_7b55.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp1gx_7b55.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    message = message.lower()\n    encoded = \"\"\n    for char in message:\n\
    \        if char in vowels:\n            char = vowels[(vowels.index(char) + 2)\
    \ % len(vowels)]\n        elif char.isalpha():\n            char = char.upper()\n\
    \        encoded += char\n    return encoded\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_labt1j.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy_labt1j.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpy_labt1j.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46tx3ye9.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp46tx3ye9.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp46tx3ye9.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return encode_message(message)\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptgzthz4b.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptgzthz4b.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptgzthz4b.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmptgzthz4b.py\"\
    , line 15, in encode\n    return encode_message(message)\nNameError: name 'encode_message'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n    \ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcrx_jv3j.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcrx_jv3j.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpcrx_jv3j.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e',\
    \ 'i', 'o', 'u']\n    cipher = {\n        'a': 'c',\n        'e': 'g',\n     \
    \   'i': 'k',\n        'o': 'q',\n        'u': 'y'\n    }\n    encoded = ''\n\
    \    for char in message:\n        if char in vowels:\n            encoded +=\
    \ cipher[char]\n        elif char.isupper():\n            encoded += char.lower()\n\
    \        elif char.islower():\n            encoded += char.upper()\n        else:\n\
    \            encoded += char\n    return encoded\n\ndef check(candidate):\n  \
    \  assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6riyzwd_.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp6riyzwd_.py\", line 43,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6riyzwd_.py\", line 36, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # +++your code here+++\n\
    \    pass\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf84v1qj3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpf84v1qj3.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpf84v1qj3.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # convert the vowels\
    \ in the message to their corresponding location in the alphabet\n    message\
    \ = message.replace('a', 'c')\n    message = message.replace('e', 'g')\n    message\
    \ = message.replace('i', 'k')\n    message = message.replace('o', 'q')\n    message\
    \ = message.replace('u', 's')\n    # convert the message to uppercase\n    message\
    \ = message.upper()\n    # return the encoded message\n    return message\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuzzf4g9_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuzzf4g9_.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpuzzf4g9_.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n    \ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6f323e5k.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6f323e5k.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6f323e5k.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = ''\n\
    \    vowels = 'aeiou'\n    for char in message:\n        if char.lower() in vowels:\n\
    \            index = vowels.index(char.lower())\n            if index == len(vowels)\
    \ - 1:\n                index = -1\n            new_message += vowels[index +\
    \ 2].upper() if char.isupper() else vowels[index + 2]\n        else:\n       \
    \     new_message += char.upper() if char.islower() else char.lower()\n    return\
    \ new_message\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi44inak5.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpi44inak5.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpi44inak5.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw3rs_y2t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpw3rs_y2t.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpw3rs_y2t.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    alphabet = [chr(i)\
    \ for i in range(ord('a'), ord('z') + 1)]\n    vowels = 'aeiou'\n    encoded =\
    \ ''\n    for letter in message:\n        if letter.isalpha():\n            if\
    \ letter.lower() in vowels:\n                if letter.isupper():\n          \
    \          encoded += vowels[(vowels.index(letter.lower()) + 2) % 5].upper()\n\
    \                else:\n                    encoded += vowels[(vowels.index(letter)\
    \ + 2) % 5]\n            else:\n                if letter.isupper():\n       \
    \             encoded += alphabet[(alphabet.index(letter.lower()) + 2) % 26].upper()\n\
    \                else:\n                    encoded += alphabet[(alphabet.index(letter)\
    \ + 2) % 26]\n        else:\n            encoded += letter\n    return encoded\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo091b5_k.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpo091b5_k.py\", line 43,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpo091b5_k.py\", line 36, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    enc_message = ''\n\
    \    for char in message:\n        if char.isalpha():\n            enc_message\
    \ += encode_char(char)\n        else:\n            enc_message += char\n    return\
    \ enc_message\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxoy4iudw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxoy4iudw.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpxoy4iudw.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpxoy4iudw.py\"\
    , line 18, in encode\n    enc_message += encode_char(char)\nNameError: name 'encode_char'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7bey3xv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpm7bey3xv.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpm7bey3xv.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpm7bey3xv.py\"\
    , line 15, in encode\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpic1hjn7m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpic1hjn7m.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpic1hjn7m.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return message\n\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_j2eogr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpo_j2eogr.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpo_j2eogr.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = ''\n\
    \    vowel_dict = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'y'}\n    for\
    \ char in message:\n        if char.isalpha():\n            if char.isupper():\n\
    \                if char in 'AEIOU':\n                    encoded_message += vowel_dict[char.lower()].upper()\n\
    \                else:\n                    encoded_message += chr(ord(char) +\
    \ 2).lower()\n            else:\n                if char in 'aeiou':\n       \
    \             encoded_message += vowel_dict[char]\n                else:\n   \
    \                 encoded_message += chr(ord(char) + 2)\n        else:\n     \
    \       encoded_message += char\n    return encoded_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn67b42h1.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpn67b42h1.py\", line 42,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpn67b42h1.py\", line 35, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    vowels = 'AEIOU'\n    vowels_index = [alpha.index(vowel) for vowel in vowels]\n\
    \    encoded_message = ''\n    for letter in message:\n        if letter in vowels:\n\
    \            encoded_letter = alpha[(alpha.index(letter.upper()) + 2) % 26]\n\
    \        else:\n            encoded_letter = letter.upper()\n        encoded_message\
    \ += encoded_letter\n    return encoded_message\n\n\ndef check(candidate):\n \
    \   assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbmwmset9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpbmwmset9.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpbmwmset9.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return 'TODO'\n\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8vmmfx3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpc8vmmfx3.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpc8vmmfx3.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return message\n\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wnrm5s4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8wnrm5s4.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8wnrm5s4.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_string = ''\n \
    \   for char in message:\n        if char in vowels:\n            new_char = char.upper()\n\
    \            new_string += new_char\n        else:\n            new_char = char.lower()\n\
    \            new_string += new_char\n    return new_string\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppljx2qs9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppljx2qs9.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmppljx2qs9.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmppljx2qs9.py\"\
    , line 17, in encode\n    if char in vowels:\nNameError: name 'vowels' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Fill in your solution\
    \ here\n    output = ''\n    i = 0\n    while i < len(message):\n        if message[i].isalpha():\n\
    \            output += encode_single_char(message[i])\n        else:\n       \
    \     output += message[i]\n        i += 1\n    return output\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1kbl4b0_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1kbl4b0_.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp1kbl4b0_.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp1kbl4b0_.py\"\
    , line 20, in encode\n    output += encode_single_char(message[i])\nNameError:\
    \ name 'encode_single_char' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv6jz1d5d.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpv6jz1d5d.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpv6jz1d5d.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = ''\n\
    \    for letter in message:\n        if letter in 'aeiou':\n            letter\
    \ = chr(ord(letter) + 2)\n        if letter in 'AEIOU':\n            letter =\
    \ chr(ord(letter) + 2)\n        if letter in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n \
    \           letter = chr(ord(letter) + 32)\n        new_message += letter\n  \
    \  return new_message\n    \ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_gz1dra.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9_gz1dra.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp9_gz1dra.py\", line 28, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = \"\"\n\
    \    for char in message:\n        if char.isalpha():\n            char = chr(ord(char)\
    \ + 1)\n            if char in 'AEIOUaeiou':\n                char = chr(ord(char)\
    \ + 1)\n            char = chr(ord(char) - 32) if char.islower() else char\n \
    \       new_message += char\n    return new_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvai70fv3.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvai70fv3.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpvai70fv3.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(['B'\
    \ if x == 'A' else x for x in message])\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpns1z9s_5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpns1z9s_5.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpns1z9s_5.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    cipher = 'cdefghijklmnopqrstuvwxyzab'\n    alphabet += alphabet.upper()\n\
    \    cipher += cipher.upper()\n    return message.translate(str.maketrans(alphabet,\
    \ cipher))\n    \n    \n    \ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28u6f22o.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp28u6f22o.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp28u6f22o.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    english_vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n    message = list(message)\n    for index, letter in enumerate(message):\n\
    \        if letter.isalpha():\n            if letter.islower():\n            \
    \    message[index] = letter.upper()\n            else:\n                message[index]\
    \ = letter.lower()\n            if letter.lower() in english_vowels:\n       \
    \         message[index] = chr(ord(letter.lower()) + 2)\n    return ''.join(message)\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpscg2_qza.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpscg2_qza.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpscg2_qza.py\", line 30, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    enc = ''\n    for c\
    \ in message:\n        if c.isupper():\n            enc += c.lower()\n       \
    \ elif c.islower():\n            enc += c.upper()\n        else:\n           \
    \ enc += c\n    return enc\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv9ry9jfb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv9ry9jfb.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpv9ry9jfb.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = \"\"\n\
    \    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for letter in message:\n \
    \       if letter.isupper():\n            new_message += letter.lower()\n    \
    \    elif letter.islower():\n            new_message += letter.upper()\n     \
    \   else:\n            new_message += letter\n    for letter in new_message:\n\
    \        if letter in \"aeiou\":\n            index = alphabet.index(letter)\n\
    \            new_message = new_message.replace(letter, alphabet[index + 2])\n\
    \    return new_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2x1qlr4t.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2x1qlr4t.py\", line 39,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2x1qlr4t.py\", line 33, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \n\nprint(encode('This\
    \ is a message'))\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "None\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8oqvc_0b.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp8oqvc_0b.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8oqvc_0b.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb0zmijbz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpb0zmijbz.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpb0zmijbz.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    newmessage = \"\"\n\
    \    for ch in message:\n        if ch.isalpha():\n            if ch.isupper():\n\
    \                newmessage += ch.lower()\n            else:\n               \
    \ newmessage += ch.upper()\n        else:\n            newmessage += ch\n    return\
    \ newmessage\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp14cw7oq4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp14cw7oq4.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp14cw7oq4.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''\n \n \ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpantgm3rs.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpantgm3rs.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpantgm3rs.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9ctyxc0a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9ctyxc0a.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp9ctyxc0a.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfh_0dz5m.py\", line\
    \ 281, in <module>\n    test_check()\n  File \"/tmp/tmpfh_0dz5m.py\", line 279,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpfh_0dz5m.py\", line 272,\
    \ in check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    def encode_char(c:\
    \ str) -> str:\n        if c.isalpha():\n            if c.lower() in 'aeiou':\n\
    \                return chr(ord(c.lower()) + 2 - 26 * (ord(c.lower()) > 'u'))\n\
    \            else:\n                return c.swapcase()\n        else:\n     \
    \       return c\n    return ''.join(map(encode_char, message))\n \n \ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfxmabao.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplfxmabao.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmplfxmabao.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmplfxmabao.py\"\
    , line 23, in encode\n    return ''.join(map(encode_char, message))\n  File \"\
    /tmp/tmplfxmabao.py\", line 18, in encode_char\n    return chr(ord(c.lower())\
    \ + 2 - 26 * (ord(c.lower()) > 'u'))\nTypeError: '>' not supported between instances\
    \ of 'int' and 'str'\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = \"\
    \"\n    for char in message:\n        if char.isalpha():\n            encoded_message\
    \ += _encode_char(char)\n        else:\n            encoded_message += char\n\
    \    return encoded_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurc9qpua.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpurc9qpua.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpurc9qpua.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpurc9qpua.py\"\
    , line 18, in encode\n    encoded_message += _encode_char(char)\nNameError: name\
    \ '_encode_char' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\"\n\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gj3abyh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2gj3abyh.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2gj3abyh.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    # raise NotImplementedError()\n    encode_word = ''\n    for ch in message:\n\
    \        if ch.isalpha():\n            ch_index = 0\n            if ch in string.ascii_lowercase:\n\
    \                ch_index = (string.ascii_lowercase.index(ch) + 2) % 26\n    \
    \            encode_word += string.ascii_lowercase[ch_index]\n            else:\n\
    \                ch_index = (string.ascii_uppercase.index(ch) + 2) % 26\n    \
    \            encode_word += string.ascii_uppercase[ch_index]\n        else:\n\
    \            encode_word += ch\n    return encode_word\n    \n    \ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w4zxa7f.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp9w4zxa7f.py\", line 40,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp9w4zxa7f.py\", line 33, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp9w4zxa7f.py\"\
    , line 21, in encode\n    if ch in string.ascii_lowercase:\nNameError: name 'string'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5brrh53x.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5brrh53x.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp5brrh53x.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    encoded = ''\n    for letter in message:\n        if letter.lower() in vowels:\n\
    \            if letter.lower() == 'u':\n                encoded += 'a'\n     \
    \       else:\n                encoded += chr(ord(letter) + 2)\n        else:\n\
    \            encoded += letter.swapcase()\n    return encoded\n    \n    \ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvj2hemdd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvj2hemdd.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpvj2hemdd.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Assume only letters\n\
    \    vowels = {'a', 'e', 'i', 'o', 'u'}\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    result = ''\n    for letter in message:\n        if letter.lower() in vowels:\n\
    \            index = alpha.index(letter.lower())\n            new_index = (index\
    \ + 2) % len(alpha)\n            result += alpha[new_index].upper() if letter.isupper()\
    \ else alpha[new_index]\n        else:\n            result += letter.swapcase()\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjww8nd3.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqjww8nd3.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpqjww8nd3.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptqkgzapu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptqkgzapu.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptqkgzapu.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpku6caeti.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpku6caeti.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpku6caeti.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\".join(map(letter_change,\
    \ message))\n    \n    # ALTERNATIVE SOLUTION\n    # res = \"\"\n    # for letter\
    \ in message:\n    #     res += letter_change(letter)\n    # return res\n\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg67va7o2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpg67va7o2.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpg67va7o2.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpg67va7o2.py\"\
    , line 15, in encode\n    return \"\".join(map(letter_change, message))\nNameError:\
    \ name 'letter_change' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = ''\n\
    \    for letter in message:\n        if letter.isupper():\n            upper_bound\
    \ = 90\n            base = 65\n        else:\n            upper_bound = 122\n\
    \            base = 97\n        if letter in 'aeiou':\n            letter = chr(base\
    \ + (ord(letter) - base + 2) % 26)\n        else:\n            letter = chr(upper_bound\
    \ - (upper_bound - ord(letter)) % 26)\n        encoded_message += letter\n   \
    \ return encoded_message\nencode('test')\n\nencode('This is a message')\n\nassert\
    \ encode('test') == 'TGST'\nassert encode('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \ \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps8frsujj.py\", line\
    \ 33, in <module>\n    assert encode('test') == 'TGST'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Your Code Here\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    return out\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt0fkm8ce.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpt0fkm8ce.py\", line 53,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpt0fkm8ce.py\", line 46, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpt0fkm8ce.py\"\
    , line 42, in encode\n    return out\nNameError: name 'out' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n    # YOUR CODE\
    \ HERE\n    encoded_message = \"\"\n    for letter in message:\n        if letter.isupper():\n\
    \            encoded_message += letter.lower()\n        elif letter.islower():\n\
    \            encoded_message += letter.upper()\n    vowels = ['a', 'e', 'i', 'o',\
    \ 'u']\n    for letter in encoded_message:\n        if letter in vowels:\n   \
    \         vowel_pos = vowels.index(letter)\n            vowels_list = vowels[vowel_pos+2:]\
    \ + vowels[:vowel_pos+2]\n            encoded_message = encoded_message.replace(letter,\
    \ vowels_list[0])\n    return encoded_message\nencode('This is a message')\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4z8clris.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp4z8clris.py\", line 40,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp4z8clris.py\", line 33, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.upper()\n\
    \    code = ''\n    for letter in message:\n        if letter in 'AEIOU':\n  \
    \          if letter == 'U':\n                code += 'A'\n            else:\n\
    \                code += chr(ord(letter) + 2)\n        else:\n            code\
    \ += letter\n    return code\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsfwdx7z2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsfwdx7z2.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpsfwdx7z2.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpceq2frrk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpceq2frrk.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpceq2frrk.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return message\n\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp40zby2pb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp40zby2pb.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp40zby2pb.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return message.swapcase().translate(str.maketrans('aeiou',\
    \ 'cegik'))\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29xsmlz9.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp29xsmlz9.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp29xsmlz9.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    text = message.swapcase()\n\
    \    return ''.join([chr(ord(v) + 2) if v in VOWELS else v for v in text])\n\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwkkhc9vt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwkkhc9vt.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpwkkhc9vt.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpwkkhc9vt.py\"\
    , line 16, in encode\n    return ''.join([chr(ord(v) + 2) if v in VOWELS else\
    \ v for v in text])\n  File \"/tmp/tmpwkkhc9vt.py\", line 16, in <listcomp>\n\
    \    return ''.join([chr(ord(v) + 2) if v in VOWELS else v for v in text])\nNameError:\
    \ name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnud0o8af.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnud0o8af.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpnud0o8af.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = \"\"\n\
    \    for char in message:\n        if char.isalpha():\n            char = char.swapcase()\n\
    \            new_message += char\n    return new_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj8jir8cz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpj8jir8cz.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpj8jir8cz.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm68qr840.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpm68qr840.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpm68qr840.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc5k5p287.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpc5k5p287.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpc5k5p287.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n    \ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrd3sg1o.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptrd3sg1o.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptrd3sg1o.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3jkr5he1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3jkr5he1.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3jkr5he1.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    letters = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for c in message:\n\
    \        upper = c.isupper()\n        c = c.lower()\n        if c in vowels:\n\
    \            result += letters[(letters.index(c) + 2) % len(letters)]\n      \
    \  else:\n            result += c\n        if upper:\n            result = result.upper()\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplshsm4aw.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmplshsm4aw.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmplshsm4aw.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.swapcase()\n\
    \    return message.translate(str.maketrans(VOWELS, VOWELS[2:] + VOWELS[:2]))\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5tujpt8g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp5tujpt8g.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp5tujpt8g.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp5tujpt8g.py\"\
    , line 16, in encode\n    return message.translate(str.maketrans(VOWELS, VOWELS[2:]\
    \ + VOWELS[:2]))\nNameError: name 'VOWELS' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # convert to lowercase\n\
    \    message = message.lower()\n    # convert to list\n    message = list(message)\n\
    \    # assign vowels to a constant\n    VOWELS = ['a', 'e', 'i', 'o', 'u']\n \
    \   # create an empty list to append letters to\n    letters = []\n    # loop\
    \ through message to check against vowels\n    for letter in message:\n      \
    \  # if letter is in VOWELS\n        if letter in VOWELS:\n            # assign\
    \ variable to find index of letter\n            index = VOWELS.index(letter)\n\
    \            # find index of letter + 2\n            new_index = index + 2\n \
    \           # if index is greater than len(VOWELS), subtract len(VOWELS)\n   \
    \         if new_index > 4:\n                new_index -= len(VOWELS)\n      \
    \      # append new_index to letters\n            letters.append(VOWELS[new_index])\n\
    \        # else append letter to letters\n        else:\n            letters.append(letter)\n\
    \    # return ''.join(letters) to convert list to str\n    return ''.join(letters)\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp47okl8fk.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp47okl8fk.py\", line 51,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp47okl8fk.py\", line 44, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_a3ktd3.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6_a3ktd3.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6_a3ktd3.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6bmgc9xs.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6bmgc9xs.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6bmgc9xs.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    encoded = ''\n    for char in message:\n        if char.lower() in vowels:\n\
    \            encoded += chr(ord(char.lower()) + 2)\n        else:\n          \
    \  encoded += char.swapcase()\n    return encoded\n\ndef check(candidate):\n \
    \   assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_y54obzp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_y54obzp.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_y54obzp.py\", line 26, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = \"\
    \"\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    for i in message:\n        if\
    \ i.isupper():\n            i = i.lower()\n        elif i.islower():\n       \
    \     i = i.upper()\n        if i in vowels:\n            i = vowels[(vowels.index(i)\
    \ + 2) % len(vowels)]\n        encoded_message += i\n    return encoded_message\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgk0kqnu0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgk0kqnu0.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpgk0kqnu0.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\"\n \ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp31ewfpi6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp31ewfpi6.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp31ewfpi6.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0s4hm1_l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0s4hm1_l.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp0s4hm1_l.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.swapcase()\n\
    \    vowels = 'aeiou'\n    if vowels:\n        new_message = []\n        for char\
    \ in message:\n            if char in vowels:\n                index = vowels.index(char)\n\
    \                if index == 4:\n                    new_message.append(vowels[0])\n\
    \                else:\n                    new_message.append(vowels[index +\
    \ 2])\n            else:\n                new_message.append(char)\n        return\
    \ ''.join(new_message)\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprp80txwc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmprp80txwc.py\", line 38,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmprp80txwc.py\", line 31, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    VOWELS = \"aeiou\"\n\
    \    VOWELS_DICT = {v: VOWELS[(VOWELS.index(v) + 2) % len(VOWELS)] for v in VOWELS}\n\
    \    return \"\".join(\n        [c.upper() if c.islower() else c.lower() for c\
    \ in message]\n    ).translate(str.maketrans(VOWELS_DICT))\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdv14smla.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpdv14smla.py\", line 30,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpdv14smla.py\", line 23, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = ''\n\
    \    for char in message:\n        if char.isupper():\n            char = char.lower()\n\
    \        elif char.islower():\n            char = char.upper()\n        if char\
    \ in vowels:\n            char = vowels[vowels.index(char) + 2]\n        new_message\
    \ += char\n    return new_message\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6n0k00jx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6n0k00jx.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp6n0k00jx.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp6n0k00jx.py\"\
    , line 21, in encode\n    if char in vowels:\nNameError: name 'vowels' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = message.swapcase()\n\
    \    for char in message:\n        if char in VOWELS:\n            new_message\
    \ = new_message.replace(char, VOWELS[VOWELS.index(char) + 2])\n    return new_message\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpphjocosc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpphjocosc.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpphjocosc.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpphjocosc.py\"\
    , line 17, in encode\n    if char in VOWELS:\nNameError: name 'VOWELS' is not\
    \ defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Your code goes here\n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ypop5pb.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp7ypop5pb.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7ypop5pb.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.swapcase()\n\
    \    vowel_map = {\n        'a': 'c',\n        'e': 'g',\n        'i': 'k',\n\
    \        'o': 'q',\n        'u': 'y',\n        'A': 'C',\n        'E': 'G',\n\
    \        'I': 'K',\n        'O': 'Q',\n        'U': 'Y'\n    }\n    return ''.join([vowel_map.get(char,\
    \ char) for char in message])\n\nprint(encode('This is a message'))\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "tHKS KS C MGSSCGG\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeh4i1u4b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpeh4i1u4b.py\", line 39,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpeh4i1u4b.py\", line 33, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # Your code here!\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3tyqjbkl.py\", line\
    \ 279, in <module>\n    test_check()\n  File \"/tmp/tmp3tyqjbkl.py\", line 277,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3tyqjbkl.py\", line 270,\
    \ in check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    message = list(message)\n    for i in range(len(message)):\n        message[i]\
    \ = message[i].lower()\n        if message[i] in vowels:\n            n = vowels.index(message[i])\n\
    \            if n < 4:\n                message[i] = vowels[n+2]\n           \
    \ else:\n                message[i] = vowels[n-4]\n    return ''.join(message).upper()\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_6b7czz.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpm_6b7czz.py\", line 35,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpm_6b7czz.py\", line 28, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    res = []\n    for i in message:\n        if i.isupper():\n            res.append(i.lower())\n\
    \        elif i.islower():\n            res.append(i.upper())\n        else:\n\
    \            res.append(i)\n    res1 = []\n    for i in res:\n        if i in\
    \ 'aeiou':\n            res1.append(chr(ord(i)+2))\n        else:\n          \
    \  res1.append(i)\n    return \"\".join(res1)\n    #raise NotImplementedError()\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7w_12lzc.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp7w_12lzc.py\", line 42,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7w_12lzc.py\", line 36, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiou\"\n\
    \    vowel_list = list(vowels)\n    def encode_helper(message: str) -> str:\n\
    \        if message == \"\":\n            return \"\"\n        else:\n       \
    \     if message[0] in vowels:\n                return vowel_list[(vowel_list.index(message[0])\
    \ + 2) % 5].upper() + encode_helper(message[1:])\n            elif message[0]\
    \ in vowels.upper():\n                return vowel_list[(vowel_list.index(message[0].lower())\
    \ + 2) % 5].upper() + encode_helper(message[1:])\n            else:\n        \
    \        return message[0].upper() + encode_helper(message[1:])\n    return encode_helper(message.lower())\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ixjy8gz.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp_ixjy8gz.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_ixjy8gz.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.upper()\n\
    \    vowels = ['A', 'E', 'I', 'O', 'U']\n    for v in vowels:\n        message\
    \ = message.replace(v, chr(ord(v) + 2))\n    return message\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyyybt492.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyyybt492.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpyyybt492.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    swapper = str.maketrans(\"\
    abcdefghijklmnopqrstuvwxyz\",\n                            \"bcdefghijklmnopqrstuvwxyza\"\
    )\n    return message.translate(swapper).upper()\n\ndef check(candidate):\n  \
    \  assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_s8mdumk.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp_s8mdumk.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_s8mdumk.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoded_message = ''\n\
    \    for letter in message:\n        encoded_message += encode_char(letter)\n\
    \    return encoded_message\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3507mhal.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3507mhal.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp3507mhal.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp3507mhal.py\"\
    , line 17, in encode\n    encoded_message += encode_char(letter)\nNameError: name\
    \ 'encode_char' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    text = message.swapcase()\n\
    \    text = text.replace('e', 'g')\n    text = text.replace('E', 'G')\n    text\
    \ = text.replace('o', 'q')\n    text = text.replace('O', 'Q')\n    text = text.replace('u',\
    \ 'w')\n    text = text.replace('U', 'W')\n    text = text.replace('a', 'c')\n\
    \    text = text.replace('A', 'C')\n    text = text.replace('i', 'k')\n    text\
    \ = text.replace('I', 'K')\n    return text\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return message.upper()\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplgpb07cl.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmplgpb07cl.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmplgpb07cl.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.swapcase()\n\
    \    vowels = 'aeiou'\n    encoding = ''\n    for c in message:\n        if c\
    \ in vowels:\n            encoding += vowels[(vowels.index(c) + 2) % len(vowels)]\n\
    \        else:\n            encoding += c\n    return encoding\nencode('test')\n\
    \nencode('This is a message')\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_eqh9i0r.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp_eqh9i0r.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_eqh9i0r.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = list(message)\n\
    \    vowels = 'aeiou'\n    for i in range(len(message)):\n        if message[i].isalpha():\n\
    \            message[i] = message[i].swapcase()\n            if message[i].lower()\
    \ in vowels:\n                message[i] = chr(ord(message[i]) + 2)\n        \
    \        if message[i] in vowels:\n                    message[i] = chr(ord(message[i])\
    \ + 2)\n    return ''.join(message)\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''\n\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmposlehzho.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmposlehzho.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmposlehzho.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    res = []\n    for char in message:\n        if char.lower() in vowels:\n\
    \            res.append(vowels[(vowels.index(char.lower()) + 2) % 5].upper() if\
    \ char.isupper() else vowels[(vowels.index(char.lower()) + 2) % 5])\n        else:\n\
    \            res.append(char.swapcase())\n    return ''.join(res)\n    \n    \n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7kbc3i0v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7kbc3i0v.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp7kbc3i0v.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcl97ljl7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcl97ljl7.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpcl97ljl7.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encrypted_message =\
    \ \"\"\n    for character in message:\n        if character.islower():\n     \
    \       encrypted_message += character.upper()\n        elif character.isupper():\n\
    \            encrypted_message += character.lower()\n        else:\n         \
    \   encrypted_message += character\n    return encrypted_message\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps644up8m.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps644up8m.py\", line 34,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmps644up8m.py\", line 27, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi146c82l.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi146c82l.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpi146c82l.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\".join(map(lambda\
    \ c: encrypt(c), message))\n\n\ndef check(candidate):\n    assert candidate('TEST')\
    \ == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjv6_4zht.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjv6_4zht.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjv6_4zht.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpjv6_4zht.py\"\
    , line 15, in encode\n    return \"\".join(map(lambda c: encrypt(c), message))\n\
    \  File \"/tmp/tmpjv6_4zht.py\", line 15, in <lambda>\n    return \"\".join(map(lambda\
    \ c: encrypt(c), message))\nNameError: name 'encrypt' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\"\n\n\ndef\
    \ check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcuq0mbt3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcuq0mbt3.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpcuq0mbt3.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return apply_transformation(message,\
    \ encode_letter)\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzwge6s9l.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpzwge6s9l.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpzwge6s9l.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpzwge6s9l.py\"\
    , line 15, in encode\n    return apply_transformation(message, encode_letter)\n\
    NameError: name 'apply_transformation' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.swapcase()\n\
    \    vowels = 'aeiou'\n    for i in range(len(message)):\n        if message[i]\
    \ in vowels:\n            message = message[:i] + vowels[(vowels.index(message[i])\
    \ + 2) % 5] + message[i+1:]\n    return message\n\n\ndef check(candidate):\n \
    \   assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_egazj8m.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_egazj8m.py\", line 31,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp_egazj8m.py\", line 24, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = \"aeiou\"\n\
    \    output = \"\"\n    for l in message:\n        if l.lower() in vowels:\n \
    \           output += chr(ord(l) + 2)\n        else:\n            output += l.upper()\n\
    \    return output\n\n\ndef check(candidate):\n    assert candidate('TEST') ==\
    \ 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES')\
    \ == 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n\
    \    assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmpyw_uph.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmpyw_uph.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpmpyw_uph.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    cipher_text = ''\n\
    \    letters = list(string.ascii_lowercase)\n    for char in message:\n      \
    \  if char.isalpha():\n            if char in vowels:\n                new_letter\
    \ = letters[(letters.index(char) + 2) % 26]\n                cipher_text += new_letter.upper()\
    \ if char.isupper() else new_letter\n            else:\n                cipher_text\
    \ += char.swapcase()\n        else:\n            cipher_text += char\n    return\
    \ cipher_text\n\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjp506kwh.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpjp506kwh.py\", line 37,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjp506kwh.py\", line 30, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpjp506kwh.py\"\
    , line 16, in encode\n    letters = list(string.ascii_lowercase)\nNameError: name\
    \ 'string' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    if len(message) ==\
    \ 0:\n        return ''\n    else:\n        encoded_string = encode(message[1:])\n\
    \        return message[0].swapcase() + encoded_string\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc0lznrok.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc0lznrok.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpc0lznrok.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    raise NotImplementedError()\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz7t65vgu.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpz7t65vgu.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpz7t65vgu.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpz7t65vgu.py\"\
    , line 15, in encode\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwqkt0flr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwqkt0flr.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpwqkt0flr.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowel_map = get_vowel_map()\n\
    \    encoded_message = list()\n    for letter in message:\n        if letter in\
    \ vowel_map:\n            encoded_message.append(vowel_map[letter])\n        else:\n\
    \            encoded_message.append(letter)\n    return ''.join(encoded_message).swapcase()\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq4hvgxj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpjq4hvgxj.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjq4hvgxj.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpjq4hvgxj.py\"\
    , line 15, in encode\n    vowel_map = get_vowel_map()\nNameError: name 'get_vowel_map'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # 1. if letter is upper,\
    \ encode and make lower\n    # 2. if letter is lower, encode and make upper\n\
    \    output = ''\n    for letter in message:\n        if letter.islower():\n \
    \           output += encode_letter(letter.upper()).lower()\n        else:\n \
    \           output += encode_letter(letter)\n    return output\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bu1liwy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9bu1liwy.py\", line 33,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp9bu1liwy.py\", line 26, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmp9bu1liwy.py\"\
    , line 22, in encode\n    output += encode_letter(letter)\nNameError: name 'encode_letter'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(encode_character(c)\
    \ for c in message)\n\nprint(encode('test'))\nprint(encode('This is a message'))\n\
    def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3c2py5a9.py\", line\
    \ 17, in <module>\n    print(encode('test'))\n  File \"/tmp/tmp3c2py5a9.py\",\
    \ line 15, in encode\n    return ''.join(encode_character(c) for c in message)\n\
    \  File \"/tmp/tmp3c2py5a9.py\", line 15, in <genexpr>\n    return ''.join(encode_character(c)\
    \ for c in message)\nNameError: name 'encode_character' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return ''.join(\n \
    \       [\n            chr(ord(l)+2) if l in ('a', 'e', 'i', 'o', 'u')\n     \
    \       else l.upper()\n            for l in message.lower()\n        ]\n    )\n\
    \n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
    \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n  \
    \  assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
    \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
    \    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbndq3c5b.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbndq3c5b.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpbndq3c5b.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    message = message.swapcase()\n\
    \    vowels = ['a', 'e', 'i', 'o', 'u']\n    new_message = ''\n    for letter\
    \ in message:\n        if letter.lower() in vowels:\n            index = vowels.index(letter.lower())\n\
    \            if letter.islower():\n                letter = vowels[(index + 2)\
    \ % 5]\n            else:\n                letter = vowels[(index + 2) % 5].upper()\n\
    \        new_message += letter\n    return new_message\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8e1ie3jr.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp8e1ie3jr.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp8e1ie3jr.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnxlsqga.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptnxlsqga.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmptnxlsqga.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    encoder = str.maketrans('AEIOUaeiou',\
    \ 'CGKQWcgkqw')\n    return message.translate(encoder)\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaoi_7hmi.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaoi_7hmi.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpaoi_7hmi.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    return \"\".join(\n\
    \        chr(ord(c) + 2) if c in \"aeiou\" else chr(ord(c) - 32) if c.islower()\
    \ else c.lower() for c in message\n    )\n\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxujg0vv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphxujg0vv.py\", line 28,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmphxujg0vv.py\", line 21, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    dic = {'a':'c', 'e':'g',\
    \ 'i':'k', 'o':'q', 'u':'w',\n            'A':'C', 'E':'G', 'I':'K', 'O':'Q',\
    \ 'U':'W'}\n    s = \"\"\n    for char in message:\n        if char in dic:\n\
    \            s += dic[char]\n        else:\n            s += char\n    return\
    \ s.swapcase()\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa9imrbki.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa9imrbki.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpa9imrbki.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # if not message:\n\
    \    #     return message\n    # elif message[0].isupper():\n    #     return\
    \ message[0].lower() + encode(message[1:])\n    # elif message[0].islower():\n\
    \    #     return message[0].upper() + encode(message[1:])\n    # elif message[0]\
    \ in 'aeiou':\n    #     return 'e' + encode(message[1:])\n    # elif message[0]\
    \ == 'z':\n    #     return 'b' + encode(message[1:])\n    # else:\n    #    \
    \ return message[0] + encode(message[1:])\n    ret = ''\n    for letter in message:\n\
    \        if letter.isupper():\n            ret += letter.lower()\n        elif\
    \ letter.islower():\n            ret += letter.upper()\n        elif letter in\
    \ 'aeiou':\n            ret += 'e'\n        elif letter == 'z':\n            ret\
    \ += 'b'\n        else:\n            ret += letter\n    return ret\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps44mkh9d.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmps44mkh9d.py\", line 49,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmps44mkh9d.py\", line 42, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = 'aeiou'\n\
    \    message = message.lower()\n    encoded = ''\n    for char in message:\n \
    \       if char in vowels:\n            index = vowels.index(char)\n         \
    \   char = vowels[(index + 2) % 5]\n        encoded += char.upper()\n    return\
    \ encoded\n\nprint(encode('test'))\nprint(encode('This is a message'))\n\nprint('#'\
    \ * 99)\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n   \
    \ assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n\
    \    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert\
    \ candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef\
    \ test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "TOST\nTHUS US I MOSSIGO\n###################################################################################################\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwu3o298g.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpwu3o298g.py\", line 38,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpwu3o298g.py\", line 31, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    # built in method for\
    \ mapping\n    # map(func, iterable)\n    return ''.join(map(encode_char, message))\n\
    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir')\
    \ == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert candidate('This\
    \ is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt\
    \ tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkofwt957.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpkofwt957.py\", line 27,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpkofwt957.py\", line 20, in\
    \ check\n    assert candidate('TEST') == 'tgst'\n  File \"/tmp/tmpkofwt957.py\"\
    , line 17, in encode\n    return ''.join(map(encode_char, message))\nNameError:\
    \ name 'encode_char' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf44ng4fx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpf44ng4fx.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpf44ng4fx.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihlzzc3_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpihlzzc3_.py\", line 26,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpihlzzc3_.py\", line 19, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = set('aeiou')\n\
    \    encoded = ''\n    for letter in message:\n        if letter.isalpha():\n\
    \            encoded += letter.upper() if letter.isupper() else letter.lower()\n\
    \        if letter.lower() in vowels:\n            encoded += chr(ord(letter)\
    \ + 2)\n        else:\n            encoded += letter\n    return encoded\n\nprint(encode('Hello\
    \ World!'))\n\ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: "HHeglllloq WWoqrrlldd!\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjfv2ksm1.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjfv2ksm1.py\", line 36,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpjfv2ksm1.py\", line 29, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2a8u2t4f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2a8u2t4f.py\", line 25,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp2a8u2t4f.py\", line 18, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    encoded = []\n    for char in message:\n        if char.isalpha():\n\
    \            encoded.append(char.swapcase())\n        else:\n            encoded.append(char)\n\
    \    for i, char in enumerate(encoded):\n        if char.lower() in vowels:\n\
    \            encoded[i] = encoded[i].lower()\n            if encoded[i] == 'u':\n\
    \                encoded[i] = 'a'\n            else:\n                encoded[i]\
    \ = chr(ord(encoded[i]) + 2)\n    return ''.join(encoded)\n\n\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx7wqk8gn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpx7wqk8gn.py\", line 40,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpx7wqk8gn.py\", line 34, in\
    \ check\n    assert candidate('Mudasir') == 'mWDCSKR'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    pass\n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate('TEST') == 'tgst'\n\
    \    assert candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') ==\
    \ 'ygs'\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG'\n  \
    \  assert candidate('I DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\
    \ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp45l027tw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp45l027tw.py\", line 29,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmp45l027tw.py\", line 22, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    if not isinstance(message,\
    \ str):\n        raise TypeError('The message must be a string')\n    if not message:\n\
    \        raise ValueError('The message must not be empty')\n    \n    vowels =\
    \ 'aeiou'\n    result = ''\n    for i in message:\n        if i.isalpha():\n \
    \           j = vowels.find(i.lower())\n            if j >= 0:\n             \
    \   i = vowels[(j + 2) % 5]\n            result += i.swapcase()\n        else:\n\
    \            result += i\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfuigttbz.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfuigttbz.py\", line 40,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpfuigttbz.py\", line 33, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This\
    \ is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    new_message = \"\"\n\
    \    for i in message:\n        if i.isupper():\n            new_message += i.lower()\n\
    \        elif i.islower():\n            new_message += i.upper()\n        else:\n\
    \            new_message += i\n    return new_message\ndef check(candidate):\n\
    \    assert candidate('TEST') == 'tgst'\n    assert candidate('Mudasir') == 'mWDCSKR'\n\
    \    assert candidate('YES') == 'ygs'\n    assert candidate('This is a message')\
    \ == 'tHKS KS C MGSSCGG'\n    assert candidate('I DoNt KnOw WhAt tO WrItE') ==\
    \ 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n    check(encode)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyjk5_zw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpqyjk5_zw.py\", line 32,\
    \ in test_check\n    check(encode)\n  File \"/tmp/tmpqyjk5_zw.py\", line 25, in\
    \ check\n    assert candidate('TEST') == 'tgst'\nAssertionError\n"
  exit_code: -1
  status: Exception
