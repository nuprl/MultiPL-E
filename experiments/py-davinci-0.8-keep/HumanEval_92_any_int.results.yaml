name: HumanEval_92_any_int
language: py
results:
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (type(x) == int and type(y) ==\
    \ int and type(z) == int)\n\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int))\n\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    # check\
    \ if the sum of any two numbers is equal to the third one\n    return x==y+z or\
    \ y==x+z or z==x+y and type(x)==int and type(y)==int and type(z)==int\n\n\nassert\
    \ any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3,\
    \ -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\nassert any_int(3.6, -2.2,\
    \ 2.0) == False\n\nprint(\"Exercise 61 is correct.\")\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: "Exercise 61 is correct.\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpey9s2ikv.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpey9s2ikv.py\", line 44,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpey9s2ikv.py\", line 34,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert\
    \ any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n \n \n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1x8nf3t4.py\", line\
    \ 22, in <module>\n    assert any_int(5, 2, 7) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ int(x) == int(y) + int(z) or int(y) == int(x) + int(z) or int(z) == int(x) +\
    \ int(y):\n        return True\n    else:\n        return False\n\nassert any_int(5,\
    \ 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) ==\
    \ True\nassert any_int(3.6, -2.2, 2) == False\nassert any_int(1, 2, 4) == False\n\
    assert any_int(5, 3, 2) == True\nassert any_int(1, 2, -2) == True\nassert any_int(1,\
    \ 2, -1) == False\nassert any_int(5, 5, 5) == False\nassert any_int(1, 1, 1) ==\
    \ True\nassert any_int(1, 3, 3) == False\nassert any_int(3, 3, 3) == False\nassert\
    \ any_int(1, 3, 4) == False\nassert any_int(2, 3, 5) == False\nassert any_int(1,\
    \ 1, 4) == True\nassert any_int(1, 1, 1) == True\nassert any_int(1, 4, 6) == False\n\
    assert any_int(1, 1, 5) == True\nassert any_int(1, 3, 3) == False\nassert any_int(3,\
    \ 3, 3) == False\nassert any_int(1, 3, 4) == False\nassert any_int(2, 3, 5) ==\
    \ False\nassert any_int(1, 1, 4) == True\nassert any_int(2, 3, 4) == False\nassert\
    \ any_int(1, 2, 4) == False\nassert any_int(1, 1, 5) == True\nassert any_int(1,\
    \ 3, 3) == False\nassert any_int(3, 3, 3) == False\nassert any_int(1, 3, 4) ==\
    \ False\nassert any_int(2, 3, 5) == False\nassert any_int(1, 1, 4) == True\nassert\
    \ any_int(2, 3,\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpb7ttmbly.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    total\
    \ = x + y + z\n    if (type(x) == int and type(y) == int and type(z) == int) and\
    \ (x + y == z or x + z == y or y + z == x):\n        return True\n    else:\n\
    \        return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    # x == y + z or x == z + y or y == x + z or\
    \ y == z + x or z == x + y or z == y + x\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x.is_integer() and y.is_integer() and z.is_integer():\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n    return False\nprint(any_int(3,\
    \ -2, 1))\nprint(any_int(3.6, -2.2, 2))\n\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1finvavm.py\", line\
    \ 23, in <module>\n    print(any_int(3, -2, 1))\n  File \"/tmp/tmp1finvavm.py\"\
    , line 19, in any_int\n    if x.is_integer() and y.is_integer() and z.is_integer():\n\
    AttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x+y == z or x+z == y or y+z == x) and (isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)):\n        return True\n    else:\n        return\
    \ False\n    \nany_int(5, 2, 7)\n \n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z\
    \ or x + y == z or y == x + z:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (int(x) + int(y) == int(z)) or (int(x) + int(z) == int(y)) or (int(y) + int(z)\
    \ == int(x)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0dj6su0y.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0dj6su0y.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp0dj6su0y.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x==y+z or y==x+z or z==x+y and isinstance(x,int) and isinstance(y,int) and isinstance(z,int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccnrbngj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpccnrbngj.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpccnrbngj.py\", line 25,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    res\
    \ = False\n    if x != int(x) or y != int(y) or z != int(z):\n        res = False\n\
    \    elif x + y == z or x + z == y or y + z == x:\n        res = True\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzufhmjki.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpzufhmjki.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpzufhmjki.py\", line 37,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x+y == z or x+z == y or y+z == x) and x%1 == 0 and y%1 == 0 and z%1 == 0\n\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4i560l7d.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4i560l7d.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp4i560l7d.py\", line 32,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z) or (y == x + z) or (z == x + y):\n        return (True)\n    else:\n\
    \        return (False)\nany_int(5, 2, 7)\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1n4wa6mf.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp1n4wa6mf.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1n4wa6mf.py\", line 28,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (x ==\
    \ y + z or x == y - z or x == z - y)\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x + y == z or x + z == y or y + z == x\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8tohulmy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8tohulmy.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8tohulmy.py\", line 25,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ any([(x == y + z), (y == x + z), (z == x + y)]) and all([x == int(x), y == int(y),\
    \ z == int(z)])\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ydh12nh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp3ydh12nh.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp3ydh12nh.py\", line 31,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if\
    \ x + y == z or x + z == y or y + z == x:\n            return True\n        else:\n\
    \            return False\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x+y==z or x+z==y or y+z==x\n    \nany_int(3, 2, 2)\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpar4qfd9j.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpar4qfd9j.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpar4qfd9j.py\", line 26,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z and x.is_integer() and y.is_integer() and z.is_integer():\n     \
    \   return True\n    elif y == x + z and x.is_integer() and y.is_integer() and\
    \ z.is_integer():\n        return True\n    elif z == x + y and x.is_integer()\
    \ and y.is_integer() and z.is_integer():\n        return True\n    else:\n   \
    \     return False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcblbok5t.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpcblbok5t.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpcblbok5t.py\", line 30,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmpcblbok5t.py\"\
    , line 21, in any_int\n    elif y == x + z and x.is_integer() and y.is_integer()\
    \ and z.is_integer():\nAttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x.is_integer() and y.is_integer() and z.is_integer() and ((x == y + z) or (y\
    \ == x + z) or (z == x + y))\n\n\n\nassert any_int(2, 3, 1) == True\nassert any_int(3,\
    \ 2, 2) == False\nassert any_int(4, 3, 2) == True\nassert any_int(4, -3, 11) ==\
    \ True\nassert any_int(0, 2, 0) == True\nassert any_int(3.6, 2.2, 2) == False\n\
    assert any_int(4, 3, 3) == False\nassert any_int(10, 5, 5) == True\nassert any_int(1,\
    \ 1, 1) == False\nassert any_int(12, -12, 0) == True\nassert any_int(2, 3, 4)\
    \ == False\nassert any_int(3, 2, 0) == True\nassert any_int(1, 3, 2) == True\n\
    assert any_int(5, 2, 7) == True\nassert any_int(3, -2, 1) == True\nassert any_int(3.6,\
    \ -2.2, 2) == False\nassert any_int(2, 3, 5) == False\nassert any_int(2, 3, -4)\
    \ == True\nassert any_int(4, 6, 4) == True\nassert any_int(0, 0, 0) == False\n\
    assert any_int(0, 1, 1) == True\nassert any_int(3, 3, 3) == False\nassert any_int(3,\
    \ 4, 5) == False\nassert any_int(0, -1, 1) == True\nassert any_int(5, -2, 7) ==\
    \ True\nassert any_int(2, 3, -5) == True\nassert any_int(2, 3, -4) == True\nassert\
    \ any_int(4, 5, 6) == False\nassert any_int(1, -1, 2) == True\nassert any_int(3,\
    \ 2, 5) == False\nassert any_int(3, 2, -5) == True\nassert any_int(2, 2,\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp9rb8liaw.py\", line 55\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x == y + z or y == x + z or z == x + y\n\n\nassert any_int(1, 1, 2) is True\n\
    assert any_int(3, 2, 2) is False\nassert any_int(3, -2, 1) is True\nassert any_int(3.6,\
    \ -2.2, 2) is False\n \n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmmchwcr3.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpmmchwcr3.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpmmchwcr3.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x+y == z or x+z == y or y+z == x) and x%1 == 0 and y%1 == 0 and z%1 == 0\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoty2ovlu.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpoty2ovlu.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpoty2ovlu.py\", line 31,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or x == y + z or y == x + z:\n        return True\n    else:\n  \
    \      return False\n    \n\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4vdp04z.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpd4vdp04z.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpd4vdp04z.py\", line 28,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) == int and type(y) == int and type(z) == int:\n        if x + y == z\
    \ or x + z == y or y + z == x:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and (x == y\
    \ + z or x + y == z or x + z == y)\n\nany_int(3, 2, 2)\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x != int(x) or y != int(y) or z != int(z):\n        return False\n    if x ==\
    \ y + z or y == x + z or z == x + y:\n        return True\n    return False\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0j38ysbc.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp0j38ysbc.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp0j38ysbc.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x == y + z or y == x + z or z == x + y and x % 1 == 0 and y % 1 == 0 and z %\
    \ 1 == 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpduuc537h.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpduuc537h.py\", line 44,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpduuc537h.py\", line 34,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == 0 or y == 0 or z == 0:\n        return False\n    if (x + y == z) or (x\
    \ + z == y) or (y + z == x):\n        return True\n    else:\n        return False\n\
    \nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3,\
    \ -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\nassert any_int(5, 5,\
    \ 10) == True\nassert any_int(5, 5, 5) == False\n\ndef check(candidate):\n   \
    \ assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdmgt00hq.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpdmgt00hq.py\", line 46,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpdmgt00hq.py\", line 36,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x+y == z or x+z == y or y+z == x) and (type(x) == int and type(y) == int and\
    \ type(z) == int)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (int(x) + int(y) == int(z)) or (int(x) + int(z) == int(y)) or (int(y) + int(z)\
    \ == int(x))\n\n\nany_int(5, 2, 7)\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjoho3n1.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpvjoho3n1.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpvjoho3n1.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_set8ms.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpp_set8ms.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpp_set8ms.py\", line 22,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0):\n        return True\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpenuqw0s3.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpenuqw0s3.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpenuqw0s3.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    a =\
    \ x + y\n    b = x + z\n    c = y + z\n    if (a == z or b == y or c == x) and\
    \ x.is_integer() and y.is_integer() and z.is_integer():\n        return True\n\
    \    else:\n        return False\n\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyn65cuur.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpyn65cuur.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpyn65cuur.py\", line 30,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmpyn65cuur.py\"\
    , line 22, in any_int\n    if (a == z or b == y or c == x) and x.is_integer()\
    \ and y.is_integer() and z.is_integer():\nAttributeError: 'int' object has no\
    \ attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x==y+z or x+y==z or x+z==y:\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4iahzcp5.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4iahzcp5.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp4iahzcp5.py\", line 27,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ True if (x + y == z) or (x + z == y) or (y + z == x) else False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk4yaiwgj.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpk4yaiwgj.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpk4yaiwgj.py\", line 25,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ None\n\n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\n\
    assert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n\n\n\
    \ \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9quwhsn4.py\", line\
    \ 22, in <module>\n    assert any_int(5, 2, 7) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7c5wbq5z.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7c5wbq5z.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp7c5wbq5z.py\", line 34,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n  \
    \      return False\n\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5acb6b9m.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp5acb6b9m.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp5acb6b9m.py\", line 29,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (int(x)+int(y)==int(z)) or (int(x)+int(z)==int(y)) or (int(y)+int(z)==int(x))\n\
    \n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc3e2azx7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc3e2azx7.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpc3e2azx7.py\", line 33,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x.is_integer() and y.is_integer() and z.is_integer():\n        return x == y\
    \ + z or y == x + z or z == x + y\n    else:\n        return False\n\n\nany_int(3,\
    \ -2, 1)\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1x10sr0.py\", line\
    \ 25, in <module>\n    any_int(3, -2, 1)\n  File \"/tmp/tmpo1x10sr0.py\", line\
    \ 19, in any_int\n    if x.is_integer() and y.is_integer() and z.is_integer():\n\
    AttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0):\n        return any([x == y\
    \ + z, y == x + z, z == x + y])\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphs59c850.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmphs59c850.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphs59c850.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x%1 == 0 and y%1 == 0 and z%1 == 0:\n        if x == y + z or y == x + z or\
    \ z == x + y:\n            return True\n        else:\n            return False\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzdlloha.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpfzdlloha.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpfzdlloha.py\", line 37,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) and (x+y == z or x+z == y or\
    \ y+z == x)\n\n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\n\
    assert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n\nprint('Success')\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: "Success\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7f5ttjtu.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7f5ttjtu.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp7f5ttjtu.py\", line 38,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n  \
    \      return False\n        \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    #return x == y + z or y == x + z or z == x + y\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    #return not x % 1 and not\
    \ y % 1 and not z % 1\ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe2pbvsan.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmpe2pbvsan.py\", line 72,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpe2pbvsan.py\", line 62,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ int(x+y) == z or int(x+z) == y or int(y+z) == x\n    \nassert any_int(5, 2,\
    \ 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\n\
    assert any_int(3.6, -2.2, 2) == False\nassert any_int(7, 0, -7) == True\nassert\
    \ any_int(1, 0, 0) == False\nassert any_int(10, -3, -3) == True\nassert any_int(1,\
    \ 0, 2) == False\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) ==\
    \ False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n\
    assert any_int(7, 0, -7) == True\nassert any_int(1, 0, 0) == False\nassert any_int(10,\
    \ -3, -3) == True\nassert any_int(1, 0, 2) == False\n \n \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifyo890o.py\", line\
    \ 27, in <module>\n    assert any_int(10, -3, -3) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    # Check\
    \ if all are int\n    if x.is_integer() and y.is_integer() and z.is_integer():\n\
    \        # Check if x is the sum of y and z\n        if x == y + z:\n        \
    \    return True\n        # Check if y is the sum of x and z\n        elif y ==\
    \ x + z:\n            return True\n        # Check if z is the sum of x and y\n\
    \        elif z == x + y:\n            return True\n        else:\n          \
    \  return False\n    else:\n        return False\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_mmbhzy.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp4_mmbhzy.py\", line 47,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp4_mmbhzy.py\", line 35,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmp4_mmbhzy.py\"\
    , line 20, in any_int\n    if x.is_integer() and y.is_integer() and z.is_integer():\n\
    AttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x.is_integer() and y.is_integer() and z.is_integer() and (x + y == z or x +\
    \ z == y or y + z == x)\n \nassert any_int(5, 2, 7)\nassert not any_int(3, 2,\
    \ 2)\nassert any_int(3, -2, 1)\nassert not any_int(3.6, -2.2, 2)\n \n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmaa5plks.py\", line\
    \ 21, in <module>\n    assert any_int(5, 2, 7)\n  File \"/tmp/tmpmaa5plks.py\"\
    , line 19, in any_int\n    return x.is_integer() and y.is_integer() and z.is_integer()\
    \ and (x + y == z or x + z == y or y + z == x)\nAttributeError: 'int' object has\
    \ no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    #n=\
    \ [x,y,z]\n    #n_sum = sum(n) - z\n    #print(n_sum)\n    if x+y == z or x+z\
    \ == y or y+z == x:\n        return True\n    else:\n        return False\n\n\
    any_int(3, -2, 1)\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89260mcm.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp89260mcm.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp89260mcm.py\", line 32,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x.is_integer() and y.is_integer() and z.is_integer() and (x == y + z or y ==\
    \ x + z or z == x + y)\n\n\nassert any_int(5, 2, 7)\nassert not any_int(3, 2,\
    \ 2)\nassert any_int(3, -2, 1)\nassert not any_int(3.6, -2.2, 2)\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rsc96pn.py\", line\
    \ 22, in <module>\n    assert any_int(5, 2, 7)\n  File \"/tmp/tmp2rsc96pn.py\"\
    , line 19, in any_int\n    return x.is_integer() and y.is_integer() and z.is_integer()\
    \ and (x == y + z or y == x + z or z == x + y)\nAttributeError: 'int' object has\
    \ no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x.is_integer() and y.is_integer() and z.is_integer():\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v074s2d.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp1v074s2d.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v074s2d.py\", line 29,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmp1v074s2d.py\"\
    , line 19, in any_int\n    if x.is_integer() and y.is_integer() and z.is_integer():\n\
    AttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) != int or type(y) != int or type(z) != int:\n        return False\n\
    \    else:\n        if x == y + z or y == x + z or z == x + y:\n            return\
    \ True\n        else:\n            return False\n\ndef check(candidate):\n   \
    \ assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ not (x.is_integer() and y.is_integer() and z.is_integer()):\n        return\
    \ False\n    if x == y + z or y == x + z or z == x + y:\n        return True\n\
    \    return False\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\nany_int(5, 2, 7) #\u279E True\n    \nany_int(3,\
    \ 2, 2) #\u279E False\n\nany_int(3, -2, 1) #\u279E True\n    \nany_int(3.6, -2.2,\
    \ 2) #\u279E False\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28br8t6f.py\", line\
    \ 40, in <module>\n    any_int(5, 2, 7) #\u279E True\n  File \"/tmp/tmp28br8t6f.py\"\
    , line 19, in any_int\n    if not (x.is_integer() and y.is_integer() and z.is_integer()):\n\
    AttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ None\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n   \
    \ assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjubv3ni.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsjubv3ni.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsjubv3ni.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if x+y==z\
    \ or x+z==y or y+z==x:\n            return True\n        else:\n            return\
    \ False\n    else:\n        return False\n    \n    \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x+y==z or x+z==y or y+z==x) and (x==int(x) and y==int(y) and z==int(z))\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_osbe7m.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpt_osbe7m.py\", line 43,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpt_osbe7m.py\", line 40,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ any([int(x) == int(y) + int(z), int(y) == int(x) + int(z), int(z) == int(x)\
    \ + int(y)]) and all([isinstance(x, int), isinstance(y, int), isinstance(z, int)])\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or x == y + z or y == x + z:\n        return True\n    else:\n  \
    \      return False\n        \n   \n       \nany_int(5, 2, 7)\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzsuxfwo1.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpzsuxfwo1.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpzsuxfwo1.py\", line 32,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x % 1 == 0 and y % 1 == 0 and z % 1 == 0) and (x+y == z or x+z == y or y+z\
    \ == x):\n        return True\n    else:\n        return False\n    \n    \n\n\
    assert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\nassert\
    \ any_int(3, 2, 2) == False\n\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmj377m4b.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpmj377m4b.py\", line 45,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpmj377m4b.py\", line 42,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z\
    \ or x + y == z or x + z == y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\nany_int(3, -2, 1)\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6elf8n21.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp6elf8n21.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp6elf8n21.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x.is_integer() and y.is_integer() and z.is_integer():\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptnfn5qeg.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmptnfn5qeg.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptnfn5qeg.py\", line 29,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmptnfn5qeg.py\"\
    , line 19, in any_int\n    if x.is_integer() and y.is_integer() and z.is_integer():\n\
    AttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ int(x) == int(y) + int(z) or int(y) == int(x) + int(z) or int(z) == int(x) +\
    \ int(y):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxpth8uqi.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxpth8uqi.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpxpth8uqi.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ True if int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z)\
    \ == int(x) else False\n\n\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rquinrw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4rquinrw.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp4rquinrw.py\", line 32,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x==y+z or y==x+z or z==x+y) and (x%1==0 and y%1==0 and z%1==0)\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3n5z8n5k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3n5z8n5k.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp3n5z8n5k.py\", line 32,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n    \n    # my code here\n\
    \    pass\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n  \
    \  assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x == (y + z) or y == (x + z) or z == (x + y) and type(x) == int and type(y)\
    \ == int and type(z) == int\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ua2yuk6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4ua2yuk6.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp4ua2yuk6.py\", line 25,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x % 2 == 0 and y % 2 == 0 and z % 2 == 0:\n        return True\n    else:\n\
    \        return False\n        \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpabdoi3f5.py\", line\
    \ 278, in <module>\n    test_check()\n  File \"/tmp/tmpabdoi3f5.py\", line 276,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpabdoi3f5.py\", line 264,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnqchj8i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplnqchj8i.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmplnqchj8i.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z\
    \ % 1 == 0:\n        return True\n    else:\n        return False\n\nany_int(5,\
    \ 2, 7)\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb779yqdf.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpb779yqdf.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpb779yqdf.py\", line 36,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (z == x + y or y == x + z or x == y + z) and isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ False\n\n\"\"\"\nSolution 3\n\"\"\"\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8d15ito6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8d15ito6.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8d15ito6.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x == y + z or y == x + z or z\
    \ == x + y)\n\nq1.check()\n\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzd219y9y.py\", line\
    \ 21, in <module>\n    q1.check()\nNameError: name 'q1' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    # your\
    \ code here\n    return x+y==z or x+z==y or y+z==x and type(x)==int and type(y)==int\
    \ and type(z)==int\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx7rpfq2a.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpx7rpfq2a.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpx7rpfq2a.py\", line 24,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_78cq6h_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_78cq6h_.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp_78cq6h_.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x%1 == 0 and y%1 == 0 and z%1 == 0:\n        if x == y + z or y == x + z or\
    \ z == x + y:\n            return True\n        else:\n            return False\n\
    \    else:\n        return False\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprzzr8ott.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmprzzr8ott.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmprzzr8ott.py\", line 38,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n  \
    \      return False\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwnrh662.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpnwnrh662.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpnwnrh662.py\", line 26,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z) ==\
    \ int(x)\n\n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\n\
    assert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\nassert\
    \ any_int(3.1, -2.2, 2) == False\nassert any_int(3.1, -2.2, 2.3) == False\nassert\
    \ any_int(3.1, -2.2, 2.3) == False\n\n\nprint('Success')\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: "Success\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsfej6fg5.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpsfej6fg5.py\", line 45,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsfej6fg5.py\", line 42,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    q23.check()\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4888lngu.py\", line\
    \ 20, in <module>\n    q23.check()\nNameError: name 'q23' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int))\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if(isinstance(x,int)\
    \ and isinstance(y,int) and isinstance(z,int)):\n        if(x==y+z or y==x+z or\
    \ z==x+y):\n            return True\n        else:\n            return False\n\
    \    else:\n        return False\n    \n    \n    \n\nany_int(5, 2, 7)\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x == y + z or y == x + z or z == x + y) and all(int(i) == i for i in [x, y,\
    \ z])\n        \n    \n \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    ######################################################################\n\
    \    #################### BEGIN TEST CASES ################################\n\
    \    ######################################################################\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuw9o67w.py\", line\
    \ 259, in <module>\n    test_check()\n  File \"/tmp/tmpjuw9o67w.py\", line 257,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpjuw9o67w.py\", line 254,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x.is_integer() and y.is_integer() and z.is_integer():\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpam8c2d31.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpam8c2d31.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpam8c2d31.py\", line 29,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmpam8c2d31.py\"\
    , line 19, in any_int\n    if x.is_integer() and y.is_integer() and z.is_integer():\n\
    AttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nany_int(3, -2, 1)\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzew1s5r7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzew1s5r7.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpzew1s5r7.py\", line 25,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) != int or type(y) != int or type(z) != int:\n        return False\n\
    \    elif x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n\
    \        return False\n    \n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z or y == x + z or z == x + y) and isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int):\n        return True\n    else:\n        return\
    \ False\n        \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ False\n\n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\n\
    assert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n\nprint('Success')\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9boo6u6t.py\", line\
    \ 22, in <module>\n    assert any_int(5, 2, 7) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z or x == y - z) and (y == x + z or y == x - z) and (z == x + y or\
    \ z == x - y):\n        return True\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygi6pv8e.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpygi6pv8e.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpygi6pv8e.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8wm01b9n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8wm01b9n.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8wm01b9n.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n  \
    \      return False\n        \nany_int(5, 2, 7)\n\ndef check(candidate):\n   \
    \ assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfw8pe8ci.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfw8pe8ci.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpfw8pe8ci.py\", line 29,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x == y + z or y == x + z or z == x + y and x.is_integer() and y.is_integer()\
    \ and z.is_integer()\n\n\n\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3otlus7i.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp3otlus7i.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp3otlus7i.py\", line 26,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z or x == y - z or x == z - y) and (x%1 == 0) and (y%1 == 0) and (z%1\
    \ == 0):\n        return True\n    elif (y == x + z or y == x - z or y == z -\
    \ x) and (x%1 == 0) and (y%1 == 0) and (z%1 == 0):\n        return True\n    elif\
    \ (z == x + y or z == x - y or z == y - x) and (x%1 == 0) and (y%1 == 0) and (z%1\
    \ == 0):\n        return True\n    else:\n        return False\n    \n    \nassert\
    \ any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3,\
    \ -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n \n \n \n \n \n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt4zkob1x.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpt4zkob1x.py\", line 52,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpt4zkob1x.py\", line 49,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (type(x)==int and type(y)==int and type(z)==int) and ((x==y+z) or (y==x+z) or\
    \ (z==x+y)):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (int(x) + int(y) == int(z)) or (int(x) + int(z) == int(y)) or (int(y) + int(z)\
    \ == int(x)):\n        return True\n    else:\n        return False\n\nassert\
    \ any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3,\
    \ -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2jsjih86.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp2jsjih86.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp2jsjih86.py\", line 39,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (int(x) == x and int(y) == y and\
    \ int(z) == z)\n\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3,\
    \ -2, 1))\nprint(any_int(3.6, -2.2, 2))\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpttp0ecle.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpttp0ecle.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpttp0ecle.py\", line 36,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x, y, z)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30dznp99.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp30dznp99.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp30dznp99.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfyp3lrj6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpfyp3lrj6.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpfyp3lrj6.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    # Your\
    \ code here:\n    if (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and\
    \ y % 1 == 0 and z % 1 == 0:\n        return True\n    else:\n        return False\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    # return False\n\n\nq1.check()\nq1.hint()\n \n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppqmq4xnj.py\", line\
    \ 41, in <module>\n    q1.check()\nNameError: name 'q1' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\nany_int(3, 2, 2)\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x + y == z or x + z == y or y + z == x:\n        return True\n    return False\n\
    \n\n\"\"\"\nSolution 3\n\"\"\"\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_r260go_.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp_r260go_.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp_r260go_.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \  ( ( x == y + z or y == x + z or z == x + y ) and x.is_integer() and y.is_integer()\
    \ and z.is_integer() ) \n    \nany_int(7, 11, 5)\n\ndef check(candidate):\n  \
    \  assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5lo0engl.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp5lo0engl.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp5lo0engl.py\", line 24,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmp5lo0engl.py\"\
    , line 19, in any_int\n    return  ( ( x == y + z or y == x + z or z == x + y\
    \ ) and x.is_integer() and y.is_integer() and z.is_integer() ) \nAttributeError:\
    \ 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x + y == z or x + z == y or y + z == x if x % 1 == 0 and y % 1 == 0 and z %\
    \ 1 == 0 else False\n\ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirzurana.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpirzurana.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpirzurana.py\", line 31,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x or y or z) % 1 == 0:\n        if x == y + z or y == x + z or z == x + y:\n\
    \            return True\n        else:\n            return False\n    else:\n\
    \        return False\n    pass\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm1_myuu.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpsm1_myuu.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsm1_myuu.py\", line 38,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    sum_of_two\
    \ = x + y + z - min(x, y, z)\n    if sum_of_two == min(x, y, z):\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjv2v06jh.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjv2v06jh.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpjv2v06jh.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x) and x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0\n\n\n\n\"\"\"\nSolution 3\n\"\"\"\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9yjkj01.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpn9yjkj01.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpn9yjkj01.py\", line 30,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n  \
    \  assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8atsstnd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8atsstnd.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8atsstnd.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    x =\
    \ int(x)\n    y = int(y)\n    z = int(z)\n    return (x + y == z) or (x + z ==\
    \ y) or (y + z == x)\n\ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8lh414e.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp8lh414e.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpp8lh414e.py\", line 34,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2w5imysp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2w5imysp.py\", line 33,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp2w5imysp.py\", line 21,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    any_int(5, 2, 7)\nany_int(3, 2, 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n\
    \ \nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert\
    \ any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n\nprint(\"\
    Exercise 41 is correct.\")\n\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsiy57wh.py\", line\
    \ 25, in <module>\n    assert any_int(5, 2, 7) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z) ==\
    \ int(x):\n        return True\n    else:\n        return False\nprint(any_int(3,\
    \ 2, 2))\n\nprint(any_int(3, -2, 1))\n\n\nprint(any_int(3.6, -2.2, 2))\n\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\nprint(any_int(5, 2, 7))\n\nprint(any_int(5,\
    \ 2, 7))\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5, 2, 7))\n\n\nprint(any_int(5,\
    \ 2, 7))\n\n\nprint(any_int(5, 2, 7))\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: "False\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\
    True\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\
    True\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi_p3gvoa.py\", line\
    \ 127, in <module>\n    test_check()\n  File \"/tmp/tmpi_p3gvoa.py\", line 125,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpi_p3gvoa.py\", line 122,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x+y==z) or (x+z==y) or (y+z==x):\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfzbm4g4k.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfzbm4g4k.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpfzbm4g4k.py\", line 27,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0:\n        return True\n\
    \    elif (y == x + z) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0:\n       \
    \ return True\n    elif (z == x + y) and x % 1 == 0 and y % 1 == 0 and z % 1 ==\
    \ 0:\n        return True\n    else:\n        return False\n    \n    pass\n\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmohxm21h.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpmohxm21h.py\", line 44,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpmohxm21h.py\", line 41,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqh2fcnj3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqh2fcnj3.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpqh2fcnj3.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x==y+z or y==x+z or z==x+y\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6u5d1kj1.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6u5d1kj1.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp6u5d1kj1.py\", line 24,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqynjx0d2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqynjx0d2.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpqynjx0d2.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return\
    \ x == y + z or y == x + z or z == x + y\n    else:\n        return False\n\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n  \
    \      return False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_0bwb2ge.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_0bwb2ge.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp_0bwb2ge.py\", line 28,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) and (z ==\
    \ x + y or y == x + z or x == y + z)\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z or y == x + z or z == x + y) and (x.is_integer() and y.is_integer()\
    \ and z.is_integer()):\n        return True\n    else:\n        return False\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bfwei21.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5bfwei21.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp5bfwei21.py\", line 25,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmp5bfwei21.py\"\
    , line 19, in any_int\n    if (x == y + z or y == x + z or z == x + y) and (x.is_integer()\
    \ and y.is_integer() and z.is_integer()):\nAttributeError: 'int' object has no\
    \ attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    #answer\n\
    \    if (x + y == z or x + z == y or y + z == x) and (x%1 == 0 and y%1 == 0 and\
    \ z%1 == 0):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxikwpb2.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmprxikwpb2.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmprxikwpb2.py\", line 36,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n\
    \        return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbwn4avbt.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpbwn4avbt.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpbwn4avbt.py\", line 27,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x == y + z or y == x + z or z == x + y) and (isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int))\n    \n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x+y == z or x+z == y or y+z == x) and all(type(n) == int for n in [x,y,z])\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x + y == z or x + z == y or y + z == x) and (x == int(x) and y == int(y) and\
    \ z == int(z)):\n        return True\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0v684nk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpa0v684nk.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpa0v684nk.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ z == x + y or x == y + z or y == x + z if all(isinstance(value, int) for value\
    \ in [x, y, z]) else False\n\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1dhp8_e_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1dhp8_e_.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1dhp8_e_.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphtgved7h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphtgved7h.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphtgved7h.py\", line 22,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x+y == z or x+z == y or y+z == x) and (isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int))\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) is int and type(y) is int and type(z) is int:\n        return x+y ==\
    \ z or x+z == y or y+z == x\n    else:\n        return False\nassert any_int(5,\
    \ 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) ==\
    \ True\nassert any_int(3.6, -2.2, 2) == False\n \ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk9vl8mpd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk9vl8mpd.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpk9vl8mpd.py\", line 22,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    # this\
    \ solution uses inline conditions\n    return (x+y == z and isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int)) or \\\n           (x+z == y and\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int)) or \\\n  \
    \         (y+z == x and isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int))\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z\
    \ % 1 == 0:\n        return True\n    else:\n        return False\n\nprint(any_int(3,\
    \ -2, 1))\nprint(any_int(3.6, -2.2, 2))\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: "True\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnk6q1z73.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpnk6q1z73.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpnk6q1z73.py\", line 37,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x + y == z or x + z == y or y + z == x and x.is_integer() and y.is_integer()\
    \ and z.is_integer()\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpecvpwbl9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpecvpwbl9.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpecvpwbl9.py\", line 25,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    #if\
    \ x == y + z or y == x + z or z == x + y and type(x) == int and type(y) == int\
    \ and type(z) == int:\n    if x == y + z or y == x + z or z == x + y:\n      \
    \  return True\n    else:\n        return False\n\nassert any_int(5, 2, 7) ==\
    \ True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert\
    \ any_int(3.6, -2.2, 2) == False\nprint('Test Success')\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: "Test Success\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbgx_f3ce.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpbgx_f3ce.py\", line 44,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpbgx_f3ce.py\", line 34,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n  \
    \      return False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphw_pz19m.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmphw_pz19m.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphw_pz19m.py\", line 28,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x == y + z) or (y == x + z) or (z == x + y) and (x.is_integer() and y.is_integer()\
    \ and z.is_integer())\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7xeweuet.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7xeweuet.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp7xeweuet.py\", line 24,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ False\n\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj3cbvbfw.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpj3cbvbfw.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpj3cbvbfw.py\", line 24,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn1_vlea7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpn1_vlea7.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpn1_vlea7.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x == (y + z) or y == (x + z) or z == (x + y) and x == int(x) and y == int(y)\
    \ and z == int(z)\n\n\n\"\"\"\nGiven a string, create a function that returns\
    \ the last characters in the string. \nIf string length is less than 4 return\
    \ the whole string.\n\nExamples\nlast_three(\"hello\") \u279E \"llo\"\n\nlast_three(\"\
    hi\") \u279E \"hi\"\n\nlast_three(\"in\") \u279E \"in\"\n\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptb00yqai.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmptb00yqai.py\", line 47,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmptb00yqai.py\", line 37,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x+y==z or x+z==y or y+z==x) and (x%1==0 and y%1==0 and z%1==0):\n        return\
    \ True\n    else:\n        return False\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_j0vpbnw.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp_j0vpbnw.py\", line 51,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp_j0vpbnw.py\", line 48,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) and ((x == y + z) or (y == x\
    \ + z) or (z == x + y))\n\n\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaizuta8a.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpaizuta8a.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpaizuta8a.py\", line 32,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ True if x.is_integer() and y.is_integer() and z.is_integer() and (x == y + z\
    \ or y == x + z or z == x + y) else False\n\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpch3_ht4g.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpch3_ht4g.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpch3_ht4g.py\", line 24,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmpch3_ht4g.py\"\
    , line 19, in any_int\n    return True if x.is_integer() and y.is_integer() and\
    \ z.is_integer() and (x == y + z or y == x + z or z == x + y) else False\nAttributeError:\
    \ 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if\
    \ x == y + z or y == x + z or z == x + y:\n            return True\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n  \
    \  assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == (y + z)) or (y == (x + z)) or (z == (x + y)):\n        return True\n \
    \   return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvfs17s_z.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvfs17s_z.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpvfs17s_z.py\", line 26,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x%1==0) and (y%1==0) and (z%1==0) and ((x==y+z) or (y==x+z) or (z==x+y))\n\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsdw3j6_0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsdw3j6_0.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsdw3j6_0.py\", line 31,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x == (y + z)) or (y == (x + z)) or (z == (x + y)) and (isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int))\n\n\nassert any_int(5, 2, 7) == True\n\
    assert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6,\
    \ -2.2, 2) == False\nassert any_int(3.5, -2.2, 2) == False\nassert any_int(3.6,\
    \ -2.2, 2.1) == False\n\n\n\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpj5zth7.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpjpj5zth7.py\", line 44,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpjpj5zth7.py\", line 34,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x%1 == 0 and y%1 == 0 and z%1 == 0:\n        if x == y + z or y == x + z or\
    \ z == x + y:\n            return True\n        else:\n            return False\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsm5ya1cz.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpsm5ya1cz.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpsm5ya1cz.py\", line 37,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x==y+z) or (y==x+z) or (z==x+y) and (x%1==0) and (y%1==0) and (z%1==0)\n  \
    \      \n\nassert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\n\
    assert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\nassert\
    \ any_int(2, 4, 6) == False\nassert any_int(5, 5, 2) == True\nassert any_int(0,\
    \ 2, 5) == True\nassert any_int(5, 2, 2) == False\nassert any_int(7, 2, 5) ==\
    \ True\nassert any_int(5, 5, 5) == False\nprint('Success')\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphzjei3li.py\", line\
    \ 26, in <module>\n    assert any_int(2, 4, 6) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ int(x) + int(y) == int(z) or int(x) + int(z) == int(y) or int(y) + int(z) ==\
    \ int(x)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n \
    \   assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4l2zits.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpm4l2zits.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpm4l2zits.py\", line 32,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjn2ho7m9.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpjn2ho7m9.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpjn2ho7m9.py\", line 22,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x) and x.is_integer() and y.is_integer()\
    \ and z.is_integer()\n \n \n \nassert any_int(5, 2, 7)\nassert not any_int(3,\
    \ 2, 2)\nassert any_int(3, -2, 1)\nassert not any_int(3.6, -2.2, 2)\nassert any_int(3,\
    \ -2, -1)\nassert not any_int(0, 0, 2)\nassert any_int(2, -2, 0)\nassert not any_int(5,\
    \ 2, 0)\nassert any_int(5, 2, 5)\nassert not any_int(3, 2, 7)\nassert any_int(3,\
    \ 3, 3)\nassert not any_int(3, -3, 6)\nassert any_int(3, 6, 0)\nassert not any_int(0,\
    \ 6, 0)\nassert any_int(4, -4, -8)\nassert not any_int(4, -4, -6)\nassert any_int(0,\
    \ 1, -1)\nassert not any_int(2, 3, 2)\nassert any_int(0, 0, 0)\nassert not any_int(0,\
    \ 0, 1)\nassert any_int(1, 1, 0)\nassert not any_int(0, 1, 1)\nassert any_int(2,\
    \ 0, 2)\nassert not any_int(2, 0, 1)\nassert any_int(2, 2, 4)\nassert not any_int(1,\
    \ 2, 4)\nassert any_int(3, 1, 4)\nassert not any_int(3, 1, 5)\nassert any_int(2,\
    \ 0, 2)\nassert not any_int(2, 0, 1)\nassert any_int(5, 5, 5)\nassert not any_int(0,\
    \ 2, 3)\nassert any_int(5, 5, 0)\nassert not any_int(5, 5, 1)\nassert any_int(1,\
    \ 5, 6)\nassert not any_int(\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpmqc5_i_k.py\", line 59\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpakvhqz81.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpakvhqz81.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpakvhqz81.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x.is_integer() and y.is_integer() and z.is_integer():\n        if x + y == z\
    \ or x + z == y or y + z == x:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ggwafn8.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp2ggwafn8.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp2ggwafn8.py\", line 29,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmp2ggwafn8.py\"\
    , line 19, in any_int\n    if x.is_integer() and y.is_integer() and z.is_integer():\n\
    AttributeError: 'int' object has no attribute 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n   \
    \ assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvnzkzgtk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpvnzkzgtk.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpvnzkzgtk.py\", line 24,\
    \ in check\n    assert candidate(2.5, 2, 3) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x + y == z or x + z == y or y + z == x\n\nprint(any_int(5, 2, 7))\nprint(any_int(3,\
    \ 2, 2))\nprint(any_int(3, -2, 1))\nprint(any_int(3.6, -2.2, 2))\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwm546rv.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpfwm546rv.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpfwm546rv.py\", line 28,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0):\n        return True\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprb6c02lh.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmprb6c02lh.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmprb6c02lh.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z or x + z == y or y + z == x) and isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (int(x) + int(y) == int(z)) or (int(x) + int(z) == int(y)) or (int(y) + int(z)\
    \ == int(x))\n    \nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3,\
    \ -2, 1))\nprint(any_int(3.6, -2.2, 2))\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_6fv46d.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpv_6fv46d.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpv_6fv46d.py\", line 36,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc1b2k53r.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc1b2k53r.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpc1b2k53r.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return\
    \ x + y == z or x + z == y or y + z == x\n    else:\n        return False\n\n\n\
    assert any_int(5, 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3,\
    \ -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\nassert any_int(3.6, -2.2,\
    \ 2) == False\nassert any_int(8, 2, 4) == True\nassert any_int(11, 3, 5) == True\n\
    assert any_int(11, 3, 5) == True\nassert any_int(11, 3, 5) == True\nassert any_int(11,\
    \ 3, 5) == True\nassert any_int(11, 3, 5) == True\nassert any_int(11, 3, 5) ==\
    \ True\n\nprint('Success')\ndef check(candidate):\n    assert candidate(2, 3,\
    \ 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp61e6c5dt.py\", line\
    \ 30, in <module>\n    assert any_int(8, 2, 4) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpybke7ltm.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpybke7ltm.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpybke7ltm.py\", line 23,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x.is_integer() and y.is_integer() and z.is_integer() and x+y==z or y+z==x or\
    \ x+z==y\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n   \
    \ assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzueq672.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqzueq672.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpqzueq672.py\", line 22,\
    \ in check\n    assert candidate(2, 3, 1) == True\n  File \"/tmp/tmpqzueq672.py\"\
    , line 19, in any_int\n    return x.is_integer() and y.is_integer() and z.is_integer()\
    \ and x+y==z or y+z==x or x+z==y\nAttributeError: 'int' object has no attribute\
    \ 'is_integer'\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x + y == z or x + z == y or y + z == x\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk54wglby.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpk54wglby.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpk54wglby.py\", line 24,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if\
    \ x + y == z or x + z == y or y + z == x:\n            return True\n        else:\n\
    \            return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    x =\
    \ int(x)\n    y = int(y)\n    z = int(z)\n    if x + y == z or x + z == y or y\
    \ + z == x:\n        return True\n    else:\n        return False\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppy271c2w.py\", line\
    \ 269, in <module>\n    test_check()\n  File \"/tmp/tmppy271c2w.py\", line 267,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmppy271c2w.py\", line 264,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n\n\"\"\"\nWrite a function\
    \ to multiply all values in a list.\n\nExamples\nmultiply_list([2, 2, 2]) \u279E\
    \ 8\n\nmultiply_list([1, 2, 3, 4, 5]) \u279E 120\n\nmultiply_list([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]) \u279E 3628800\n\"\"\"\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or x == y - z or y == x + z or y == x - z or z == x + y or z == x\
    \ - y:\n        return True\n    return False\nassert any_int(5, 2, 7) == True\n\
    assert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6,\
    \ -2.2, 2) == False\n \n \ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdswyigar.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpdswyigar.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpdswyigar.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (type(x) is int and type(y) is\
    \ int and type(z) is int)\n\nassert any_int(5, 2, 7) == True\nassert any_int(3,\
    \ 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2,\
    \ 2) == False\n\n \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (int(x) + int(y) == int(z)) or (int(x) + int(z) == int(y)) or (int(y) + int(z)\
    \ == int(x)):\n        return True\n    else:\n        return False\n    \n  \
    \  pass\n    \n    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppp6whbp3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmppp6whbp3.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmppp6whbp3.py\", line 37,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    # Your\
    \ code here\n    pass\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvgdt04qi.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvgdt04qi.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpvgdt04qi.py\", line 24,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or y == x + z or z == x + y:\n        return True\n    else:\n  \
    \      return False\n\ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj52p1034.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpj52p1034.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpj52p1034.py\", line 27,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x + y == z or x + z == y or y + z == x) and (type(x) == int and type(y) ==\
    \ int and type(z) == int):\n        return True\n    else:\n        return False\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x+y == z or x+z == y or y+z == x:\n        return True\n    else:\n        return\
    \ False\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc1wxhgvz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpc1wxhgvz.py\", line 36,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpc1wxhgvz.py\", line 26,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    # return\
    \ x + y == z or x + z == y or y + z == x if x == int(x) and y == int(y) and z\
    \ == int(z) else False\n    # return (x == int(x) and y == int(y) and z == int(z))\
    \ and (x + y == z or x + z == y or y + z == x)\n    # return all([x == int(x),\
    \ y == int(y), z == int(z)]) and (x + y == z or x + z == y or y + z == x)\n  \
    \  return all([x == int(x), y == int(y), z == int(z)]) and any([x + y == z, x\
    \ + z == y, y + z == x])\n\n\n    # return all([x == int(x), y == int(y), z ==\
    \ int(z)]) and (x + y == z or x + z == y or y + z == x)\n    # return all([x ==\
    \ int(x), y == int(y), z == int(z)]) and any([x + y == z, x + z == y, y + z ==\
    \ x])\n    \n    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnf7c8hn4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpnf7c8hn4.py\", line 43,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpnf7c8hn4.py\", line 40,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x == y + z or y == x + z or z == x + y and x == int(x) and y == int(y) and z\
    \ == int(z)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhnmcag0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmphhnmcag0.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphhnmcag0.py\", line 25,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x % 1 == 0 and y % 1 == 0 and z % 1 == 0) and (x == y + z or y == x + z or\
    \ z == x + y):\n        return True\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mda9d5v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp_mda9d5v.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp_mda9d5v.py\", line 35,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    x =\
    \ int(x)\n    y = int(y)\n    z = int(z)\n    return x + y == z or x + z == y\
    \ or y + z == x\n\nassert any_int(2, 3, 5) == True\nassert any_int(2, 3, 4) ==\
    \ False\nassert any_int(2, 3, -5) == True\nassert any_int(2, 3, 1.5) == False\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpadz_tb8m.py\", line\
    \ 26, in <module>\n    assert any_int(2, 3, -5) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x == y + z) or (y == x + z) or (z == x + y):\n        return True\n    else:\n\
    \        return False\n\n\nassert any_int(5, 2, 7) == True\nassert any_int(3,\
    \ 2, 2) == False\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2,\
    \ 2) == False\n\n \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxyk4j4n.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmprxyk4j4n.py\", line 44,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmprxyk4j4n.py\", line 34,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x == y + z or y == x + z or z == x + y if (\n        x % 1 == 0 and y % 1 ==\
    \ 0 and z % 1 == 0\n    ) else False\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjettvqh2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpjettvqh2.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpjettvqh2.py\", line 32,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x == y + z or x == y - z or y == x + z or y == x - z or z == x + y or z == x\
    \ - y:\n        return True\n    else:\n        return False\n\nassert any_int(5,\
    \ 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) ==\
    \ True\nassert any_int(3.6, -2.2, 2) == False\nassert any_int(8, 2, 4) == True\n\
    assert any_int(12, 9, 3) == True\nassert any_int(12, 8, 7) == False\nprint('Sua\
    \ solu\xE7\xE3o foi executada com sucesso! Parab\xE9ns!')\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptl9qga84.py\", line\
    \ 28, in <module>\n    assert any_int(8, 2, 4) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ ((x+y==z or x+z==y or y+z==x) and (x//1==x and y//1==y and z//1==z))\n\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqzevty_.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcqzevty_.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpcqzevty_.py\", line 31,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x + y == z) or (x + z == y) or (y + z == x):\n        return True\n    else:\n\
    \        return False\n    \n    \n    \n\nprint(any_int(5, 2, 7))\n\nprint(any_int(3,\
    \ 2, 2))\n\nprint(any_int(3, -2, 1))\n\nprint(any_int(3.6, -2.2, 2))\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: "True\nFalse\nTrue\nFalse\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwsqnbr8.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpnwsqnbr8.py\", line 47,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpnwsqnbr8.py\", line 37,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpltkrw0n7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpltkrw0n7.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpltkrw0n7.py\", line 32,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    pass\n\
    def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp70ztfiz4.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp70ztfiz4.py\", line 33,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp70ztfiz4.py\", line 21,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ int(x) == x and int(y) == y and int(z) == z and (x + y == z or x + z == y or\
    \ y + z == x)\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuv2iix6t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuv2iix6t.py\", line 34,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpuv2iix6t.py\", line 31,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (type(x) == int and type(y) == int and type(z) == int):\n        if (x == y\
    \ + z or y == x + z or z == x + y):\n            return True\n        else:\n\
    \            return False\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ (x+y==z or x+z==y or y+z==x) and (x%1==0 and y%1==0 and z%1==0):\n        return\
    \ True\n    else:\n        return False\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3k1cz777.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp3k1cz777.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp3k1cz777.py\", line 34,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ all(map(lambda x: x % 1 == 0, [x, y, z])) and (x + y == z or x + z == y or y\
    \ + z == x)\n\n\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4lv50aoq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4lv50aoq.py\", line 37,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp4lv50aoq.py\", line 34,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x+y==z or x+z==y or y+z==x) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 ==\
    \ 0)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps09azh7n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmps09azh7n.py\", line 35,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmps09azh7n.py\", line 32,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ True if type(x) == int and type(y) == int and type(z) == int and (x + y == z\
    \ or x + z == y or y + z == x) else False\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n  \
    \      return False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fewgk61.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8fewgk61.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8fewgk61.py\", line 28,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n  \
    \      return False\n    \n    \n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa8m5xmxh.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpa8m5xmxh.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpa8m5xmxh.py\", line 31,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ x + y == z or x + z == y or y + z == x\n\nany_int(5, 2, 7)\n\nassert any_int(5,\
    \ 2, 7)\nassert not any_int(3, 2, 2)\nassert any_int(3, -2, 1)\nassert not any_int(3.6,\
    \ -2.2, 2)\n\nassert any_int(1, 5, 5)\nassert not any_int(2, 3, 3)\nassert any_int(4,\
    \ -3, -3)\nassert not any_int(0, 5, 5)\nassert any_int(5, -5, -5)\nassert not\
    \ any_int(2, 2, 3)\nassert any_int(5, 2, 5)\nassert not any_int(2, -5, -5)\nassert\
    \ any_int(2, 2, -2)\nassert not any_int(4, 5, 2)\nassert any_int(1, 1, 2)\nassert\
    \ not any_int(3, 5, 5)\nassert any_int(2, 1, 3)\nassert not any_int(2, 2, 2)\n\
    assert any_int(2, -2, -2)\nassert not any_int(5, 5, -3)\nassert any_int(1, 1,\
    \ 0)\nassert not any_int(1, 1, 1)\nassert any_int(2, 5, 3)\nassert not any_int(2,\
    \ 2, 5)\nassert any_int(0, 2, 2)\nassert not any_int(5, 5, 5)\nassert any_int(5,\
    \ -5, 0)\nassert not any_int(2, 5, -2)\nassert any_int(0, 2, -2)\nassert not any_int(0,\
    \ 0, 0)\nassert any_int(5, 5, -5)\nassert not any_int(3, 5, 5)\nassert any_int(5,\
    \ 2, -3)\nassert not any_int(5, 5, -5)\nassert any_int(2, -2, 4)\nassert not any_int(2,\
    \ 3, 3)\nassert any_int\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8xzmj3u7.py\", line\
    \ 28, in <module>\n    assert any_int(1, 5, 5)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitjvdxqe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpitjvdxqe.py\", line 33,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpitjvdxqe.py\", line 30,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ x.is_integer() and y.is_integer() and z.is_integer():\n        if x == y + z\
    \ or y == x + z or z == x + y:\n            return True\n        else:\n     \
    \       return False\n    else:\n        return False\n \n\nassert any_int(5,\
    \ 2, 7) == True\nassert any_int(3, 2, 2) == False\nassert any_int(3, -2, 1) ==\
    \ True\nassert any_int(3.6, -2.2, 2) == False\nassert any_int(3.6, -2.2, 2) ==\
    \ False\nassert any_int(5, 7, 2) == True\nassert any_int(6, 2, -2) == True\nassert\
    \ any_int(5, 2, 2) == False\nassert any_int(6, 2, 3) == False\nassert any_int(5,\
    \ 7, 2) == True\nassert any_int(6, 2, -2) == True\nassert any_int(3, -2, 1) ==\
    \ True\nassert any_int(3.6, -2.2, 2) == False\nassert any_int(7, -2, 2) == True\n\
    assert any_int(6, 2, -2) == True\nassert any_int(6, 5, 1) == True\nassert any_int(7,\
    \ -2, 2) == True\nassert any_int(6, 2, -2) == True\nassert any_int(6, 5, 1) ==\
    \ True\nassert any_int(3, -2, 1) == True\nassert any_int(3.6, -2.2, 2) == False\n\
    assert any_int(1, 2, 3) == False\nassert any_int(2, 3, 1) == False\nassert any_int(3,\
    \ 1, 2) == False\nassert any_int(1, 3, 2) == False\nassert any_int(2, 1, 3) ==\
    \ False\nassert any_int(3, 2, 1) == False\nassert any_int(4, 2, 1) == False\n\
    assert any_int(2, 4, 1) == False\nassert any_int(1, 4,\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpl05hy8hn.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    try:\n\
    \        if x == y + z or y == x + z or z == x + y:\n            return True\n\
    \        return False\n    except TypeError:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah8zx4t7.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpah8zx4t7.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpah8zx4t7.py\", line 30,\
    \ in check\n    assert candidate(1.5, 5, 3.5) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    if\
    \ type(x) == int and type(y) == int and type(z) == int:\n        return True\n\
    \    else:\n        return False\n\n\n\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7769kh4.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpm7769kh4.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpm7769kh4.py\", line 32,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    a=int(x)\n\
    \    b=int(y)\n    c=int(z)\n    if x+y==c or x+c==y or c+y==x:\n        return\
    \ True\n    else:\n        return False\n        \nany_int(5, 2, 7)\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnxoprdfu.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpnxoprdfu.py\", line 41,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpnxoprdfu.py\", line 38,\
    \ in check\n    assert candidate(3.0, 4, 7) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279E True\n\
    \    \n    any_int(3, 2, 2) \u279E False\n\n    any_int(3, -2, 1) \u279E True\n\
    \    \n    any_int(3.6, -2.2, 2) \u279E False\n  \n\n    \n    \"\"\"\n    s =\
    \ x + y + z\n    sum1 = x + y\n    sum2 = x + z\n    sum3 = y + z\n    if s /\
    \ 3 == int(s / 3):\n        if sum1 == int(sum1) or sum2 == int(sum2) or sum3\
    \ == int(sum3):\n            return True\n        else:\n            return False\n\
    \    else:\n        return False\n        \n\nany_int(5, 2, 7)\nany_int(3, 2,\
    \ 2)\nany_int(3, -2, 1)\nany_int(3.6, -2.2, 2)\n\n\ndef check(candidate):\n  \
    \  assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp99dh3ga0.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp99dh3ga0.py\", line 51,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp99dh3ga0.py\", line 43,\
    \ in check\n    assert candidate(4, 2, 2) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
