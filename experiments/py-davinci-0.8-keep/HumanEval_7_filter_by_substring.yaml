name: HumanEval_7_filter_by_substring
language: py
prompt: "from typing import List\n\ndef filter_by_substring(strings: List[str], substring:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>>\
  \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd',\
  \ 'array']\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA',\
  \ 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
  \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
  \    check(filter_by_substring)\n\ntest_check()\n"
completions: ["    return [s for s in strings if substring in s]\n", "    return [s\
    \ for s in strings if substring in s]\n", "    return [string for string in strings\
    \ if substring in string]\n", "    return [s for s in strings if substring in\
    \ s]\n", "    return [i for i in strings if substring in i]\n", "    return [string\
    \ for string in strings if substring in string]\n", "    return [s for s in strings\
    \ if substring in s]\n", '    return [string for string in strings if substring
    in string]', '    return [s for s in strings if substring in s]', '    return
    [string for string in strings if substring in string]', "    return [string for\
    \ string in strings if substring in string]\n", '    return [x for x in strings
    if substring in x]', "    # strings_with_substring = []\n    # for s in strings:\n\
    \    #     if substring in s:\n    #         strings_with_substring.append(s)\n\
    \    # return strings_with_substring\n    return [s for s in strings if substring\
    \ in s]\n", "    return [string for string in strings if substring in string]\n",
  '    return [s for s in strings if substring in s]', '    return [string for string
    in strings if substring in string]', "    filtered_list = []\n    for string in\
    \ strings:\n        if substring in string:\n            filtered_list.append(string)\n\
    \    return filtered_list\n\n", "    # TODO: Replace this line with your code\n\
    \    return list(filter(lambda s: substring in s, strings))\n", "    return [s\
    \ for s in strings if substring in s]\n", "    return [string for string in strings\
    \ if substring in string]\n", '    return [s for s in strings if substring in
    s]', "    return [string for string in strings if substring in string]\n", " \
    \   return [s for s in strings if substring in s]\n", "    return [s for s in\
    \ strings if substring in s]\n", "    print('filtering strings {} by substring\
    \ {}'.format(strings, substring))\n    return [string for string in strings if\
    \ substring in string]", "    return [string for string in strings if substring\
    \ in string]\n", "    return [string for string in strings if substring in string]\n",
  "    # List comprehension\n    return [string for string in strings if substring\
    \ in string]\n", "    return [string for string in strings if substring in string]\n",
  "    return [ string for string in strings if substring in string ]\n", '    return
    [s for s in strings if substring in s]', '    return [string for string in strings
    if substring in string]', "    return [word for word in strings if substring in\
    \ word]\n", '    return [word for word in strings if substring in word]', "  \
    \  res = [i for i in strings if substring in i]\n    return res", "    return\
    \ [x for x in strings if substring in x]\n\nprint(filter_by_substring([], 'a'))\n\
    print(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'))", "    return\
    \ [item for item in strings if substring in item]\n", "    out = []\n    for s\
    \ in strings:\n        if substring in s:\n            out.append(s)\n    return\
    \ out", "    # your code here\n    return [string for string in strings if substring\
    \ in string]\n\n", "    return [string for string in strings if substring in string]\n",
  "    return [s for s in strings if substring in s]\n", "    strings_filtered = []\n\
    \    for string in strings:\n        if substring in string:\n            strings_filtered.append(string)\n\
    \    return strings_filtered\n", "    return [string for string in strings if\
    \ substring in string]\n", '    return [string for string in strings if substring
    in string]', '    return [s for s in strings if substring in s]', "    return\
    \ [string for string in strings if substring in string]\n\nprint(filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a'))", "    return [s for s in strings if substring\
    \ in s]\n", "    lst_filtered = []\n    for word in strings:\n        if substring\
    \ in word:\n            lst_filtered.append(word)\n    return lst_filtered\n",
  "    return [string for string in strings if substring in string]\n", "    return\
    \ [s for s in strings if substring in s]\n", "    return [s for s in strings if\
    \ substring in s]\n", '    return [x for x in strings if substring in x]', '    return
    [s for s in strings if substring in s]', "    return [string for string in strings\
    \ if substring in string]\n", "    return [string for string in strings if substring\
    \ in string]\n", '    return [s for s in strings if substring in s]', "    return\
    \ [string for string in strings if substring in string]\n", '    return [s for
    s in strings if substring in s]', "    return [string for string in strings if\
    \ substring in string]\n\nimport unittest\n", "    # return list(filter(lambda\
    \ x: substring in x, strings))\n    return [word for word in strings if substring\
    \ in word]\n\n", "    return [string for string in strings if substring in string]\n",
  "    #strings.sort()\n    return [word for word in strings if substring in word]\n\
    \n", "    return [string for string in strings if substring in string]\n", " \
    \   return [s for s in strings if substring in s]\n", "    strings = list(filter(lambda\
    \ x: substring in x, strings))\n    return strings\n", "    if strings is None:\n\
    \        return None\n    list_str = list()\n    for s in strings:\n        if\
    \ substring in s:\n            list_str.append(s)\n    return list_str\n", " \
    \   lst = []\n    for x in strings:\n        if substring in x:\n            lst.append(x)\n\
    \    return lst\n\n", "    return [s for s in strings if substring in s]\n", " \
    \   return [x for x in strings if substring in x]\n", '    return [s for s in
    strings if substring in s]', "    return [ string for string in strings if substring\
    \ in string ]\n", "    return [s for s in strings if substring in s]\n", "   \
    \ return [s for s in strings if substring in s]\n", "    if strings == [] or substring\
    \ == \"\":\n        return []\n    return [s for s in strings if substring in\
    \ s]\n", "    if not strings:\n        return []\n    return [string for string\
    \ in strings if substring in string]", "    return [s for s in strings if substring\
    \ in s]\n", "    return [s for s in strings if substring in s]\n", "    return\
    \ [string for string in strings if substring in string]\n", '    return [s for
    s in strings if substring in s]', '    return [word for word in strings if substring
    in word]', '    return [string for string in strings if substring in string]',
  '    return [s for s in strings if substring in s]', "    return [string for string\
    \ in strings if substring in string]\n", '    return [s for s in strings if substring
    in s]', "    #### uncomment below to solve the problem ####\n    # return [s for\
    \ s in strings if substring in s]\n    #### uncomment above to solve the problem\
    \ ####\n\n", "    return [s for s in strings if substring in s]\n", "    substring_length\
    \ = len(substring)\n    if substring_length == 0:\n        return strings\n  \
    \  return [s for s in strings if substring in s]\n", "    output = []\n    for\
    \ i in strings:\n        if substring in i:\n            output.append(i)\n  \
    \  return output\n", "    return [string for string in strings if substring in\
    \ string]\n", '    return [s for s in strings if substring in s]', "    return\
    \ [s for s in strings if substring in s]\n", "    return [s for s in strings if\
    \ substring in s]\n", '    return [s for s in strings if substring in s]', " \
    \   if strings == []:\n        return []\n    else:\n        return [x for x in\
    \ strings if substring in x]\n", '    return [string for string in strings if
    substring in string]', "    return [str for str in strings if substring in str]\n",
  '    return [string for string in strings if substring in string]', "    pass\n",
  "    return [s for s in strings if substring in s]\n", '    return [s for s in strings
    if substring in s]', "    matches = []\n    for string in strings:\n        if\
    \ substring in string:\n            matches.append(string)\n    return matches\n",
  "    filtered_list = []\n    for s in strings:\n        if substring in s:\n   \
    \         filtered_list.append(s)\n    return filtered_list\n", "    return [word\
    \ for word in strings if substring in word]\n", "    filtered_strings = []\n \
    \   for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n\
    \    return filtered_strings\n\n@pytest.mark.parametrize('input_strings, substring,\
    \ expected_output', [\n    ([], 'a', []),\n    (['abc', 'bacd', 'cde', 'array'],\
    \ 'a', ['abc', 'bacd', 'array']),\n])", "    filtered_list = []\n    for item\
    \ in strings:\n        if substring in item:\n            filtered_list.append(item)\n\
    \    return filtered_list\n\n", "    return [string for string in strings if substring\
    \ in string]\n", "    lst = [i for i in strings if substring in i]\n    return\
    \ lst\n", "    return [string for string in strings if substring in string]\n",
  "    return [x for x in strings if substring in x]\n", "    return [s for s in strings\
    \ if substring in s]\n", '    return [string for string in strings if substring
    in string]', "    out = []\n    for s in strings:\n        if substring in s:\n\
    \            out.append(s)\n    return out\n", "    return [st for st in strings\
    \ if substring in st]\n", '    return [s for s in strings if substring in s]',
  "    return [s for s in strings if substring in s]\n", "    return [string for string\
    \ in strings if substring in string]\n", "    # Task 1: Implement this function\n\
    \    i = 0\n    while i < len(strings):\n        if substring not in strings[i]:\n\
    \            strings.pop(i)\n        else:\n            i += 1\n    return strings\n",
  "    return [s for s in strings if substring in s]\n", "    return [\n        string\
    \ for string in strings if substring in string\n    ]\n", "    new_list = []\n\
    \    for string in strings:\n        if substring in string:\n            new_list.append(string)\n\
    \    return new_list\n    \n    ", "    if substring is None:\n        return\
    \ strings\n    else:\n        return [s for s in strings if substring in s]",
  "    return [string for string in strings if substring in string]\n", "    return\
    \ [i for i in strings if substring in i]\n", "    return [x for x in strings if\
    \ substring in x]\n", '    return [string for string in strings if substring in
    string]', '    return [string for string in strings if substring in string]',
  '    return [st for st in strings if substring in st]', "    filtered_strings =\
    \ []\n    for string in strings:\n        if substring in string:\n          \
    \  filtered_strings.append(string)\n    return filtered_strings\n\n\n", "    return\
    \ [string for string in strings if substring in string]\n", "    return [string\
    \ for string in strings if substring in string]\n", "    if strings:\n       \
    \ return [string for string in strings if substring in string]\n    else:\n  \
    \      return []", '    return [string for string in strings if substring in string]',
  "    return [string for string in strings if substring in string]\n", "    return\
    \ [string for string in strings if substring in string]\n", '    return [string
    for string in strings if substring in string]', '    return [string for string
    in strings if substring in string]', '    return [s for s in strings if substring
    in s]', '    return [string for string in strings if substring in string]', '    return
    [string for string in strings if substring in string]', "    filtered_strings\
    \ = []\n    for string in strings:\n        if substring in string:\n        \
    \    filtered_strings.append(string)\n    return filtered_strings\n", "    return\
    \ [word for word in strings if substring in word]\n", "    strings_list = []\n\
    \    for i in strings:\n        if substring in i:\n            strings_list.append(i)\n\
    \    return strings_list\n\nprint(filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'a'))", "    output = []\n    for string in strings:\n        if substring in\
    \ string:\n            output.append(string)\n    return output\n", "    return\
    \ [s for s in strings if substring in s]\n", "    return [string for string in\
    \ strings if substring in string]\n", '    return [s for s in strings if substring
    in s]', '    return [s for s in strings if substring in s]', "    return [string\
    \ for string in strings if substring in string]\n", "    return [s for s in strings\
    \ if substring in s]\n", "    return [s for s in strings if substring in s]\n",
  '    return [string for string in strings if substring in string]', "    return\
    \ [s for s in strings if substring in s]\n", "    return [string for string in\
    \ strings if substring in string]\n", "    return [s for s in strings if substring\
    \ in s]\n", "    return [string for string in strings if substring in string]\n",
  "    filtered_strings = []\n    for string in strings:\n        if substring in\
    \ string:\n            filtered_strings.append(string)\n    return filtered_strings\n",
  "    return [s for s in strings if substring in s]\n", "    return [s for s in strings\
    \ if substring in s]\n", "    return [string for string in strings if substring\
    \ in string]\n", "    return [string for string in strings if substring in string]\n",
  "    return [string for string in strings if substring in string]\n", "    return\
    \ [item for item in strings if substring in item]\n", '    return [string for
    string in strings if substring in string]', '    return [x for x in strings if
    substring in x]', '    return [s for s in strings if substring in s]', "    return\
    \ [i for i in strings if substring in i]\n", "    return [string for string in\
    \ strings if substring in string]\n", "    if not strings:\n        return []\n\
    \    else:\n        new_strings = [i for i in strings if substring in i]\n   \
    \     return new_strings\n", "    #raise NotImplementedError\n    pass\n", " \
    \   return [string for string in strings if substring in string]\n", '    return
    [string for string in strings if substring in string]', "    return [s for s in\
    \ strings if substring in s]\n", '    return [s for s in strings if substring
    in s]', "    return [string for string in strings if substring in string]\n  \
    \  \n    ", "    return [s for s in strings if substring in s]\n", "    return\
    \ [s for s in strings if substring in s]\n", "    return [s for s in strings if\
    \ substring in s]\n", '    return [string for string in strings if substring in
    string]', "    return [str for str in strings if substring in str]\n", "    return\
    \ [i for i in strings if substring in i]\n", '    return [s for s in strings if
    substring in s]', "    filt = [string for string in strings if substring in string]\n\
    \    return filt\n\nfilter_by_substring(['aa', 'bb', 'ac'], 'a')\n", '    return
    [string for string in strings if substring in string]', "    return [s for s in\
    \ strings if substring in s]\n\nprint(filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'a'))", "    # TODO: implement this function\n    ret = []\n    for\
    \ s in strings:\n        if substring in s:\n            ret.append(s)\n    return\
    \ ret\n\n", '    return [str for str in strings if substring in str]', '    return
    [s for s in strings if substring in s]', "    return [string for string in strings\
    \ if substring in string]\n", "    return [i for i in strings if substring in\
    \ i]\n", "    output = []\n    for string in strings:\n        if substring in\
    \ string:\n            output.append(string)\n    return output\n", "    substring_set\
    \ = set(substring)\n    return [s for s in strings if substring_set & set(s)]\n",
  "    return [s for s in strings if substring in s]\n", "    if len(strings) == 0:\n\
    \        return []\n    res: List[str] = []\n    for s in strings:\n        if\
    \ substring in s:\n            res.append(s)\n    return res", '    return [x
    for x in strings if substring in x]', "    return [string for string in strings\
    \ if substring in string]\n", "    # solution 1\n    # filtered_strings = []\n\
    \    # for string in strings:\n    #     if substring in string:\n    #      \
    \   filtered_strings.append(string)\n    # return filtered_strings\n\n    # solution\
    \ 2\n    # return [string for string in strings if substring in string]\n\n  \
    \  # solution 3\n    return list(filter(lambda s: substring in s, strings))\n\n\
    \n", "    return [word for word in strings if substring in word]\n", "    out\
    \ = []\n    for s in strings:\n        if substring in s:\n            out.append(s)\n\
    \    return out\n", "    return [string for string in strings if substring in\
    \ string]\n", '    return [s for s in strings if substring in s]']
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
