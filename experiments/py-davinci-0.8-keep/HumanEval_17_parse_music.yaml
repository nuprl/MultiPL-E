name: HumanEval_17_parse_music
language: py
prompt: "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n\
  \    \"\"\" Input to this function is a string representing musical notes in a special\
  \ ASCII format.\n    Your task is to parse this string and return list of integers\
  \ corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n\
  \    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n\
  \    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .|\
  \ .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == []\n    assert candidate('o\
  \ o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n\
  \    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert\
  \ candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n\ndef test_check():\n\
  \    check(parse_music)\n\ntest_check()\n"
completions: ["    output = []\n    for x in music_string.split(' '):\n        if\
    \ x == 'o':\n            output.append(4)\n        elif x == 'o|':\n         \
    \   output.append(2)\n        elif x == '.|':\n            output.append(1)\n\
    \    return output\n", "    notes = ['o', 'o|', '.|']\n    beats = [4, 2, 1]\n\
    \    note_to_beat = dict(zip(notes, beats))\n    return [note_to_beat[note] for\
    \ note in music_string.split()]\n\n", "    # replace this for solution\n    pass\n\
    \n", "    return None\n\n", "    note_values = {'o': 4, 'o|': 2, '.|': 1}\n  \
    \  return [note_values[note] for note in music_string.split()]\n\n", "    music_string\
    \ = music_string.split()\n    beat_list = []\n    for note in music_string:\n\
    \        if note == 'o':\n            beat_list.append(4)\n        elif note ==\
    \ 'o|':\n            beat_list.append(2)\n        elif note == '.|':\n       \
    \     beat_list.append(1)\n    return beat_list\n\n", "    index = 0\n    music_length\
    \ = []\n    while index < len(music_string):\n        if music_string[index] ==\
    \ 'o':\n            if index+1 < len(music_string) and music_string[index+1] ==\
    \ '|':\n                music_length.append(2)\n                index += 2\n \
    \           else:\n                music_length.append(4)\n                index\
    \ += 1\n        elif music_string[index] == '.':\n            if index+1 < len(music_string)\
    \ and music_string[index+1] == '|':\n                music_length.append(1)\n\
    \                index += 2\n            else:\n                raise ValueError(\"\
    Invalid string\")\n        else:\n            raise ValueError(\"Invalid string\"\
    )\n    return music_length\n", "    note_length = {'o': 4, 'o|': 2, '.|': 1}\n\
    \    beats = music_string.replace('|', '').split()\n    return [note_length[beat]\
    \ for beat in beats]\n", "    f2b = {\n        'o': 4,\n        'o|': 2,\n   \
    \     '.|': 1\n    }\n    return [f2b[x] for x in music_string.split()]\n", " \
    \   beat_count = 0\n    note_beats = []\n    for index, char in enumerate(music_string):\n\
    \        if char == 'o':\n            beat_count += 4\n        elif char == 'o|':\n\
    \            beat_count += 2\n        elif char == '.|':\n            beat_count\
    \ += 1\n        if char == ' ':\n            note_beats.append(beat_count)\n \
    \           beat_count = 0\n        if index == len(music_string) - 1:\n     \
    \       note_beats.append(beat_count)\n    return note_beats\n", "    return []\n\
    \n", "    beats = []\n    for note in music_string.split():\n        beats.append(4\
    \ if note == 'o' else 2 if note == 'o|' else 1)\n    return beats\n", "    dic\
    \ = {'o': 4, 'o|': 2, '.|': 1}\n    # your code goes here\n    return [dic[x]\
    \ for x in music_string.split()]\n\n", "    music_list = music_string.split()\n\
    \    beats_list = []\n    for i in music_list:\n        beats_list.append(int(i[:-1]))\n\
    \    return beats_list\n", "    list1 = []\n    for item in music_string.split('\
    \ '):\n        if item == 'o':\n            list1.append(4)\n        elif item\
    \ == 'o|':\n            list1.append(2)\n        elif item == '.|':\n        \
    \    list1.append(1)\n    return list1\n", "    music_dict = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    pass\n    lst_str = []\n    lst_int = []\n    for char in music_string:\n\
    \        if char != ' ':\n            lst_str.append(char)\n        else:\n  \
    \          lst_str.append(' ')\n            temp = ''.join(lst_str)\n        \
    \    lst_int.append(music_dict[temp])\n            lst_str = []\n    temp = ''.join(lst_str)\n\
    \    lst_int.append(music_dict[temp])\n    return lst_int\n\n", "    beats = {'o':\
    \ 4, 'o|': 2, '.|': 1}\n    return [beats[char] for char in music_string.split()]\n\
    \n", "    ret = []\n    for x in music_string.split(' '):\n        if x == 'o':\n\
    \            ret.append(4)\n        elif x == 'o|':\n            ret.append(2)\n\
    \        elif x == '.|':\n            ret.append(1)\n    return ret\n", "    notes\
    \ = list(music_string)\n    out = []\n    for x in notes:\n        if x == 'o':\n\
    \            out.append(4)\n        elif x == 'o|':\n            out.append(2)\n\
    \        elif x == '.|':\n            out.append(1)\n    return out\n", "    music_string\
    \ = music_string.replace('o', 'o ')\n    music_string = music_string.replace('|',\
    \ '| ')\n    music_string = music_string.replace('.', '. ')\n    music_string\
    \ = music_string.split()\n    beats = []\n    for m in music_string:\n       \
    \ if m == 'o':\n            beats.append(4)\n        elif m == 'o|':\n       \
    \     beats.append(2)\n        elif m == '.|':\n            beats.append(1)\n\
    \    return beats\n", "    return [4 if letter == 'o' else 2 if letter == 'o|'\
    \ else 1 for letter in music_string.split()]\n\n", "    # Note that this is pure\
    \ string parsing, so no knowledge about music is required.\n    # You can solve\
    \ this problem using finite automata or using regular expressions.\n    pass",
  "    pass\n\nparse_music('o o| .| o| o| .| .| .| .| o o')", "    assert music_string,\
    \ \"Empty string was passed as input\"\n    res = []\n    notes = music_string.split('\
    \ ')\n    for note in notes:\n        if note == 'o':\n            res.append(4)\n\
    \        elif note == 'o|':\n            res.append(2)\n        elif note == '.|':\n\
    \            res.append(1)\n        else:\n            raise ValueError(\"Input\
    \ note not recognized\")\n    return res\n", "    list_result = []\n    music_string\
    \ = music_string.split(' ')\n    d = {'o': 4, 'o|': 2, '.|': 1}\n    for i in\
    \ music_string:\n        list_result.append(d[i])\n    return list_result\n\n",
  "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[beat] for beat in music_string.split()]\n",
  "    return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]\n",
  "    # TODO: write your code here\n    return []\n\n", "    # YOUR CODE HERE\n \
    \   music_list = music_string.split()\n    new_list = []\n    for note in music_list:\n\
    \        if note == 'o':\n            new_list.append(4)\n        elif note ==\
    \ 'o|':\n            new_list.append(2)\n        elif note == '.|':\n        \
    \    new_list.append(1)\n    return new_list\n\n", "    music_list = list(music_string)\n\
    \    length = len(music_list)\n    for i in range(length):\n        if music_list[i]\
    \ == 'o':\n            if i == length - 1:\n                music_list[i] = 4\n\
    \            elif music_list[i + 1] == ' ':\n                music_list[i] = 4\n\
    \            elif music_list[i + 1] == '|':\n                music_list[i] = 2\n\
    \        elif music_list[i] == '.':\n            music_list[i] = 1\n    return\
    \ music_list\n\n", "    # TODO: Write solution\n    pass\n\n", "    beats = []\n\
    \    for i in music_string.split():\n        beats.append(len(i))\n    return\
    \ beats\n", "    pass\n\n", "    # YOUR CODE HERE\n    listofnotes = []\n    count\
    \ = 0\n    while count < len(music_string):\n        if music_string[count] ==\
    \ 'o':\n            if music_string[count + 1] == ' ':\n                listofnotes.append(4)\n\
    \                count += 2\n            elif music_string[count + 1] == '|':\n\
    \                listofnotes.append(2)\n                count += 3\n        elif\
    \ music_string[count] == '.':\n            listofnotes.append(1)\n           \
    \ count += 3\n    return listofnotes\n\n", "    parsed_list = []\n    music_dictionary\
    \ = {'o': 4, 'o|': 2, '.|': 1}\n    for i in music_string.split():\n        parsed_list.append(music_dictionary[i])\n\
    \    return parsed_list\n", "    raise NotImplementedError()\n\n", "    # YOUR\
    \ CODE HERE\n\n    beats = []\n    for note in music_string.split():\n       \
    \ if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n \
    \           beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\
    \    return beats\n", "    # your code here\n    parse_music('o o| .| o| o| .|\
    \ .| .| .| o o')\n", "    dic = {'o': 4, 'o|': 2, '.|': 1}\n    res = []\n   \
    \ for note in music_string.split():\n        res.append(dic[note])\n    return\
    \ res\n\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))", "    # YOUR CODE\
    \ HERE\n    raise NotImplementedError\n\n", "    music_string = music_string.replace('o|',\
    \ 'o o')\n    music_string = music_string.replace('.|', '. .')\n    music_string\
    \ = music_string.split()\n    music_list = []\n    for i in music_string:\n  \
    \      if i == 'o':\n            music_list.append(4)\n        elif i == '.':\n\
    \            music_list.append(1)\n    return music_list\n", "    o = \"o\"\n\
    \    o_ = \"o|\"\n    dot_ = \".|\"\n    music_lst = []\n    for i in music_string.split():\n\
    \        if i == o:\n            music_lst.append(4)\n        elif i == o_:\n\
    \            music_lst.append(2)\n        elif i == dot_:\n            music_lst.append(1)\n\
    \    return music_lst\n", "    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    music_list\
    \ = music_string.split()\n    beats = []\n    for note in music_list:\n      \
    \  beats.append(mapping[note])\n    return beats\n", "    # get the note lengths\n\
    \    music_string = music_string.replace('.', '')\n    music_string = music_string.replace('|',\
    \ '')\n    notes = music_string.split()\n    # determine beats\n    beats = []\n\
    \    for note in notes:\n        if note == 'o':\n            beats.append(4)\n\
    \        elif note == 'o':\n            beats.append(2)\n    return beats\n",
  "    pass\n", "    notes = music_string.split(' ')\n    beats = []\n    for note\
    \ in notes:\n        if note == 'o':\n            beats.append(4)\n        elif\
    \ note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n   \
    \         beats.append(1)\n    return beats\n\n", "    note_dict = {'o': 4, 'o|':\
    \ 2, '.|': 1}\n    return [note_dict[note] for note in music_string.split()]\n\
    \n", "    raise NotImplementedError(\"You need to implement this function.\")\n\
    \n\n", "    beats = [4, 2, 1]\n    count = 0\n    output = []\n    for i in music_string:\n\
    \        if i == ' ':\n            output.append(beats[count])\n            count\
    \ = 0\n        if i == 'o':\n            count += 1\n    return output\n", '    return
    []', "    # Your code here\n    pass\n", "    music_dict = {'o': 4, 'o|': 2, '.|':\
    \ 1}\n    music_list = music_string.split()\n    return [music_dict[i] for i in\
    \ music_list]\n", "    notes = music_string.split(' ')\n    beats = []\n    for\
    \ note in notes:\n        if 'o' in note:\n            beats.append(4)\n     \
    \   elif 'o|' in note:\n            beats.append(2)\n        elif '.|' in note:\n\
    \            beats.append(1)\n    return beats\n\n", "    return []\n", "    pass\n\
    \n", "    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    return [mapping[chunk] for\
    \ chunk in music_string.split()]\n\n", "    pass\n\n", "    music_list = list(music_string)\n\
    \    result = []\n    for i in range(len(music_list)):\n        if music_list[i]\
    \ == 'o':\n            if music_list[i + 1] == ' ':\n                result.append(4)\n\
    \            elif music_list[i + 1] == '|':\n                result.append(2)\n\
    \        elif music_list[i] == '.':\n            result.append(1)\n    return\
    \ result\n\n", "    music_split = music_string.split(' ')\n    music_converted\
    \ = []\n    for note in music_split:\n        if note == 'o':\n            music_converted.append(4)\n\
    \        elif note == 'o|':\n            music_converted.append(2)\n        elif\
    \ note == '.|':\n            music_converted.append(1)\n    return music_converted\n",
  "    music_string = music_string.replace(' ', '')\n    return [2 if i == '|' else\
    \ 4 for i in music_string]\n", "    return [4 if x == 'o' else (2 if x == 'o|'\
    \ else 1) for x in music_string.split()]\n", "    # Get the notes and remove the\
    \ spaces.\n    notes = music_string.split(' ')\n    note_values = []\n    # The\
    \ index position is the beats of the note.\n    notes_dict = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    for note in notes:\n        for key, value in notes_dict.items():\n\
    \            if note == key:\n                note_values.append(value)\n    return\
    \ note_values\n\n", "    raise NotImplementedError(\"This should return a list\
    \ of integers\")\n", "    note_dict = {'o': 4, 'o|': 2, '.|': 1}\n    input_string\
    \ = music_string.split(' ')\n    output_list = []\n    for i in input_string:\n\
    \        if i in note_dict:\n            output_list.append(note_dict[i])\n  \
    \  return output_list\n\n", "    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n   \
    \ return [music_dict[x] for x in music_string.split()]\n\n", "    notes = music_string.split()\n\
    \    beats = []\n    for note in notes:\n        if note == 'o':\n           \
    \ beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n \
    \       elif note == '.|':\n            beats.append(1)\n    return beats\n",
  "    pass\n", "    notes = 'o' + music_string.replace(' ', '') + 'o'\n    beat_duration\
    \ = []\n    i = 0\n    while i < len(notes):\n        if notes[i] == 'o':\n  \
    \          if notes[i + 1] == '|':\n                beat_duration.append(2)\n\
    \                i += 2\n            else:\n                beat_duration.append(4)\n\
    \                i += 1\n        else:\n            beat_duration.append(1)\n\
    \            i += 2\n    return beat_duration\n\n", "    # WRITE YOUR CODE HERE\n\
    \n", "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[n] for n in music_string.split()]\n\
    \n", "    music_string = music_string.replace('o', 'o'*4)\n    music_string =\
    \ music_string.replace('o|', 'o'*2)\n    music_string = music_string.replace('.|',\
    \ 'o')\n    music_string = music_string.replace(' ', '')\n    return [len(note)\
    \ for note in music_string]\n", "    parsed_music = []\n    for symbol in music_string.split('\
    \ '):\n        if symbol == 'o':\n            parsed_music.append(4)\n       \
    \ elif symbol == 'o|':\n            parsed_music.append(2)\n        elif symbol\
    \ == '.|':\n            parsed_music.append(1)\n    return parsed_music\n", " \
    \   pass\n", "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats[i] for\
    \ i in music_string.split()]\n", "    # You code goes here\n    assert music_string,\
    \ \"Music string cannot be empty\"\n    assert type(music_string) is str, \"Music\
    \ string must be a string\"\n    #split the string by spaces\n    split_string\
    \ = music_string.split()\n    #loop through the list of strings for each character\n\
    \    list_of_ints = []\n    for i in split_string:\n        for char in i:\n \
    \           if char == 'o':\n                list_of_ints.append(4)\n        \
    \    elif char == 'o|':\n                list_of_ints.append(2)\n            elif\
    \ char == '.|':\n                list_of_ints.append(1)\n    return list_of_ints\n\
    \n", "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    parsed = [beats[x] for x in\
    \ music_string.split()]\n    return parsed\n\n", "    mapping = {'o': 4, 'o|':\
    \ 2, '.|': 1}\n    return [mapping[x] for x in music_string.split()]\n", "   \
    \ notes = list(music_string)\n    beats = []\n    for index, note in enumerate(notes):\n\
    \        if note == 'o':\n            if notes[index+1] == ' ':\n            \
    \    beats.append(4)\n        elif note == 'o':\n            if notes[index+1]\
    \ == '|':\n                beats.append(2)\n        elif note == '.':\n      \
    \      if notes[index+1] == '|':\n                beats.append(1)\n    return\
    \ beats\n", "    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    # TODO Add your\
    \ code here!\n    return [music_dict[char] for char in music_string.split()]\n",
  "    output = []\n    for i in music_string.split():\n        if i == 'o':\n   \
    \         output.append(4)\n        elif i == 'o|':\n            output.append(2)\n\
    \        elif i == '.|':\n            output.append(1)\n    return output\n",
  "    return []\n", "    return [4 if '|' not in i else 2 if '|' in i else 1 for\
    \ i in music_string.split()]\n\n", "    # YOUR CODE HERE\n    # raise NotImplementedError()\n\
    \    music_list = []\n    music_string = music_string.replace('|', '')\n    #\
    \ print(music_string)\n    for i in music_string:\n        if i == 'o':\n    \
    \        music_list.append(4)\n        else:\n            music_list.append(1)\n\
    \    return music_list\n\n", '    pass', "    return [4 if i == 'o' else (2 if\
    \ i == 'o|' else 1) for i in music_string.split()]\n", "    music_dict = {'o':\
    \ 4, 'o|': 2, '.|': 1}\n    return [music_dict[i] for i in music_string.split()]\n",
  "    return [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n", "    legend = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    beats = []\n    for i in music_string.split():\n        beats.append(legend[i])\n\
    \    return beats\n\n", "    beats = [1, 2, 4]\n    mark_to_beats = {'.': 1, 'o':\
    \ 4, '|': 2}\n    parsed_mus = []\n    curr_beats = 0\n    curr_mark = ' '\n \
    \   for mark in music_string:\n        if mark_to_beats[mark] > curr_beats:\n\
    \            curr_beats = mark_to_beats[mark]\n            curr_mark = mark\n\
    \        elif mark_to_beats[mark] == curr_beats:\n            curr_mark = mark\n\
    \        else:\n            parsed_mus.append(curr_beats)\n            curr_beats\
    \ = mark_to_beats[mark]\n            curr_mark = mark\n    parsed_mus.append(curr_beats)\n\
    \    return parsed_mus\n\n", "    return [len(note) for note in music_string.split()]\n",
  "    return []\n", "    # replace this for solution\n    return []\n\n", "    number_list\
    \ = []\n    music_string = music_string.split()\n    for i in music_string:\n\
    \        if i == 'o':\n            number_list.append(4)\n        elif i == 'o|':\n\
    \            number_list.append(2)\n        elif i == '.|':\n            number_list.append(1)\n\
    \    return number_list\n", "    pass\n\n", "    result = []\n    for note in\
    \ music_string.split():\n        if note == 'o':\n            result.append(4)\n\
    \        elif note == 'o|':\n            result.append(2)\n        elif note ==\
    \ '.|':\n            result.append(1)\n    return result\n", "    x = []\n   \
    \ note_list = music_string.split()\n    for i in note_list:\n        if i == 'o':\n\
    \            x.append(4)\n        elif i == 'o|':\n            x.append(2)\n \
    \       elif i == '.|':\n            x.append(1)\n    return x\n", "    pass\n\
    \n", "    pass\n", "    pass\n", "    music_string_split = music_string.split('\
    \ ')\n    beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n\
    \    output = []\n    for note in music_string_split:\n        output.append(beats[note])\n\
    \    return output\n", "    beats = {'o': 4, 'o|': 2, '.|': 1}\n    music_list\
    \ = music_string.split()\n    return [beats[note] for note in music_list]\n",
  "    # your code goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n", " \
    \   # TODO: implement this function as described in the docstring\n    # feel\
    \ free to implement helper functions that you need\n    x = music_string.split()\n\
    \    y = []\n    for i in x:\n        if i == 'o':\n            y.append(4)\n\
    \        if i == 'o|':\n            y.append(2)\n        if i == '.|':\n     \
    \       y.append(1)\n    return y", "    notes = {'o': 4, 'o|': 2, '.|': 1}\n\
    \    return [notes[note] for note in music_string.split()]\n\n", "    output_list\
    \ = []\n    pattern = r'(o o|o|o\\||.\\|)'\n    for i in re.findall(pattern, music_string):\n\
    \        if i == 'o o':\n            output_list.append(4)\n        elif i ==\
    \ 'o':\n            output_list.append(4)\n        elif i == 'o|':\n         \
    \   output_list.append(2)\n        elif i == '.|':\n            output_list.append(1)\n\
    \    return output_list\n\n", "    return [4 if a == 'o' else 2 if a == 'o|' else\
    \ 1 for a in music_string.split()]\n    # return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4,\
    \ 4]\n", "    # TODO: Implement this function\n    return []\n", "    note_dict\
    \ = {'o': 4, 'o|': 2, '.|': 1}\n    res = []\n    music_list = music_string.split()\n\
    \    for note in music_list:\n        res.append(note_dict[note])\n    return\
    \ res\n", "    if not music_string:\n        return []\n    music_string = music_string.replace('o|','o')\n\
    \    music_string = music_string.replace('.|','.')\n    return [4 if i == 'o'\
    \ else 1 for i in music_string.split()]\n", "    notes = {'o': 4, 'o|': 2, '.|':\
    \ 1}\n    symbols = ['o', 'o|', '.|']\n    list_result = []\n    tmp = ''\n  \
    \  for char in music_string:\n        if char == ' ':\n            if tmp in symbols:\n\
    \                list_result.append(notes[tmp])\n            tmp = ''\n      \
    \  else:\n            tmp += char\n    return list_result\n", "    x = music_string.split()\n\
    \    list1 = []\n    for i in x:\n        if i == 'o':\n            list1.append(4)\n\
    \        elif i == 'o|':\n            list1.append(2)\n        elif i == '.|':\n\
    \            list1.append(1)\n    return list1\n\n", "    # YOUR CODE GOES HERE\n\
    \    new_music_string = music_string.replace('o|', '2').replace('.|', '1').replace('o',\
    \ '4')\n    new_list = [int(i) for i in new_music_string.split()]\n    return\
    \ new_list\n", "    single_note_to_beats = {\n        'o': 4,\n        'o|': 2,\n\
    \        '.|': 1\n    }\n    notes = music_string.split()\n    return [single_note_to_beats[note]\
    \ for note in notes]\n", "    # TODO: remove pass and implement me\n    music_list\
    \ = music_string.split()\n    new_list = []\n    for i in music_list:\n      \
    \  if i == 'o':\n            new_list.append(4)\n        elif i == 'o|':\n   \
    \         new_list.append(2)\n        elif i == '.|':\n            new_list.append(1)\n\
    \    return new_list\n\n\n", "    pass\n", '    pass', "    # replace this line\
    \ with your solution\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n", "   \
    \ pass\n", "    music_convert = {'o': 4, 'o|': 2, '.|': 1}\n    # music_string\
    \ = music_string.replace(' ', '')\n    return [music_convert[n] for n in music_string.split()]\n",
  "    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_list = music_string.split()\n\
    \    music_int = []\n    for item in music_list:\n        music_int.append(music_dict[item])\n\
    \    return music_int\n\n", "    ...\n    pass\n", "    split_string = music_string.split()\n\
    \    output = []\n    for value in split_string:\n        if value == 'o':\n \
    \           output.append(4)\n        elif value == 'o|':\n            output.append(2)\n\
    \        elif value == '.|':\n            output.append(1)\n    return output\n",
  "    return None\n", "    # If you are stuck, you can try to look at unit tests\
    \ and even at full test suite.\n    # You can see it by running 'python3 -m unittest\
    \ discover' inside current folder.\n    pass", "    def parse_char(c: str) ->\
    \ int:\n        if c == 'o':\n            return 4\n        elif c == 'o|':\n\
    \            return 2\n        elif c == '.|':\n            return 1\n       \
    \ else:\n            raise ValueError('Unrecognized character: {}'.format(c))\n\
    \n    return [parse_char(c) for c in music_string.split()]\n", "    pass\n\n\n\
    \"\"\"\nSolution\n\"\"\"\n", "    dic = {'o': 4, 'o|': 2, '.|': 1}\n    s = music_string.split()\n\
    \    res = []\n    for i in s:\n        res.append(dic[i])\n    return res\n",
  "    if music_string == '':\n        return []\n    else:\n        if music_string[0]\
    \ == 'o':\n            return [4] + parse_music(music_string[2:])\n        elif\
    \ music_string[0] == 'o' and music_string[1] == '|':\n            return [2] +\
    \ parse_music(music_string[3:])\n        elif music_string[0] == '.' and music_string[1]\
    \ == '|':\n            return [1] + parse_music(music_string[3:])\n        else:\n\
    \            return parse_music(music_string[1:])\n\n", "    raise NotImplementedError()\n",
  "    note_values = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_values[note] for\
    \ note in music_string.split()]\n", "    return [0]\n", "    duration = {'o':\
    \ 4, 'o|': 2, '.|': 1}\n    s = music_string.split()\n    return [duration[i]\
    \ for i in s]\n", "    return []\n", "    music_string = music_string.replace('\
    \ o o', ' o o o o')\n    #print(music_string)\n    music_string = music_string.replace('\
    \ o o o o', ' o o| o o|')\n    #print(music_string)\n    #print(music_string.split())\n\
    \    music_string = music_string.replace(' o| o| o| o|', ' o| o| o| o| o| o| o|\
    \ o|')\n    music_string = music_string.replace(' o| o| o| o| o| o| o| o|', '\
    \ o| o| o| o| .| .| .| .|')\n    music_string = music_string.replace(' .| .| .|\
    \ .| .| .| .| .|', ' .| .| .| .| .| .| .| .| .| .| .| .| .|')\n    #print(music_string)\n\
    \    #print(music_string.split())\n    return [i.count('o')*4+i.count('o|')*2+i.count('.')*1\
    \ for i in music_string.split()]\n", "    # TODO: write a function which will\
    \ parse musical notes string and return list of durations\n    counter = 0\n \
    \   my_list = []\n    for i in music_string:\n        if i == 'o':\n         \
    \   my_list.append(4)\n        elif i == 'o' or i == '|':\n            my_list.append(2)\n\
    \        elif i == '.' or i == '|':\n            my_list.append(1)\n        else:\n\
    \            pass\n    return my_list\n", "    music_list = music_string.split()\n\
    \    music_dict = {'o': 4, 'o|': 2, '.|': 1}\n    music_result = []\n    for elem\
    \ in music_list:\n        if elem in music_dict:\n            music_result.append(music_dict[elem])\n\
    \    return music_result\n", "    note_length = {'o': 4, 'o|': 2, '.|': 1}\n \
    \   music_list = music_string.split()\n    return [note_length[n] for n in music_list]\n",
  "    duration = {\"o\": 4, \"o|\": 2, \".|\": 1}\n    music_string = music_string.split()\n\
    \    music_list = []\n    for i in music_string:\n        music_list.append(duration[i])\n\
    \    return music_list\n", "    # Your implementation starts here.\n    return\
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]", "    output = []\n    for note in music_string.split('\
    \ '):\n        if note == 'o':\n            output.append(4)\n        elif note\
    \ == 'o|':\n            output.append(2)\n        elif note == '.|':\n       \
    \     output.append(1)\n    return output\n\n", "    note_dict = {'o': 4, 'o|':\
    \ 2, '.|': 1}\n    return [note_dict[x] for x in music_string.split()]\n\n", " \
    \   mapping = {'o': 4, 'o|': 2, '.|': 1}\n    return [mapping[note] for note in\
    \ music_string.split()]\n", "    pass\n\n", "    # replace this for solution\n\
    \    #split the music string by spaces\n    split_string = music_string.split()\n\
    \    beats = []\n    for i in split_string:\n        if 'o' in i:\n          \
    \  if len(i) == 1:\n                beats.append(4)\n            else:\n     \
    \           beats.append(2)\n        elif '.' in i:\n            beats.append(1)\n\
    \    return beats\n\n", "    notes = {'o': 4, 'o|': 2, '.|': 1}\n    beats = []\n\
    \    for note in music_string.split():\n        beats.append(notes[note])\n  \
    \  return beats\n", "    return []\n\n", "    music_map = {\n        'o': 4,\n\
    \        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n\
    \    return [music_map[note] for note in notes]\n\n", "    pass\n\n\n", "    #\
    \ TODO: your code here\n    pass\n\n", "    output = []\n    # parse the string\
    \ here\n    return output\n\n", "    return [1,2,3]\n", "    pass\n", "    notes\
    \ = music_string.split()\n    beats = []\n    for note in notes:\n        if note\
    \ == 'o':\n            beats.append(4)\n        elif note == 'o|':\n         \
    \   beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\
    \    return beats\n", "    duration = 1\n    result = []\n    for i in music_string:\n\
    \        if i == 'o':\n            result.append(duration)\n            duration\
    \ = 1\n        if i == '.':\n            result.append(duration)\n           \
    \ duration = 1\n        if i == ' ':\n            result.append(duration)\n  \
    \          duration = 1\n        if i == '|':\n            duration = duration\
    \ * 2\n    return result\n", "    n = ['o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o','o",
  "    music_string = music_string.replace(' ', '')\n    return [4 if c == 'o' else\
    \ 2 if c == 'o|' else 1 for c in music_string]\n", "    i = 0\n    beats = []\n\
    \    for char in music_string:\n        if char == 'o':\n            beats.append(4)\n\
    \        elif char == '|':\n            beats[i] /= 2\n        elif char == '.':\n\
    \            i += 1\n    return beats\n", "    music_string = music_string.split()\n\
    \    mus_list = []\n    for note in music_string:\n        if note == 'o':\n \
    \           mus_list.append(4)\n        elif note == 'o|':\n            mus_list.append(2)\n\
    \        elif note == '.|':\n            mus_list.append(1)\n    return mus_list\n",
  "    notes = music_string.split(' ')\n    durations = []\n    for note in notes:\n\
    \        if note == 'o':\n            durations.append(4)\n        elif note ==\
    \ 'o|':\n            durations.append(2)\n        elif note == '.|':\n       \
    \     durations.append(1)\n    return durations\n\nmusic = input()\nparsed_music\
    \ = parse_music(music)\nprint(parsed_music)", "    res = []\n    tempo = {'o':\
    \ 4, 'o|': 2, '.|': 1}\n    for note in music_string.split():\n        res.append(tempo[note])\n\
    \    return res\n", "    # TODO\n    pass\n", "    result = []\n    music_string\
    \ = music_string.split()\n    for note in music_string:\n        result.append(len(note))\n\
    \    return result\n", "    music_list = music_string.split()\n    result = []\n\
    \    for note in music_list:\n        if note == 'o':\n            result.append(4)\n\
    \        elif note == 'o|':\n            result.append(2)\n        elif note ==\
    \ '.|':\n            result.append(1)\n    return result\n", "    # TODO: your\
    \ code goes here\n\n    return []\n", "    pass\n", "    notes = music_string.split('\
    \ ')\n    res = []\n    for note in notes:\n        if note == 'o':\n        \
    \    res.append(4)\n        elif note == 'o|':\n            res.append(2)\n  \
    \      elif note == '.|':\n            res.append(1)\n    return res\n\n\n", '    return
    []', "    beat_map = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n \
    \   }\n    return [beat_map[note] for note in music_string.split()]\n", "    ##############################################################################\n\
    \    # TODO: Implement function parsing a music string as described above.\n \
    \   #       You should implement it in two stages.\n    #       First, you should\
    \ write a parser for the simplest music string format\n    #       with no bars\
    \ (see section Bar in Music theory) and\n    #       then extend this parser to\
    \ allow for bars.\n    ##############################################################################\n\
    \    raise NotImplementedError(\"Not implemented yet!\")\n\n    ##############################################################################\n\
    \    # END OF YOUR CODE\n    ##############################################################################\n\
    \    return beats\n\n", "    notes = music_string.split()\n    beats = []\n  \
    \  for i in notes:\n        if i == 'o':\n            beats.append(4)\n      \
    \  elif i == 'o|':\n            beats.append(2)\n        elif i == '.|':\n   \
    \         beats.append(1)\n    return beats\n\n", "    # TODO: Implement this\
    \ function, return correct list of integers as explained in docstring\n    return\
    \ [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    pass\n", "    music_string = music_string.replace('\
    \ ', '')\n    result = []\n    i = 0\n    while i < len(music_string):\n     \
    \   if music_string[i] == 'o':\n            if music_string[i + 1] == '|':\n \
    \               result.append(2)\n                i += 2\n            else:\n\
    \                result.append(4)\n                i += 1\n        else:\n   \
    \         result.append(1)\n            i += 2\n    return result\n\n", "    notes\
    \ = ['o', 'o|', '.|']\n    beats = [4, 2, 1]\n    rep = zip(notes, beats)\n  \
    \  res = []\n    for pair in rep:\n        res.extend([pair[1]] * music_string.count(pair[0]))\n\
    \    return res\n\n", "    raise NotImplementedError()\n", "    output = []\n\
    \    for i in music_string.split(' '):\n        if i == 'o':\n            output.append(4)\n\
    \        elif i == 'o|':\n            output.append(2)\n        elif i == '.|':\n\
    \            output.append(1)\n    return output\n", "    return []\n\n", "  \
    \  # Write your code here\n    pass\n", "    notes = music_string.split()\n  \
    \  beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n\
    \        elif note == 'o|':\n            beats.append(2)\n        elif note ==\
    \ '.|':\n            beats.append(1)\n    return beats\n", "    return []\n",
  "    pass\n", "    pass\n\n", "    rval = []\n    note_dict = {'o': 4, 'o|': 2,\
    \ '.|': 1}\n    for note in music_string.split():\n        rval.append(note_dict[note])\n\
    \    return rval\n    ", "    return [1, 2, 4]\n\n", "    pass\n\n", "    notes\
    \ = music_string.split()\n    beats = []\n    for note in notes:\n        if note\
    \ == 'o':\n            beats.append(4)\n        elif note == 'o|':\n         \
    \   beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\
    \    return beats\n\n", "    res = []\n    for note in music_string.split():\n\
    \        if note == 'o':\n            res.append(4)\n        elif note == 'o|':\n\
    \            res.append(2)\n        elif note == '.|':\n            res.append(1)\n\
    \    return res\n\n", "    ...\n```\n\n- Difficulty: **easy**\n- Solution: [./easy](./easy)\n\
    \n---\n", "    # TODO: your code here\n    pass\n", "    dictionary = {'o': 4,\
    \ 'o|': 2, '.|': 1}\n    return [dictionary[elem] for elem in music_string.split()]\n\
    \    \n    \n    \n    ", "    # n = 0\n    # for i in music_string:\n    #  \
    \   if i == 'o':\n    #         print('o ', end='')\n    #         n += 4\n  \
    \  #     elif i == 'o|':\n    #         print('o| ', end='')\n    #         n\
    \ += 2\n    #     elif i == '.|':\n    #         print('.| ', end='')\n    # \
    \        n += 1\n    # print('')\n    # return n\n    return [4 if i == 'o' else\
    \ 2 if i == 'o|' else 1 for i in music_string.split()]\n", "    pass\n\n", " \
    \   mus = ''.join(music_string.split())\n    music = {'o': 4, 'o|': 2, '.|': 1}\n\
    \    notes = []\n    for i in range(0, len(mus), 2):\n        if mus[i:i+2] in\
    \ music:\n            notes.append(music[mus[i:i+2]])\n    return notes\n", " \
    \   pass\n\n", "    notes = music_string.split(' ')\n    parsed_notes = []\n \
    \   for note in notes:\n        if note == 'o':\n            parsed_notes.append(4)\n\
    \        elif note == 'o|':\n            parsed_notes.append(2)\n        elif\
    \ note == '.|':\n            parsed_notes.append(1)\n    return parsed_notes\n",
  "    beats_dict = {'o': 4, 'o|': 2, '.|': 1}\n    beats_list = []\n    for i in\
    \ music_string.split(' '):\n        beats_list.append(beats_dict[i])\n    return\
    \ beats_list\n\n", "    res = []\n    beats = {'o': 4, 'o|': 2, '.|': 1}\n   \
    \ for el in music_string.split():\n        res.append(beats[el])\n    return res\n",
  "    # your code here\n    notes = {\n        'o': 4,\n        'o|': 2,\n      \
    \  '.|': 1\n    }\n    return [notes[n] for n in music_string.split()]\n", '    raise
    NotImplementedError', "    beat_map = {\n        'o': 4,\n        'o|': 2,\n \
    \       '.|': 1\n    }\n    notes = music_string.split()\n    return [beat_map[note]\
    \ for note in notes]\n", "    beats = 0\n    result = []\n    duration = {'o':\
    \ 4, 'o|': 2, '.|': 1}\n    for nota in music_string.split():\n        if nota\
    \ == 'o':\n            result.append(duration[nota])\n        elif nota == 'o|':\n\
    \            if beats == 4:\n                result.append(beats)\n          \
    \      beats = 0\n            result.append(duration[nota])\n            beats\
    \ += duration[nota]\n        elif nota == '.|':\n            if beats == 4:\n\
    \                result.append(beats)\n                beats = 0\n           \
    \ result.append(duration[nota])\n            beats += duration[nota]\n    return\
    \ result\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
