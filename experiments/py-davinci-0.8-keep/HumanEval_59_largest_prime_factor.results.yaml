name: HumanEval_59_largest_prime_factor
language: py
results:
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # A number\
    \ n is divisible by 2 if n % 2 == 0.\n    # If n is even, the largest prime factor\
    \ must be <= n/2\n    # We know 2 is a prime, so if n is even, return 2.\n   \
    \ if n % 2 == 0:\n        return 2\n    # Else, we need to test each prime number\
    \ between 2 and n/2\n    for i in range(3, n // 2, 2):\n        if n % i == 0\
    \ and is_prime(i):\n            return i\n    # If the above never found a factor,\
    \ then n is prime.\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3708f4v8.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp3708f4v8.py\", line 29,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp3708f4v8.py\"\
    , line 22, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp3708f4v8.py\"\
    , line 15, in largest_prime_factor\n    if n % i == 0 and is_prime(i):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = prime_factors(n)\n\
    \    return max(primes)\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2ie91h4.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmph2ie91h4.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmph2ie91h4.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmph2ie91h4.py\"\
    , line 8, in largest_prime_factor\n    primes = prime_factors(n)\nNameError: name\
    \ 'prime_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    current_divisor\
    \ = 2\n    while n > 1:\n        while n % current_divisor == 0:\n           \
    \ n //= current_divisor\n        current_divisor += 1\n    return current_divisor\
    \ - 1\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if is_prime(i) and n % i == 0:\n            n = n // i\n    return\
    \ n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppc35qw9b.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmppc35qw9b.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmppc35qw9b.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmppc35qw9b.py\"\
    , line 9, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest =\
    \ 0\n    factor = 2\n    while factor < n:\n        if n % factor == 0:\n    \
    \        n //= factor\n            largest = factor\n        else:\n         \
    \   factor += 1\n    return max(largest, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ set()\n    x = 2\n    while n != 1:\n        if n % x == 0:\n            factors.add(x)\n\
    \            n //= x\n        else:\n            x += 1\n    return max(factors)\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find all\
    \ the factors of n by starting with 2, moving up the\n    # integers, and using\
    \ the remainder of n to find the factors.\n    factor = 2\n    while factor *\
    \ factor <= n:\n        if n % factor == 0:\n            n = n // factor\n   \
    \     else:\n            factor += 1\n    return n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest =\
    \ 1\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            largest\
    \ = i\n            n = n // i\n        else:\n            i += 1\n    return max(largest,\
    \ n)\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return max(largest_prime_factor(i),\
    \ largest_prime_factor(n // i))\n    return n\n\n\ndef check(candidate):\n   \
    \ assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        n //= 2\n    else:\n        n -= 1\n    while n > 1:\n        if\
    \ is_prime(n):\n            return n\n        n -= 2\n    return 1\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqpmaphkb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpqpmaphkb.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpqpmaphkb.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpqpmaphkb.py\"\
    , line 13, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1\n    factor = n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n %\
    \ i == 0:\n            while n % i == 0:\n                n //= i\n          \
    \  factor = n\n    return factor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnmd74c3p.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnmd74c3p.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpnmd74c3p.py\"\
    , line 20, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Write your\
    \ code here\n    m, p = n, 2\n    while m > 1:\n        if m % p == 0:\n     \
    \       m //= p\n        else:\n            p += 1\n    return p\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 2\n\
    \    while n > 1:\n        if n % prime == 0:\n            n //= prime\n     \
    \   else:\n            prime += 1\n    return prime\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in count(2):\n\
    \        if is_prime(i) and n % i == 0:\n            num = n // i\n          \
    \  if is_prime(num):\n                return num\n            else:\n        \
    \        return largest_prime_factor(num)\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5e07iv2b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5e07iv2b.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp5e07iv2b.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp5e07iv2b.py\"\
    , line 8, in largest_prime_factor\n    for i in count(2):\nNameError: name 'count'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    curr_largest_factor\
    \ = 1\n    curr_factor = 2\n    while curr_factor < n:\n        if is_prime(curr_factor)\
    \ and n % curr_factor == 0:\n            curr_largest_factor = curr_factor\n \
    \       curr_factor += 1\n    return curr_largest_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9nh2max.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpg9nh2max.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpg9nh2max.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpg9nh2max.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(curr_factor) and n % curr_factor\
    \ == 0:\nNameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Assume n\
    \ > 1 and is not a prime\n    # result = n - 1  # The largest prime factor of\
    \ n must be smaller than n - 1\n    # while result > 1:\n    #     if n % result\
    \ == 0 and is_prime(result):\n    #         return result\n    #     result -=\
    \ 1\n    # return result\n    if n == 1:\n        return 1\n    result = 2\n \
    \   while n > 1:\n        if n % result == 0:\n            n //= result\n    \
    \        if is_prime(n):\n                return n\n        else:\n          \
    \  result += 1\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n   \
    \ assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wuoyk_n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1wuoyk_n.py\", line 35,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp1wuoyk_n.py\"\
    , line 28, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp1wuoyk_n.py\"\
    , line 21, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    k = 2\n    while k <= n:\n        if n % k == 0:\n            largest_prime\
    \ = k\n            n = n // k\n        else:\n            k += 1\n    return largest_prime\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors\
    \ = []\n    possible_factor = 2\n    while n > 1:\n        if n % possible_factor\
    \ == 0:\n            prime_factors.append(possible_factor)\n            n //=\
    \ possible_factor\n        else:\n            possible_factor += 1\n    return\
    \ max(prime_factors)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Store largest\
    \ prime factor found so far.\n    i = 2\n    while i * i <= n:\n        if n %\
    \ i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ prime_factors(n)\n    return max(factors)\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptznu91mz.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmptznu91mz.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmptznu91mz.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmptznu91mz.py\"\
    , line 8, in largest_prime_factor\n    factors = prime_factors(n)\nNameError:\
    \ name 'prime_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    pf = 1\n \
    \   while n % 2 == 0:\n        pf = 2\n        n = n // 2\n    f = 3\n    while\
    \ f * f <= n:\n        if n % f == 0:\n            pf = f\n            n = n //\
    \ f\n        else:\n            f += 2\n    if n > 2:\n        pf = n\n    return\
    \ pf\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 1:\n\
    \        return 1\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n\
    \        return 2\n    i = 3\n    while i <= n:\n        if n % i == 0:\n    \
    \        n = n // i\n        else:\n            i += 2\n    return i\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 2\n\
    \    while n > 1:\n        if n % prime == 0:\n            n //= prime\n     \
    \   else:\n            prime += 1\n    return prime\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    if n % 2 == 0:\n        return largest_prime_factor(n\
    \ // 2)\n    else:\n        for i in range(3, n + 1, 2):\n            if is_prime(i)\
    \ and n % i == 0:\n                return largest_prime_factor(n // i)\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3q1_emmx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3q1_emmx.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp3q1_emmx.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp3q1_emmx.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest =\
    \ 1\n    i = 2\n    while i < n:\n        if is_prime(i) and n % i == 0:\n   \
    \         largest = i\n        i += 1\n    return largest\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsab0m5z0.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsab0m5z0.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpsab0m5z0.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpsab0m5z0.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for factor\
    \ in range(n - 1, 1, -1):\n        if n % factor == 0 and is_prime(factor):\n\
    \            return factor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6axb5zu.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpz6axb5zu.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpz6axb5zu.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpz6axb5zu.py\"\
    , line 9, in largest_prime_factor\n    if n % factor == 0 and is_prime(factor):\n\
    NameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    for i in reversed(range(1, math.floor(math.sqrt(n)) + 1)):\n\
    \        if n % i == 0 and is_prime(i):\n            return i\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxa7f3h04.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxa7f3h04.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpxa7f3h04.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpxa7f3h04.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    lpf = 0\n\
    \    for x in range(2, n):\n        if n % x == 0:\n            x = largest_prime_factor(x)\n\
    \            if x > lpf:\n                lpf = x\n    return lpf\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp293861rv.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp293861rv.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp293861rv.py\"\
    , line 17, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for x in reversed(list(range(2,\
    \ n))):\n        if n % x == 0 and is_prime(x):\n            return x\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqhkqpkrx.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpqhkqpkrx.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpqhkqpkrx.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpqhkqpkrx.py\"\
    , line 9, in largest_prime_factor\n    if n % x == 0 and is_prime(x):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if is_prime(i) and n % i == 0:\n            largest_prime = i\n\
    \    return largest_prime\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmh_4p6gc.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpmh_4p6gc.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpmh_4p6gc.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpmh_4p6gc.py\"\
    , line 9, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    else:\n        return max(prime_factor(n))\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp89we574v.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp89we574v.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp89we574v.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp89we574v.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 2\n\
    \    while n > 1:\n        if n % prime == 0:\n            n //= prime\n     \
    \   else:\n            prime += 1\n    return prime\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i <= n:\n        if is_prime(i) and n % i == 0:\n            n = n //\
    \ i\n        else:\n            i += 1\n    return i\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwb_kx7bj.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwb_kx7bj.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpwb_kx7bj.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpwb_kx7bj.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n,\
    \ 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9u2f0svj.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp9u2f0svj.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp9u2f0svj.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp9u2f0svj.py\"\
    , line 9, in largest_prime_factor\n    if n % i == 0 and is_prime(i):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # FIXME\n\
    \    return n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjalbgo4r.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjalbgo4r.py\", line 19,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpjalbgo4r.py\"\
    , line 12, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 1\n\
    \    for factor in range(1, n + 1):\n        if is_prime(factor) and n % factor\
    \ == 0:\n            factor = factor\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwg7ld_03.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwg7ld_03.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpwg7ld_03.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpwg7ld_03.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(factor) and n % factor ==\
    \ 0:\nNameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_divisor\
    \ = 2\n    while n > 1:\n        if n % prime_divisor == 0:\n            n = n\
    \ // prime_divisor\n        else:\n            prime_divisor += 1\n    return\
    \ prime_divisor\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n  \
    \  assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        n /= 2\n    else:\n        while n % 2 == 1:\n            n //=\
    \ 2\n    while n % 3 == 0:\n        n /= 3\n    while n % 5 == 0:\n        n /=\
    \ 5\n    while n % 7 == 0:\n        n /= 7\n    while n % 11 == 0:\n        n\
    \ /= 11\n    while n % 13 == 0:\n        n /= 13\n    while n % 17 == 0:\n   \
    \     n /= 17\n    while n % 19 == 0:\n        n /= 19\n    return n\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    num = n\n\
    \    largest_factor = 1\n    i = 2\n    while i ** 2 <= num:\n        if num %\
    \ i == 0:\n            largest_factor = i\n            num = num // i\n      \
    \  else:\n            i += 1\n    return max(largest_factor, num)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    last_remainder\
    \ = n\n    for factor in primes():\n        if factor >= last_remainder:\n   \
    \         return last_remainder\n        elif last_remainder % factor == 0:\n\
    \            last_remainder //= factor\n    return last_remainder\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80jn2f48.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp80jn2f48.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp80jn2f48.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp80jn2f48.py\"\
    , line 9, in largest_prime_factor\n    for factor in primes():\nNameError: name\
    \ 'primes' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    for i in range(2, n + 1):\n        if n % i == 0:\n            largest_factor\
    \ = i\n    return largest_factor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdt84ib6.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpvdt84ib6.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpvdt84ib6.py\"\
    , line 16, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i <= n:\n        if is_prime(i) and n % i == 0:\n            n = n //\
    \ i\n        else:\n            i += 1\n    return i\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiz9rlvv_.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpiz9rlvv_.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpiz9rlvv_.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpiz9rlvv_.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Exploit\
    \ the following facts:\n    #   - Every prime is a divisor of n, except for n\
    \ itself, if n is prime.\n    #   - Every number >= 2 is divisible by either 2\
    \ or 3.\n    #   - Every number > 3 is divisible by either 2, 3, or 5.\n    #\
    \   - 5 is the largest prime factor of every number > 5.\n    #   - A prime divides\
    \ n if and only if a prime divides n^2 - n.\n    #   - 2 and 5 are not primes\
    \ if n > 5.\n    if n > 5:\n        while n % 2 == 0:\n            n = n // 2\n\
    \        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n\
    \            n = n // 5\n    if n == 1:\n        return None\n    if n <= 5:\n\
    \        return n\n    i = 7\n    while i ** 2 <= n:\n        while n % i == 0:\n\
    \            n = n // i\n        i += 4\n        while n % i == 0:\n         \
    \   n = n // i\n        i += 2\n    return n\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5yey346r.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp5yey346r.py\", line 45,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp5yey346r.py\"\
    , line 38, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # check whether\
    \ the number is divisible by 2, if so 2 is a factor\n    if n % 2 == 0:\n    \
    \    return last_prime_factor(n // 2)\n    # check if the number is divisible\
    \ by the odd numbers 3 to sqrt(n), if so those are factors\n    for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return last_prime_factor(n\
    \ // i)\n    # if none of the above numbers are divisible by n, then n is prime\
    \ and the last prime factor\n    return n\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wd32rf4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp1wd32rf4.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp1wd32rf4.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp1wd32rf4.py\"\
    , line 12, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= math.sqrt(n):\n        if n % factor == 0:\n            return\
    \ max(largest_prime_factor(n // factor), largest_prime_factor(factor))\n     \
    \   factor += 1\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtmworqn.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpvtmworqn.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpvtmworqn.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpvtmworqn.py\"\
    , line 9, in largest_prime_factor\n    while factor <= math.sqrt(n):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        n = n // 2\n    for i in range(3, n + 1, 2):\n        if is_prime(i)\
    \ and n % i == 0:\n            n = n // i\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprzswycsm.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmprzswycsm.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmprzswycsm.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmprzswycsm.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 0:\n\
    \        return 0\n    curr_factor = 2\n    while curr_factor <= n:\n        if\
    \ n % curr_factor == 0:\n            n = n // curr_factor\n        else:\n   \
    \         curr_factor += 1\n    return curr_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # count down\
    \ from n to find the largest prime factor\n    for i in range(n, 1, -1):\n   \
    \     if is_prime(i) and n % i == 0:\n            return i\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvudoeu9w.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpvudoeu9w.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpvudoeu9w.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpvudoeu9w.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Create an\
    \ empty list to contain the prime factors of n\n    prime_factors = []\n    #\
    \ Iterate from 2 to n - 1 and if the number is a prime number, add it to prime_factors\n\
    \    for i in range(2, n):\n        if is_prime(i):\n            prime_factors.append(i)\n\
    \    # Create an empty list to contain the prime factors of n that are also factors\
    \ of n\n    factors = []\n    # Iterate over prime_factors, and if n is divisible\
    \ by prime_factors[i], add it to factors\n    for i in range(len(prime_factors)):\n\
    \        if n % prime_factors[i] == 0:\n            factors.append(prime_factors[i])\n\
    \    # Return the largest number in factors\n    return max(factors)\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwznj5ssy.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpwznj5ssy.py\", line 32,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpwznj5ssy.py\"\
    , line 25, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpwznj5ssy.py\"\
    , line 12, in largest_prime_factor\n    if is_prime(i):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    a = largest_prime_factor(n - 1)\n    if n % a == 0:\n \
    \       return a\n    return largest_prime_factor(n - 1)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxor8ctgw.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxor8ctgw.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpxor8ctgw.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpxor8ctgw.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # find the\
    \ smallest factor of n and return the larger one of the two\n    # For example,\
    \ 12's prime factors are 2, 3, and 6, but 2 is smaller than 3 or 6, so the largest\
    \ is 6\n    # if n is a prime, its smallest factor is 1, and that won't return\
    \ the correct result\n    # if n is not a prime, then the smallest factor is not\
    \ 1\n    # if n is not a prime, then its smallest factor is also not a prime\n\
    \    # so we can use its smallest factor as the new n in the recursive call\n\
    \    return n // smallest_factor(n)\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1z6z23o_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1z6z23o_.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp1z6z23o_.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp1z6z23o_.py\"\
    , line 14, in largest_prime_factor\n    return n // smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n\
    \ // 2, 1, -1):\n        if (is_prime(i) and n % i == 0):\n            return\
    \ i\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvyeddpwc.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpvyeddpwc.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpvyeddpwc.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpvyeddpwc.py\"\
    , line 9, in largest_prime_factor\n    if (is_prime(i) and n % i == 0):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ find_factors(n)\n    if factors == [n]:\n        return n\n    for factor in\
    \ reversed(factors):\n        if is_prime(factor):\n            return factor\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8b4sc093.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp8b4sc093.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp8b4sc093.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp8b4sc093.py\"\
    , line 8, in largest_prime_factor\n    factors = find_factors(n)\nNameError: name\
    \ 'find_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return largest_prime_factor_helper(n,\
    \ 2)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr6p5optl.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpr6p5optl.py\", line 19,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpr6p5optl.py\"\
    , line 12, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpr6p5optl.py\"\
    , line 8, in largest_prime_factor\n    return largest_prime_factor_helper(n, 2)\n\
    NameError: name 'largest_prime_factor_helper' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    current_n\
    \ = n\n    largest_prime = 2\n    while current_n != 1:\n        if current_n\
    \ % largest_prime == 0:\n            current_n //= largest_prime\n        else:\n\
    \            largest_prime += 1\n    return largest_prime\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = set()\n\
    \    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n           \
    \ primes.add(divisor)\n            n = n // divisor\n        else:\n         \
    \   divisor += 1\n    return max(primes)\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor == 0:\n            n //=\
    \ factor\n        else:\n            factor += 1\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ prime_factors(n)\n    return max(factors)\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk1rso782.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpk1rso782.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpk1rso782.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpk1rso782.py\"\
    , line 8, in largest_prime_factor\n    factors = prime_factors(n)\nNameError:\
    \ name 'prime_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i == 0:\n            n //= i\n        else:\n\
    \            i += 1\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This is\
    \ the smallest possible factor of n\n    first_factor = 2\n    # If n is divisible\
    \ by 2, update n and first_factor\n    while n % first_factor == 0:\n        n\
    \ //= first_factor\n    if n == 1:\n        return first_factor\n    # Then we\
    \ know that n is not divisible by 2, and so n > 1\n    # The next smallest possible\
    \ factor of n is 3\n    # To get all primes factors of n, we will keep n > 1 and\
    \ increase factor\n    # until n is 1\n    factor = 3\n    # The largest prime\
    \ factor is no greater than sqrt(n)\n    # So the loop will stop after sqrt(n)\
    \ iterations\n    # And factor will be the greatest prime factor of n\n    while\
    \ n > 1:\n        # If n is divisible by factor, update n and factor\n       \
    \ while n % factor == 0:\n            n //= factor\n        # Because we are only\
    \ looking for prime factors, factor += 2\n        factor += 2\n    return factor\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf07ik86a.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpf07ik86a.py\", line 40,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpf07ik86a.py\"\
    , line 33, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    divisor =\
    \ 3\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n       \
    \     n //= divisor\n        else:\n            divisor += 2\n    return n\n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmjjkt1ax.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpmjjkt1ax.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpmjjkt1ax.py\"\
    , line 21, in check\n    assert candidate(330) == 11\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest =\
    \ 2\n    while n > largest:\n        if n % largest == 0:\n            n = n //\
    \ largest\n        else:\n            largest += 1\n    return largest\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors\
    \ = prime_factors_sieve(n)\n    return max(prime_factors)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpitwoknb6.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpitwoknb6.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpitwoknb6.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpitwoknb6.py\"\
    , line 8, in largest_prime_factor\n    prime_factors = prime_factors_sieve(n)\n\
    NameError: name 'prime_factors_sieve' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n  \
    \  possible_factor = 3\n    while n > 1:\n        while n % possible_factor ==\
    \ 0:\n            largest_factor = possible_factor\n            n //= possible_factor\n\
    \        possible_factor += 2\n    return largest_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime_so_far\
    \ = 1\n    factor = 2\n    while factor * factor <= n:\n        if n % factor\
    \ == 0:\n            largest_prime_so_far = factor\n            n = n // factor\n\
    \        else:\n            factor += 1\n    return max(largest_prime_so_far,\
    \ n)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ int(n ** 0.5) + 1):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    curr_factor\
    \ = 2\n    last_factor = 1\n    while n > 1:\n        if n % curr_factor == 0:\n\
    \            last_factor = curr_factor\n            n = n // curr_factor\n   \
    \         while n % curr_factor == 0:\n                n = n // curr_factor\n\
    \        curr_factor += 1\n    return last_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    last_factor = 1\n    while n > 1:\n        if n % factor == 0:\n        \
    \    last_factor = factor\n            n = n // factor\n            while n %\
    \ factor == 0:\n                n = n // factor\n        factor = factor + 1\n\
    \    return last_factor\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    primes = [2]\n\
    \    while n % primes[-1] != 0:\n        primes.append(next_prime(primes[-1]))\n\
    \    return primes[-1]\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqxwg0t0.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpmqxwg0t0.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpmqxwg0t0.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpmqxwg0t0.py\"\
    , line 10, in largest_prime_factor\n    primes.append(next_prime(primes[-1]))\n\
    NameError: name 'next_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for divisor\
    \ in range(2, math.ceil(math.sqrt(n))):\n        if n % divisor == 0:\n      \
    \      prime = largest_prime_factor(n // divisor)\n            return prime if\
    \ prime > divisor else divisor\n    return n\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgilxkg17.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgilxkg17.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpgilxkg17.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpgilxkg17.py\"\
    , line 8, in largest_prime_factor\n    for divisor in range(2, math.ceil(math.sqrt(n))):\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factor\
    \ = 1\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            prime_factor\
    \ = i\n            n = n // i\n        else:\n            i += 1\n    return prime_factor\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    largest_factor = 2\n    while n > 1:\n        if n % factor == 0:\n     \
    \       largest_factor = factor\n            n //= factor\n        else:\n   \
    \         factor += 1\n    return largest_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # primelist\
    \ is a list of primes. We start with primes less than the square\n    # root of\
    \ n and gradually increase the size of primelist.\n    primelist = [p for p in\
    \ range(2, int(math.sqrt(n)) + 1) if is_prime(p)]\n    # Find the largest prime\
    \ factor.\n    for p in reversed(primelist):\n        if n % p == 0:\n       \
    \     return p\n    # Increment the size of primelist by 1000.\n    primelist\
    \ = [p for p in range(primelist[-1] + 1,\n                                  primelist[-1]\
    \ + 1001) if is_prime(p)]\n    # Repeat the process.\n    for p in reversed(primelist):\n\
    \        if n % p == 0:\n            return p\n    # Increment the size of primelist\
    \ by 1000000.\n    primelist = [p for p in range(primelist[-1] + 1,\n        \
    \                          primelist[-1] + 1000001) if is_prime(p)]\n    # Repeat\
    \ the process.\n    for p in reversed(primelist):\n        if n % p == 0:\n  \
    \          return p\n    # Increment the size of primelist by 100000000.\n   \
    \ primelist = [p for p in range(primelist[-1] + 1,\n                         \
    \         primelist[-1] + 100000001) if is_prime(p)]\n    # Repeat the process.\n\
    \    for p in reversed(primelist):\n        if n % p == 0:\n            return\
    \ p\n    # Increment the size of primelist by 10000000000.\n    primelist = [p\
    \ for p in range(primelist[-1] + 1,\n                                  primelist[-1]\
    \ + 10000000001) if is_prime(p)]\n    # Repeat the process.\n    for p in reversed(primelist):\n\
    \        if n % p == 0:\n            return p\n    # Increment the size of primelist\
    \ by 1000000000000.\n    primelist = [p for p in range(primelist[-1] + 1,\n  \
    \                                primelist[-1] + 100000000001) if is_prime(p)]\n\
    \    # Repeat the process.\n    for p in reversed\ndef check(candidate):\n   \
    \ assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpqh3izzn3.py\", line 47\n    for p in reversed\n      \
    \              ^\nSyntaxError: invalid syntax\n"
  exit_code: 1
  status: SyntaxError
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return max(largest_prime_factor(i),\
    \ largest_prime_factor(n // i))\n    return n\n\n\ndef check(candidate):\n   \
    \ assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime_factor\
    \ = 1\n    # Calculate the largest prime factor of n\n    for factor in range(2,\
    \ n):\n        while n % factor == 0:\n            largest_prime_factor = factor\n\
    \            n = n // factor\n    return largest_prime_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ int(n**0.5) + 1):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n\
    \ - 1, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl1a7yq6h.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpl1a7yq6h.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpl1a7yq6h.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpl1a7yq6h.py\"\
    , line 9, in largest_prime_factor\n    if n % i == 0 and is_prime(i):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    f = 2\n  \
    \  while f * f <= n:\n        if n % f == 0:\n            n //= f\n        else:\n\
    \            f += 1\n    return n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n // 2 + 1):\n        if is_prime(i) and n % i == 0:\n            n = n // i\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7r9i08_e.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp7r9i08_e.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp7r9i08_e.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp7r9i08_e.py\"\
    , line 9, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i == 0:\n            n = n // i\n       \
    \ else:\n            i += 1\n    return n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 3\n\
    \    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n\
    \        else:\n            factor += 2\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = smallest_factor(n)\n\
    \    while factor < n:\n        n //= factor\n        factor = smallest_factor(n)\n\
    \    return n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwprt3_k.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpjwprt3_k.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpjwprt3_k.py\"\
    , line 15, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpjwprt3_k.py\"\
    , line 8, in largest_prime_factor\n    factor = smallest_factor(n)\nNameError:\
    \ name 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n\
    \            if is_prime(i) and n % i == 0:\n                return largest_prime_factor(n\
    \ / i)\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35rqis4r.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp35rqis4r.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp35rqis4r.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp35rqis4r.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n\
    \ - 1, 1, -1):\n        if is_prime(i) and n % i == 0:\n            return i\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_wd00brf.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_wd00brf.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp_wd00brf.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp_wd00brf.py\"\
    , line 9, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest =\
    \ 0\n    i = 2\n    while i <= n:\n        while n % i == 0:\n            largest\
    \ = i\n            n = n // i\n        i += 1\n    return largest\n \n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    d, result\
    \ = 2, 1\n    while n > 1:\n        while n % d == 0:\n            result, n =\
    \ d, n // d\n        d += 1\n    return result\n\n\ndef check(candidate):\n  \
    \  assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n\
    \            largest_prime = i\n            while n % i == 0:\n              \
    \  n = n // i\n    if n > 1:\n        largest_prime = n\n    return largest_prime\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjr1cs8be.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjr1cs8be.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpjr1cs8be.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpjr1cs8be.py\"\
    , line 9, in largest_prime_factor\n    for i in range(2, int(math.sqrt(n)) + 1):\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # n % i ==\
    \ 0 for every factor of n\n    # find the largest i where n % i == 0 and i is\
    \ prime\n    if n == 1:\n        return 1\n    i = 2\n    while i * i <= n:\n\
    \        if n % i == 0:\n            # check if i is prime\n            j = 2\n\
    \            while j * j <= i:\n                if i % j == 0:\n             \
    \       break\n                j += 1\n            if j * j > i:\n           \
    \     n = n // i\n        i += 1\n    return n\n\n\ndef check(candidate):\n  \
    \  assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpykd8iaz1.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpykd8iaz1.py\", line 35,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpykd8iaz1.py\"\
    , line 29, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # A helper\
    \ function to get the prime factorization of n.\n    def prime_factorization(n:\
    \ int) -> List[int]:\n        \"\"\"Return the prime factorization of n. Assume\
    \ n > 1 and is not a prime.\n        >>> prime_factorization(13195)\n        [5,\
    \ 7, 13, 29]\n        >>> prime_factorization(2048)\n        [2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2]\n        \"\"\"\n        # Find the smallest divisor of n\n    \
    \    divisor = find_smallest_divisor(n)\n        # If n is a prime, return [n]\n\
    \        if divisor == n:\n            return [n]\n        # Otherwise, prime\
    \ factorization of n is prime factorization of\n        # n // divisor + [divisor]\n\
    \        return prime_factorization(n // divisor) + [divisor]\n    # Return the\
    \ max of prime_factorization(n)\n    return max(prime_factorization(n))\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps7gsuavu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmps7gsuavu.py\", line 35,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmps7gsuavu.py\"\
    , line 28, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmps7gsuavu.py\"\
    , line 9, in largest_prime_factor\n    def prime_factorization(n: int) -> List[int]:\n\
    NameError: name 'List' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n //= factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n % factor != 0:\n        factor += 1\n    return factor\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3wor41fb.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp3wor41fb.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp3wor41fb.py\"\
    , line 13, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for k in range(2,\
    \ int(n ** 0.5) + 1):\n        if n % k == 0:\n            return largest_prime_factor(n\
    \ // k)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    result = max([x\
    \ for x in range(2, n + 1) if n % x == 0 and is_prime(x)])\n    return result\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ggq_yv0.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp1ggq_yv0.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp1ggq_yv0.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp1ggq_yv0.py\"\
    , line 8, in largest_prime_factor\n    result = max([x for x in range(2, n + 1)\
    \ if n % x == 0 and is_prime(x)])\n  File \"/tmp/tmp1ggq_yv0.py\", line 8, in\
    \ <listcomp>\n    result = max([x for x in range(2, n + 1) if n % x == 0 and is_prime(x)])\n\
    NameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    import math\n\
    \    biggest_factor = 1\n    while n % 2 == 0:\n        biggest_factor = 2\n \
    \       n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while\
    \ n % i == 0:\n            biggest_factor = i\n            n = n / i\n    if n\
    \ > 2:\n        biggest_factor = n\n    return int(biggest_factor)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for divisor\
    \ in reversed(range(n, 1, -1)):\n        if n % divisor == 0 and is_prime(divisor):\n\
    \            return divisor\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa23929jb.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpa23929jb.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpa23929jb.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpa23929jb.py\"\
    , line 9, in largest_prime_factor\n    if n % divisor == 0 and is_prime(divisor):\n\
    NameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= n:\n        if n % factor == 0:\n            n = n // factor\n\
    \        else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    # TODO: rewrite with itertools.accumulate()?\n    for factor in smallest_factor_iter(n):\n\
    \        largest_prime = factor\n    return largest_prime\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqqn4w52h.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpqqn4w52h.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpqqn4w52h.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpqqn4w52h.py\"\
    , line 10, in largest_prime_factor\n    for factor in smallest_factor_iter(n):\n\
    NameError: name 'smallest_factor_iter' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = n\n\
    \    largest_prime = 2\n    i = 2\n    while factor > 1:\n        while factor\
    \ % i == 0:\n            factor = factor // i\n            largest_prime = i\n\
    \        i += 1\n    return largest_prime\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        factor = 2\n        n = n / 2\n        while n % 2 == 0:\n     \
    \       n = n / 2\n    else:\n        factor = 1\n    p = 3\n    while n != 1:\n\
    \        if n % p == 0:\n            factor = p\n            n = n / p\n     \
    \       while n % p == 0:\n                n = n / p\n        p += 2\n    return\
    \ factor\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n = n // factor\n\
    \        else:\n            factor += 1\n    return factor\n\nlargest_prime_factor(600851475143)\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n\
    \ % i == 0 and is_prime(i):\n            return i\n    raise Exception(f\"n={n}\
    \ is not a prime\")\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzbylnfn9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzbylnfn9.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpzbylnfn9.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpzbylnfn9.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Maintain\
    \ a list of prime factors and call next_prime_factor on n\n    factors = []\n\
    \    current_factor = 2\n    while True:\n        if not is_prime(current_factor):\n\
    \            current_factor = next_prime(current_factor)\n        if is_prime(n):\n\
    \            factors.append(n)\n            break\n        elif n % current_factor\
    \ == 0:\n            n = n // current_factor\n            factors.append(current_factor)\n\
    \        else:\n            current_factor = next_prime(current_factor)\n    return\
    \ max(factors)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n   \
    \ assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbnzab965.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbnzab965.py\", line 33,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpbnzab965.py\"\
    , line 26, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpbnzab965.py\"\
    , line 12, in largest_prime_factor\n    if not is_prime(current_factor):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ int(n ** 0.5) + 1):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Hint: Iterate\
    \ over all the numbers from 2 to n and check if n is\n    # divisible by each\
    \ of them. If it is, replace n with n // i and\n    # keep iterating until n becomes\
    \ 1. The last non-1 number will be\n    # the largest prime factor of the original\
    \ n.\n    i = 2\n    while n > 1:\n        if n % i == 0:\n            n = n //\
    \ i\n        else:\n            i += 1\n    return i\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    for i in range(2, int(n ** 0.5) + 1):\n        if\
    \ n % i == 0 and is_prime(i):\n            return i\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8obfv6cx.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp8obfv6cx.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp8obfv6cx.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp8obfv6cx.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors\
    \ = prime_factors_of(n)\n    return max(prime_factors)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbuatefp6.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpbuatefp6.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpbuatefp6.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpbuatefp6.py\"\
    , line 8, in largest_prime_factor\n    prime_factors = prime_factors_of(n)\nNameError:\
    \ name 'prime_factors_of' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    largest_factor = 1\n    while n > 1:\n        if n % factor == 0:\n     \
    \       largest_factor = factor\n            n = n // factor\n        else:\n\
    \            factor += 1\n    return largest_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    return max([x for x in range(2, n + 1) if n % x == 0 and\
    \ is_prime(x)])\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n  \
    \  assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe302efo2.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpe302efo2.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpe302efo2.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpe302efo2.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    f = int(math.sqrt(n))\n\
    \    while True:\n        if is_prime(f) and n % f == 0:\n            return f\n\
    \        f -= 1\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n  \
    \  assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiodwlwzr.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpiodwlwzr.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpiodwlwzr.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpiodwlwzr.py\"\
    , line 8, in largest_prime_factor\n    f = int(math.sqrt(n))\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_factor(m,\
    \ n):\n        return n % m == 0\n\n    def is_prime(m):\n        return _is_prime(m,\
    \ m-1)\n\n    def _is_prime(m, i):\n        if i == 1:\n            return True\n\
    \        if m % i == 0:\n            return False\n        return _is_prime(m,\
    \ i-1)\n\n    k = n\n    i = n\n    while not (is_factor(i, k) and is_prime(i)):\n\
    \        i -= 1\n    return i\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6z4myle0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp6z4myle0.py\", line 36,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp6z4myle0.py\"\
    , line 33, in check\n    assert candidate(13195) == 29\n  File \"/tmp/tmp6z4myle0.py\"\
    , line 23, in largest_prime_factor\n    while not (is_factor(i, k) and is_prime(i)):\n\
    \  File \"/tmp/tmp6z4myle0.py\", line 12, in is_prime\n    return _is_prime(m,\
    \ m-1)\n  File \"/tmp/tmp6z4myle0.py\", line 19, in _is_prime\n    return _is_prime(m,\
    \ i-1)\n  File \"/tmp/tmp6z4myle0.py\", line 19, in _is_prime\n    return _is_prime(m,\
    \ i-1)\n  File \"/tmp/tmp6z4myle0.py\", line 19, in _is_prime\n    return _is_prime(m,\
    \ i-1)\n  [Previous line repeated 991 more times]\n  File \"/tmp/tmp6z4myle0.py\"\
    , line 15, in _is_prime\n    if i == 1:\nRecursionError: maximum recursion depth\
    \ exceeded in comparison\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p, r = 2,\
    \ n\n    while True:\n        if r % p == 0:\n            r //= p\n        else:\n\
    \            p += 1\n        if r == 1:\n            return p\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    d, i = n,\
    \ 2\n    while i < d:\n        if is_prime(i) and d % i == 0:\n            d =\
    \ d // i\n        else:\n            i += 1\n    return d\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3a_mpv6f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp3a_mpv6f.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp3a_mpv6f.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp3a_mpv6f.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(i) and d % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    while n % 2 == 0:\n        largest_prime = 2\n        n = n // 2\n\
    \    factor = 3\n    while n != 1:\n        while n % factor == 0:\n         \
    \   largest_prime = factor\n            n = n // factor\n        factor += 2\n\
    \    return largest_prime\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n %\
    \ 2 == 0:\n        n = n // 2\n    factor = 3\n    while n > 1:\n        while\
    \ n % factor == 0:\n            n = n // factor\n        factor += 2\n    return\
    \ factor - 2\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    num_factor\
    \ = prime_factor(n)\n    return max(num_factor)\n\n\ndef check(candidate):\n \
    \   assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk5k7j97u.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpk5k7j97u.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpk5k7j97u.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpk5k7j97u.py\"\
    , line 8, in largest_prime_factor\n    num_factor = prime_factor(n)\nNameError:\
    \ name 'prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest =\
    \ 1\n    for i in range(2, n // 2 + 1):\n        if is_prime(i) and n % i == 0:\n\
    \            largest = i\n    return largest\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpie1znrgv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpie1znrgv.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpie1znrgv.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpie1znrgv.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \"*** YOUR\
    \ CODE HERE ***\"\n    i = 2\n    while i < n:\n        if n % i == 0:\n     \
    \       n //= i\n        else:\n            i += 1\n    return n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ list(prime_factors(n))\n    assert len(factors) > 1\n    return factors[-1]\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf9r5ywdc.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpf9r5ywdc.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpf9r5ywdc.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpf9r5ywdc.py\"\
    , line 8, in largest_prime_factor\n    factors = list(prime_factors(n))\nNameError:\
    \ name 'prime_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor < n:\n        if n % factor == 0:\n            return largest_prime_factor(n\
    \ // factor)\n        factor += 1\n    return n\n\n\ndef check(candidate):\n \
    \   assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n\
    \ // 2, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3akoc38y.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp3akoc38y.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp3akoc38y.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp3akoc38y.py\"\
    , line 9, in largest_prime_factor\n    if n % i == 0 and is_prime(i):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1\n    # base case\n    if is_prime(n):\n        return n\n    factors = get_factors(n)\n\
    \    return max(factors)\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm4d_yoi8.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpm4d_yoi8.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpm4d_yoi8.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpm4d_yoi8.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return max(largest_prime_factor(i),\
    \ largest_prime_factor(n//i))\n    return n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        return largest_prime_factor(n / 2)\n    for i in range(3, n // 2,\
    \ 2):\n        if n % i == 0:\n            return largest_prime_factor(n / i)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8n4oui7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx8n4oui7.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpx8n4oui7.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpx8n4oui7.py\"\
    , line 12, in largest_prime_factor\n    return largest_prime_factor(n / i)\n \
    \ File \"/tmp/tmpx8n4oui7.py\", line 10, in largest_prime_factor\n    for i in\
    \ range(3, n // 2, 2):\nTypeError: 'float' object cannot be interpreted as an\
    \ integer\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    d, k = 2,\
    \ n\n    while k > 1:\n        while k % d == 0:\n            k //= d\n      \
    \  d += 1\n    return d - 1\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # clear out\
    \ any even factors\n    while n % 2 == 0:\n        n = n // 2\n    factor = 3\n\
    \    while factor * factor <= n:\n        if n % factor == 0:\n            n =\
    \ n // factor\n        else:\n            factor += 2\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ prime_factors(n)\n    return max(factors)\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_juclaf.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmps_juclaf.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmps_juclaf.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmps_juclaf.py\"\
    , line 8, in largest_prime_factor\n    factors = prime_factors(n)\nNameError:\
    \ name 'prime_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    current_divisor = 2\n    while current_divisor <= n:\n        while\
    \ n % current_divisor == 0:\n            largest_factor = current_divisor\n  \
    \          n = n // current_divisor\n        current_divisor += 1\n    return\
    \ largest_factor\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n \
    \   assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    cur_factor\
    \ = 2\n    cur_n = n\n    while cur_n > 1:\n        if cur_n % cur_factor == 0:\n\
    \            cur_n //= cur_factor\n        else:\n            cur_factor += 1\n\
    \    return cur_factor\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return n //\
    \ smallest_prime_factor(n)\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo6xu8076.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpo6xu8076.py\", line 19,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpo6xu8076.py\"\
    , line 12, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpo6xu8076.py\"\
    , line 8, in largest_prime_factor\n    return n // smallest_prime_factor(n)\n\
    NameError: name 'smallest_prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        largest_factor = 2\n        n = n // 2\n        while n % 2 == 0:\n\
    \            n = n // 2\n    else:\n        largest_factor = 1\n    factor = 3\n\
    \    max_factor = math.sqrt(n)\n    while n > 1 and factor <= max_factor:\n  \
    \      if n % factor == 0:\n            n = n // factor\n            largest_factor\
    \ = factor\n            while n % factor == 0:\n                n = n // factor\n\
    \            max_factor = math.sqrt(n)\n        factor = factor + 2\n    if n\
    \ == 1:\n        return largest_factor\n    else:\n        return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3x_8yy4t.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3x_8yy4t.py\", line 39,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp3x_8yy4t.py\"\
    , line 32, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp3x_8yy4t.py\"\
    , line 16, in largest_prime_factor\n    max_factor = math.sqrt(n)\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \"*** YOUR\
    \ CODE HERE ***\"\n    factor = n // 2\n    while factor > 1:\n        if is_prime(factor)\
    \ and n % factor == 0:\n            return factor\n        factor -= 1\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypgqvxe_.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpypgqvxe_.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpypgqvxe_.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpypgqvxe_.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(factor) and n % factor ==\
    \ 0:\nNameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\nprint(largest_prime_factor(600851475143))\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n % factor != 0:\n        factor += 1\n    if n == factor:\n      \
    \  return n\n    else:\n        return largest_prime_factor(n // factor)\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest =\
    \ 2\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n =\
    \ n // i\n            largest = i\n        else:\n            i += 1\n    return\
    \ max(largest, n)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    p = n\n  \
    \  while p > 2:\n        if is_prime(p):\n            break\n        p -= 1\n\
    \    return p\n\nlargest_prime_factor(600851475143)\n \ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbwlzy1t0.py\", line\
    \ 15, in <module>\n    largest_prime_factor(600851475143)\n  File \"/tmp/tmpbwlzy1t0.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(p):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor == 0:\n            n //=\
    \ factor\n        else:\n            factor += 1\n    return n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors\
    \ = list(set(prime_factors_m(n)))\n    return max(prime_factors)\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewn1bb7q.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpewn1bb7q.py\", line 19,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpewn1bb7q.py\"\
    , line 12, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpewn1bb7q.py\"\
    , line 8, in largest_prime_factor\n    prime_factors = list(set(prime_factors_m(n)))\n\
    NameError: name 'prime_factors_m' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime = 2\n\
    \    while n > 1:\n        if is_prime(prime) and n % prime == 0:\n          \
    \  n = n // prime\n        else:\n            prime += 1\n    return prime\n\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc09fzth2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpc09fzth2.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpc09fzth2.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpc09fzth2.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(prime) and n % prime == 0:\n\
    NameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors\
    \ = [1]\n    x = 2\n    while x <= n:\n        if x > n:\n            break\n\
    \        elif n % x == 0:\n            prime_factors.append(x)\n            n\
    \ = n / x\n        else:\n            x += 1\n    return prime_factors[-1]\n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1 and not is_prime(n)\n    if n % 2 == 0:\n        return largest_prime_factor(n\
    \ // 2)\n    for i in range(3, math.floor(math.sqrt(n)), 2):\n        if n % i\
    \ == 0:\n            return largest_prime_factor(n // i)\n    return n\n\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu51pbyhi.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpu51pbyhi.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpu51pbyhi.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpu51pbyhi.py\"\
    , line 8, in largest_prime_factor\n    assert n > 1 and not is_prime(n)\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor:\n            factor +=\
    \ 1\n        else:\n            n //= factor\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Find the\
    \ largest prime factor.\n    largest_factor = 1\n    factor = 2\n    while factor\
    \ <= n:\n        if n % factor == 0:\n            largest_factor = factor\n  \
    \          n //= factor\n        else:\n            factor += 1\n    return largest_factor\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            return max(largest_prime_factor(i),\
    \ largest_prime_factor(n // i))\n    return n\n\n\ndef check(candidate):\n   \
    \ assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    else:\n        d = smallest_divisor(n)\n        return\
    \ largest_prime_factor(n // d)\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw611rhfb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpw611rhfb.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpw611rhfb.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpw611rhfb.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    lpf = 0\n\
    \    i = 2\n    while n > 1:\n        if n % i == 0:\n            lpf = i\n  \
    \          n = n // i\n        else:\n            i += 1\n    return lpf\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    pass\n\n\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclie21zl.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpclie21zl.py\", line 19,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpclie21zl.py\"\
    , line 12, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    while n > 1:\n        largest_prime += 1\n        while n % largest_prime\
    \ == 0:\n            n //= largest_prime\n    return largest_prime\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # find the\
    \ prime factor with smallest length\n    # this helps us by not having to factor\
    \ a large number\n    length, factor = 0, 1\n    for i in range(1, n+1):\n   \
    \     if n % i == 0:\n            # remember to remove duplicate factors\n   \
    \         if (get_prime_factors(i) and\n                    len(get_prime_factors(i))\
    \ > length and\n                    i not in get_prime_factors(n//i)):\n     \
    \           length = len(get_prime_factors(i))\n                factor = i\n \
    \   return factor\n\ndef check(candidate):\n    assert candidate(15) == 5\n  \
    \  assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jrklop3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8jrklop3.py\", line 29,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp8jrklop3.py\"\
    , line 22, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp8jrklop3.py\"\
    , line 14, in largest_prime_factor\n    if (get_prime_factors(i) and\nNameError:\
    \ name 'get_prime_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = next_prime_factor(n)\n\
    \    while factor is not None:\n        n //= factor\n        factor = next_prime_factor(n)\n\
    \    return n\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51hi6z10.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp51hi6z10.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp51hi6z10.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp51hi6z10.py\"\
    , line 8, in largest_prime_factor\n    factor = next_prime_factor(n)\nNameError:\
    \ name 'next_prime_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n\
    \        raise ValueError(\"\"\"n must be > 1\"\"\")\n    factor = 2\n    while\
    \ factor <= n:\n        if n % factor == 0:\n            n = n // factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n == 2:\n\
    \        return 2\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n\
    \            if n % i == 0:\n                return largest_prime_factor(n //\
    \ i)\n        return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7fbcwn5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpl7fbcwn5.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpl7fbcwn5.py\"\
    , line 21, in check\n    assert candidate(330) == 11\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxooerubt.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpxooerubt.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpxooerubt.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpxooerubt.py\"\
    , line 8, in largest_prime_factor\n    for i in range(2, int(math.sqrt(n)) + 1):\n\
    NameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n-1,\
    \ 1, -1):\n        if is_prime(i) and n % i == 0:\n            return i\n\ndef\
    \ check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) ==\
    \ 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6u4y8re0.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp6u4y8re0.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp6u4y8re0.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp6u4y8re0.py\"\
    , line 9, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    lst = factor(n)\n\
    \    return max(lst)\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8mc17o3.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpp8mc17o3.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpp8mc17o3.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpp8mc17o3.py\"\
    , line 8, in largest_prime_factor\n    lst = factor(n)\nNameError: name 'factor'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    lpf = 1\n\
    \    for i in range(2, n // 2 + 1):\n        if is_prime(i) and n % i == 0:\n\
    \            lpf = i\n    return lpf\n\nprint(largest_prime_factor(600851475143))\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjsr9wbw6.py\", line\
    \ 14, in <module>\n    print(largest_prime_factor(600851475143))\n  File \"/tmp/tmpjsr9wbw6.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1\n    assert not is_prime(n)\n    factor = next(iter_factors(n))\n    while\
    \ not is_prime(factor):\n        factor = next(iter_factors(factor))\n    return\
    \ factor\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxhewj14r.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpxhewj14r.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpxhewj14r.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpxhewj14r.py\"\
    , line 9, in largest_prime_factor\n    assert not is_prime(n)\nNameError: name\
    \ 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Compute\
    \ prime factors, then return the last one.\n    return prime_factors(n)[-1]\n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5bro9rh.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmps5bro9rh.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmps5bro9rh.py\"\
    , line 13, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmps5bro9rh.py\"\
    , line 9, in largest_prime_factor\n    return prime_factors(n)[-1]\nNameError:\
    \ name 'prime_factors' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    d, i = n,\
    \ 2\n    while d >= i:\n        if d % i == 0:\n            d //= i\n        else:\n\
    \            i += 1\n    return i\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # If a number\
    \ is not prime, it has a prime factor\n    # Find factor and recurse on prime\
    \ factor\n    # If number is prime, return self\n    # If factor is 1, return\
    \ n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n  \
    \  elif n == 3:\n        return 3\n    elif n % 2 == 0:\n        return largest_prime_factor(n\
    \ // 2)\n    elif n % 3 == 0:\n        return largest_prime_factor(n // 3)\n \
    \   else:\n        # Go up to n // 2 (since we know n is not a prime)\n      \
    \  for i in range(2, n // 2):\n            if n % i == 0:\n                return\
    \ largest_prime_factor(n // i)\n        return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(n\
    \ // 2, 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpub5xxl88.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpub5xxl88.py\", line 21,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpub5xxl88.py\"\
    , line 14, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpub5xxl88.py\"\
    , line 9, in largest_prime_factor\n    if n % i == 0 and is_prime(i):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n % factor != 0:\n        factor += 1\n    if n == factor:\n      \
    \  return n\n    else:\n        return largest_prime_factor(n // factor)\n\n\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    for d in range(n-1, 1, -1):\n        if n % d == 0 and\
    \ is_prime(d):\n            return d\n    raise ValueError(f'Impossible: {n}')\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3_xd25c.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi3_xd25c.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpi3_xd25c.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpi3_xd25c.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    number = n\n\
    \    largest_prime = 0\n    divisor = 2\n    while number != 1:\n        if number\
    \ % divisor == 0:\n            largest_prime = divisor\n            number = number\
    \ // divisor\n        else:\n            divisor += 1\n    return largest_prime\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i <= n:\n        if n % i == 0:\n            n = n // i\n        else:\n\
    \            i += 1\n    return i\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n <= 1:\n\
    \        raise ValueError(\"n must be greater than 1\")\n    if is_prime(n):\n\
    \        raise ValueError(\"n must not be a prime\")\n    largest_prime = 1\n\
    \    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n     \
    \       largest_prime = i\n    return largest_prime\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphdpld26o.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphdpld26o.py\", line 27,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmphdpld26o.py\"\
    , line 20, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmphdpld26o.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors\
    \ = []\n    d = 2\n    while d <= n:\n        if n % d == 0:\n            prime_factors.append(d)\n\
    \            n //= d\n        else:\n            d += 1\n    return prime_factors[-1]\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor\
    \ = 1\n    factor = 2\n    while factor <= n:\n        if is_prime(factor) and\
    \ n % factor == 0:\n            largest_factor = factor\n        factor += 1\n\
    \    return largest_factor\n    \n    \ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcghn1cyw.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpcghn1cyw.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpcghn1cyw.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpcghn1cyw.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(factor) and n % factor ==\
    \ 0:\nNameError: name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 1\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            largest_prime\
    \ = i\n            n //= i\n        else:\n            i += 1\n    return largest_prime\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    while n %\
    \ 2 == 0:\n        n = n // 2\n    factor = 3\n    while n > 1:\n        while\
    \ n % factor == 0:\n            n = n // factor\n        factor += 2\n    return\
    \ factor\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd0qluz8k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd0qluz8k.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpd0qluz8k.py\"\
    , line 19, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # This is\
    \ a basic solution to the problem.\n    # A more efficient solution could exist\
    \ by realizing that the largest\n    # factor is not always the largest prime\
    \ factor\n    factor = 2\n    largest_factor = n\n    while factor <= largest_factor:\n\
    \        if n % factor == 0:\n            largest_factor = n // factor\n     \
    \       if is_prime(largest_factor):\n                return largest_factor\n\
    \        factor += 1\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp93lugtiw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp93lugtiw.py\", line 29,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp93lugtiw.py\"\
    , line 22, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp93lugtiw.py\"\
    , line 16, in largest_prime_factor\n    if is_prime(largest_factor):\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    assert n >\
    \ 1\n    if is_prime(n):\n        return n\n    i = 2\n    while n > 1:\n    \
    \    if n % i == 0:\n            n //= i\n        else:\n            i += 1\n\
    \    return i\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy26c2_1q.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpy26c2_1q.py\", line 28,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpy26c2_1q.py\"\
    , line 21, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpy26c2_1q.py\"\
    , line 9, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    prime_factors\
    \ = [1]\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n   \
    \         prime_factors.append(divisor)\n            n = n // divisor\n      \
    \  else:\n            divisor += 1\n    return max(prime_factors)\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    return max(factor_pair(n))\n\
    \n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvm6d5si.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpdvm6d5si.py\", line 19,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpdvm6d5si.py\"\
    , line 12, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpdvm6d5si.py\"\
    , line 8, in largest_prime_factor\n    return max(factor_pair(n))\nNameError:\
    \ name 'factor_pair' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 1\n\
    \    while n % 2 == 0:\n        factor = 2\n        n = n // 2\n    factor_sqrt\
    \ = int(n ** 0.5)\n    for i in range(3, factor_sqrt + 1, 2):\n        while n\
    \ % i == 0:\n            factor = i\n            n = n // i\n    if n > 2:\n \
    \       factor = n\n    return factor\n\nprint(largest_prime_factor(600851475143))\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i <= sqrt(n):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n        i += 1\n    return n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpajt504kw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpajt504kw.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpajt504kw.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpajt504kw.py\"\
    , line 9, in largest_prime_factor\n    while i <= sqrt(n):\nNameError: name 'sqrt'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # divide n\
    \ by 2 while n is divisible by 2\n    while n % 2 == 0:\n        n //= 2\n   \
    \ factor = 3\n    while factor < n:\n        while n % factor == 0:\n        \
    \    n //= factor\n        factor += 2\n    return n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjna8h5a8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjna8h5a8.py\", line 26,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpjna8h5a8.py\"\
    , line 20, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def factor(n):\n\
    \        \"\"\"Return a generator that yields the prime factors of n,\n      \
    \  in ascending order.\n        \"\"\"\n        factor = 2\n        while n >\
    \ 1:\n            if n % factor == 0:\n                yield factor\n        \
    \        n //= factor\n            else:\n                factor += 1\n      \
    \  return\n    return max(factor(n))\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n):\n        if n % i == 0:\n            prime = largest_prime_factor(n // i)\n\
    \            if is_prime(prime):\n                return prime\n    return n\n\
    \ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi3f5iaxj.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpi3f5iaxj.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpi3f5iaxj.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpi3f5iaxj.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(prime):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        return largest_prime_factor(n // 2)\n    for i in range(3, math.floor(math.sqrt(n))\
    \ + 1, 2):\n        if n % i == 0:\n            return largest_prime_factor(n\
    \ // i)\n    return n\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmt6ymheu.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpmt6ymheu.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpmt6ymheu.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpmt6ymheu.py\"\
    , line 10, in largest_prime_factor\n    for i in range(3, math.floor(math.sqrt(n))\
    \ + 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    n = n // 2\n\
    \n    for i in range(n, 1, -1):\n        if is_prime(i) and n % i == 0:\n    \
    \        return i\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n\
    \    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_rqdx7vp.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_rqdx7vp.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp_rqdx7vp.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp_rqdx7vp.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    for i in range(2,\
    \ n+1):\n        if n % i == 0:\n            n //= i\n    return i\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx3o_z74z.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpx3o_z74z.py\", line 22,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpx3o_z74z.py\"\
    , line 15, in check\n    assert candidate(15) == 5\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n \
    \           n //= i\n    return n\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime_factor\
    \ = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            largest_prime_factor\
    \ = i\n            n //= i\n    return largest_prime_factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbanr8nnc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpbanr8nnc.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpbanr8nnc.py\"\
    , line 18, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factors =\
    \ list(filter(lambda x: n % x == 0, range(2, n)))\n    return factors[-1]\n\n\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9l1ppvte.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmp9l1ppvte.py\", line 20,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp9l1ppvte.py\"\
    , line 14, in check\n    assert candidate(27) == 3\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    counter =\
    \ 2\n    while counter <= math.sqrt(n):\n        if is_prime(counter) and n %\
    \ counter == 0:\n            max_prime = counter\n        counter += 1\n    return\
    \ max_prime\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert\
    \ candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330)\
    \ == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5qupk9fs.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5qupk9fs.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp5qupk9fs.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp5qupk9fs.py\"\
    , line 9, in largest_prime_factor\n    while counter <= math.sqrt(n):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    d, largest\
    \ = 2, 0\n    while d <= n // 2:\n        if n % d == 0:\n            if is_prime(d):\n\
    \                largest = d\n        d += 1\n    return largest\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6v1urv3g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp6v1urv3g.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp6v1urv3g.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp6v1urv3g.py\"\
    , line 11, in largest_prime_factor\n    if is_prime(d):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        return 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n   \
    \     if n % i == 0:\n            return i\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg7w94aiq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpg7w94aiq.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpg7w94aiq.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpg7w94aiq.py\"\
    , line 10, in largest_prime_factor\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_prime\
    \ = 0\n    prime = 2\n    while n > 1:\n        while n % prime == 0:\n      \
    \      largest_prime = prime\n            n //= prime\n        prime += 1\n  \
    \  return largest_prime\n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor <= math.sqrt(n):\n        if n % factor == 0:\n            n\
    \ //= factor\n        else:\n            factor += 1\n    return n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gyoco2b.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp1gyoco2b.py\", line 24,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp1gyoco2b.py\"\
    , line 17, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp1gyoco2b.py\"\
    , line 9, in largest_prime_factor\n    while factor <= math.sqrt(n):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    lpf = n\n\
    \    for i in range(2, n):\n        if n % i == 0:\n            lpf = largest_prime_factor(n\
    \ // i)\n            break\n    return lpf\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 1\n\
    \    for i in range(2, int(n / 2) + 1):\n        if is_prime(i) and n % i == 0:\n\
    \            factor = i\n    return factor\n\n\ndef check(candidate):\n    assert\
    \ candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsjw34btz.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpsjw34btz.py\", line 23,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpsjw34btz.py\"\
    , line 16, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpsjw34btz.py\"\
    , line 10, in largest_prime_factor\n    if is_prime(i) and n % i == 0:\nNameError:\
    \ name 'is_prime' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n % 2 ==\
    \ 0:\n        return largest_prime_factor(n / 2)\n    x = 3\n    while x <= math.sqrt(n):\n\
    \        if n % x == 0:\n            return largest_prime_factor(n / x)\n    \
    \    x += 2\n    return n\n\ndef check(candidate):\n    assert candidate(15) ==\
    \ 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjf2zylpm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjf2zylpm.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmpjf2zylpm.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmpjf2zylpm.py\"\
    , line 11, in largest_prime_factor\n    while x <= math.sqrt(n):\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while n > 1:\n        if n % factor == 0:\n            n //= factor\n   \
    \     else:\n            factor += 1\n    return factor\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if n < 2:\n\
    \        return None\n    while True:\n        f = smallest_factor(n)\n      \
    \  if f == n:\n            return n\n        n //= f\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_ekgtzvq.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_ekgtzvq.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp_ekgtzvq.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp_ekgtzvq.py\"\
    , line 11, in largest_prime_factor\n    f = smallest_factor(n)\nNameError: name\
    \ 'smallest_factor' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    i = 2\n  \
    \  while i <= math.sqrt(n):\n        if n % i == 0:\n            n = n // i\n\
    \        else:\n            i += 1\n    return n\n\n\ndef check(candidate):\n\
    \    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63)\
    \ == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n\
    def test_check():\n    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5eparqz4.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5eparqz4.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmp5eparqz4.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmp5eparqz4.py\"\
    , line 9, in largest_prime_factor\n    while i <= math.sqrt(n):\nNameError: name\
    \ 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    factor = 2\n\
    \    while factor * factor <= n:\n        if n % factor:\n            factor +=\
    \ 1\n        else:\n            n //= factor\n    return n\n\n\nprint(largest_prime_factor(600851475143))\n\
    def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27)\
    \ == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert\
    \ candidate(13195) == 29\n\ndef test_check():\n    check(largest_prime_factor)\n\
    \ntest_check()\n"
  stdout: "6857\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    if is_prime(n):\n\
    \        return n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n\
    \            return largest_prime_factor(n // i)\n        if is_prime(n // i):\n\
    \            return n // i\n\n\ndef check(candidate):\n    assert candidate(15)\
    \ == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert\
    \ candidate(330) == 11\n    assert candidate(13195) == 29\n\ndef test_check():\n\
    \    check(largest_prime_factor)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjnldswg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmppjnldswg.py\", line 25,\
    \ in test_check\n    check(largest_prime_factor)\n  File \"/tmp/tmppjnldswg.py\"\
    , line 18, in check\n    assert candidate(15) == 5\n  File \"/tmp/tmppjnldswg.py\"\
    , line 8, in largest_prime_factor\n    if is_prime(n):\nNameError: name 'is_prime'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
