name: HumanEval_22_filter_integers
language: py
results:
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [\n        integer\n\
    \        for integer in values\n        if isinstance(integer, int)\n    ]\n\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    new_list = []\n    for\
    \ x in values:\n        if isinstance(x, int):\n            new_list.append(x)\n\
    \    return new_list\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8h5cc7rj.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp8h5cc7rj.py\", line 18,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmp8h5cc7rj.py\", line\
    \ 13, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq47dxi3h.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpq47dxi3h.py\", line 19,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmpq47dxi3h.py\", line\
    \ 14, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    res = []\n    for v in\
    \ values:\n        if isinstance(v, int):\n            res.append(v)\n    return\
    \ res\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n    \n    \ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # The solution we are\
    \ looking for\n    return [value for value in values if isinstance(value, int)]\n\
    \n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    if not isinstance(values,\
    \ list):\n        raise TypeError\n    return [elem for elem in values if isinstance(elem,\
    \ int)]\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [num for num in\
    \ values if isinstance(num, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    if not isinstance(values,\
    \ list):\n        raise ValueError(\"Incorrect input data. Input must be a list.\"\
    )\n    return [x for x in values if isinstance(x, int)]\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # TODO: write implementation\n\
    \    return [i for i in values if isinstance(i, int)]\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [elem for elem\
    \ in values if isinstance(elem, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # TODO: implement this\
    \ function\n    # TODO: use python's built-in function \"isinstance(v, int)\"\n\
    \    # https://docs.python.org/3/library/functions.html#isinstance\n    raise\
    \ NotImplementedError()\n\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn9956n5j.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpn9956n5j.py\", line 22,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmpn9956n5j.py\", line\
    \ 17, in check\n    assert candidate([]) == []\n  File \"/tmp/tmpn9956n5j.py\"\
    , line 13, in filter_integers\n    raise NotImplementedError()\nNotImplementedError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integer_list = []\n  \
    \  for value in values:\n        if isinstance(value, int):\n            integer_list.append(value)\n\
    \    return integer_list\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(x) for x in\
    \ values if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            integers.append(value)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_list = []\n \
    \   for value in values:\n        if isinstance(value, int):\n            filtered_list.append(value)\n\
    \    return filtered_list\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # filtering only for integers\n\
    \    return [value for value in values if isinstance(value, int)]\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    new_values = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            new_values.append(value)\n\
    \    return new_values\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    list_of_ints = []\n  \
    \  for item in values:\n        if isinstance(item, int):\n            list_of_ints.append(item)\n\
    \    return list_of_ints\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ i in values:\n        if isinstance(i, int):\n            integers.append(i)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            integers.append(value)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [\n        value\
    \ for value in values if isinstance(value, int)\n    ]\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\nprint(filter_integers(['a', 3.14, 5]))\nprint(filter_integers([1,\
    \ 2, 3, 'abc', {}, []]))\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: "[5]\n[1, 2, 3]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            integers.append(value)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(value) for\
    \ value in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ val in values:\n        if isinstance(val, int):\n            integers.append(val)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for item\
    \ in values if isinstance(item, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_integers = []\n\
    \    for value in values:\n        if isinstance(value, int):\n            filtered_integers.append(value)\n\
    \    return filtered_integers\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [num for num in\
    \ values if isinstance(num, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    int_list = [x for x in\
    \ values if isinstance(x, int)]\n    return int_list\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # we use list comprehension\
    \ to filter values for integers\n    # and cast each value to integer to avoid\
    \ situation like with '1':\n    # >>> 1 == '1'\n    # False\n    # >>> 1 == int('1')\n\
    \    # True\n    return [int(value) for value in values if isinstance(value, int)]\n\
    \nprint(filter_integers([1, 2, 3, 'abc', {}, []]))\n\nprint(filter_integers(['a',\
    \ 3.14, 5]))\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: "[1, 2, 3]\n[5]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    only_integers = []\n \
    \   for value in values:\n        if isinstance(value, int):\n            only_integers.append(value)\n\
    \    return only_integers\n\nprint(filter_integers([1, 2, 3, 'abc', {}, []]))\n\
    \ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  stdout: "[1, 2, 3]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # TODO: Implement me\n\
    \    return [i for i in values if isinstance(i, int)]\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    new_list = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            new_list.append(value)\n\
    \    return new_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for item\
    \ in values if isinstance(item, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    int_list = []\n    for\
    \ item in values:\n        if isinstance(item, int):\n            int_list.append(item)\n\
    \    return int_list\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n    \n    \ndef check(candidate):\n  \
    \  assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xqs5j5s.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9xqs5j5s.py\", line 18,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmp9xqs5j5s.py\", line\
    \ 13, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n    \n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = []\n\
    \    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n\
    \    return filtered_values\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    filtered_values = []\n\
    \    for value in values:\n        if isinstance(value, int):\n            filtered_values.append(value)\n\
    \    return filtered_values\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbkbonl56.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpbkbonl56.py\", line 18,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmpbkbonl56.py\", line\
    \ 13, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for item\
    \ in values if isinstance(item, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n    \n    \ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [num for num in\
    \ values if isinstance(num, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\nprint(filter_integers([1, 2, 3, 'abc',\
    \ {}, []]))\ndef check(candidate):\n    assert candidate([]) == []\n    assert\
    \ candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: "[1, 2, 3]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [val for val in\
    \ values if isinstance(val, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [\n        value\
    \ for value in values\n        if isinstance(value, int)\n    ]\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    # CODE HERE\n    my_list=[]\n\
    \    for value in values:\n        if type(value)==int:\n            my_list.append(value)\n\
    \    return my_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\ndef check(candidate):\n    assert candidate([]) == []\n \
    \   assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [v for v in values\
    \ if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5kzbgzhw.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp5kzbgzhw.py\", line 17,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmp5kzbgzhw.py\", line\
    \ 12, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [n for n in values\
    \ if isinstance(n, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    out = []\n    for x in\
    \ values:\n        if isinstance(x, int):\n            out.append(x)\n    return\
    \ out\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    is_integer = lambda x:\
    \ isinstance(x, int)\n    return list(filter(is_integer, values))\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n    \n    \nfilter_integers([1, 2, 3, 'abc', {}, []])\n\
    def check(candidate):\n    assert candidate([]) == []\n    assert candidate([4,\
    \ {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3,\
    \ 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            integers.append(value)\n\
    \    return integers\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values\
    \ if isinstance(i, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [int(v) for v in\
    \ values if isinstance(v, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd'])\
    \ == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef\
    \ test_check():\n    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3e781fm8.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp3e781fm8.py\", line 18,\
    \ in test_check\n    check(filter_integers)\n  File \"/tmp/tmp3e781fm8.py\", line\
    \ 13, in check\n    assert candidate([]) == []\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for item\
    \ in values if isinstance(item, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for item\
    \ in values if isinstance(item, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    integers = []\n    for\
    \ value in values:\n        if isinstance(value, int):\n            integers.append(value)\n\
    \    return integers\n\n\ndef check(candidate):\n    assert candidate([]) == []\n\
    \    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3,\
    \ 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for item\
    \ in values if isinstance(item, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [item for item\
    \ in values if isinstance(item, int)]\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert\
    \ candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n    check(filter_integers)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\n\ndef check(candidate):\n    assert\
    \ candidate([]) == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) ==\
    \ [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value\
    \ in values if isinstance(value, int)]\n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Any\n\ndef filter_integers(values: List[Any])\
    \ -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\
    \    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [x for x in values\
    \ if isinstance(x, int)]\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([])\
    \ == []\n    assert candidate([4, {  }, [], 23.2, 9, 'adasd']) == [4, 9]\n   \
    \ assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n\ndef test_check():\n\
    \    check(filter_integers)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
