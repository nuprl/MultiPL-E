language: cpp
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty())\n    \
    \    return std::nullopt;\n    std::string longest = strings[0];\n    for (size_t\
    \ i = 1; i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplcrkfn_c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmplcrkfn_c.cpp: In function 'int main()':\n/tmp/tmplcrkfn_c.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplcrkfn_c.cpp:2:\n/tmp/tmplcrkfn_c.cpp:24:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmplcrkfn_c.cpp:24:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmplcrkfn_c.cpp:25:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmplcrkfn_c.cpp:25:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmplcrkfn_c.cpp:25:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmplcrkfn_c.cpp:25:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmplcrkfn_c.cpp:25:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptst5j8md.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmptst5j8md.cpp: In function 'int main()':\n/tmp/tmptst5j8md.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptst5j8md.cpp:2:\n/tmp/tmptst5j8md.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmptst5j8md.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmptst5j8md.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptst5j8md.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmptst5j8md.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0p8id_ml.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp0p8id_ml.cpp: In function 'int main()':\n/tmp/tmp0p8id_ml.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0p8id_ml.cpp:2:\n/tmp/tmp0p8id_ml.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp0p8id_ml.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp0p8id_ml.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp0p8id_ml.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp0p8id_ml.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0p8id_ml.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0p8id_ml.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7eer8tq.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpk7eer8tq.cpp: In function 'int main()':\n/tmp/tmpk7eer8tq.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk7eer8tq.cpp:2:\n/tmp/tmpk7eer8tq.cpp:21:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpk7eer8tq.cpp:21:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpk7eer8tq.cpp:22:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpk7eer8tq.cpp:22:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpk7eer8tq.cpp:22:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpk7eer8tq.cpp:22:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk7eer8tq.cpp:22:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j9all3c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp2j9all3c.cpp: In function 'int main()':\n/tmp/tmp2j9all3c.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j9all3c.cpp:2:\n/tmp/tmp2j9all3c.cpp:21:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp2j9all3c.cpp:21:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp2j9all3c.cpp:22:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp2j9all3c.cpp:22:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp2j9all3c.cpp:22:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2j9all3c.cpp:22:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2j9all3c.cpp:22:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) { return a.size() < b.size(); });\n  return *it;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjq6o1fjl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) longest = s;\n  }\n  return longest;\n}\nint main() {\n\
    \    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeyf1o3ee.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty())\n    \
    \    return std::nullopt;\n    std::string longest = strings[0];\n    for (size_t\
    \ i = 1; i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\n\
    \            longest = strings[i];\n    }\n    return longest;\n}\nint main()\
    \ {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5z71ylx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8ttwvu81.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& string : strings) {\n    if\
    \ (string.length() > longest.length()) {\n      longest = string;\n    }\n  }\n\
    \  return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxrxwxykh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty())\n    \
    \    return std::nullopt;\n    std::string longest = strings[0];\n    for (size_t\
    \ i = 1; i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\n\
    \            longest = strings[i];\n    }\n    return longest;\n}\nint main()\
    \ {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5z71ylx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j9all3c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp2j9all3c.cpp: In function 'int main()':\n/tmp/tmp2j9all3c.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j9all3c.cpp:2:\n/tmp/tmp2j9all3c.cpp:21:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp2j9all3c.cpp:21:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp2j9all3c.cpp:22:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp2j9all3c.cpp:22:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp2j9all3c.cpp:22:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2j9all3c.cpp:22:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2j9all3c.cpp:22:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwh0k1s7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpthy2_6bd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptst5j8md.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmptst5j8md.cpp: In function 'int main()':\n/tmp/tmptst5j8md.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptst5j8md.cpp:2:\n/tmp/tmptst5j8md.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmptst5j8md.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmptst5j8md.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptst5j8md.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmptst5j8md.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty())\n    \
    \    return std::nullopt;\n    std::string longest = strings[0];\n    for (size_t\
    \ i = 1; i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\n\
    \            longest = strings[i];\n    }\n    return longest;\n}\nint main()\
    \ {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps5z71ylx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmd3zons_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& string : strings) {\n    if\
    \ (string.length() > longest.length()) {\n      longest = string;\n    }\n  }\n\
    \  return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxrxwxykh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) {\n    return\
    \ std::nullopt;\n  }\n  auto longest = strings[0];\n  for (const auto& s : strings)\
    \ {\n    if (s.length() > longest.length()) {\n      longest = s;\n    }\n  }\n\
    \  return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgacc78q7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j9all3c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp2j9all3c.cpp: In function 'int main()':\n/tmp/tmp2j9all3c.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j9all3c.cpp:2:\n/tmp/tmp2j9all3c.cpp:21:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp2j9all3c.cpp:21:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp2j9all3c.cpp:22:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp2j9all3c.cpp:22:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp2j9all3c.cpp:22:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2j9all3c.cpp:22:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2j9all3c.cpp:22:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty())\n    \
    \    return std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end())\n        return std::nullopt;\n\
    \    return *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0r652ej7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  return\
    \ it == strings.end() ? std::nullopt : *it;\n}\nint main() {\n    auto candidate\
    \ = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcf85x9jb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& string : strings) {\n\
    \    if (string.length() > longest.length()) {\n      longest = string;\n    }\n\
    \  }\n  return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3lunjf23.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8ttwvu81.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwh0k1s7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) { return a.length() < b.length();\
    \ });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy93tqtu0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) longest = s;\n    }\n    return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfwh0k1s7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.length()\
    \ < b.length();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpss7qngub.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptst5j8md.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmptst5j8md.cpp: In function 'int main()':\n/tmp/tmptst5j8md.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptst5j8md.cpp:2:\n/tmp/tmptst5j8md.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmptst5j8md.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmptst5j8md.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptst5j8md.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmptst5j8md.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpthy2_6bd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.length()\
    \ < b.length();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpss7qngub.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); ++i) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3w_orelh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) {\n    return\
    \ std::nullopt;\n  }\n  std::string longest = strings[0];\n  for (const auto&\
    \ string : strings) {\n    if (string.length() > longest.length()) {\n      longest\
    \ = string;\n    }\n  }\n  return longest;\n}\nint main() {\n    auto candidate\
    \ = longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb4r8tlqh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) { return a.size() < b.size();\
    \ });\n    return it == strings.end() ? std::nullopt : *it;\n}\nint main() {\n\
    \    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwp6a3tpv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7eer8tq.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpk7eer8tq.cpp: In function 'int main()':\n/tmp/tmpk7eer8tq.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk7eer8tq.cpp:2:\n/tmp/tmpk7eer8tq.cpp:21:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpk7eer8tq.cpp:21:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpk7eer8tq.cpp:22:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpk7eer8tq.cpp:22:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpk7eer8tq.cpp:22:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpk7eer8tq.cpp:22:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk7eer8tq.cpp:22:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& s : strings) {\n    if\
    \ (s.length() > longest.length()) {\n      longest = s;\n    }\n  }\n  return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0igi5t1b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmd3zons_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7eer8tq.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpk7eer8tq.cpp: In function 'int main()':\n/tmp/tmpk7eer8tq.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk7eer8tq.cpp:2:\n/tmp/tmpk7eer8tq.cpp:21:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpk7eer8tq.cpp:21:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpk7eer8tq.cpp:22:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpk7eer8tq.cpp:22:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpk7eer8tq.cpp:22:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpk7eer8tq.cpp:22:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk7eer8tq.cpp:22:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty())\n    \
    \    return std::nullopt;\n    std::string longest = strings[0];\n    for (auto\
    \ s : strings)\n        if (s.length() > longest.length())\n            longest\
    \ = s;\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeg_nkr5q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& string : strings) {\n    if\
    \ (string.length() > longest.length()) {\n      longest = string;\n    }\n  }\n\
    \  return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxrxwxykh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (const auto& s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8ttwvu81.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0p8id_ml.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp0p8id_ml.cpp: In function 'int main()':\n/tmp/tmp0p8id_ml.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0p8id_ml.cpp:2:\n/tmp/tmp0p8id_ml.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp0p8id_ml.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp0p8id_ml.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp0p8id_ml.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp0p8id_ml.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0p8id_ml.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0p8id_ml.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return *it;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn69cbdo9.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpn69cbdo9.cpp: In function 'int main()':\n/tmp/tmpn69cbdo9.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn69cbdo9.cpp:2:\n/tmp/tmpn69cbdo9.cpp:20:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpn69cbdo9.cpp:20:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpn69cbdo9.cpp:21:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpn69cbdo9.cpp:21:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpn69cbdo9.cpp:21:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptst5j8md.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmptst5j8md.cpp: In function 'int main()':\n/tmp/tmptst5j8md.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptst5j8md.cpp:2:\n/tmp/tmptst5j8md.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmptst5j8md.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmptst5j8md.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptst5j8md.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmptst5j8md.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto it = std::max_element(strings.begin(), strings.end(), [](const std::string&\
    \ a, const std::string& b) {\n    return a.size() < b.size();\n  });\n  return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpthy2_6bd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmafklqvx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpmafklqvx.cpp: In function 'int main()':\n/tmp/tmpmafklqvx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmafklqvx.cpp:2:\n/tmp/tmpmafklqvx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpmafklqvx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpmafklqvx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpmafklqvx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpmafklqvx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); i++) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptst5j8md.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmptst5j8md.cpp: In function 'int main()':\n/tmp/tmptst5j8md.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptst5j8md.cpp:2:\n/tmp/tmptst5j8md.cpp:25:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmptst5j8md.cpp:25:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmptst5j8md.cpp:26:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmptst5j8md.cpp:26:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmptst5j8md.cpp:26:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmptst5j8md.cpp:26:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (auto s : strings) {\n        if (s.length() > longest.length()) {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}\nint main()\
    \ {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz1tbctt0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    if (it == strings.end()) return std::nullopt;\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcqyp7xus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  auto longest = strings[0];\n  for (auto s : strings) {\n    if (s.length()\
    \ > longest.length()) {\n      longest = s;\n    }\n  }\n  return longest;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0p8id_ml.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp0p8id_ml.cpp: In function 'int main()':\n/tmp/tmp0p8id_ml.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0p8id_ml.cpp:2:\n/tmp/tmp0p8id_ml.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp0p8id_ml.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp0p8id_ml.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp0p8id_ml.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp0p8id_ml.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp0p8id_ml.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0p8id_ml.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); ++i) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3w_orelh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest = strings[0];\n  for (const auto& s : strings) {\n    if\
    \ (s.length() > longest.length()) {\n      longest = s;\n    }\n  }\n  return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0igi5t1b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto it = std::max_element(strings.begin(), strings.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    return it == strings.end() ? std::nullopt : *it;\n}\n\
    int main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4uixpy91.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (auto s : strings)\
    \ {\n        if (s.length() > longest.length()) {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}\nint main() {\n    auto candidate =\
    \ longest;\n    assert(candidate((std::vector<std::string>())) == std::nullopt);\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyij7hc82.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpyij7hc82.cpp: In function 'int main()':\n/tmp/tmpyij7hc82.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyij7hc82.cpp:2:\n/tmp/tmpyij7hc82.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpyij7hc82.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpyij7hc82.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpyij7hc82.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpyij7hc82.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2j9all3c.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmp2j9all3c.cpp: In function 'int main()':\n/tmp/tmp2j9all3c.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2j9all3c.cpp:2:\n/tmp/tmp2j9all3c.cpp:21:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmp2j9all3c.cpp:21:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmp2j9all3c.cpp:22:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmp2j9all3c.cpp:22:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmp2j9all3c.cpp:22:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp2j9all3c.cpp:22:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2j9all3c.cpp:22:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    auto longest = strings[0];\n    for (auto s : strings) {\n\
    \        if (s.length() > longest.length()) {\n            longest = s;\n    \
    \    }\n    }\n    return longest;\n}\nint main() {\n    auto candidate = longest;\n\
    \    assert(candidate((std::vector<std::string>())) == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmd3zons_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n  if (strings.empty())\n    return\
    \ std::nullopt;\n  std::string longest = strings[0];\n  for (const auto& s : strings)\
    \ {\n    if (s.length() > longest.length())\n      longest = s;\n  }\n  return\
    \ longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgfkj7xut.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) {\n  \
    \      return std::nullopt;\n    }\n    std::string longest = strings[0];\n  \
    \  for (size_t i = 1; i < strings.size(); ++i) {\n        if (strings[i].size()\
    \ > longest.size()) {\n            longest = strings[i];\n        }\n    }\n \
    \   return longest;\n}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3w_orelh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659803347
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); i++) {\n        if (strings[i].size() > longest.size())\
    \ longest = strings[i];\n    }\n    return longest;\n}\nint main() {\n    auto\
    \ candidate = longest;\n    assert(candidate((std::vector<std::string>())) ==\
    \ std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7eer8tq.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmpk7eer8tq.cpp: In function 'int main()':\n/tmp/tmpk7eer8tq.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk7eer8tq.cpp:2:\n/tmp/tmpk7eer8tq.cpp:21:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmpk7eer8tq.cpp:21:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmpk7eer8tq.cpp:22:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmpk7eer8tq.cpp:22:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmpk7eer8tq.cpp:22:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpk7eer8tq.cpp:22:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk7eer8tq.cpp:22:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings,\
    \ return the longest one. Return the first one in case of multiple\n// strings\
    \ of the same length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
    // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\"\
    , (std::string)\"b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
    a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
    \ longest(std::vector<std::string> strings) {\n    if (strings.empty()) return\
    \ std::nullopt;\n    std::string longest = strings[0];\n    for (size_t i = 1;\
    \ i < strings.size(); ++i) {\n        if (strings[i].size() > longest.size())\
    \ {\n            longest = strings[i];\n        }\n    }\n    return longest;\n\
    }\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
    kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphsr5fsyx.cpp:11:1: error: 'optional' in namespace 'std' does not\
    \ name a type\n std::optional<std::string> longest(std::vector<std::string> strings)\
    \ {\n ^\n/tmp/tmphsr5fsyx.cpp: In function 'int main()':\n/tmp/tmphsr5fsyx.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = longest;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphsr5fsyx.cpp:2:\n/tmp/tmphsr5fsyx.cpp:23:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                  ^\n/tmp/tmphsr5fsyx.cpp:23:55:\
    \ error: 'nullopt' is not a member of 'std'\n     assert(candidate((std::vector<std::string>()))\
    \ == std::nullopt);\n                                                       ^\n\
    /tmp/tmphsr5fsyx.cpp:24:47: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                 \
    \                              ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n                    \
    \                                                                            \
    \      ^\n/tmp/tmphsr5fsyx.cpp:24:102: warning: extended initializer lists only\
    \ available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmphsr5fsyx.cpp:24:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x8"
  stdout: ''
