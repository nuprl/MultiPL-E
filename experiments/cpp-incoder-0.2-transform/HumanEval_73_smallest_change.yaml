name: HumanEval_73_smallest_change
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers,\
  \ find the minimum number of elements that\n// need to be changed to make the array\
  \ palindromic. A palindromic array is an array that\n// is read the same backwards\
  \ and forwards. In one change, you can change one element to any other element.\n\
  // For example:\n// >>> smallest_change((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)5, (long)4, (long)7, (long)9, (long)6})))\n// (4)\n// >>> smallest_change((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)3, (long)2, (long)2})))\n// (1)\n// >>> smallest_change((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)1})))\n// (0)\nlong smallest_change(std::vector<long>\
  \ arr) {\n"
tests: "}\nint main() {\n    auto candidate = smallest_change;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)5, (long)4, (long)7, (long)9, (long)6}))) == (4));\n \
  \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)3,\
  \ (long)2, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)4, (long)2}))) == (1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)1}))) == (0));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)1, (long)3}))) == (0));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (0));\n    assert(candidate((std::vector<long>({(long)0, (long)1}))) == (1));\n\
  }\n"
completions: ["    // Your code here\n    long ans = 0;\n    long n = arr.size();\n\
    \    long mid = n/2;\n    long left = 0, right = n;\n    while(left < right){\n\
    \        if(arr[left] < arr[mid]){\n            left++;\n        }\n        else{\n\
    \            right--;\n        }\n    }\n    while(left < right){\n        if(arr[left]\
    \ > arr[mid]){\n            right--;\n        }\n        else{\n            left++;\n\
    \        }\n    }\n    while(left < right){\n        if(arr[left] < arr[mid]){\n\
    \            left++;\n        }\n        else{\n            right--;\n       \
    \ }\n    }\n    while(left < right){\n        if(arr[left] > arr[mid]){\n    \
    \        right--;\n        }\n        else{\n            left++;\n        }\n\
    \    }\n    while(left < right){\n        if(arr[left] < arr[mid]){\n        \
    \    left++;\n        }\n        else{\n            right--;\n        }\n    }\n\
    \    while(left < right){\n        if(arr[left] > arr[mid]){\n            right--;\n\
    \        }\n        else{\n            left++;\n        }\n    }\n    while(left\
    \ < right){\n        if(arr[left] < arr[mid]){\n            left++;\n        }\n\
    \        else{\n            right--;\n        }\n    }\n    while(left < right){\n\
    \        if(arr[left] > arr[mid]){\n            right--;\n        }\n        else{\n\
    \            left++;\n        }\n    }\n    while(left < right){\n        if(arr[left]\
    \ < arr[mid]){\n            left++;\n        }\n        else{\n            right--;\n\
    \        }\n    }\n    while(left < right){\n        if(arr[left] > arr[mid]){\n\
    \            right--;\n        }\n        else{\n            left++;\n       \
    \ }\n    }\n    while(left < right){\n        if(arr[left] < arr[mid]){\n    \
    \        left++;\n        }\n        else{\n            right--;\n        }\n\
    \    }\n    while(left < right){\n        if(arr[left] > arr[mid]){\n        \
    \    right--;\n        }\n        else{\n            left++;\n        }\n    }\n\
    \    while(left < right){\n        if(arr[left] < arr[mid]){\n            left++;\n\
    \        }\n        else{\n            right--;\n        }\n    }\n    while(left\
    \ < right){\n        if(arr[left] > arr[mid]){\n            right--;\n       \
    \ }\n        else{\n            left++;\n        }\n    }\n    while(left < right){\n\
    \        if(arr[left] < arr[mid]){\n            left++;", "    long ans = INT_MAX;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        long j = arr.size() - i\
    \ - 1;\n        while (j >= 0 && arr[j] != arr[j + 1]) {\n            j--;\n \
    \       }\n        if (j >= 0) {\n            ans = min(ans, j - i + 1);\n   \
    \     }\n    }\n    return ans;", "    long ans = INT_MAX;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        long j = i;\n        while (j > 0 && arr[j\
    \ - 1] > arr[j]) {\n            j--;\n        }\n        if (j == i) {\n     \
    \       ans = i;\n            break;\n        }\n    }\n    return ans;", "  \
    \  // Your code here\n    long ans = INT_MAX;\n    long i = 0;\n    long j = arr.size()\
    \ - 1;\n    while (i < j) {\n        if (arr[i] > arr[j]) {\n            long\
    \ temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n \
    \           i++;\n            j--;\n        } else if (arr[i] < arr[j]) {\n  \
    \          long temp = arr[i];\n            arr[i] = arr[j];\n            arr[j]\
    \ = temp;\n            j--;\n        } else {\n            i++;\n            j--;\n\
    \        }\n    }\n    long count = 0;\n    while (i < arr.size()) {\n       \
    \ if (arr[i] != arr[j]) {\n            count++;\n        }\n        i++;\n   \
    \     j--;\n    }\n    if (count < ans) {\n        ans = count;\n    }\n    return\
    \ ans;", "    long ans = 0;\n    long n = arr.size();\n    long mid = n / 2;\n\
    \    long left = 0, right = n - 1;\n    while (left < right) {\n        if (arr[left]\
    \ > arr[right]) {\n            long temp = arr[left];\n            arr[left] =\
    \ arr[right];\n            arr[right] = temp;\n            left++;\n         \
    \   right--;\n        } else {\n            left++;\n            right--;\n  \
    \      }\n    }\n    long mid1 = (left + right) / 2;\n    long mid2 = n - mid1;\n\
    \    while (mid1 > mid2) {\n        if (arr[mid1] > arr[mid2]) {\n           \
    \ long temp = arr[mid1];\n            arr[mid1] = arr[mid2];\n            arr[mid2]\
    \ = temp;\n            mid1--;\n            mid2--;\n        } else {\n      \
    \      mid1--;\n            mid2--;\n        }\n    }\n    long mid3 = mid1 +\
    \ mid2;\n    while (mid1 < mid3) {\n        if (arr[mid1] > arr[mid3]) {\n   \
    \         long temp = arr[mid1];\n            arr[mid1] = arr[mid3];\n       \
    \     arr[mid3] = temp;\n            mid1++;\n            mid3++;\n        } else\
    \ {\n            mid1++;\n            mid3++;\n        }\n    }\n    long mid4\
    \ = mid3 - mid1;\n    while (mid1 < mid4) {\n        if (arr[mid1] > arr[mid4])\
    \ {\n            long temp = arr[mid1];\n            arr[mid1] = arr[mid4];\n\
    \            arr[mid4] = temp;\n            mid1++;\n            mid4++;\n   \
    \     } else {\n            mid1++;\n            mid4++;\n        }\n    }\n \
    \   long mid5 = mid4 - mid1;\n    while (mid1 < mid5) {\n        if (arr[mid1]\
    \ > arr[mid5]) {\n            long temp = arr[mid1];\n            arr[mid1] =\
    \ arr[mid5];\n            arr[mid5] = temp;\n            mid1++;\n           \
    \ mid5++;\n        } else {\n            mid1++;\n            mid5++;\n      \
    \  }\n    }\n    long mid6 = mid5 - mid1;\n    while (mid1 < mid6) {\n       \
    \ if (arr[mid1] > arr[mid6]) {\n            long temp = arr[mid1];\n         \
    \   arr[mid1] = arr[mid6];\n            arr[mid6] = temp;\n            mid1++;\n\
    \            mid6++;\n        } else {\n            mid1++;\n            mid6++;\n\
    \        }\n    }\n    long mid7 = mid6 - mid1;\n    while (mid1 < mid7) {\n \
    \       if (arr[mid1] > arr[mid7]) {\n            long temp = arr[mid1];\n   \
    \         arr[mid1] = arr[mid7", "    long ans = INT_MAX;\n    long n = arr.size();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < n / 2) {\n        if (arr[i]\
    \ > arr[j]) {\n            long temp = arr[i];\n            arr[i] = arr[j];\n\
    \            arr[j] = temp;\n            i++;\n            j++;\n        } else\
    \ {\n            i++;\n            j++;\n        }\n    }\n    while (i < n) {\n\
    \        if (arr[i] > arr[j]) {\n            long temp = arr[i];\n           \
    \ arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n           \
    \ j++;\n        } else {\n            i++;\n            j++;\n        }\n    }\n\
    \    if (arr[i] > arr[j]) {\n        long temp = arr[i];\n        arr[i] = arr[j];\n\
    \        arr[j] = temp;\n    }\n    long count = 0;\n    while (i < n) {\n   \
    \     if (arr[i] == arr[j]) {\n            count++;\n            i++;\n      \
    \      j++;\n        } else {\n            long temp = arr[i];\n            arr[i]\
    \ = arr[j];\n            arr[j] = temp;\n            i++;\n            j++;\n\
    \        }\n    }\n    if (count < ans) {\n        ans = count;\n    }\n    return\
    \ ans;", "    // Your code here\n    long ans = INT_MAX;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        long j = arr.size() - i - 1;\n        while\
    \ (j >= 0 && arr[j] != arr[j + 1]) {\n            j--;\n        }\n        if\
    \ (j >= 0) {\n            ans = min(ans, j + 1);\n        }\n    }\n    return\
    \ ans;", "    long ans = INT_MAX;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        long min_change = INT_MAX;\n        for (long j = i; j < arr.size();\
    \ j++) {\n            if (arr[j] != arr[j - i]) {\n                min_change\
    \ = std::min(min_change, j - i);\n            }\n        }\n        if (min_change\
    \ < ans) {\n            ans = min_change;\n        }\n    }\n    return ans;",
  "    // Your code here\n    long ans = 0, len = arr.size();\n    long mid = len\
    \ / 2;\n    long mid2 = len / 2;\n    long mid3 = len / 2;\n    long mid4 = len\
    \ / 2;\n    long mid5 = len / 2;\n    long mid6 = len / 2;\n    long mid7 = len\
    \ / 2;\n    long mid8 = len / 2;\n    long mid9 = len / 2;\n    long mid10 = len\
    \ / 2;\n    long mid11 = len / 2;\n    long mid12 = len / 2;\n    long mid13 =\
    \ len / 2;\n    long mid14 = len / 2;\n    long mid15 = len / 2;\n    long mid16\
    \ = len / 2;\n    long mid17 = len / 2;\n    long mid18 = len / 2;\n    long mid19\
    \ = len / 2;\n    long mid20 = len / 2;\n    long mid21 = len / 2;\n    long mid22\
    \ = len / 2;\n    long mid23 = len / 2;\n    long mid24 = len / 2;\n    long mid25\
    \ = len / 2;\n    long mid26 = len / 2;\n    long mid27 = len / 2;\n    long mid28\
    \ = len / 2;\n    long mid29 = len / 2;\n    long mid30 = len / 2;\n    long mid31\
    \ = len / 2;\n    long mid32 = len / 2;\n    long mid33 = len / 2;\n    long mid34\
    \ = len / 2;\n    long mid35 = len / 2;\n    long mid36 = len / 2;\n    long mid37\
    \ = len / 2;\n    long mid38 = len / 2;\n    long mid39 = len / 2;\n    long mid40\
    \ = len / 2;\n    long mid41 = len / 2;\n    long mid42 = len / 2;\n    long mid43\
    \ = len / 2;\n    long mid44 = len / 2;\n    long mid45 = len / 2;\n    long mid46\
    \ = len / 2;\n    long mid47 = len / 2;\n    long mid48 = len / 2;\n    long mid49\
    \ = len / 2;\n    long mid50 = len / 2;\n    long mid51 = len / 2;\n    long mid52\
    \ = len / 2;\n    long mid53 = len / 2;\n    long mid54 = len / 2;\n    long mid55\
    \ = len / 2;\n    long mid56 = len / 2;\n    long mid57 = ", "    long ans = 0;\n\
    \    long n = arr.size();\n    long mid = n / 2;\n    long left = arr[0];\n  \
    \  long right = arr[mid];\n    long mid2 = mid / 2;\n    long left2 = arr[mid2];\n\
    \    long right2 = arr[n-1];\n    long mid3 = mid2 / 2;\n    long left3 = arr[mid3];\n\
    \    long right3 = arr[n-2];\n    long mid4 = mid3 / 2;\n    long left4 = arr[mid4];\n\
    \    long right4 = arr[n-3];\n    long mid5 = mid4 / 2;\n    long left5 = arr[mid5];\n\
    \    long right5 = arr[n-4];\n    long mid6 = mid5 / 2;\n    long left6 = arr[mid6];\n\
    \    long right6 = arr[n-5];\n    long mid7 = mid6 / 2;\n    long left7 = arr[mid7];\n\
    \    long right7 = arr[n-6];\n    long mid8 = mid7 / 2;\n    long left8 = arr[mid8];\n\
    \    long right8 = arr[n-7];\n    long mid9 = mid8 / 2;\n    long left9 = arr[mid9];\n\
    \    long right9 = arr[n-8];\n    long mid10 = mid9 / 2;\n    long left10 = arr[mid10];\n\
    \    long right10 = arr[n-9];\n    long mid11 = mid10 / 2;\n    long left11 =\
    \ arr[mid11];\n    long right11 = arr[n-10];\n    long mid12 = mid11 / 2;\n  \
    \  long left12 = arr[mid12];\n    long right12 = arr[n-11];\n    long mid13 =\
    \ mid12 / 2;\n    long left13 = arr[mid13];\n    long right13 = arr[n-12];\n \
    \   long mid14 = mid13 / 2;\n    long left14 = arr[mid14];\n    long right14 =\
    \ arr[n-13];\n    long mid15 = mid14 / 2;\n    long left15 = arr[mid15];\n   \
    \ long right15 = arr[n-14];\n    long mid16 = mid15 / 2;\n    long left16 = arr[mid16];\n\
    \    long right16 = arr[n-15];\n    long mid17 = mid16 / 2;\n    long left17 =\
    \ arr[mid17];\n    long right17 = arr[n-16];\n    long mid18 = mid17 / 2;\n  \
    \  long left18 = arr[mid18];\n    long right18 = arr[n-17];\n    long mid19",
  "    long ans = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    long left\
    \ = 0, right = n - 1;\n    while (left < right) {\n        if (arr[left] > arr[right])\
    \ {\n            long temp = arr[left];\n            arr[left] = arr[right];\n\
    \            arr[right] = temp;\n            ans += 1;\n        }\n        left\
    \ += 1;\n        right -= 1;\n    }\n    return ans;", "    long ans = INT_MAX;\n\
    \    long n = arr.size();\n    long mid = n / 2;\n    long left = 0, right = n\
    \ - 1;\n    while (left < right) {\n        long mid = (left + right) / 2;\n \
    \       if (arr[mid] > arr[mid+1]) {\n            right = mid;\n        } else\
    \ {\n            left = mid;\n        }\n    }\n    while (left >= 0 && right\
    \ < n) {\n        long mid = (left + right) / 2;\n        if (arr[mid] > arr[mid+1])\
    \ {\n            right = mid;\n        } else {\n            left = mid;\n   \
    \     }\n    }\n    if (left >= 0 && right < n) {\n        long mid = (left +\
    \ right) / 2;\n        if (arr[mid] > arr[mid+1]) {\n            right = mid;\n\
    \        } else {\n            left = mid;\n        }\n    }\n    if (left >=\
    \ 0 && right < n) {\n        long mid = (left + right) / 2;\n        if (arr[mid]\
    \ > arr[mid+1]) {\n            right = mid;\n        } else {\n            left\
    \ = mid;\n        }\n    }\n    if (left >= 0 && right < n) {\n        long mid\
    \ = (left + right) / 2;\n        if (arr[mid] > arr[mid+1]) {\n            right\
    \ = mid;\n        } else {\n            left = mid;\n        }\n    }\n    if\
    \ (left >= 0 && right < n) {\n        long mid = (left + right) / 2;\n       \
    \ if (arr[mid] > arr[mid+1]) {\n            right = mid;\n        } else {\n \
    \           left = mid;\n        }\n    }\n    if (left >= 0 && right < n) {\n\
    \        long mid = (left + right) / 2;\n        if (arr[mid] > arr[mid+1]) {\n\
    \            right = mid;\n        } else {\n            left = mid;\n       \
    \ }\n    }\n    if (left >= 0 && right < n) {\n        long mid = (left + right)\
    \ / 2;\n        if (arr[mid] > arr[mid+1]) {\n            right = mid;\n     \
    \   } else {\n            left = mid;\n        }\n    }\n    if (left >= 0 &&\
    \ right < n) {\n        long mid = (left + right) / 2;\n        if (arr[mid] >\
    \ arr[mid+1]) {\n            right = mid;\n        } else {\n            left\
    \ = mid;\n        }\n    }\n    if (left >= 0 && right < n) {\n        long mid\
    \ = (left + right) / 2;\n        if (arr[mid] > arr[mid+1]) {\n            right\
    \ = mid;\n        } else {\n            left = mid;\n        }\n    }\n    if\
    \ (left >= 0 && right < n) {\n        long mid = (left + right) / 2;\n       \
    \ if (arr[mid] > arr[mid+1]) {\n            right = mid;\n        } else {\n \
    \           left = mid;\n        }\n    }\n    if (left >= 0 && right < n) {\n\
    \        long mid = (left + right) / 2;\n        if (arr[mid] > ", "    long ans\
    \ = 0, len = arr.size();\n    for (long i = 0; i < len / 2; i++) {\n        long\
    \ mid = len / 2;\n        long left = arr[mid];\n        long right = arr[mid];\n\
    \        while (left < right) {\n            if (left > right) {\n           \
    \     long temp = left;\n                left = right;\n                right\
    \ = temp;\n            }\n            mid--;\n            left++;\n          \
    \  right--;\n        }\n        if (left == right) {\n            ans += 1;\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    long ans = INT_MAX;\n\
    \    long n = arr.size();\n    long i = 0;\n    long j = 0;\n    long mid = n\
    \ / 2;\n    while (i < n) {\n        while (j < n) {\n            if (arr[j] !=\
    \ arr[n - j - 1]) {\n                mid = j;\n                break;\n      \
    \      }\n            j++;\n        }\n        if (j == n) {\n            mid\
    \ = i;\n        }\n        i++;\n        j = 0;\n    }\n    if (mid != i) {\n\
    \        mid = i;\n    }\n    while (i < n) {\n        while (j < n) {\n     \
    \       if (arr[j] != arr[n - j - 1]) {\n                mid = j;\n          \
    \      break;\n            }\n            j++;\n        }\n        if (j == n)\
    \ {\n            mid = i;\n        }\n        i++;\n        j = 0;\n    }\n  \
    \  if (mid != i) {\n        mid = i;\n    }\n    while (i < n) {\n        while\
    \ (j < n) {\n            if (arr[j] != arr[n - j - 1]) {\n                mid\
    \ = j;\n                break;\n            }\n            j++;\n        }\n \
    \       if (j == n) {\n            mid = i;\n        }\n        i++;\n       \
    \ j = 0;\n    }\n    if (mid != i) {\n        mid = i;\n    }\n    while (i <\
    \ n) {\n        while (j < n) {\n            if (arr[j] != arr[n - j - 1]) {\n\
    \                mid = j;\n                break;\n            }\n           \
    \ j++;\n        }\n        if (j == n) {\n            mid = i;\n        }\n  \
    \      i++;\n        j = 0;\n    }\n    if (mid != i) {\n        mid = i;\n  \
    \  }\n    while (i < n) {\n        while (j < n) {\n            if (arr[j] !=\
    \ arr[n - j - 1]) {\n                mid = j;\n                break;\n      \
    \      }\n            j++;\n        }\n        if (j == n) {\n            mid\
    \ = i;\n        }\n        i++;\n        j = 0;\n    }\n    if (mid != i) {\n\
    \        mid = i;\n    }\n    while (i < n) {\n        while (j < n) {\n     \
    \       if (arr[j] != arr[n - j - 1]) {\n                mid = j;\n          \
    \      break;\n            }\n            j++;\n        }\n        if (j == n)\
    \ {\n            mid = i;\n        }\n        i++;\n        j = 0;\n    }\n  \
    \  if (mid != i) {\n        mid = i;\n    }\n    while (i < n) {\n        while\
    \ (j < n) {\n            if (arr[j] != arr[n - j - 1]) {\n                mid\
    \ = j;\n                break;\n            }\n            j++;\n        }\n \
    \       if (j == n) {\n            mid = i;\n        }\n        i++;\n       \
    \ j = 0;\n    }\n    if (mid != i) {\n        mid = i;\n    }\n    while (i <\
    \ n) {\n        while (j < ", "    long ans = 0;\n    long n = arr.size();\n \
    \   long mid = n / 2;\n    long left = 0, right = n - 1;\n    while (left < right)\
    \ {\n        if (arr[left] < arr[right]) {\n            ans += 1;\n          \
    \  left += 1;\n        } else {\n            right -= 1;\n        }\n    }\n \
    \   return ans;", "    long ans = 0, n = arr.size();\n    long mid = (n + 1) /\
    \ 2;\n    long mid2 = mid / 2;\n    long mid3 = mid2 / 2;\n    long mid4 = mid3\
    \ / 2;\n    long mid5 = mid4 / 2;\n    long mid6 = mid5 / 2;\n    long mid7 =\
    \ mid6 / 2;\n    long mid8 = mid7 / 2;\n    long mid9 = mid8 / 2;\n    long mid10\
    \ = mid9 / 2;\n    long mid11 = mid10 / 2;\n    long mid12 = mid11 / 2;\n    long\
    \ mid13 = mid12 / 2;\n    long mid14 = mid13 / 2;\n    long mid15 = mid14 / 2;\n\
    \    long mid16 = mid15 / 2;\n    long mid17 = mid16 / 2;\n    long mid18 = mid17\
    \ / 2;\n    long mid19 = mid18 / 2;\n    long mid20 = mid19 / 2;\n    long mid21\
    \ = mid20 / 2;\n    long mid22 = mid21 / 2;\n    long mid23 = mid22 / 2;\n   \
    \ long mid24 = mid23 / 2;\n    long mid25 = mid24 / 2;\n    long mid26 = mid25\
    \ / 2;\n    long mid27 = mid26 / 2;\n    long mid28 = mid27 / 2;\n    long mid29\
    \ = mid28 / 2;\n    long mid30 = mid29 / 2;\n    long mid31 = mid30 / 2;\n   \
    \ long mid32 = mid31 / 2;\n    long mid33 = mid32 / 2;\n    long mid34 = mid33\
    \ / 2;\n    long mid35 = mid34 / 2;\n    long mid36 = mid35 / 2;\n    long mid37\
    \ = mid36 / 2;\n    long mid38 = mid37 / 2;\n    long mid39 = mid38 / 2;\n   \
    \ long mid40 = mid39 / 2;\n    long mid41 = mid40 / 2;\n    long mid42 = mid41\
    \ / 2;\n    long mid43 = mid42 / 2;\n    long mid44 = mid43 / 2;\n    long mid45\
    \ = mid44 / 2;\n    long mid46 = mid45 / 2;\n    long mid47 = mid46 / 2;\n   \
    \ long mid48 = mid47 / 2;\n    long mid49 = mid48 / 2;\n    long mid50 = mid49\
    \ / 2;\n    long mid51 = mid50 / 2;\n    long mid5", "    // Your code here\n\
    \    long ans = INT_MAX;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  long j = arr.size() - i - 1;\n        while (j >= 0 && arr[j] != arr[j + 1])\
    \ {\n            j--;\n        }\n        if (j >= 0) {\n            ans = min(ans,\
    \ j - i + 1);\n        }\n    }\n    return ans;", "    // Your code here\n  \
    \  long ans = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    long left\
    \ = arr[mid];\n    long right = arr[n - 1];\n    long mid1 = mid - 1;\n    long\
    \ mid2 = n - 1;\n    while (left != right) {\n        if (left > right) {\n  \
    \          mid1--;\n            mid2--;\n        }\n        if (mid1 > mid2) {\n\
    \            mid1--;\n        }\n        if (mid1 < mid2) {\n            mid2--;\n\
    \        }\n        if (mid1 == mid2) {\n            mid1--;\n            mid2--;\n\
    \        }\n        mid--;\n        left--;\n        right--;\n    }\n    if (left\
    \ == right) {\n        mid--;\n    }\n    ans = mid - 1;\n    return ans;", " \
    \   long ans = INT_MAX;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ long j = arr.size() - i - 1;\n        if (arr[i] != arr[j]) {\n            long\
    \ temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n \
    \           ans = min(ans, j - i + 1);\n        }\n    }\n    return ans;", " \
    \   long ans = 0, len = arr.size();\n    for (long i = 0; i < len / 2; i++) {\n\
    \        if (arr[i] != arr[len - 1 - i]) {\n            ans++;\n        }\n  \
    \  }\n    return ans;"]
stop_tokens:
- "\n}"
