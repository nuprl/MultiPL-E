language: cpp
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n  long sum = 0;\n  for (float f : lst) {\n    if (f > 0) sum += (long)(f*f);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n\
    \    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp33zsa0pb.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp33zsa0pb.cpp:16:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float f : lst) {\n                  ^\n/tmp/tmp33zsa0pb.cpp:\
    \ In function 'int main()':\n/tmp/tmp33zsa0pb.cpp:22:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp33zsa0pb.cpp:2:\n/tmp/tmp33zsa0pb.cpp:23:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp33zsa0pb.cpp:24:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp33zsa0pb.cpp:24:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp33zsa0pb.cpp:24:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp33zsa0pb.cpp:25:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp33zsa0pb.cpp:25:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp33zsa0pb.cpp:25:78: warning:\
    \ extended init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x > 0) {\n\
    \            sum += x * x;\n        } else if (x < 0) {\n            sum += x\
    \ * x;\n        } else {\n            sum += x;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8bkcd9yt.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp8bkcd9yt.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp8bkcd9yt.cpp:\
    \ In function 'int main()':\n/tmp/tmp8bkcd9yt.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp8bkcd9yt.cpp:2:\n/tmp/tmp8bkcd9yt.cpp:29:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp8bkcd9yt.cpp:30:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp8bkcd9yt.cpp:30:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp8bkcd9yt.cpp:30:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8bkcd9yt.cpp:31:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp8bkcd9yt.cpp:31:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp8bkcd9yt.cpp:31:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (auto i : lst) {\n        if (i >= 0) sum\
    \ += i * i;\n        else sum += i;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprx9fub0a.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmprx9fub0a.cpp:16:15: error: 'i' does not name a type\n     for (auto i\
    \ : lst) {\n               ^\n/tmp/tmprx9fub0a.cpp:20:5: error: expected ';' before\
    \ 'return'\n     return sum;\n     ^\n/tmp/tmprx9fub0a.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmprx9fub0a.cpp:20:5: error: expected\
    \ ';' before 'return'\n/tmp/tmprx9fub0a.cpp:20:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmprx9fub0a.cpp:20:5: error: expected ')' before 'return'\n\
    /tmp/tmprx9fub0a.cpp: In function 'int main()':\n/tmp/tmprx9fub0a.cpp:23:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprx9fub0a.cpp:2:\n/tmp/tmprx9fub0a.cpp:24:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmprx9fub0a.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmprx9fub0a.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmprx9fub0a.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmprx9fub0a.cpp:26:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmprx9fub0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if ((int)x !=\
    \ x) {\n            sum += x * x;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppce1v5zy.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmppce1v5zy.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmppce1v5zy.cpp:\
    \ In function 'int main()':\n/tmp/tmppce1v5zy.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmppce1v5zy.cpp:2:\n/tmp/tmppce1v5zy.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmppce1v5zy.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmppce1v5zy.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmppce1v5zy.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmppce1v5zy.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmppce1v5zy.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmppce1v5zy.cpp:27:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float i : lst) {\n        if (i >= 0) {\n\
    \            sum += i * i;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnz7uniwd.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpnz7uniwd.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float i : lst) {\n                    ^\n/tmp/tmpnz7uniwd.cpp:\
    \ In function 'int main()':\n/tmp/tmpnz7uniwd.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpnz7uniwd.cpp:2:\n/tmp/tmpnz7uniwd.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpnz7uniwd.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpnz7uniwd.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpnz7uniwd.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnz7uniwd.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpnz7uniwd.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpnz7uniwd.cpp:27:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n  long sum = 0;\n  for (float x : lst) {\n    if (x < 0) {\n      sum\
    \ += std::abs(x);\n    } else {\n      sum += x;\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6qs3a3_k.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp6qs3a3_k.cpp:16:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float x : lst) {\n                  ^\n/tmp/tmp6qs3a3_k.cpp:\
    \ In function 'int main()':\n/tmp/tmp6qs3a3_k.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp6qs3a3_k.cpp:2:\n/tmp/tmp6qs3a3_k.cpp:27:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp6qs3a3_k.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp6qs3a3_k.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp6qs3a3_k.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp6qs3a3_k.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp6qs3a3_k.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp6qs3a3_k.cpp:29:78: warning:\
    \ extended init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float f : lst) {\n        if (f > 0)\n \
    \           sum += (long)f*f;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6t8xth3.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpr6t8xth3.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpr6t8xth3.cpp:\
    \ In function 'int main()':\n/tmp/tmpr6t8xth3.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpr6t8xth3.cpp:2:\n/tmp/tmpr6t8xth3.cpp:24:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpr6t8xth3.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpr6t8xth3.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpr6t8xth3.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr6t8xth3.cpp:26:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpr6t8xth3.cpp:26:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpr6t8xth3.cpp:26:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x >= 0) {\n\
    \            sum += x * x;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplw8980uy.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmplw8980uy.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmplw8980uy.cpp:\
    \ In function 'int main()':\n/tmp/tmplw8980uy.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmplw8980uy.cpp:2:\n/tmp/tmplw8980uy.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmplw8980uy.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmplw8980uy.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmplw8980uy.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmplw8980uy.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmplw8980uy.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmplw8980uy.cpp:27:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    long n = lst.size();\n    if (n > 0) {\n    \
    \    long sum = 0;\n        for (long i = 0; i < n; i++) {\n            sum +=\
    \ lst[i] * lst[i];\n        }\n        long sum2 = sum;\n        for (long i =\
    \ 1; i < n; i++) {\n            sum2 += lst[i] * lst[i];\n        }\n        sum\
    \ = sum2 - sum * sum / n;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n\
    \    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n\
    \    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0,\
    \ (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppfahkykp.cpp: In function 'int main()':\n/tmp/tmppfahkykp.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppfahkykp.cpp:2:\n/tmp/tmppfahkykp.cpp:32:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmppfahkykp.cpp:33:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmppfahkykp.cpp:33:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmppfahkykp.cpp:33:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmppfahkykp.cpp:34:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmppfahkykp.cpp:34:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmppfahkykp.cpp:34:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmppfahkykp.cpp:34:78: error: no matching function for call\
    \ to 'std::vector<float>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n  long sum = 0;\n  for (float f : lst) {\n    if (f > 0)\n      sum\
    \ += (long)f*f;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n\
    \    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptm_k10fq.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmptm_k10fq.cpp:16:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float f : lst) {\n                  ^\n/tmp/tmptm_k10fq.cpp:\
    \ In function 'int main()':\n/tmp/tmptm_k10fq.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmptm_k10fq.cpp:2:\n/tmp/tmptm_k10fq.cpp:24:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmptm_k10fq.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmptm_k10fq.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmptm_k10fq.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmptm_k10fq.cpp:26:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmptm_k10fq.cpp:26:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmptm_k10fq.cpp:26:78: warning:\
    \ extended init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x > 0) {\n\
    \            sum += x * x;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiohr7ln7.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpiohr7ln7.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmpiohr7ln7.cpp:\
    \ In function 'int main()':\n/tmp/tmpiohr7ln7.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpiohr7ln7.cpp:2:\n/tmp/tmpiohr7ln7.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpiohr7ln7.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpiohr7ln7.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpiohr7ln7.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpiohr7ln7.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpiohr7ln7.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpiohr7ln7.cpp:27:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float f : lst) {\n        if (f > 0)\n \
    \           sum += (long)f*f;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6t8xth3.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpr6t8xth3.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpr6t8xth3.cpp:\
    \ In function 'int main()':\n/tmp/tmpr6t8xth3.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpr6t8xth3.cpp:2:\n/tmp/tmpr6t8xth3.cpp:24:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpr6t8xth3.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpr6t8xth3.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpr6t8xth3.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpr6t8xth3.cpp:26:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpr6t8xth3.cpp:26:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpr6t8xth3.cpp:26:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x >= 0) {\n\
    \            sum += x * x;\n        } else {\n            sum += x;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n\
    \    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2k56zaw3.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp2k56zaw3.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmp2k56zaw3.cpp:\
    \ In function 'int main()':\n/tmp/tmp2k56zaw3.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp2k56zaw3.cpp:2:\n/tmp/tmp2k56zaw3.cpp:27:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp2k56zaw3.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp2k56zaw3.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp2k56zaw3.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp2k56zaw3.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp2k56zaw3.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp2k56zaw3.cpp:29:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float f : lst) {\n        if (f > 0)\n \
    \           sum += f * f;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = double_the_difference;\n    assert(candidate((std::vector<float>())) == (0));\n\
    \    assert(candidate((std::vector<float>({(float)5.0, (float)4.0}))) == (25));\n\
    \    assert(candidate((std::vector<float>({(float)0.1, (float)0.2, (float)0.3})))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)-10.0, (float)-20.0,\
    \ (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuun3cki2.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpuun3cki2.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float f : lst) {\n                    ^\n/tmp/tmpuun3cki2.cpp:\
    \ In function 'int main()':\n/tmp/tmpuun3cki2.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpuun3cki2.cpp:2:\n/tmp/tmpuun3cki2.cpp:24:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpuun3cki2.cpp:25:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpuun3cki2.cpp:25:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpuun3cki2.cpp:25:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpuun3cki2.cpp:26:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpuun3cki2.cpp:26:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpuun3cki2.cpp:26:78: warning:\
    \ extended "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    long n = lst.size();\n    if (n > 0) {\n    \
    \    long sum = 0;\n        for (long i = 0; i < n; i++) {\n            if (lst[i]\
    \ % 2 != 0) {\n                sum += lst[i] * lst[i];\n            }\n      \
    \  }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n\
    \    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmponsx_xxi.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmponsx_xxi.cpp:20:26: error: invalid operands of types 'float' and 'int'\
    \ to binary 'operator%'\n             if (lst[i] % 2 != 0) {\n               \
    \           ^\n/tmp/tmponsx_xxi.cpp: In function 'int main()':\n/tmp/tmponsx_xxi.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = double_the_difference;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmponsx_xxi.cpp:2:\n/tmp/tmponsx_xxi.cpp:29:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmponsx_xxi.cpp:30:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmponsx_xxi.cpp:30:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmponsx_xxi.cpp:30:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmponsx_xxi.cpp:31:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmponsx_xxi.cpp:31:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmponsx_xxi.cp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n  long sum = 0;\n  for (float f : lst) {\n    if (f < 0) {\n      sum\
    \ += f * f;\n    } else {\n      sum += f;\n    }\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3i4h6vd8.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmp3i4h6vd8.cpp:16:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float f : lst) {\n                  ^\n/tmp/tmp3i4h6vd8.cpp:\
    \ In function 'int main()':\n/tmp/tmp3i4h6vd8.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp3i4h6vd8.cpp:2:\n/tmp/tmp3i4h6vd8.cpp:27:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmp3i4h6vd8.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmp3i4h6vd8.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmp3i4h6vd8.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp3i4h6vd8.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmp3i4h6vd8.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmp3i4h6vd8.cpp:29:78: warning:\
    \ extended init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x % 2 != 0)\
    \ {\n            sum += x * x;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbid0vlca.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpbid0vlca.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmpbid0vlca.cpp:17:17:\
    \ error: invalid operands of types 'float' and 'int' to binary 'operator%'\n \
    \        if (x % 2 != 0) {\n                 ^\n/tmp/tmpbid0vlca.cpp: In function\
    \ 'int main()':\n/tmp/tmpbid0vlca.cpp:24:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = double_the_difference;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbid0vlca.cpp:2:\n/tmp/tmpbid0vlca.cpp:25:44: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpbid0vlca.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpbid0vlca.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpbid0vlca.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbid0vlca.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpbid0vlca.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (fl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n  long sum = 0;\n  for (float f : lst) {\n    if (f > 0) sum += f*f;\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = double_the_difference;\n\
    \    assert(candidate((std::vector<float>())) == (0));\n    assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n    assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqln6erf7.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpqln6erf7.cpp:16:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float f : lst) {\n                  ^\n/tmp/tmpqln6erf7.cpp:\
    \ In function 'int main()':\n/tmp/tmpqln6erf7.cpp:22:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpqln6erf7.cpp:2:\n/tmp/tmpqln6erf7.cpp:23:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpqln6erf7.cpp:24:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpqln6erf7.cpp:24:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpqln6erf7.cpp:24:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpqln6erf7.cpp:25:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpqln6erf7.cpp:25:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpqln6erf7.cpp:25:78: warning:\
    \ extended init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n  long sum = 0;\n  for (float x : lst) {\n    if (x < 0) {\n      sum\
    \ += x;\n    } else {\n      sum += x * x;\n    }\n  }\n  return sum;\n}\nint\
    \ main() {\n    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph5z2x5g.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpph5z2x5g.cpp:16:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float x : lst) {\n                  ^\n/tmp/tmpph5z2x5g.cpp:\
    \ In function 'int main()':\n/tmp/tmpph5z2x5g.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpph5z2x5g.cpp:2:\n/tmp/tmpph5z2x5g.cpp:27:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpph5z2x5g.cpp:28:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpph5z2x5g.cpp:28:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpph5z2x5g.cpp:28:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpph5z2x5g.cpp:29:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpph5z2x5g.cpp:29:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpph5z2x5g.cpp:29:78: warning:\
    \ extended init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a list of numbers,\
    \ return the sum of squares of the numbers\n// in the list that are odd. Ignore\
    \ numbers that are negative or not integers.\n// >>> double_the_difference((std::vector<float>({(long)1,\
    \ (long)3, (long)2, (long)0})))\n// (10)\n// >>> double_the_difference((std::vector<float>({(long)-1,\
    \ (long)-2, (long)0})))\n// (0)\n// >>> double_the_difference((std::vector<float>({(long)9,\
    \ (long)-2})))\n// (81)\n// >>> double_the_difference((std::vector<float>({(long)0})))\n\
    // (0)\n// If the input list is empty, return 0.\nlong double_the_difference(std::vector<float>\
    \ lst) {\n    long sum = 0;\n    for (float x : lst) {\n        if (x > 0) {\n\
    \            sum += x * x;\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = double_the_difference;\n    assert(candidate((std::vector<float>()))\
    \ == (0));\n    assert(candidate((std::vector<float>({(float)5.0, (float)4.0})))\
    \ == (25));\n    assert(candidate((std::vector<float>({(float)0.1, (float)0.2,\
    \ (float)0.3}))) == (0));\n    assert(candidate((std::vector<float>({(float)-10.0,\
    \ (float)-20.0, (float)-30.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)-1.0,\
    \ (float)-2.0, (float)8.0}))) == (0));\n    assert(candidate((std::vector<float>({(float)0.2,\
    \ (float)3.0, (float)5.0}))) == (34));\n    assert(candidate((std::vector<float>({(float)-9.0,\
    \ (float)-7.0, (float)-5.0, (float)-3.0, (float)-1.0, (float)1.0, (float)3.0,\
    \ (float)5.0, (float)7.0, (float)9.0}))) == (165));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiohr7ln7.cpp: In function 'long int double_the_difference(std::vector<float>)':\n\
    /tmp/tmpiohr7ln7.cpp:16:20: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float x : lst) {\n                    ^\n/tmp/tmpiohr7ln7.cpp:\
    \ In function 'int main()':\n/tmp/tmpiohr7ln7.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = double_the_difference;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpiohr7ln7.cpp:2:\n/tmp/tmpiohr7ln7.cpp:25:44: error: 'candidate'\
    \ was not declared in this scope\n     assert(candidate((std::vector<float>()))\
    \ == (0));\n                                            ^\n/tmp/tmpiohr7ln7.cpp:26:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                         ^\n/tmp/tmpiohr7ln7.cpp:26:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)5.0,\
    \ (float)4.0}))) == (25));\n                                                 \
    \                 ^\n/tmp/tmpiohr7ln7.cpp:26:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpiohr7ln7.cpp:27:41: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \   ^\n/tmp/tmpiohr7ln7.cpp:27:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<float>({(float)0.1,\
    \ (float)0.2, (float)0.3}))) == (0));\n                                      \
    \                                        ^\n/tmp/tmpiohr7ln7.cpp:27:78: warning:\
    \ extended "
  stdout: ''
