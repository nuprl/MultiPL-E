name: HumanEval_51_remove_vowels
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// remove_vowels is a function\
  \ that takes string and returns string without vowels.\n// >>> remove_vowels((\"\
  \"))\n// (\"\")\n// >>> remove_vowels((\"abcdef\"))\n// (\"bcdf\")\n// >>> remove_vowels((\"\
  aaaaa\"))\n// (\"\")\n// >>> remove_vowels((\"aaBAA\"))\n// (\"B\")\n// >>> remove_vowels((\"\
  zbcd\"))\n// (\"zbcd\")\nstd::string remove_vowels(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = remove_vowels;\n    assert(candidate((\"\
  \")) == (\"\"));\n    assert(candidate((\"abcdef\\nghijklm\")) == (\"bcdf\\nghjklm\"\
  ));\n    assert(candidate((\"fedcba\")) == (\"fdcb\"));\n    assert(candidate((\"\
  eeeee\")) == (\"\"));\n    assert(candidate((\"acBAA\")) == (\"cB\"));\n    assert(candidate((\"\
  EcBOO\")) == (\"cB\"));\n    assert(candidate((\"ybcd\")) == (\"ybcd\"));\n}\n"
completions: ["    std::string vowels = \"aeiou\";\n    std::string vowels_removed;\n\
    \    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            vowels_removed += c;\n        }\n    }\n    return vowels_removed;",
  "    std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    for (auto &c\
    \ : text) {\n        if (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n\
    \    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            new_text += c;\n        }\n    }\n    return new_text;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ new_text = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c) !=\
    \ std::string::npos) {\n            new_text += c;\n        }\n    }\n    return\
    \ new_text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string no_vowels\
    \ = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            no_vowels += c;\n        }\n    }\n    return no_vowels;", " \
    \   std::string vowels = \"aeiouAEIOU\";\n    std::string no_vowels;\n    for\
    \ (auto c : text) {\n        if (vowels.find(c) != std::string::npos) {\n    \
    \        no_vowels += c;\n        }\n    }\n    return no_vowels;", "    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string new_text;\n    for (auto &c : text)\
    \ {\n        if (vowels.find(c) != std::string::npos) {\n            new_text\
    \ += c;\n        }\n    }\n    return new_text;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string result;\n    for (auto &c : text) {\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            continue;\n        }\n\
    \        result += c;\n    }\n    return result;", "    std::string vowels = \"\
    aeiouAEIOU\";\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n\
    \        if (vowels.find(c) != std::string::npos) {\n            noVowels += c;\n\
    \        }\n    }\n    return noVowels;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string ans = \"\";\n    for (auto c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            ans += c;\n        }\n    }\n    return\
    \ ans;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string new_text;\n\
    \    for (auto &c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            new_text += c;\n        }\n    }\n    return new_text;", "  \
    \  std::string vowels = \"aeiouAEIOU\";\n    for (auto &c : text) {\n        if\
    \ (vowels.find(c) != std::string::npos) {\n            text.erase(text.begin()\
    \ + std::find(text.begin(), text.end(), c), text.end());\n        }\n    }\n \
    \   return text;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ noVowels = \"\";\n    for (auto &c : text) {\n        if (c == vowels[0] ||\
    \ c == vowels[1] || c == vowels[2] || c == vowels[3] || c == vowels[4] || c ==\
    \ vowels[5] || c == vowels[6] || c == vowels[7] || c == vowels[8] || c == vowels[9])\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;", "  \
    \  std::string vowels = \"aeiou\";\n    std::string result = \"\";\n    for (auto\
    \ c : text) {\n        if (vowels.find(c) != std::string::npos) {\n          \
    \  result += c;\n        }\n    }\n    return result;", "    std::string vowels\
    \ = \"aeiouAEIOU\";\n    std::string new_text;\n    for (auto &c : text) {\n \
    \       if (vowels.find(c) != std::string::npos) {\n            new_text += c;\n\
    \        }\n    }\n    return new_text;", "    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string noVowels = \"\";\n    for (auto &c : text) {\n        if (vowels.find(c)\
    \ != std::string::npos) {\n            noVowels += c;\n        }\n    }\n    return\
    \ noVowels;", "    std::string vowels = \"aeiouAEIOU\";\n    std::string noVowels\
    \ = \"\";\n    for (auto c : text) {\n        if (vowels.find(c) != std::string::npos)\
    \ {\n            noVowels += c;\n        }\n    }\n    return noVowels;"]
stop_tokens:
- "\n}"
