name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the list l.\n// >>> median((std::vector<long>({(long)3, (long)1, (long)2, (long)4,\
  \ (long)5})))\n// (float(3))\n// >>> median((std::vector<long>({(long)-10, (long)4,\
  \ (long)6, (long)1000, (long)10, (long)20})))\n// (15.0)\nfloat median(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
  \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
  \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
completions: ["    long long n = l.size();\n    if (n < 2) return 0.0;\n    long long\
    \ mid = n / 2;\n    long long left = 0, right = mid;\n    while (left < right)\
    \ {\n        long long mid = (left + right) / 2;\n        if (l[mid] < l[mid+1])\
    \ left = mid + 1;\n        else right = mid - 1;\n    }\n    if (left == right)\
    \ return l[left];\n    return l[left] + (l[right] - l[left]) / 2;", "    long\
    \ long int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n  \
    \  }\n    else {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }", " \
    \   long long n = l.size();\n    if (n % 2 == 0) {\n        return ((l[n/2] +\
    \ l[n/2-1])/2.0);\n    } else {\n        return l[n/2];\n    }", "    long long\
    \ n = l.size();\n    if (n % 2 == 0) {\n        long long mid = n / 2;\n     \
    \   long long left = l[mid];\n        long long right = l[n - 1];\n        return\
    \ (left + right) / 2.0;\n    }\n    else {\n        long long mid = n / 2;\n \
    \       long long left = l[mid];\n        long long right = l[n - 1];\n      \
    \  return (left + right) / 2.0;\n    }", "    long long int n = l.size();\n  \
    \  if (n % 2 == 0) {\n        return l[n/2];\n    }\n    else {\n        return\
    \ (l[n/2] + l[n/2-1])/2.0;\n    }", "    long long n = l.size();\n    assert(n\
    \ >= 1);\n    long long mid = n / 2;\n    long long l1 = mid;\n    long long l2\
    \ = n - mid;\n    long long l3 = mid;\n    long long l4 = n - mid;\n    long long\
    \ l5 = mid;\n    long long l6 = n - mid;\n    long long l7 = mid;\n    long long\
    \ l8 = n - mid;\n    long long l9 = mid;\n    long long l10 = n - mid;\n    long\
    \ long l11 = mid;\n    long long l12 = n - mid;\n    long long l13 = mid;\n  \
    \  long long l14 = n - mid;\n    long long l15 = mid;\n    long long l16 = n -\
    \ mid;\n    long long l17 = mid;\n    long long l18 = n - mid;\n    long long\
    \ l19 = mid;\n    long long l20 = n - mid;\n    long long l21 = 0;\n    long long\
    \ l22 = 0;\n    long long l23 = 0;\n    long long l24 = 0;\n    long long l25\
    \ = 0;\n    long long l26 = 0;\n    long long l27 = 0;\n    long long l28 = 0;\n\
    \    long long l29 = 0;\n    long long l30 = 0;\n    long long l31 = 0;\n    long\
    \ long l32 = 0;\n    long long l33 = 0;\n    long long l34 = 0;\n    long long\
    \ l35 = 0;\n    long long l36 = 0;\n    long long l37 = 0;\n    long long l38\
    \ = 0;\n    long long l39 = 0;\n    long long l40 = 0;\n    long long l41 = 0;\n\
    \    long long l42 = 0;\n    long long l43 = 0;\n    long long l44 = 0;\n    long\
    \ long l45 = 0;\n    long long l46 = 0;\n    long long l47 = 0;\n    long long\
    \ l48 = 0;\n    long long l49 = 0;\n    long long l50 = 0;\n    long long l51\
    \ = 0;\n    long long l52 = 0;\n    long long l53 = 0;\n    long long l54 = 0;\n\
    \    long long l55 = 0;\n    long long l56 = 0;\n    long long l57 = 0;\n    long\
    \ long l58 = 0;\n    long long l59 = 0;\n    long long l60 = 0;\n    long long\
    \ l61 = 0;\n    long long l62 = 0;\n    long long l63 = 0;\n    long long l64\
    \ = 0;\n    long long l", "    long long n = l.size();\n    if (n < 2) return\
    \ l[0];\n    long long mid = n / 2;\n    long long left = l[mid];\n    long long\
    \ right = l[n - 1];\n    if (left < right) {\n        return left;\n    } else\
    \ {\n        return right;\n    }", "    long long n = l.size();\n    if (n <=\
    \ 1) return l[0];\n    long long mid = n / 2;\n    float a = l[mid];\n    float\
    \ b = l[n - 1];\n    return a + (b - a) * ((float)n / (float)2);", "    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;", " \
    \   long n = l.size();\n    assert(n >= 2);\n    long mid = n / 2;\n    long l1\
    \ = mid;\n    long l2 = n - mid;\n    if (l2 == 0) return l[0];\n    if (l2 >\
    \ 0) return median(l, l1, l2);\n    long l3 = mid;\n    long l4 = n - mid;\n \
    \   if (l4 > 0) return median(l, l3, l4);\n    long l5 = mid;\n    long l6 = n\
    \ - mid;\n    if (l6 > 0) return median(l, l5, l6);\n    long l7 = mid;\n    long\
    \ l8 = n - mid;\n    if (l8 > 0) return median(l, l7, l8);\n    long l9 = mid;\n\
    \    long l10 = n - mid;\n    if (l10 > 0) return median(l, l9, l10);\n    long\
    \ l11 = mid;\n    long l12 = n - mid;\n    if (l12 > 0) return median(l, l11,\
    \ l12);\n    long l13 = mid;\n    long l14 = n - mid;\n    if (l14 > 0) return\
    \ median(l, l13, l14);\n    long l15 = mid;\n    long l16 = n - mid;\n    if (l16\
    \ > 0) return median(l, l15, l16);\n    long l17 = mid;\n    long l18 = n - mid;\n\
    \    if (l18 > 0) return median(l, l17, l18);\n    long l19 = mid;\n    long l20\
    \ = n - mid;\n    if (l20 > 0) return median(l, l19, l20);\n    long l21 = mid;\n\
    \    long l22 = n - mid;\n    if (l22 > 0) return median(l, l21, l22);\n    long\
    \ l23 = mid;\n    long l24 = n - mid;\n    if (l24 > 0) return median(l, l23,\
    \ l24);\n    long l25 = mid;\n    long l26 = n - mid;\n    if (l26 > 0) return\
    \ median(l, l25, l26);\n    long l27 = mid;\n    long l28 = n - mid;\n    if (l28\
    \ > 0) return median(l, l27, l28);\n    long l29 = mid;\n    long l30 = n - mid;\n\
    \    if (l30 > 0) return median(l, l29, l30);\n    long l31 = mid;\n    long l32\
    \ = n - mid;\n    if (l32 > 0) return median(l, ", "    long long n = l.size();\n\
    \    assert(n >= 2);\n    long long mid = n / 2;\n    float a = l[mid];\n    float\
    \ b = l[n - 1];\n    if (a > b) std::swap(a, b);\n    float c = a + b;\n    return\
    \ c / 2;", "    long long int mid = l.size() / 2;\n    float midVal = l[mid];\n\
    \    float leftMedian = median(l.subvector(0, mid));\n    float rightMedian =\
    \ median(l.subvector(mid + 1, l.size()));\n    return midVal + (leftMedian + rightMedian)\
    \ / 2;", "    long n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n\
    \    } else {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }", "    long n =\
    \ l.size();\n    assert(n >= 1);\n    long mid = n / 2;\n    long l1 = mid;\n\
    \    long l2 = n - mid;\n    long l3 = n - 1;\n    long l4 = mid;\n    long l5\
    \ = mid;\n    long l6 = n - 1;\n    long l7 = mid;\n    long l8 = n - 1;\n   \
    \ long l9 = mid;\n    long l10 = n - 1;\n    long l11 = mid;\n    long l12 = mid;\n\
    \    long l13 = n - 1;\n    long l14 = mid;\n    long l15 = mid;\n    long l16\
    \ = n - 1;\n    long l17 = mid;\n    long l18 = mid;\n    long l19 = n - 1;\n\
    \    long l20 = mid;\n    long l21 = mid;\n    long l22 = n - 1;\n    long l23\
    \ = mid;\n    long l24 = mid;\n    long l25 = n - 1;\n    long l26 = mid;\n  \
    \  long l27 = mid;\n    long l28 = n - 1;\n    long l29 = mid;\n    long l30 =\
    \ mid;\n    long l31 = n - 1;\n    long l32 = mid;\n    long l33 = mid;\n    long\
    \ l34 = n - 1;\n    long l35 = mid;\n    long l36 = mid;\n    long l37 = n - 1;\n\
    \    long l38 = mid;\n    long l39 = mid;\n    long l40 = n - 1;\n    long l41\
    \ = mid;\n    long l42 = mid;\n    long l43 = n - 1;\n    long l44 = mid;\n  \
    \  long l45 = mid;\n    long l46 = n - 1;\n    long l47 = mid;\n    long l48 =\
    \ mid;\n    long l49 = n - 1;\n    long l50 = mid;\n    long l51 = mid;\n    long\
    \ l52 = n - 1;\n    long l53 = mid;\n    long l54 = mid;\n    long l55 = n - 1;\n\
    \    long l56 = mid;\n    long l57 = mid;\n    long l58 = n - 1;\n    long l59\
    \ = mid;\n    long l60 = mid;\n    long l61 = n - 1;\n    long l62 = mid;\n  \
    \  long l63 = mid;\n", "    long long int n = l.size();\n    if (n <= 1) return\
    \ l[0];\n    long long int mid = n / 2;\n    long long int left = l[mid];\n  \
    \  long long int right = l[n - 1];\n    if (left > right) return median(l);\n\
    \    return left;", "    long long mid = l.size() / 2;\n    float midval = l[mid];\n\
    \    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n    if (leftval\
    \ > rightval) {\n        return midval;\n    }\n    return leftval;", "    long\
    \ long sum = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    float\
    \ median = (float)sum / l.size();\n    return median;", "    long long mid = l.size()\
    \ / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.slice(0, mid));\n\
    \    float rightMedian = median(l.slice(mid + 1, l.size()));\n    return midVal\
    \ + (leftMedian + rightMedian) / 2.0;", "    long long n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return l[n/2];\n    } else {\n        return (l[n/2] +\
    \ l[n/2-1])/2.0;\n    }", "    long long n = l.size();\n    if (n < 2) return\
    \ l[0];\n    long long mid = n / 2;\n    float midval = l[mid];\n    float leftval\
    \ = l[mid];\n    float rightval = l[n - 1];\n    for (long long i = mid + 1; i\
    \ < n; i++) {\n        if (l[i] < leftval) leftval = l[i];\n        if (l[i] >\
    \ rightval) rightval = l[i];\n    }\n    return (leftval + rightval) / 2.0;"]
stop_tokens:
- "\n}"
