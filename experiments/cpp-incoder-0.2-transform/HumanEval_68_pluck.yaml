name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a list, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
  \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
  // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
  \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
  // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
  \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the first\
  \ zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <=\
  \ 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n \
  \   assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8})))\
  \ == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n \
  \   assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
  \ == (std::vector<long>()));\n}\n"
completions: ["    long smalest_value = arr[0];\n    long smalest_index = 0;\n   \
    \ for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0, smalest_index = 0;\n    long even_value =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            even_value = arr[i];\n            smalest_value = arr[i];\n \
    \           smalest_index = i;\n        }\n    }\n    if (smalest_value == 0)\
    \ {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0, smallest_index = -1;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if\
    \ (smalest_value == 0)\n        return std::vector<long>();\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = 0, smalest_index = 0;\n    long\
    \ even_value = 0;\n    long index = 0;\n    for (auto &i : arr) {\n        if\
    \ (i % 2 == 0) {\n            even_value = i;\n            index = i;\n      \
    \  }\n    }\n    if (arr.size() == 0) {\n        return {};\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            if (i < even_value) {\n\
    \                smalest_value = i;\n                smalest_index = index;\n\
    \            }\n        }\n    }\n    return {smalest_value, smalest_index};",
  "    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = INT_MIN;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == INT_MIN) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == INT_MIN) {\n\
    \        return std::vector<long>();\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // Your code here\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long temp = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            temp = arr[i];\n            smallest_value = temp;\n            smallest_index\
    \ = i;\n        }\n    }\n    std::vector<long> result;\n    if (smallest_index\
    \ != 0) {\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_index_value %\
    \ 2 == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \        result.push_back(smalest_index_value);\n    }\n    return result;", " \
    \   long smallest_value = arr[0];\n    long smallest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] < smallest_value) {\n    \
    \        smallest_value = arr[i];\n            smallest_index = i;\n        }\n\
    \    }\n    std::vector<long> result;\n    if (smallest_value % 2 == 0) {\n  \
    \      result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    } else {\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_even_value == 0) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_even_value == 0) {\n        return std::vector<long>{};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // write your code here\n    long smallest_value =\
    \ 0;\n    long smallest_index = 0;\n    long index = 0;\n    long value = 0;\n\
    \    for (auto i : arr) {\n        if (i % 2 == 0) {\n            value = i;\n\
    \            index = i;\n        }\n    }\n    if (value == 0) {\n        return\
    \ {};\n    }\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n          \
    \  if (value < smallest_value) {\n                smallest_value = value;\n  \
    \              smallest_index = index;\n            }\n        }\n    }\n    return\
    \ {smallest_value, smallest_index};", "    // Your code here\n    std::vector<long>\
    \ result;\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n \
    \           if (smallest_value < arr[i]) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smalest_value=0;\n\
    \    long smalest_index=0;\n    long smalest_even_value=0;\n    long smalest_even_count=0;\n\
    \    long smalest_even_index=0;\n    for(long i=0;i<arr.size();i++){\n       \
    \ if(arr[i]%2==0){\n            if(smalest_even_value<arr[i]){\n             \
    \   smalest_even_value=arr[i];\n                smalest_even_count=1;\n      \
    \          smalest_even_index=i;\n            }\n            else if(smalest_even_value==arr[i]){\n\
    \                smalest_even_count++;\n            }\n        }\n        else{\n\
    \            if(smalest_value<arr[i]){\n                smalest_value=arr[i];\n\
    \                smalest_index=i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if(smalest_even_count==1){\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    else{\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    }\n    return result;", " \
    \   // Your code here\n    std::vector<long> res;\n    long smalest_value;\n \
    \   long smalest_index;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index2\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_index2\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n                smalest_index2\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return std::vector<long>();\n    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n\
    \    ans.push_back(smalest_index);\n    ans.push_back(smalest_index2);\n    return\
    \ ans;", "    // write your code here\n    long smallest_value = 0;\n    long\
    \ smallest_index = 0;\n    long index = 0;\n    long value = 0;\n    for (auto\
    \ i : arr) {\n        if (i % 2 == 0) {\n            value = i;\n            index\
    \ = i;\n        }\n    }\n    if (value == 0) {\n        return std::vector<long>();\n\
    \    }\n    for (auto i : arr) {\n        if (i == value) {\n            if (smallest_value\
    \ == 0) {\n                smallest_value = value;\n                smallest_index\
    \ = index;\n            } else if (smallest_value == value) {\n              \
    \  smallest_index = index;\n            }\n        }\n    }\n    return std::vector<long>({smallest_value,\
    \ smallest_index});", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = INT_MIN;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == INT_MIN) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    long smalest_value =\
    \ arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smallest_index = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    long\
    \ smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            smalest_even_value = arr[i];\n  \
    \          smalest_index = i;\n        }\n    }\n    if (smalest_even_value) {\n\
    \        smalest_value = smalest_even_value;\n        smalest_index = smalest_index;\n\
    \    }\n    std::vector<long> result;\n    if (smalest_value) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n\
    \    long smallest_even_value = 0;\n    long smallest_even_node = 0;\n    long\
    \ smallest_even_node_index = 0;\n    long index = 0;\n    long even_value = 0;\n\
    \    long even_node = 0;\n    long even_node_index = 0;\n    for (auto &node :\
    \ arr) {\n        if (node % 2 == 0) {\n            even_node = node;\n      \
    \      even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &node : arr) {\n        if (node % 2 == 0) {\n            even_node_index =\
    \ index;\n        }\n        index++;\n    }\n    for (auto &node : arr) {\n \
    \       if (node % 2 == 0) {\n            even_node_index = index;\n        }\n\
    \        index++;\n    }\n    for (auto &node : arr) {\n        if (node % 2 ==\
    \ 0) {\n            even_node_index = index;\n        }\n        index++;\n  \
    \  }\n    for (auto &node : arr) {\n        if (node % 2 == 0) {\n           \
    \ even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &node : arr) {\n        if (node % 2 == 0) {\n            even_node_index =\
    \ index;\n        }\n        index++;\n    }\n    for (auto &node : arr) {\n \
    \       if (node % 2 == 0) {\n            even_node_index = index;\n        }\n\
    \        index++;\n    }\n    for (auto &node : arr) {\n        if (node % 2 ==\
    \ 0) {\n            even_node_index = index;\n        }\n        index++;\n  \
    \  }\n    for (auto &node : arr) {\n        if (node % 2 == 0) {\n           \
    \ even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &node : arr) {\n        if (node % 2 == 0) {\n            even_node_index =\
    \ index;\n        }\n        index++;\n    }\n    for (auto &node : arr) {\n \
    \       if (node % 2 == 0) {\n            even_node_index = index;\n        }\n\
    \        index++;\n    }\n    for (auto &node : arr) {\n        if (node % 2 ==\
    \ 0) {\n            even_node_index = index;\n        }\n        index++;\n  \
    \  }\n    for (auto &node : arr) {\n        if (node % 2 == 0) {\n           \
    \ even_node_index = index;\n        }\n        index++;\n    }\n    for (auto\
    \ &node : arr) {\n        if (node % 2 == 0) {\n            even_node_index =\
    \ index;\n        }\n        index++;\n    }\n    for (auto &node : arr) {\n \
    \       if (node % 2 == 0) {\n            even_node_index = index;\n        }\n\
    \        index++;\n    }\n    for (auto &node : arr) {\n        if (node % 2 ==\
    \ 0) {\n", "    long smalest_value = arr[0];\n    long smallest_index = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smallest_index = i;\n  \
    \      }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smallest_index);\n\
    \    } else {\n        result.push_back(smallest_index);\n    }\n    return result;",
  "    // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long\
    \ smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7\
    \ = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n\
    \    long smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n  \
    \  long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n    long\
    \ smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16\
    \ = 0;\n    long smalest_index_value17 = 0;\n    long smalest_index_value18 =\
    \ 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n\
    \    long smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n  \
    \  long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n    long\
    \ smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27\
    \ = 0;\n    long smalest_index_value28 = 0;\n    long smalest_index_value29 =\
    \ 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n\
    \    long smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n  \
    \  long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n    long\
    \ smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38\
    \ = 0;\n    long smalest_index_value39 = 0;\n    long smalest_index_value40 =\
    \ 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n\
    \    long smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n  \
    \  long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n    long\
    \ smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49\
    \ = 0;\n    long smalest_index_", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = i;\n                smalest_index =\
    \ i;\n            } else {\n                if (smalest_value < i) {\n       \
    \             smalest_value = i;\n                    smalest_index = i;\n   \
    \             }\n            }\n        }\n    }\n    if (smalest_value == 0)\
    \ {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_2 = 0;\n\
    \    long smalest_even_index_3 = 0;\n    long smalest_even_index_4 = 0;\n    long\
    \ smalest_even_index_5 = 0;\n    long smalest_even_index_6 = 0;\n    long smalest_even_index_7\
    \ = 0;\n    long smalest_even_index_8 = 0;\n    long smalest_even_index_9 = 0;\n\
    \    long smalest_even_index_10 = 0;\n    long smalest_even_index_11 = 0;\n  \
    \  long smalest_even_index_12 = 0;\n    long smalest_even_index_13 = 0;\n    long\
    \ smalest_even_index_14 = 0;\n    long smalest_even_index_15 = 0;\n    long smalest_even_index_16\
    \ = 0;\n    long smalest_even_index_17 = 0;\n    long smalest_even_index_18 =\
    \ 0;\n    long smalest_even_index_19 = 0;\n    long smalest_even_index_20 = 0;\n\
    \    long smalest_even_index_21 = 0;\n    long smalest_even_index_22 = 0;\n  \
    \  long smalest_even_index_23 = 0;\n    long smalest_even_index_24 = 0;\n    long\
    \ smalest_even_index_25 = 0;\n    long smalest_even_index_26 = 0;\n    long smalest_even_index_27\
    \ = 0;\n    long smalest_even_index_28 = 0;\n    long smalest_even_index_29 =\
    \ 0;\n    long smalest_even_index_30 = 0;\n    long smalest_even_index_31 = 0;\n\
    \    long smalest_even_index_32 = 0;\n    long smalest_even_index_33 = 0;\n  \
    \  long smalest_even_index_34 = 0;\n    long smalest_even_index_35 = 0;\n    long\
    \ smalest_even_index_36 = 0;\n    long smalest_even_index_37 = 0;\n    long smalest_even_index_38\
    \ = 0;\n    long smalest_even_index_39 = 0;\n    long smalest_even_index_40 =\
    \ 0;\n    long smalest_even_index_41 = 1;\n    long smalest_even_index_42 = 1;\n\
    \    long smalest_even_index_43 = 1;\n    long smalest_even_index_44 = 1;\n  \
    \  long smalest_even_index_45 = 1;\n    long smalest_even_index_46 = 1;\n    long\
    \ smalest_even_index_47 = 1;\n    long smalest_even_index_48 = 1;\n    long smalest_",
  "    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smallest_value == 0) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            } else if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n    }\n    if (smallest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> res;\n    res.push_back(smallest_value);\n\
    \    res.push_back(smallest_index);\n    return res;", "    // Your code here\n\
    \    long smalest_value = 0;\n    int smalest_index = 0;\n    for(int i = 0; i\
    \ < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_even_value == 0) {\n                smalest_even_value = arr[i];\n\
    \                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ == arr[i]) {\n                smalest_even_index = i;\n            }\n     \
    \   } else {\n            if (smalest_value == 0) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ == arr[i]) {\n                smalest_index = i;\n            }\n        }\n\
    \    }\n    if (smalest_even_value == 0) {\n        return std::vector<long>{};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0, smalest_index = 0;\n    long even_value =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            even_value = arr[i];\n        }\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n   \
    \ std::vector<long> result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // write your code here\n    long smallest_value =\
    \ arr[0];\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smallest_even_value < arr[i]) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if (smallest_even_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_even_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = arr[0];\n\
    \    long smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \         }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smalest_value\
    \ = 0, smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] % 2 == 0) {\n            if (smalest_value == 0 || arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smallest_value;\n    long smallest_index;\n    bool flag = false;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (flag) {\n                smallest_value = arr[i];\n         \
    \       smallest_index = i;\n                flag = false;\n            } else\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                flag = true;\n            }\n        }\n    }\n    if\
    \ (flag) {\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    } else {\n        result.push_back(-1);\n        result.push_back(-1);\n\
    \    }\n    return result;", "    long smalest_value = 0, smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n \
    \   long smalest_even_index = 0;\n    long smalest_even_index_in_arr = 0;\n  \
    \  long smalest_even_index_in_arr_temp = 0;\n    long smalest_even_index_in_arr_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp = 0;\n   \
    \ long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp = 0;\n    long\
    \ smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n   \
    \ long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_in_arr_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long smalest_even", "    // write your code here\n    long smallest_value\
    \ = arr[0];\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n\
    \    long smallest_even_count = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            smallest_even_count++;\n    \
    \        if (smallest_even_count == smallest_even_value && smallest_even_value\
    \ < arr[i]) {\n                smallest_even_value = smallest_even_count;\n  \
    \              smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    if (smallest_even_count == smallest_even_value\
    \ && smallest_even_value < arr[0]) {\n        smallest_even_value = smallest_even_count;\n\
    \        smallest_value = arr[0];\n        smallest_index = 0;\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            smalest_even_value = arr[i];\n            smalest_even_index\
    \ = i;\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] % 2 == 0) {\n            if (smalest_value == smalest_even_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long smallest_even_value = 0;\n   \
    \ long smallest_index = 0;\n    long smallest_value = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ < arr[i]) {\n                smallest_even_value = arr[i];\n               \
    \ smallest_index = i;\n            }\n        }\n    }\n    if (smallest_even_value\
    \ == 0) {\n        return result;\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == smallest_even_value) {\n            if (smallest_value\
    \ < arr[i]) {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_in_array = 0;\n    long smalest_even_index_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array = 0;\n    long\
    \ smalest_even_index_in_array_in_array_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_",
  "    // write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = arr[0];\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < smallest_value) {\n            smallest_value =\
    \ arr[i];\n            smallest_index = i;\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Your code\
    \ here\n    long smallest_even_value = 0;\n    long smallest_index = 0;\n    long\
    \ smallest_value = 0;\n    long smallest_index2 = 0;\n    long smallest_value2\
    \ = 0;\n    long smallest_index3 = 0;\n    long smallest_value3 = 0;\n    long\
    \ smallest_index4 = 0;\n    long smallest_value4 = 0;\n    long smallest_index5\
    \ = 0;\n    long smallest_value5 = 0;\n    long smallest_index6 = 0;\n    long\
    \ smallest_value6 = 0;\n    long smallest_index7 = 0;\n    long smallest_value7\
    \ = 0;\n    long smallest_index8 = 0;\n    long smallest_value8 = 0;\n    long\
    \ smallest_index9 = 0;\n    long smallest_value9 = 0;\n    long smallest_index10\
    \ = 0;\n    long smallest_value10 = 0;\n    long smallest_index11 = 0;\n    long\
    \ smallest_value11 = 0;\n    long smallest_index12 = 0;\n    long smallest_value12\
    \ = 0;\n    long smallest_index13 = 0;\n    long smallest_value13 = 0;\n    long\
    \ smallest_index14 = 0;\n    long smallest_value14 = 0;\n    long smallest_index15\
    \ = 0;\n    long smallest_value15 = 0;\n    long smallest_index16 = 0;\n    long\
    \ smallest_value16 = 0;\n    long smallest_index17 = 0;\n    long smallest_value17\
    \ = 0;\n    long smallest_index18 = 0;\n    long smallest_value18 = 0;\n    long\
    \ smallest_index19 = 0;\n    long smallest_value19 = 0;\n    long smallest_index20\
    \ = 0;\n    long smallest_value20 = 0;\n    long smallest_index21 = 0;\n    long\
    \ smallest_value21 = 0;\n    long smallest_index22 = 0;\n    long smallest_value22\
    \ = 0;\n    long smallest_index23 = 0;\n    long smallest_value23 = 0;\n    long\
    \ smallest_index24 = 0;\n    long smallest_value24 = 0;\n    long smallest_index25\
    \ = 0;\n    long smallest_value25 = 0;\n    long smallest_index26 = 0;\n    long\
    \ smallest_value26 = 0;\n    long smallest_index27 = 0;\n    long smallest_value27\
    \ = 0;\n    long smallest_index28 = 0;\n    long smallest_value28 = 0;\n    long\
    \ smallest_index29 = 0;\n    long smallest_value29 = 0;\n    long smallest_index30\
    \ = 0;\n    long smallest_value30 = 0;\n    long smallest_index31 = 0;\n    long\
    \ smallest_value31 = 0;\n    long smallest_index32 = 0;\n    long smallest_value",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for\
    \ (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = 0, smalest_index = 0;\n    long\
    \ even_value = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n     \
    \       even_value = i;\n        }\n        if (smalest_value == 0) {\n      \
    \      smalest_value = i;\n            smalest_index = i;\n        } else if (smalest_value\
    \ == i) {\n            smalest_index = i;\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // write your code here\n    std::vector<long> result;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_node = 0;\n    long smallest_even_node_index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (smallest_even_value == 0) {\n                smallest_even_node\
    \ = arr[i];\n                smallest_even_node_index = i;\n                smallest_even_value\
    \ = arr[i];\n            } else {\n                if (arr[i] < smallest_even_value)\
    \ {\n                    smallest_even_node = arr[i];\n                    smallest_even_node_index\
    \ = i;\n                    smallest_even_value = arr[i];\n                }\n\
    \            }\n        } else {\n            if (smallest_value == 0) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \            } else {\n                if (arr[i] < smallest_value) {\n      \
    \              smallest_value = arr[i];\n                    smallest_index =\
    \ i;\n                }\n            }\n        }\n    }\n    result.push_back(smallest_even_node);\n\
    \    result.push_back(smallest_even_node_index);\n    return result;", "    //\
    \ write your code here\n    std::vector<long> res;\n    long smallest_value =\
    \ 0;\n    long smallest_index = 0;\n    long smallest_even_value = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smallest_value == 0) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                smallest_even_value = arr[i]\
    \ % 2;\n            } else if (arr[i] < smallest_even_value) {\n             \
    \   smallest_value = arr[i];\n                smallest_index = i;\n          \
    \      smallest_even_value = arr[i] % 2;\n            }\n        }\n    }\n  \
    \  res.push_back(smallest_value);\n    res.push_back(smallest_index);\n    return\
    \ res;", "    long smalest_value;\n    long smalest_index;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long ", "    long smalest_value;\n    int\
    \ smalest_index;\n    long smalest_value_temp;\n    int smalest_index_temp;\n\
    \    long smalest_value_temp2;\n    int smalest_index_temp2;\n    long smalest_value_temp3;\n\
    \    int smalest_index_temp3;\n    long smalest_value_temp4;\n    int smalest_index_temp4;\n\
    \    long smalest_value_temp5;\n    int smalest_index_temp5;\n    long smalest_value_temp6;\n\
    \    int smalest_index_temp6;\n    long smalest_value_temp7;\n    int smalest_index_temp7;\n\
    \    long smalest_value_temp8;\n    int smalest_index_temp8;\n    long smalest_value_temp9;\n\
    \    int smalest_index_temp9;\n    long smalest_value_temp10;\n    int smalest_index_temp10;\n\
    \    long smalest_value_temp11;\n    int smalest_index_temp11;\n    long smalest_value_temp12;\n\
    \    int smalest_index_temp12;\n    long smalest_value_temp13;\n    int smalest_index_temp13;\n\
    \    long smalest_value_temp14;\n    int smalest_index_temp14;\n    long smalest_value_temp15;\n\
    \    int smalest_index_temp15;\n    long smalest_value_temp16;\n    int smalest_index_temp16;\n\
    \    long smalest_value_temp17;\n    int smalest_index_temp17;\n    long smalest_value_temp18;\n\
    \    int smalest_index_temp18;\n    long smalest_value_temp19;\n    int smalest_index_temp19;\n\
    \    long smalest_value_temp20;\n    int smalest_index_temp20;\n    long smalest_value_temp21;\n\
    \    int smalest_index_temp21;\n    long smalest_value_temp22;\n    int smalest_index_temp22;\n\
    \    long smalest_value_temp23;\n    int smalest_index_temp23;\n    long smalest_value_temp24;\n\
    \    int smalest_index_temp24;\n    long smalest_value_temp25;\n    int smalest_index_temp25;\n\
    \    long smalest_value_temp26;\n    int smalest_index_temp26;\n    long smalest_value_temp27;\n\
    \    int smalest_index_temp27;\n    long smalest_value_temp28;\n    int smalest_index_temp28;\n\
    \    ", "    // write your code here\n    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    std::vector<long> result;\n    for (auto &i : arr) {\n        if (i\
    \ % 2 == 0) {\n            if (smalest_value == 0) {\n                smalest_value\
    \ = i;\n                smalest_index = i;\n            } else {\n           \
    \     if (smalest_value < i) {\n                    smalest_value = i;\n     \
    \               smalest_index = i;\n                }\n            }\n       \
    \ }\n    }\n    if (smalest_value == 0) {\n        return result;\n    }\n   \
    \ result.push_back(smalest_value);\n    result.push_back(smalest_index);\n   \
    \ return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n    long\
    \ smallest_even_value = 0;\n    long smallest_even_index = 0;\n    long smallest_even_index_count\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smallest_even_value == 0) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n                smallest_even_index_count\
    \ = 1;\n            } else if (arr[i] < smallest_even_value) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_even_index = i;\n\
    \                smallest_even_index_count = 1;\n            } else if (arr[i]\
    \ == smallest_even_value) {\n                smallest_even_index_count++;\n  \
    \          }\n        } else {\n            if (smallest_value == 0) {\n     \
    \           smallest_value = arr[i];\n                smallest_index = i;\n  \
    \          } else if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    if (smallest_even_value == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_even_index);\n    result.push_back(smallest_even_index_count);\n\
    \    return result;", "    // write your code here\n    long smalest_value = arr[0];\n\
    \    long smalest_index = 0;\n    for (long i = 1; i < arr.size(); i++) {\n  \
    \      if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n   \
    \             smalest_value = arr[i];\n                smalest_index = i;\n  \
    \          }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smalest_value = 0;\n    int smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n            } else if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (arr.size() == 0) {\n        return {};\n    }\n    if (smalest_index\
    \ == arr.size() - 1) {\n        return {smalest_value, smalest_index};\n    }\n\
    \    std::vector<long> res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    // Your code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_index_value = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_index_value = arr[i];\n            } else {\n\
    \                if (arr[i] < smalest_index_value) {\n                    smalest_index_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if (smallest_value == 0) {\n    \
    \    return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n \
    \   long smalest_index_value = arr[0];\n    long smalest_index_value_index = 0;\n\
    \    long smalest_index_value_index_value = arr[0];\n    long smalest_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value = arr[0];\n    long\
    \ smalest_index_value_index_value_index_value_index = 0;\n    long smalest_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = 0;\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = arr[0];\n    long smalest_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index",
  "    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n\
    \    long index = 0;\n    long even_value = 0;\n    long even_index = 0;\n   \
    \ for (auto i : arr) {\n        if (i % 2 == 0) {\n            even_value = i;\n\
    \            even_index = index;\n        }\n        index++;\n    }\n    for\
    \ (auto i : arr) {\n        if (i % 2 == 0) {\n            if (i == even_value)\
    \ {\n                smallest_even_value = even_value;\n                smallest_even_index\
    \ = even_index;\n            }\n        }\n    }\n    if (smallest_even_value\
    \ == 0) {\n        return arr;\n    }\n    for (auto i : arr) {\n        if (i\
    \ == smallest_even_value) {\n            smallest_value = i;\n            smallest_index\
    \ = i;\n        }\n    }\n    std::vector<long> result;\n    for (auto i : arr)\
    \ {\n        if (i == smallest_value) {\n            result.push_back(smallest_value);\n\
    \            result.push_back(smallest_index);\n        }\n    }\n    return result;",
  "    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smallest_value == 0) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            } else if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_value != 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ Write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long current_index = 0;\n    long current_value = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        current_value = arr[i];\n        if (current_value\
    \ % 2 == 0) {\n            if (current_value < smallest_value) {\n           \
    \     smallest_value = current_value;\n                smallest_index = current_index;\n\
    \            }\n            current_index++;\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // write your code here\n    std::vector<long> ans;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_node = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_node\
    \ = i;\n            } else if (arr[i] < smallest_even_value) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_even_node = i;\n \
    \           }\n        }\n    }\n    if (smallest_even_value == 0) {\n       \
    \ return ans;\n    }\n    ans.push_back(smallest_even_value);\n    ans.push_back(smallest_even_node);\n\
    \    return ans;", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  int smalest_index = 0;\n    std::vector<long> result;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_node = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_node = arr[i];\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_node = i;\n            }\n        \
    \    else {\n                if (arr[i] < smallest_even_value) {\n           \
    \         smallest_even_node = arr[i];\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_even_node = i;\n                }\n\
    \            }\n        }\n        else {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_node = arr[i];\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_node = i;\n            }\n        \
    \    else {\n                if (arr[i] < smallest_even_value) {\n           \
    \         smallest_even_node = arr[i];\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_even_node = i;\n                }\n\
    \            }\n        }\n    }\n    result.push_back(smallest_even_node);\n\
    \    result.push_back(smallest_even_node);\n    return result;", "    // Write\
    \ your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   long smalest_index_of_smalest_value = 0;\n    long smalest_index_of_smalest_value2\
    \ = 0;\n    long smalest_index_of_smalest_value3 = 0;\n    long smalest_index_of_smalest_value4\
    \ = 0;\n    long smalest_index_of_smalest_value5 = 0;\n    long smalest_index_of_smalest_value6\
    \ = 0;\n    long smalest_index_of_smalest_value7 = 0;\n    long smalest_index_of_smalest_value8\
    \ = 0;\n    long smalest_index_of_smalest_value9 = 0;\n    long smalest_index_of_smalest_value10\
    \ = 0;\n    long smalest_index_of_smalest_value11 = 0;\n    long smalest_index_of_smalest_value12\
    \ = 0;\n    long smalest_index_of_smalest_value13 = 0;\n    long smalest_index_of_smalest_value14\
    \ = 0;\n    long smalest_index_of_smalest_value15 = 0;\n    long smalest_index_of_smalest_value16\
    \ = 0;\n    long smalest_index_of_smalest_value17 = 0;\n    long smalest_index_of_smalest_value18\
    \ = 0;\n    long smalest_index_of_smalest_value19 = 0;\n    long smalest_index_of_smalest_value20\
    \ = 0;\n    long smalest_index_of_smalest_value21 = 0;\n    long smalest_index_of_smalest_value22\
    \ = 0;\n    long smalest_index_of_smalest_value23 = 0;\n    long smalest_index_of_smalest_value24\
    \ = 0;\n    long smalest_index_of_smalest_value25 = 0;\n    long smalest_index_of_smalest_value26\
    \ = 0;\n    long smalest_index_of_smalest_value27 = 0;\n    long smalest_index_of_smalest_value28\
    \ = 0;\n    long smalest_index_of_smalest_value29 = 0;\n    long smalest_index_of_smalest_value30\
    \ = 0;\n    long smalest_index_of_smalest_value31 = 0;\n    long smalest_index_of_smalest_value32\
    \ = 0;\n    long smalest_index_of_smalest_value33 = 0;\n    long smalest_index_of_smalest_value34\
    \ = 0;\n    long smalest_index_of_smalest_value35 = 0;\n    long smalest_index_",
  "    // code here\n    std::vector<long> res;\n    long min_index = std::numeric_limits<long>::max();\n\
    \    long min_value = std::numeric_limits<long>::max();\n    for (auto i : arr)\
    \ {\n        if (i % 2 == 0) {\n            if (min_value == std::numeric_limits<long>::max())\
    \ {\n                min_value = i;\n                min_index = i;\n        \
    \    } else {\n                if (i < min_value) {\n                    min_value\
    \ = i;\n                    min_index = i;\n                }\n            }\n\
    \        }\n    }\n    res.push_back(min_index);\n    res.push_back(min_value);\n\
    \    return res;", "    // Your code here\n    long smalest_value = 0;\n    int\
    \ smalest_index = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smallest_even_value = arr[0];\n    long smallest_even_index\
    \ = -1;\n    long smallest_even_index_value = arr[0];\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smallest_even_value) {\n                smallest_even_value = arr[i];\n  \
    \              smallest_even_index = i;\n                smallest_even_index_value\
    \ = arr[i];\n            }\n        }\n    }\n    if (smallest_even_index == -1)\
    \ {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smallest_even_index_value);\n    result.push_back(smallest_even_index);\n\
    \    return result;", "    long smalest_value;\n    long smalest_index;\n    long\
    \ smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_of_smalest_value;\n\
    \    long smalest_index_of_smalest_value;\n    long smalest_index_", "    // Your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value == 0) {\n                smalest_value = arr[i];\n  \
    \              smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_index);\n    }\n    return result;",
  "    // Write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Your code\
    \ here\n    std::vector<long> result;\n    long smallest_value = INT_MAX;\n  \
    \  long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = arr[0];\n\
    \    long smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smalest_value % 2 == 0) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \         }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smallest_value\
    \ = 0, smallest_index = 0;\n    long max_value = 0, max_index = 0;\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            if (smallest_value == 0)\
    \ {\n                smallest_value = i;\n                smallest_index = i;\n\
    \            } else if (smallest_value < i) {\n                smallest_value\
    \ = i;\n                smallest_index = i;\n            }\n        }\n      \
    \  if (max_value == 0) {\n            max_value = i;\n            max_index =\
    \ i;\n        } else if (max_value < i) {\n            max_value = i;\n      \
    \      max_index = i;\n        }\n    }\n    if (smallest_value == 0) {\n    \
    \    return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    result.push_back(max_value);\n   \
    \ result.push_back(max_index);\n    return result;", "    long smalest_value =\
    \ arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n       \
    \         smalest_value = arr[i];\n                smalest_index = i;\n      \
    \      } else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count =\
    \ 0;\n    long smalest_even_index_count_max = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index = 0;\n    long smalest_even_index_count_min_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index2\
    \ = 0;\n    long smalest_even_index_count_min_index2_index2_index2 = 0;\n    long\
    \ smalest_even_index_count_min_index2_index2_index2 = 0;\n    long smalest_even_index_count_min_index2_index2_index2\
    \ = 0;\n    long smalest_even", "    // write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_", "    // Your code\
    \ here\n    long smallest_even = arr[0];\n    long smallest_index = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (arr[i] < smallest_even) {\n                smallest_even = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_even);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_even_value\
    \ = arr[i] % 2;\n                smalest_even_index = i;\n            } else if\
    \ (smalest_value == arr[i] % 2) {\n                smalest_even_index = i;\n \
    \           }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ std::vector<long>();\n    } else if (smalest_value == smalest_even_value) {\n\
    \        return std::vector<long>({smalest_value, smalest_index});\n    } else\
    \ {\n        std::vector<long> result;\n        result.push_back((long)smalest_value);\n\
    \        result.push_back((long)smalest_even_index);\n        return result;\n\
    \    }", "    // code here\n    long smalest_value = 0, smalest_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0, smalest_index = 0;\n    long even_value =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            even_value = arr[i];\n            smalest_value = even_value;\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n   \
    \     result.push_back(smalest_index);\n    }\n    return result;", "    // write\
    \ your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_2\
    \ = 0;\n    long smalest_even_index_3 = 0;\n    long smalest_even_index_4 = 0;\n\
    \    long smalest_even_index_5 = 0;\n    long smalest_even_index_6 = 0;\n    long\
    \ smalest_even_index_7 = 0;\n    long smalest_even_index_8 = 0;\n    long smalest_even_index_9\
    \ = 0;\n    long smalest_even_index_10 = 0;\n    long smalest_even_index_11 =\
    \ 0;\n    long smalest_even_index_12 = 0;\n    long smalest_even_index_13 = 0;\n\
    \    long smalest_even_index_14 = 0;\n    long smalest_even_index_15 = 0;\n  \
    \  long smalest_even_index_16 = 0;\n    long smalest_even_index_17 = 0;\n    long\
    \ smalest_even_index_18 = 0;\n    long smalest_even_index_19 = 0;\n    long smalest_even_index_20\
    \ = 0;\n    long smalest_even_index_21 = 0;\n    long smalest_even_index_22 =\
    \ 0;\n    long smalest_even_index_23 = 0;\n    long smalest_even_index_24 = 0;\n\
    \    long smalest_even_index_25 = 0;\n    long smalest_even_index_26 = 0;\n  \
    \  long smalest_even_index_27 = 0;\n    long smalest_even_index_28 = 0;\n    long\
    \ smalest_even_index_29 = 0;\n    long smalest_even_index_30 = 0;\n    long smalest_even_index_31\
    \ = 0;\n    long smalest_even_index_32 = 0;\n    long smalest_even_index_33 =\
    \ 0;\n    long smalest_even_index_34 = 0;\n    long smalest_even_index_35 = 0;\n\
    \    long smalest_even_index_36 = 0;\n    long smalest_even_index_37 = 0;\n  \
    \  long smalest_even_index_38 = 0;\n    long smalest_even_index_39 = 0;\n    long\
    \ smalest_even_index_40 = 0;\n    long smalest_even_index_41 = 1;\n    long smalest_even_index_42\
    \ = 1;\n    long smalest_even_index_43 = 1;\n    long smalest_even_index_44 =\
    \ 1;\n    long smalest_even_index_45 = 1;\n    long smalest_even_index_46 = 1;\n\
    \    long smalest_even_index_47 = 1;\n    long smalest_even_index_48 = 1;\n  \
    \  long smalest_", "    long smalest_value = arr[0];\n    long smalest_index =\
    \ 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (arr.size() == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    // write your code here\n    long smallest_value = 0;\n\
    \    long smallest_index = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_value == 0)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n            if (arr[i] < smallest_value) {\n          \
    \      smallest_value = arr[i];\n                smallest_index = i;\n       \
    \     }\n        }\n    }\n    if (smallest_value == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_odd_value = 0;\n  \
    \  long smalest_odd_index = 0;\n    long smalest_odd_value2 = 0;\n    long smalest_odd_index2\
    \ = 0;\n    long smalest_odd_value3 = 0;\n    long smalest_odd_index3 = 0;\n \
    \   long smalest_odd_value4 = 0;\n    long smalest_odd_index4 = 0;\n    long smalest_odd_value5\
    \ = 0;\n    long smalest_odd_index5 = 0;\n    long smalest_odd_value6 = 0;\n \
    \   long smalest_odd_index6 = 0;\n    long smalest_odd_value7 = 0;\n    long smalest_odd_index7\
    \ = 0;\n    long smalest_odd_value8 = 0;\n    long smalest_odd_index8 = 0;\n \
    \   long smalest_odd_value9 = 0;\n    long smalest_odd_index9 = 0;\n    long smalest_odd_value10\
    \ = 0;\n    long smalest_odd_index10 = 0;\n    long smalest_odd_value11 = 0;\n\
    \    long smalest_odd_index11 = 0;\n    long smalest_odd_value12 = 0;\n    long\
    \ smalest_odd_index12 = 0;\n    long smalest_odd_value13 = 0;\n    long smalest_odd_index13\
    \ = 0;\n    long smalest_odd_value14 = 0;\n    long smalest_odd_index14 = 0;\n\
    \    long smalest_odd_value15 = 0;\n    long smalest_odd_index15 = 0;\n    long\
    \ smalest_odd_value16 = 0;\n    long smalest_odd_index16 = 0;\n    long smalest_odd_value17\
    \ = 0;\n    long smalest_odd_index17 = 0;\n    long smalest_odd_value18 = 0;\n\
    \    long smalest_odd_index18 = 0;\n    long smalest_odd_value19 = 0;\n    long\
    \ smalest_odd_index19 = 0;\n    long smalest_odd_value20 = 0;\n    long smalest_odd_index20\
    \ = 0;\n    long smalest_odd_value21 = 0;\n    long smalest_odd_index21 = 0;\n\
    \    long smalest_odd_value22 = 0;\n    long smalest_odd_index22 = 0;", "    //\
    \ write your code here\n    long smalest_value=0;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long\
    \ smalest_even_index_count = 0;\n    long smalest_even_index_count_max = 0;\n\
    \    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_max2\
    \ = 0;\n    long smalest_even_index_count_min2 = 0;\n    long smalest_even_index_count_max3\
    \ = 0;\n    long smalest_even_index_count_min3 = 0;\n    long smalest_even_index_count_max4\
    \ = 0;\n    long smalest_even_index_count_min4 = 0;\n    long smalest_even_index_count_max5\
    \ = 0;\n    long smalest_even_index_count_min5 = 0;\n    long smalest_even_index_count_max6\
    \ = 0;\n    long smalest_even_index_count_min6 = 0;\n    long smalest_even_index_count_max7\
    \ = 0;\n    long smalest_even_index_count_min7 = 0;\n    long smalest_even_index_count_max8\
    \ = 0;\n    long smalest_even_index_count_min8 = 0;\n    long smalest_even_index_count_max9\
    \ = 0;\n    long smalest_even_index_count_min9 = 0;\n    long smalest_even_index_count_max10\
    \ = 0;\n    long smalest_even_index_count_min10 = 0;\n    long smalest_even_index_count_max11\
    \ = 0;\n    long smalest_even_index_count_min11 = 0;\n    long smalest_even_index_count_max12\
    \ = 0;\n    long smalest_even_index_count_min12 = 0;\n    long smalest_even_index_count_max13\
    \ = 0;\n    long smalest_even_index_count_min13 = 0;\n    long smalest_even_index_count_max14\
    \ = 0;\n    long smalest_even_index_count_min14 = 0;\n    long smalest_even_index_count_max15\
    \ = 0;\n    long smalest_even_index_count_min15 = 0;\n    long smalest_even_index_count_max16\
    \ = 0;\n    long smalest_even_index_count_min16 = 0;\n    long smalest_even_index_count_max17\
    \ = 0;\n    long smalest_even_index_count_min17 = 0;\n    long smalest_even_index_count_max18\
    \ = 0;\n    long smalest_even_index_count_min18 = 0;\n    long smalest_even_index_count_max19\
    \ = 0;\n    long smalest_even_index_count_min19 = 0;\n    long smalest_even_index_count_max20\
    \ = 0;\n    long smalest_even", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    if (smalest_value % 2 == 0) {\n        std::vector<long> res;\n\
    \        res.push_back(smalest_value);\n        res.push_back(smalest_index);\n\
    \        return res;\n    } else {\n        return {};\n    }", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n    long smalest_index_value3\
    \ = 0;\n    long smalest_index_value4 = 0;\n    long smalest_index_value5 = 0;\n\
    \    long smalest_index_value6 = 0;\n    long smalest_index_value7 = 0;\n    long\
    \ smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n    long smalest_index_value10\
    \ = 0;\n    long smalest_index_value11 = 0;\n    long smalest_index_value12 =\
    \ 0;\n    long smalest_index_value13 = 0;\n    long smalest_index_value14 = 0;\n\
    \    long smalest_index_value15 = 0;\n    long smalest_index_value16 = 0;\n  \
    \  long smalest_index_value17 = 0;\n    long smalest_index_value18 = 0;\n    long\
    \ smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n    long smalest_index_value21\
    \ = 0;\n    long smalest_index_value22 = 0;\n    long smalest_index_value23 =\
    \ 0;\n    long smalest_index_value24 = 0;\n    long smalest_index_value25 = 0;\n\
    \    long smalest_index_value26 = 0;\n    long smalest_index_value27 = 0;\n  \
    \  long smalest_index_value28 = 0;\n    long smalest_index_value29 = 0;\n    long\
    \ smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n    long smalest_index_value32\
    \ = 0;\n    long smalest_index_value33 = 0;\n    long smalest_index_value34 =\
    \ 0;\n    long smalest_index_value35 = 0;\n    long smalest_index_value36 = 0;\n\
    \    long smalest_index_value37 = 0;\n    long smalest_index_value38 = 0;\n  \
    \  long smalest_index_value39 = 0;\n    long smalest_index_value40 = 0;\n    long\
    \ smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n    long smalest_index_value43\
    \ = 0;\n    long smalest_index_value44 = 0;\n    long smalest_index_value45 =\
    \ 0;\n    long smalest_index_value46 = 0;\n    long smalest_index_value47 = 0;\n\
    \    long smalest_index_value48 = 0;\n    long smalest_index_value49 = 0;\n  \
    \  long smalest_index_", "    // Your code here\n    long smalest_value=0;\n \
    \   long smalest_index=0;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n\
    \            smalest_value=arr[i];\n            smalest_index=i;\n        }\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_index_value = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n         \
    \       smalest_value = arr[i];\n                smalest_index = i;\n        \
    \        smalest_index_value = arr[i];\n            } else if (smalest_index_value\
    \ > arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_index_value = arr[i];\n            }\n       \
    \ }\n    }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (auto &node : arr) {\n        if (node % 2 == 0) {\n            if (node\
    \ < smalest_value) {\n                smalest_value = node;\n                smalest_index\
    \ = arr.size() - 1;\n            }\n        }\n    }\n    if (arr.size() == 0)\
    \ {\n        return {};\n    }\n    std::vector<long> result;\n    for (auto &node\
    \ : arr) {\n        if (node % 2 == 0) {\n            if (node == smalest_value)\
    \ {\n                result.push_back(smalest_value);\n                result.push_back(smalest_index);\n\
    \            }\n        }\n    }\n    return result;", "    // write your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    long smallest_even_value = arr[0];\n    long smallest_even_index\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            if (arr[i] < smallest_even_value) {\n               \
    \ smallest_even_value = arr[i];\n                smallest_even_index = i;\n  \
    \          }\n        }\n    }\n    std::vector<long> result;\n    if (smallest_even_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smallest_even_value);\n\
    \    result.push_back(smallest_even_index);\n    return result;", "    // write\
    \ your code here\n    long smallest_value = 0;\n    long smallest_index = 0;\n\
    \    long smallest_even_value = 0;\n    long smallest_even_index = 0;\n    long\
    \ smallest_even_index2 = 0;\n    long smallest_even_index3 = 0;\n    long smallest_even_index4\
    \ = 0;\n    long smallest_even_index5 = 0;\n    long smallest_even_index6 = 0;\n\
    \    long smallest_even_index7 = 0;\n    long smallest_even_index8 = 0;\n    long\
    \ smallest_even_index9 = 0;\n    long smallest_even_index10 = 0;\n    long smallest_even_index11\
    \ = 0;\n    long smallest_even_index12 = 0;\n    long smallest_even_index13 =\
    \ 0;\n    long smallest_even_index14 = 0;\n    long smallest_even_index15 = 0;\n\
    \    long smallest_even_index16 = 0;\n    long smallest_even_index17 = 0;\n  \
    \  long smallest_even_index18 = 0;\n    long smallest_even_index19 = 0;\n    long\
    \ smallest_even_index20 = 0;\n    long smallest_even_index21 = 0;\n    long smallest_even_index22\
    \ = 0;\n    long smallest_even_index23 = 0;\n    long smallest_even_index24 =\
    \ 0;\n    long smallest_even_index25 = 0;\n    long smallest_even_index26 = 0;\n\
    \    long smallest_even_index27 = 0;\n    long smallest_even_index28 = 0;\n  \
    \  long smallest_even_index29 = 0;\n    long smallest_even_index30 = 0;\n    long\
    \ smallest_even_index31 = 0;\n    long smallest_even_index32 = 0;\n    long smallest_even_index33\
    \ = 0;\n    long smallest_even_index34 = 0;\n    long smallest_even_index35 =\
    \ 0;\n    long smallest_even_index36 = 0;\n    long smallest_even_index37 = 0;\n\
    \    long smallest_even_index38 = 0;\n    long smallest_even_index39 = 0;\n  \
    \  long smallest_even_index40 = 0;\n    long smallest_even_index41 = 0;\n    long\
    \ smallest_even_index42 = 0;\n    long smallest_even_index43 = 0;\n    long smallest_even_index44\
    \ = 0;\n    long smallest_even_index45 = 0;\n    long smallest_even_index46 =\
    \ 0;\n    long smallest_even_index47 = 0;\n    long smallest_even_index48 = 0;\n\
    \    long smallest_even_index49 = 0;\n    long smallest_even_index50 = 0;\n  \
    \  long smallest_even_index51 = 0;\n    long smallest_even_index52 = 0;\n    long\
    \ smallest_even_index53 = 0;\n    long smallest_even_index54 = 0;\n    long smallest_",
  "    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n     \
    \   return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    for\
    \ (auto &node : arr) {\n        if (node % 2 == 0) {\n            smalest_even_value\
    \ = node;\n            smalest_index = arr.size() - 1;\n        }\n        if\
    \ (node < smalest_value) {\n            smalest_value = node;\n            smalest_index\
    \ = arr.size() - 1;\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count =\
    \ 0;\n    long smalest_even_index_count_max = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_max2 = 0;\n    long smalest_even_index_count_min2\
    \ = 0;\n    long smalest_even_index_count_max3 = 0;\n    long smalest_even_index_count_min3\
    \ = 0;\n    long smalest_even_index_count_max4 = 0;\n    long smalest_even_index_count_min4\
    \ = 0;\n    long smalest_even_index_count_max5 = 0;\n    long smalest_even_index_count_min5\
    \ = 0;\n    long smalest_even_index_count_max6 = 0;\n    long smalest_even_index_count_min6\
    \ = 0;\n    long smalest_even_index_count_max7 = 0;\n    long smalest_even_index_count_min7\
    \ = 0;\n    long smalest_even_index_count_max8 = 0;\n    long smalest_even_index_count_min8\
    \ = 0;\n    long smalest_even_index_count_max9 = 0;\n    long smalest_even_index_count_min9\
    \ = 0;\n    long smalest_even_index_count_max10 = 0;\n    long smalest_even_index_count_min10\
    \ = 0;\n    long smalest_even_index_count_max11 = 0;\n    long smalest_even_index_count_min11\
    \ = 0;\n    long smalest_even_index_count_max12 = 0;\n    long smalest_even_index_count_min12\
    \ = 0;\n    long smalest_even_index_count_max13 = 0;\n    long smalest_even_index_count_min13\
    \ = 0;\n    long smalest_even_index_count_max14 = 0;\n    long smalest_even_index_count_min14\
    \ = 0;\n    long smalest_even_index_count_max15 = 0;\n    long smalest_even_index_count_min15\
    \ = 0;\n    long smalest_even_index_count_max16 = 0;\n    long smalest_even_index_count_min16\
    \ = 0;\n    long smalest_even_index_count_max17 = 0;\n    long smalest_even_index_count_min17\
    \ = 0;\n    long smalest_even_index_count_max18 = 0;\n    long smalest_even_index_count_min18\
    \ = 0;\n    long smalest_even_index_count_max19 = 0;\n    long smalest_even_index_count_min19\
    \ = 0;\n    long smalest_even_index_count_max20 = 0;\n    long smalest_even",
  "    long smalest_value = arr[0];\n    int smalest_index = 0;\n    for (int i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    return std::vector<long>({smalest_value,\
    \ smalest_index});", "    // write your code here\n    long smalest_value=arr[0];\n\
    \    long smalest_index=0;\n    long smallest_value=arr[0];\n    long smallest_index=0;\n\
    \    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<smallest_value){\n\
    \                smallest_value=arr[i];\n                smallest_index=i;\n \
    \           }\n        }\n        else{\n            if(arr[i]<smalest_value){\n\
    \                smalest_value=arr[i];\n                smalest_index=i;\n   \
    \         }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smallest_even_value = arr[0];\n\
    \    for (auto &i : arr) {\n        if (i % 2 == 0) {\n            if (smallest_even_value\
    \ < i) {\n                smallest_even_value = i;\n                smalest_value\
    \ = i;\n                smalest_index = i;\n            }\n        }\n    }\n\
    \    if (smallest_even_value == arr[0]) {\n        return std::vector<long>({smalest_value,\
    \ smalest_index});\n    }\n    return std::vector<long>();", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_odd_index = 0;\n    long smalest_odd_value\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_odd_even_index = 0;\n\
    \    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n \
    \   long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n  \
    \  long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n   \
    \ long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n    long\
    \ smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value\
    \ = 0;\n    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index =\
    \ 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n\
    \    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n \
    \   long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n  \
    \  long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n   \
    \ long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n    long\
    \ smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value\
    \ = 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index =\
    \ 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n\
    \    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n \
    \   long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n  \
    \  long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n   \
    \ long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long\
    \ smalest_", "    // write your code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == 0) {\n                smalest_value =\
    \ arr[i];\n                smalest_index = i;\n                smalest_even_value\
    \ = arr[i] % 2;\n                smalest_even_index = i;\n            } else if\
    \ (smalest_value == arr[i] % 2) {\n                smalest_even_index = i;\n \
    \           }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_even_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smallest_index = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = arr[0];\n    int smallest_index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smallest_value) {\n            smallest_value =\
    \ arr[i];\n            smallest_index = i;\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = INT_MIN;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == INT_MIN) {\n \
    \       return std::vector<long>();\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = INT_MIN;\n    long smalest_index = 0;\n\
    \    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == INT_MIN) {\n                smalest_value = arr[i];\n    \
    \            smalest_index = i;\n                smalest_even_value = arr[i] %\
    \ 2;\n                smalest_even_index = i;\n            } else if (arr[i] <\
    \ smalest_value) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n                smalest_even_value = arr[i] % 2;\n                smalest_even_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == INT_MIN) {\n\
    \        return std::vector<long>();\n    }\n    std::vector<long> result;\n \
    \   result.push_back(smalest_value);\n    result.push_back(smalest_index);\n \
    \   return result;", "    // write your code here\n    std::vector<long> result;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long index =\
    \ 0;\n    for (auto &i : arr) {\n        if (i % 2 == 0) {\n            if (smallest_value\
    \ == 0) {\n                smallest_value = i;\n                smallest_index\
    \ = index;\n            }\n            else {\n                if (i < smallest_value)\
    \ {\n                    smallest_value = i;\n                    smallest_index\
    \ = index;\n                }\n            }\n        }\n        index++;\n  \
    \  }\n    if (smallest_value == 0) {\n        return result;\n    }\n    else\
    \ {\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \        return result;\n    }", "    // write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_min = 0;\n    long smalest_even_index_count_sum\
    \ = 0;\n    long smalest_even_index_count_sum_max = 0;\n    long smalest_even_index_count_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum = 0;\n    long smalest_even_index_count_sum_sum_sum_max\
    \ = 0;\n    long smalest_even_index_count_sum_sum_min = 0;\n    long smalest_even_index_count_sum_sum_sum\
    \ = 0;\n    long smalest_even_index_count_sum_sum_sum_max = 0;\n    long smalest_even_index_count_sum_sum_min\
    \ = 0;\n    long smalest_even_index_count_sum_", "    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_odd_value = 0;\n    long smalest_odd_index = 0;\n   \
    \ long smalest_odd_value2 = 0;\n    long smalest_odd_index2 = 0;\n    long smalest_odd_value3\
    \ = 0;\n    long smalest_odd_index3 = 0;\n    long smalest_odd_value4 = 0;\n \
    \   long smalest_odd_index4 = 0;\n    long smalest_odd_value5 = 0;\n    long smalest_odd_index5\
    \ = 0;\n    long smalest_odd_value6 = 0;\n    long smalest_odd_index6 = 0;\n \
    \   long smalest_odd_value7 = 0;\n    long smalest_odd_index7 = 0;\n    long smalest_odd_value8\
    \ = 0;\n    long smalest_odd_index8 = 0;\n    long smalest_odd_value9 = 0;\n \
    \   long smalest_odd_index9 = 0;\n    long smalest_odd_value10 = 0;\n    long\
    \ smalest_odd_index10 = 0;\n    long smalest_odd_value11 = 0;\n    long smalest_odd_index11\
    \ = 0;\n    long smalest_odd_value12 = 0;\n    long smalest_odd_index12 = 0;\n\
    \    long smalest_odd_value13 = 0;\n    long smalest_odd_index13 = 0;\n    long\
    \ smalest_odd_value14 = 0;\n    long smalest_odd_index14 = 0;\n    long smalest_odd_value15\
    \ = 0;\n    long smalest_odd_index15 = 0;\n    long smalest_odd_value16 = 0;\n\
    \    long smalest_odd_index16 = 0;\n    long smalest_odd_value17 = 0;\n    long\
    \ smalest_odd_index17 = 0;\n    long smalest_odd_value18 = 0;\n    long smalest_odd_index18\
    \ = 0;\n    long smalest_odd_value19 = 0;\n    long smalest_odd_index19 = 0;\n\
    \    long smalest_odd_value20 = 0;\n    long smalest_odd_index20 = 0;\n    long\
    \ smalest_odd_value21 = 0;\n    long smalest_odd_index21 = 0;\n    long smalest_odd_value22\
    \ = 0;\n    long smalest_odd_index22 = 0;\n    long smale", "    // Your code\
    \ here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_index2\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n            if\
    \ (smalest_value == arr[i] && smalest_index != i) {\n                smalest_index2\
    \ = i;\n            }\n        }\n    }\n    if (smalest_index2 == smalest_index)\
    \ {\n        smalest_index2 = smalest_index2;\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    result.push_back(smalest_index2);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index2 = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value == 0) {\n                smalest_value = arr[i];\n          \
    \      smalest_index = i;\n                smalest_index2 = i;\n            }\
    \ else if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n                smalest_index2 = i;\n   \
    \         }\n        }\n    }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> ans;\n    ans.push_back(smalest_value);\n    ans.push_back(smalest_index);\n\
    \    ans.push_back(smalest_index2);\n    return ans;", "    // write your code\
    \ here\n    long smallest_value = 0;\n    long smallest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smallest_value == 0) {\n                smallest_value = arr[i];\n        \
    \        smallest_index = i;\n            } else if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if\
    \ (smallest_value != 0) {\n        result.push_back(smallest_value);\n       \
    \ result.push_back(smallest_index);\n    }\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long even_value = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            even_value\
    \ = arr[i];\n            smalest_value = arr[i];\n            smalest_index =\
    \ i;\n        }\n    }\n    if (smalest_value == 0) {\n        return {};\n  \
    \  }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n  \
    \  result.push_back(smalest_index);\n    return result;", "    // write your code\
    \ here\n    long smallest_value = 0;\n    long smallest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smallest_value < arr[i]) {\n                smallest_value = arr[i];\n    \
    \            smallest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_value != 0) {\n        result.push_back(smallest_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    std::vector<long> result;\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] < smallest_value) {\n            smallest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = INT_MIN;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == INT_MIN) {\n \
    \       return std::vector<long>();\n    }\n    std::vector<long> result;\n  \
    \  result.push_back(smalest_value);\n    result.push_back(smalest_index);\n  \
    \  return result;", "    // write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_value_found = 0;\n    long smalest_even_index_found\
    \ = 0;\n    long smalest_index_found = 0;\n    long smalest_even_value_not_found\
    \ = 0;\n    long smalest_even_index_not_found = 0;\n    long smalest_index_not_found\
    \ = 0;\n    long smalest_even_value_not_found_index = 0;\n    long smalest_even_index_not_found_index\
    \ = 0;\n    long smalest_index_not_found_index = 0;\n    long smalest_even_value_not_found_index_index\
    \ = 0;\n    long smalest_even_index_not_found_index_index = 0;\n    long smalest_index_not_found_index_index\
    \ = 0;\n    long smalest_even_value_not_found_index_index_index = 0;\n    long\
    \ smalest_even_index_not_found_index_index_index = 0;\n    long smalest_index_not_found_index_index_index\
    \ = 0;\n    long smalest_even_value_not_found_index_index_index_index = 0;\n \
    \   long smalest_even_index_not_found_index_index_index_index = 0;\n    long smalest_index_not_found_index_index_index_index\
    \ = 0;\n    long smalest_even_value_not_found_index_index_index_index_index =\
    \ 0;\n    long smalest_even_index_not_found_index_index_index_index_index = 0;\n\
    \    long smalest_index_not_found_index_index_index_index_index = 0;\n    long\
    \ smalest_even_value_not_found_index_index_index_index_index_index = 0;\n    long\
    \ smalest_even_index_not_found_index_index_index_index_index_index = 0;\n    long\
    \ smalest_index_not_found_index_index_index_index_index_index = 0;\n    long smalest_even_value_not_found_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_not_found_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_index_not_found_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_value_not_found_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_not_found_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_index_not_found_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_value_not_found_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n    long smalest_even_index_not_found_index_index_index_index_index_index_index_index_index_index_index\
    \ = 0;\n", "    // write your code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n               \
    \ smalest_value = arr[i];\n                smalest_index = i;\n            } else\
    \ if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value=0;\n    long smalest_index = 0;\n\
    \    long smallest_index = 0;\n    long smallest_value = 0;\n    long index =\
    \ 0;\n    long value = 0;\n    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n\
    \            smalest_value=arr[i];\n            smalest_index=i;\n        }\n\
    \        if(arr[i]<smallest_value){\n            smallest_value=arr[i];\n    \
    \        smallest_index=i;\n        }\n        if(arr[i]<smallest_value){\n  \
    \          smallest_value=arr[i];\n            smallest_index=i;\n        }\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            smalest_even_value = arr[i];\n            smalest_even_index\
    \ = i;\n            smalest_even_index_count++;\n        }\n        if (smalest_even_index_count\
    \ == 1) {\n            smalest_value = smalest_even_value;\n            smalest_index\
    \ = smalest_even_index;\n        }\n    }\n    if (smalest_even_index_count ==\
    \ 0) {\n        return {};\n    }\n    std::vector<long> result;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] == smalest_value) {\n    \
    \        result.push_back(arr[i]);\n        }\n    }\n    return result;", " \
    \   long smalest_value = arr[0];\n    int smalest_index = 0;\n    for (int i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n         \
    \   smalest_value = arr[i];\n            smalest_index = i;\n        }\n    }\n\
    \    std::vector<long> result;\n    if (smalest_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    std::vector<long> result;\n    if (smalest_value\
    \ == 0) {\n        return result;\n    }\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    // Your code here\n    long smalest_value=0;\n    long\
    \ smalest_index=0;\n    long smalest_even_index=0;\n    long smalest_even_count=0;\n\
    \    long smalest_even_min=0;\n    long smalest_even_max=0;\n    long smalest_even_sum=0;\n\
    \    long smalest_even_sum2=0;\n    long smalest_even_sum3=0;\n    long smalest_even_sum4=0;\n\
    \    long smalest_even_sum5=0;\n    long smalest_even_sum6=0;\n    long smalest_even_sum7=0;\n\
    \    long smalest_even_sum8=0;\n    long smalest_even_sum9=0;\n    long smalest_even_sum10=0;\n\
    \    long smalest_even_sum11=0;\n    long smalest_even_sum12=0;\n    long smalest_even_sum13=0;\n\
    \    long smalest_even_sum14=0;\n    long smalest_even_sum15=0;\n    long smalest_even_sum16=0;\n\
    \    long smalest_even_sum17=0;\n    long smalest_even_sum18=0;\n    long smalest_even_sum19=0;\n\
    \    long smalest_even_sum20=0;\n    long smalest_even_sum21=0;\n    long smalest_even_sum22=0;\n\
    \    long smalest_even_sum23=0;\n    long smalest_even_sum24=0;\n    long smalest_even_sum25=0;\n\
    \    long smalest_even_sum26=0;\n    long smalest_even_sum27=0;\n    long smalest_even_sum28=0;\n\
    \    long smalest_even_sum29=0;\n    long smalest_even_sum30=0;\n    long smalest_even_sum31=0;\n\
    \    long smalest_even_sum32=0;\n    long smalest_even_sum33=0;\n    long smalest_even_sum34=0;\n\
    \    long smalest_even_sum35=0;\n    long smalest_even_sum36=0;\n    long smalest_even_sum37=0;\n\
    \    long smalest_even_sum38=0;\n    long smalest_even_sum39=0;\n    long smalest_even_sum40=0;\n\
    \    long smalest_even_sum41=0;\n    ", "    long smalest_value = INT_MIN;\n \
    \   long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n    \
    \            smalest_value = arr[i];\n                smalest_index = i;\n   \
    \         }\n        }\n    }\n    if (smalest_value == INT_MIN) {\n        return\
    \ {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    std::vector<long> result;\n    long smallest_value = arr[0];\n\
    \    long smallest_index = 0;\n    long smallest_even_value = 0;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            smallest_even_value\
    \ = arr[i];\n            smallest_index = i;\n        }\n        if(arr[i] < smallest_value)\
    \ {\n            smallest_value = arr[i];\n            smallest_index = i;\n \
    \       }\n    }\n    result.push_back(smallest_even_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    std::vector<long>\
    \ result;\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n \
    \   for(long i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<smallest_value){\n\
    \                smallest_value = arr[i];\n                smallest_index = i;\n\
    \            }\n        }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // write your code here\n    long smalest_value=0;\n\
    \    long smalest_index=0;\n    long smalest_even_value=0;\n    long smalest_even_node=0;\n\
    \    long smalest_even_node_index=0;\n    long smalest_even_node_even_value=0;\n\
    \    long smalest_even_node_even_index=0;\n    long smalest_even_node_even_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index=0;\n    long smalest_even_node_even_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index=0;\n    long smalest_even_node_even_index_count_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count=0;\n\
    \    long smalest_even_node_even_index_count_index_count_index_count_index_count_index_count_index_count_",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   long smalest_even_value = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array = 0;\n    long smalest_even_index_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array = 0;\n\
    \    long smalest_even_index_in_array_in_array_in_array_in_array_in_array = 0;\n\
    \    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array\
    \ = 0;\n    long smalest_even_index_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_array_in_",
  "    // Your code here\n    long smalest_value=arr[0];\n    int smalest_index=0;\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(smalest_value<arr[i]){\n\
    \                smalest_value=arr[i];\n                smalest_index=i;\n   \
    \         }\n        }\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Write your code here\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    long index = 0;\n    long value = 0;\n\
    \    long even_value = 0;\n    long even_index = 0;\n    for (auto i : arr) {\n\
    \        if (i % 2 == 0) {\n            even_value = i;\n            even_index\
    \ = i;\n        }\n        else {\n            if (smallest_value == 0) {\n  \
    \              smallest_value = i;\n                smallest_index = i;\n    \
    \        }\n            else {\n                if (i < smallest_value) {\n  \
    \                  smallest_value = i;\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n    }\n    std::vector<long> result;\n\
    \    if (smallest_value != 0) {\n        result.push_back(smallest_value);\n \
    \       result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   long smalest_even_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            smalest_value = arr[i];\n       \
    \     smalest_index = i;\n            smalest_even_index = i;\n        }\n   \
    \ }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n    }\n\
    \    std::vector<long> result;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] == smalest_value) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    if (result.size() == 1) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    if (result.size() == 2)\
    \ {\n        if (result[1] % 2 == 0) {\n            result.push_back(smalest_value);\n\
    \            result.push_back(smalest_index);\n        }\n    }\n    if (result.size()\
    \ == 3) {\n        if (result[1] % 2 == 0 && result[2] % 2 == 0) {\n         \
    \   result.push_back(smalest_value);\n            result.push_back(smalest_index);\n\
    \        }\n    }\n    if (result.size() == 4) {\n        if (result[1] % 2 ==\
    \ 0 && result[2] % 2 == 0 && result[3] % 2 == 0) {\n            result.push_back(smalest_value);\n\
    \            result.push_back(smalest_index);\n        }\n    }\n    if (result.size()\
    \ == 5) {\n        if (result[1] % 2 == 0 && result[2] % 2 == 0 && result[3] %\
    \ 2 == 0 && result[4] % 2 == 0) {\n            result.push_back(smalest_value);\n\
    \            result.push_back(smalest_index);\n        }\n    }\n    if (result.size()\
    \ == 6) {\n        if (result[1] % 2 == 0 && result[2] % 2 == 0 && result[3] %\
    \ 2 == 0 && result[4] % 2 == 0 && result[5] % 2 == 0) {\n            result.push_back(smalest_value);\n\
    \            result.push_back(smalest_index);\n        }\n    }\n    if (result.size()\
    \ == 7) {\n        if (result[1] % 2 == 0 && result[2] % 2 == 0 && result[3] %\
    \ 2 == 0 && result[4] % 2 == 0 && result[5] % 2 == 0 && result[6] % 2 == 0) {\n\
    \            result.push_back(smalest_value);\n            result.push_back(smalest_index);\n\
    \        }\n    }\n    if (result.size() == 8) {\n        if (result[1] % 2 ==\
    \ 0 && result[2] % 2 == 0 && result[3] % 2 == 0 && result[4] % 2 == 0 && result[5]\
    \ % 2 == 0 && result[6] % 2 == 0 && result[7] % 2 == 0) {\n            result.push_back(smalest_value);\n\
    \            result.push_back(smalest_index);\n        }\n    }\n    if (result.size()\
    \ == 9) {\n        if (result[1] % 2 == 0 && result[2] % 2 == 0 && result[3] %\
    \ 2 == 0 && result[4] % 2 == 0 && result[5] % 2 == 0 && result[6] ", "    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   long smallest_even_value = 0;\n    long smallest_even_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smallest_even_value == 0) {\n                smallest_even_value =\
    \ arr[i];\n                smallest_even_index = i;\n            } else if (arr[i]\
    \ < smallest_even_value) {\n                smallest_even_value = arr[i];\n  \
    \              smallest_even_index = i;\n            }\n        }\n    }\n   \
    \ std::vector<long> result;\n    if (smallest_even_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smallest_even_value);\n    result.push_back(arr[smallest_even_index]);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value == 0) {\n        return\
    \ result;\n    }\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smallest_even_value = 0;\n    long smallest_even_index\
    \ = 0;\n    long smallest_index = 0;\n    long index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            } else if (smallest_even_value < arr[i]) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_even_index = i;\n\
    \            }\n        } else {\n            if (smallest_index == 0) {\n   \
    \             smallest_index = arr[i];\n                index = i;\n         \
    \   } else if (smallest_index < arr[i]) {\n                smallest_index = arr[i];\n\
    \                index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smallest_even_value == 0) {\n        result.push_back(smallest_even_index);\n\
    \        result.push_back(smallest_index);\n    } else {\n        result.push_back(smallest_even_index);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = 0;\n    long smalest_index =\
    \ 0;\n    long smalest_index_value = 0;\n    long smalest_index_value2 = 0;\n\
    \    long smalest_index_value3 = 0;\n    long smalest_index_value4 = 0;\n    long\
    \ smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n    long smalest_index_value7\
    \ = 0;\n    long smalest_index_value8 = 0;\n    long smalest_index_value9 = 0;\n\
    \    long smalest_index_value10 = 0;\n    long smalest_index_value11 = 0;\n  \
    \  long smalest_index_value12 = 0;\n    long smalest_index_value13 = 0;\n    long\
    \ smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n    long smalest_index_value16\
    \ = 0;\n    long smalest_index_value17 = 0;\n    long smalest_index_value18 =\
    \ 0;\n    long smalest_index_value19 = 0;\n    long smalest_index_value20 = 0;\n\
    \    long smalest_index_value21 = 0;\n    long smalest_index_value22 = 0;\n  \
    \  long smalest_index_value23 = 0;\n    long smalest_index_value24 = 0;\n    long\
    \ smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n    long smalest_index_value27\
    \ = 0;\n    long smalest_index_value28 = 0;\n    long smalest_index_value29 =\
    \ 0;\n    long smalest_index_value30 = 0;\n    long smalest_index_value31 = 0;\n\
    \    long smalest_index_value32 = 0;\n    long smalest_index_value33 = 0;\n  \
    \  long smalest_index_value34 = 0;\n    long smalest_index_value35 = 0;\n    long\
    \ smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n    long smalest_index_value38\
    \ = 0;\n    long smalest_index_value39 = 0;\n    long smalest_index_value40 =\
    \ 0;\n    long smalest_index_value41 = 0;\n    long smalest_index_value42 = 0;\n\
    \    long smalest_index_value43 = 0;\n    long smalest_index_value44 = 0;\n  \
    \  long smalest_index_value45 = 0;\n    long smalest_index_value46 = 0;\n    long\
    \ smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n    long smalest_index_value49\
    \ = 0;\n    long smalest_index_", "    // write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index2 = 0;\n    long smalest_index3\
    \ = 0;\n    long smalest_index4 = 0;\n    long smalest_index5 = 0;\n    long smalest_index6\
    \ = 0;\n    long smalest_index7 = 0;\n    long smalest_index8 = 0;\n    long smalest_index9\
    \ = 0;\n    long smalest_index10 = 0;\n    long smalest_index11 = 0;\n    long\
    \ smalest_index12 = 0;\n    long smalest_index13 = 0;\n    long smalest_index14\
    \ = 0;\n    long smalest_index15 = 0;\n    long smalest_index16 = 0;\n    long\
    \ smalest_index17 = 0;\n    long smalest_index18 = 0;\n    long smalest_index19\
    \ = 0;\n    long smalest_index20 = 0;\n    long smalest_index21 = 0;\n    long\
    \ smalest_index22 = 0;\n    long smalest_index23 = 0;\n    long smalest_index24\
    \ = 0;\n    long smalest_index25 = 0;\n    long smalest_index26 = 0;\n    long\
    \ smalest_index27 = 0;\n    long smalest_index28 = 0;\n    long smalest_index29\
    \ = 0;\n    long smalest_index30 = 0;\n    long smalest_index31 = 0;\n    long\
    \ smalest_index32 = 0;\n    long smalest_index33 = 0;\n    long smalest_index34\
    \ = 0;\n    long smalest_index35 = 0;\n    long smalest_index36 = 0;\n    long\
    \ smalest_index37 = 0;\n    long smalest_index38 = 0;\n    long smalest_index39\
    \ = 0;\n    long smalest_index40 = 0;\n    long smalest_index41 = 0;\n    long\
    \ smalest_index42 = 0;\n    long smalest_index43 = 0;\n    long smalest_index44\
    \ = 0;\n    long smalest_index45 = 0;\n    long smalest_index46 = 0;\n    long\
    \ smalest_index47 = 0;\n    long smalest_index48 = 0;\n    long smalest_index49\
    \ = 0;\n    long smalest_index50 = 0;\n    long smalest_index51 = 0;\n    long\
    \ smalest_index52 = 0;\n    long smalest_index53 = 0;\n    long smalest_index54\
    \ = 0;\n    long smalest_index55 = 0;\n    long smalest_index56 = 0;\n", "   \
    \ long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    return std::vector<long>({smalest_value,\
    \ smalest_index});", "    // Your code here\n    long smalest_value = 0;\n   \
    \ long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_even_value == 0) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_even_value == 0) {\n    \
    \    result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_even_value);\n        result.push_back(smalest_even_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_", "    long smalest_value\
    \ = arr[0];\n    int smalest_index = 0;\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value < arr[i]) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            }\n        }\n    }\n    if (smalest_value == 0) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // code here\n\
    \    long smalest_value = 0;\n    long smalest_index = 0;\n    long smalest_even_value\
    \ = 0;\n    long smalest_even_index = 0;\n    long smalest_even_index_count =\
    \ 0;\n    long smalest_even_index_count_max = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_temp = 0;\n    long smalest_even_index_count_temp_max\
    \ = 0;\n    long smalest_even_index_count_temp_min = 0;\n    long smalest_even_index_count_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_max = 0;\n    long smalest_even_index_count_temp_temp_min\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even_index_count_temp_temp_temp = 0;\n    long smalest_even_index_count_temp_temp_temp\
    \ = 0;\n    long smalest_even", "    // write your code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index2 = 0;\n    long smalest_index3\
    \ = 0;\n    long smalest_index4 = 0;\n    long smalest_index5 = 0;\n    long smalest_index6\
    \ = 0;\n    long smalest_index7 = 0;\n    long smalest_index8 = 0;\n    long smalest_index9\
    \ = 0;\n    long smalest_index10 = 0;\n    long smalest_index11 = 0;\n    long\
    \ smalest_index12 = 0;\n    long smalest_index13 = 0;\n    long smalest_index14\
    \ = 0;\n    long smalest_index15 = 0;\n    long smalest_index16 = 0;\n    long\
    \ smalest_index17 = 0;\n    long smalest_index18 = 0;\n    long smalest_index19\
    \ = 0;\n    long smalest_index20 = 0;\n    long smalest_index21 = 0;\n    long\
    \ smalest_index22 = 0;\n    long smalest_index23 = 0;\n    long smalest_index24\
    \ = 0;\n    long smalest_index25 = 0;\n    long smalest_index26 = 0;\n    long\
    \ smalest_index27 = 0;\n    long smalest_index28 = 0;\n    long smalest_index29\
    \ = 0;\n    long smalest_index30 = 0;\n    long smalest_index31 = 0;\n    long\
    \ smalest_index32 = 0;\n    long smalest_index33 = 0;\n    long smalest_index34\
    \ = 0;\n    long smalest_index35 = 0;\n    long smalest_index36 = 0;\n    long\
    \ smalest_index37 = 0;\n    long smalest_index38 = 0;\n    long smalest_index39\
    \ = 0;\n    long smalest_index40 = 0;\n    long smalest_index41 = 0;\n    long\
    \ smalest_index42 = 0;\n    long smalest_index43 = 0;\n    long smalest_index44\
    \ = 0;\n    long smalest_index45 = 0;\n    long smalest_index46 = 0;\n    long\
    \ smalest_index47 = 0;\n    long smalest_index48 = 0;\n    long smalest_index49\
    \ = 0;\n    long smalest_index50 = 0;\n    long smalest_index51 = 0;\n    long\
    \ smalest_index52 = 0;\n    long smalest_index53 = 0;\n    long smalest_index54\
    \ = 0;\n    long smalest_index55 = 0;\n    long smalest_index56 = 0;\n", "   \
    \ // write your code here\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = 0;\n    long smalest_index =\
    \ 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n   \
    \ long smalest_even_value_pos = 0;\n    long smalest_even_index_pos = 0;\n   \
    \ long smalest_even_value_neg = 0;\n    long smalest_even_index_neg = 0;\n   \
    \ long smalest_even_value_zero = 0;\n    long smalest_even_index_zero = 0;\n \
    \   long smalest_even_value_one = 0;\n    long smalest_even_index_one = 0;\n \
    \   long smalest_even_value_two = 0;\n    long smalest_even_index_two = 0;\n \
    \   long smalest_even_value_three = 0;\n    long smalest_even_index_three = 0;\n\
    \    long smalest_even_value_four = 0;\n    long smalest_even_index_four = 0;\n\
    \    long smalest_even_value_five = 0;\n    long smalest_even_index_five = 0;\n\
    \    long smalest_even_value_six = 0;\n    long smalest_even_index_six = 0;\n\
    \    long smalest_even_value_seven = 0;\n    long smalest_even_index_seven = 0;\n\
    \    long smalest_even_value_eight = 0;\n    long smalest_even_index_eight = 0;\n\
    \    long smalest_even_value_ten = 0;\n    long smalest_even_index_ten = 0;\n\
    \    long smalest_even_value_eleven = 0;\n    long smalest_even_index_eleven =\
    \ 0;\n    long smalest_even_value_twelve = 0;\n    long smalest_even_index_twelve\
    \ = 0;\n    long smalest_even_value_thirteen = 0;\n    long smalest_even_index_thirteen\
    \ = 0;\n    long smalest_even_value_fourteen = 0;\n    long smalest_even_index_fourteen\
    \ = 0;\n    long smalest_even_value_fifteen = 0;\n    long smalest_even_index_fifteen\
    \ = 0;\n    long smalest_even_value_sixteen = 0;\n    long smalest_even_index_sixteen\
    \ = 0;\n    long smalest_even_value_seventeen = 0;\n    long smalest_even_index_seventeen\
    \ = 0;\n    long smalest_even_value_eighteen = 0;\n    long smalest_even_index_eighteen\
    \ = 0;\n    long smalest_even_value_nineteen = 0;\n    long smalest_even_index_nineteen\
    \ = 0;\n    long smalest_even_value_twenty = 0;\n    long smalest_even_index_tw",
  "    long smalest_value = arr[0];\n    int smalest_index = 0;\n    for (int i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value) {\n         \
    \   smalest_value = arr[i];\n            smalest_index = i;\n        }\n    }\n\
    \    std::vector<long> result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_even_index = 0;\n    long smalest_even_even_index\
    \ = 0;\n    long smalest_even_odd_index = 0;\n    long smalest_odd_index = 0;\n\
    \    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n \
    \   long smalest_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_index =\
    \ 0;\n    long smalest_odd_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_odd_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_odd_odd_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_even_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_even_index = 0;\n   \
    \ long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_index = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_index = 0;\n\
    \    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even_index =\
    \ 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_even_index\
    \ = 0;\n    long smalest_odd_odd_odd_odd_odd_odd_odd_odd_odd_odd_od", "    long\
    \ smalest_value = 0, smalest_index = 0;\n    long even_value = 0;\n    for (auto\
    \ &node : arr) {\n        if (node % 2 == 0) {\n            even_value = node;\n\
    \            smalest_value = even_value;\n            smalest_index = arr.size()\
    \ - 1;\n        } else {\n            if (smalest_value == even_value) {\n   \
    \             smalest_index = arr.size() - 1;\n            }\n        }\n    }\n\
    \    if (smalest_index == arr.size()) {\n        return {};\n    }\n    return\
    \ {smalest_value, smalest_index};", "    // code here\n    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long\
    \ smalest_index_value2 = 0;\n    long smalest_index_value3 = 0;\n    long smalest_index_value4\
    \ = 0;\n    long smalest_index_value5 = 0;\n    long smalest_index_value6 = 0;\n\
    \    long smalest_index_value7 = 0;\n    long smalest_index_value8 = 0;\n    long\
    \ smalest_index_value9 = 0;\n    long smalest_index_value10 = 0;\n    long smalest_index_value11\
    \ = 0;\n    long smalest_index_value12 = 0;\n    long smalest_index_value13 =\
    \ 0;\n    long smalest_index_value14 = 0;\n    long smalest_index_value15 = 0;\n\
    \    long smalest_index_value16 = 0;\n    long smalest_index_value17 = 0;\n  \
    \  long smalest_index_value18 = 0;\n    long smalest_index_value19 = 0;\n    long\
    \ smalest_index_value20 = 0;\n    long smalest_index_value21 = 0;\n    long smalest_index_value22\
    \ = 0;\n    long smalest_index_value23 = 0;\n    long smalest_index_value24 =\
    \ 0;\n    long smalest_index_value25 = 0;\n    long smalest_index_value26 = 0;\n\
    \    long smalest_index_value27 = 0;\n    long smalest_index_value28 = 0;\n  \
    \  long smalest_index_value29 = 0;\n    long smalest_index_value30 = 0;\n    long\
    \ smalest_index_value31 = 0;\n    long smalest_index_value32 = 0;\n    long smalest_index_value33\
    \ = 0;\n    long smalest_index_value34 = 0;\n    long smalest_index_value35 =\
    \ 0;\n    long smalest_index_value36 = 0;\n    long smalest_index_value37 = 0;\n\
    \    long smalest_index_value38 = 0;\n    long smalest_index_value39 = 0;\n  \
    \  long smalest_index_value40 = 0;\n    long smalest_index_value41 = 0;\n    long\
    \ smalest_index_value42 = 0;\n    long smalest_index_value43 = 0;\n    long smalest_index_value44\
    \ = 0;\n    long smalest_index_value45 = 0;\n    long smalest_index_value46 =\
    \ 0;\n    long smalest_index_value47 = 0;\n    long smalest_index_value48 = 0;\n\
    \    long smalest_index_value49 = 0;\n    long smalest_index_value", "    // Your\
    \ code here\n    std::vector<long> result;\n    long smallest_value = 0;\n   \
    \ long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value) {\n    \
    \            smallest_value = arr[i];\n                smallest_index = i;\n \
    \           }\n        }\n    }\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smalest_even_index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            smalest_value\
    \ = arr[i];\n            smalest_index = i;\n            smalest_even_index =\
    \ i;\n        }\n    }\n    std::vector<long> result;\n    if (smalest_even_index\
    \ != 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_even_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n    }\n    return result;",
  "    // Your code here\n    long smallest_value = 0;\n    long smallest_index =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            if (smallest_value == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            } else if (arr[i]\
    \ < smallest_value) {\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n    }\n    if (smallest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    for (auto i :\
    \ arr) {\n        if (i % 2 == 0) {\n            if (smallest_value == 0) {\n\
    \                smallest_value = i;\n                smallest_index = i;\n  \
    \          } else if (smallest_value < i) {\n                smallest_value =\
    \ i;\n                smallest_index = i;\n            }\n        }\n    }\n \
    \   if (smallest_value == 0) {\n        return result;\n    }\n    for (auto i\
    \ : arr) {\n        if (i == smallest_value) {\n            result.push_back(smallest_value);\n\
    \            result.push_back(smallest_index);\n        }\n    }\n    return result;",
  "    // Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else if (smalest_value < arr[i])\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    // write your\
    \ code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long\
    \ smalest_even_index = 0;\n    long smalest_odd_index = 0;\n    long smalest_odd_value\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_odd_even_index = 0;\n\
    \    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n \
    \   long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n  \
    \  long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n   \
    \ long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n    long\
    \ smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value\
    \ = 0;\n    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index =\
    \ 0;\n    long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n\
    \    long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n \
    \   long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n  \
    \  long smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n   \
    \ long smalest_odd_even_value = 0;\n    long smalest_odd_odd_value = 0;\n    long\
    \ smalest_odd_even_index = 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value\
    \ = 0;\n    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index =\
    \ 0;\n    long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n\
    \    long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n \
    \   long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n  \
    \  long smalest_odd_odd_value = 0;\n    long smalest_odd_even_index = 0;\n   \
    \ long smalest_odd_odd_index = 0;\n    long smalest_odd_even_value = 0;\n    long\
    \ smalest_", "    long smalest_value = 0;\n    long smalest_index = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // Your code here\n    long smalest_value = 0;\n  \
    \  long smalest_index = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index\
    \ = 0;\n    long smalest_even_index_count = 0;\n    long smalest_even_index_count_max\
    \ = 0;\n    long smalest_even_index_count_max_index = 0;\n    long smalest_even_index_count_min\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index\
    \ = 0;\n    long smalest_even_index_count_min_index = 0;\n    long smalest_even_index_count_min_index",
  "    // write your code here\n    long smallest_value = 0;\n    long smallest_index\
    \ = 0;\n    long smallest_even_value = 0;\n    long smallest_even_node = 0;\n\
    \    long smallest_even_node_index = 0;\n    long index = 0;\n    long even_value\
    \ = 0;\n    long even_node = 0;\n    long even_node_index = 0;\n    long even_value_index\
    \ = 0;\n    long even_value_index2 = 0;\n    long even_value_index3 = 0;\n   \
    \ long even_value_index4 = 0;\n    long even_value_index5 = 0;\n    long even_value_index6\
    \ = 0;\n    long even_value_index7 = 0;\n    long even_value_index8 = 0;\n   \
    \ long even_value_index9 = 0;\n    long even_value_index10 = 0;\n    long even_value_index11\
    \ = 0;\n    long even_value_index12 = 0;\n    long even_value_index13 = 0;\n \
    \   long even_value_index14 = 0;\n    long even_value_index15 = 0;\n    long even_value_index16\
    \ = 0;\n    long even_value_index17 = 0;\n    long even_value_index18 = 0;\n \
    \   long even_value_index19 = 0;\n    long even_value_index20 = 0;\n    long even_value_index21\
    \ = 0;\n    long even_value_index22 = 0;\n    long even_value_index23 = 0;\n \
    \   long even_value_index24 = 0;\n    long even_value_index25 = 0;\n    long even_value_index26\
    \ = 0;\n    long even_value_index27 = 0;\n    long even_value_index28 = 0;\n \
    \   long even_value_index29 = 0;\n    long even_value_index30 = 0;\n    long even_value_index31\
    \ = 0;\n    long even_value_index32 = 0;\n    long even_value_index33 = 0;\n \
    \   long even_value_index34 = 0;\n    long even_value_index35 = 0;\n    long even_value_index36\
    \ = 0;\n    long even_value_index37 = 0;\n    long even_value_index38 = 0;\n \
    \   long even_value_index39 = 0;\n    long even_value_index40 = 0;\n    long even_value_index41\
    \ = 0;\n    long even_value_index42 = 0;\n    long even_value_index43 = 0;\n \
    \   long even_value_index44 = 0;\n    long even_value_index45 = 0;\n    long even_value_index46\
    \ = 0;\n    long even_value_index47 = 0;\n    long even_value_index48 = 0;\n \
    \   long even_value_index49 = 0;\n    long even_value_index50 = 0;\n    long even_value_index51\
    \ = 0;\n    long even_value_index52 = 0;\n    long even_value_index53 = 0;\n \
    \   long even_value_index54 = 0;\n    long even_value_index55 = 0;\n    long even_value_index",
  "    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Your code here\n    long smalest_value = 0;\n    long smalest_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value == 0) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            } else {\n                if\
    \ (arr[i] < smalest_value) {\n                    smalest_value = arr[i];\n  \
    \                  smalest_index = i;\n                }\n            }\n    \
    \    }\n    }\n    std::vector<long> result;\n    if (smalest_value != 0) {\n\
    \        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long smallest_even_value\
    \ = 0;\n    long smallest_even_node = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even_value\
    \ == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_node\
    \ = i;\n            } else if (arr[i] < smallest_even_value) {\n             \
    \   smallest_even_value = arr[i];\n                smallest_even_node = i;\n \
    \           }\n        }\n    }\n    if (smallest_even_value == 0) {\n       \
    \ return result;\n    }\n    result.push_back(smallest_even_value);\n    result.push_back(smallest_even_node);\n\
    \    return result;", "    // write your code here\n    long smalest_value = 0;\n\
    \    long smalest_index = 0;\n    long smalest_index_value = 0;\n    long smalest_index_value_2\
    \ = 0;\n    long smalest_index_value_3 = 0;\n    long smalest_index_value_4 =\
    \ 0;\n    long smalest_index_value_5 = 0;\n    long smalest_index_value_6 = 0;\n\
    \    long smalest_index_value_7 = 0;\n    long smalest_index_value_8 = 0;\n  \
    \  long smalest_index_value_9 = 0;\n    long smalest_index_value_10 = 0;\n   \
    \ long smalest_index_value_11 = 0;\n    long smalest_index_value_12 = 0;\n   \
    \ long smalest_index_value_13 = 0;\n    long smalest_index_value_14 = 0;\n   \
    \ long smalest_index_value_15 = 0;\n    long smalest_index_value_16 = 0;\n   \
    \ long smalest_index_value_17 = 0;\n    long smalest_index_value_18 = 0;\n   \
    \ long smalest_index_value_19 = 0;\n    long smalest_index_value_20 = 0;\n   \
    \ long smalest_index_value_21 = 0;\n    long smalest_index_value_22 = 0;\n   \
    \ long smalest_index_value_23 = 0;\n    long smalest_index_value_24 = 0;\n   \
    \ long smalest_index_value_25 = 0;\n    long smalest_index_value_26 = 0;\n   \
    \ long smalest_index_value_27 = 0;\n    long smalest_index_value_28 = 0;\n   \
    \ long smalest_index_value_29 = 0;\n    long smalest_index_value_30 = 0;\n   \
    \ long smalest_index_value_31 = 0;\n    long smalest_index_value_32 = 0;\n   \
    \ long smalest_index_value_33 = 0;\n    long smalest_index_value_34 = 0;\n   \
    \ long smalest_index_value_35 = 0;\n    long smalest_index_value_36 = 0;\n   \
    \ long smalest_index_value_37 = 0;\n    long smalest_index_value_38 = 0;\n   \
    \ long smalest_index_value_39 = 0;\n    long smalest_index_value_40 = 0;\n   \
    \ long smalest_index_value_41 = 0;\n    long smalest_index_value_42 = 0;\n   \
    \ long smalest_index_value_43 = 0;\n    long smalest_index_value_44 = 0;\n   \
    \ long smalest_index_value_45 = 0;\n    long smalest_index_value_46 = 0;\n   \
    \ long smalest_index_value_47 = 0;\n    long smalest_index_value_48 = 0;\n   \
    \ long smalest_index_value_49 = 0;\n    long smalest_index_", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return std::vector<long>();\n   \
    \ }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n    res.push_back(smalest_index);\n\
    \    return res;", "    // Your code here\n    long smalest_value = 0;\n    long\
    \ smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n               \
    \ smalest_value = arr[i];\n                smalest_index = i;\n            } else\
    \ if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n   \
    \             smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    if (smalest_value == 0) {\n       \
    \ return std::vector<long>();\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ res;\n    if (smalest_index_value % 2 == 0) {\n        res.push_back(smalest_value);\n\
    \        res.push_back(smalest_index);\n    } else {\n        res.push_back(smalest_value);\n\
    \        res.push_back(smalest_index);\n    }\n    return res;"]
stop_tokens:
- "\n}"
