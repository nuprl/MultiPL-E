name: HumanEval_68_pluck
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given an array representing\
  \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
  \ one of the nodes and return it.\n// The plucked node should be the node with the\
  \ smallest even value.\n// If multiple nodes with the same smallest even value are\
  \ found return the node that has smallest index.\n// The plucked node should be\
  \ returned in a list, [ smalest_value, its index ],\n// If there are no even values\
  \ or the given array is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
  \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
  // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
  \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
  // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
  \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the first\
  \ zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length <=\
  \ 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
  \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n \
  \   assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4, (long)8})))\
  \ == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n \
  \   assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
  \ == (std::vector<long>()));\n}\n"
completions: ["    long smalest_value = arr[0];\n    long smalest_index = 0;\n   \
    \ for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n  \
    \          if (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index != 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ Write your code here\n    std::vector<long> result;\n    long smallest_value\
    \ = 0;\n    long smallest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    // Your code\
    \ here\n    long smalest_value = 0, smalest_index = 0;\n    long even_value =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0)\
    \ {\n            even_value = arr[i];\n            smalest_value = arr[i];\n \
    \           smalest_index = i;\n        }\n    }\n    if (smalest_value == 0)\
    \ {\n        return std::vector<long>();\n    }\n    std::vector<long> result;\n\
    \    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = 0, smallest_index = -1;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n      \
    \      if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if\
    \ (smalest_value == 0)\n        return std::vector<long>();\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smallest_index);\n\
    \    return result;", "    long smalest_value = 0;\n    long smalest_index = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_value < arr[i]) {\n                smalest_value = arr[i];\n\
    \                smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == 0) {\n        return {};\n    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    long smalest_index_value = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \         smalest_index_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_index_value % 2 == 0) {\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    return result;", "    //\
    \ write your code here\n    long smalest_value = 0, smalest_index = 0;\n    long\
    \ even_value = 0;\n    long index = 0;\n    for (auto &i : arr) {\n        if\
    \ (i % 2 == 0) {\n            even_value = i;\n            index = i;\n      \
    \  }\n    }\n    if (arr.size() == 0) {\n        return {};\n    }\n    for (auto\
    \ &i : arr) {\n        if (i % 2 == 0) {\n            if (i < even_value) {\n\
    \                smalest_value = i;\n                smalest_index = index;\n\
    \            }\n        }\n    }\n    return {smalest_value, smalest_index};",
  "    long smalest_value = 0;\n    long smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value\
    \ == 0) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    long smalest_value = INT_MIN;\n    long smalest_index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value == INT_MIN) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            } else if (smalest_value\
    \ < arr[i]) {\n                smalest_value = arr[i];\n                smalest_index\
    \ = i;\n            }\n        }\n    }\n    if (smalest_value == INT_MIN) {\n\
    \        return std::vector<long>();\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smalest_index);\n    return res;", "    // Your code here\n\
    \    long smallest_value = 0;\n    long smallest_index = 0;\n    long temp = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            temp = arr[i];\n            smallest_value = temp;\n            smallest_index\
    \ = i;\n        }\n    }\n    std::vector<long> result;\n    if (smallest_index\
    \ != 0) {\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    long smalest_index_value = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n            smalest_index_value = arr[i];\n \
    \       }\n    }\n    std::vector<long> result;\n    if (smalest_index_value %\
    \ 2 == 0) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    } else {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \        result.push_back(smalest_index_value);\n    }\n    return result;", " \
    \   long smallest_value = arr[0];\n    long smallest_index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] < smallest_value) {\n    \
    \        smallest_value = arr[i];\n            smallest_index = i;\n        }\n\
    \    }\n    std::vector<long> result;\n    if (smallest_value % 2 == 0) {\n  \
    \      result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    } else {\n        result.push_back(smallest_value);\n        result.push_back(smallest_index);\n\
    \    }\n    return result;", "    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    long smalest_even_value = 0;\n    long smalest_even_index = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n\
    \            if (smalest_even_value == 0) {\n                smalest_even_value\
    \ = arr[i];\n                smalest_even_index = i;\n            } else if (smalest_even_value\
    \ < arr[i]) {\n                smalest_even_value = arr[i];\n                smalest_even_index\
    \ = i;\n            }\n        } else {\n            if (smalest_value == 0) {\n\
    \                smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_even_value == 0) {\n        return std::vector<long>{};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;", "    long smalest_value\
    \ = 0;\n    long smalest_index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smalest_value == 0) {\n \
    \               smalest_value = arr[i];\n                smalest_index = i;\n\
    \            } else if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == 0) {\n        return {};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smalest_value);\n    result.push_back(smalest_index);\n\
    \    return result;", "    // write your code here\n    long smallest_value =\
    \ 0;\n    long smallest_index = 0;\n    long index = 0;\n    long value = 0;\n\
    \    for (auto i : arr) {\n        if (i % 2 == 0) {\n            value = i;\n\
    \            index = i;\n        }\n    }\n    if (value == 0) {\n        return\
    \ {};\n    }\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n          \
    \  if (value < smallest_value) {\n                smallest_value = value;\n  \
    \              smallest_index = index;\n            }\n        }\n    }\n    return\
    \ {smallest_value, smallest_index};", "    // Your code here\n    std::vector<long>\
    \ result;\n    long smallest_value = arr[0];\n    long smallest_index = 0;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n \
    \           if (smallest_value < arr[i]) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    result.push_back(smallest_value);\n\
    \    result.push_back(smallest_index);\n    return result;", "    long smalest_value\
    \ = arr[0];\n    long smalest_index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value)\
    \ {\n                smalest_value = arr[i];\n                smalest_index =\
    \ i;\n            }\n        }\n    }\n    return std::vector<long>{smalest_value,\
    \ smalest_index};", "    long smalest_value = arr[0];\n    long smalest_index\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < smalest_value)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if (smalest_value % 2 == 0)\
    \ {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;", "    // write your code here\n    long smalest_value=0;\n\
    \    long smalest_index=0;\n    long smalest_even_value=0;\n    long smalest_even_count=0;\n\
    \    long smalest_even_index=0;\n    for(long i=0;i<arr.size();i++){\n       \
    \ if(arr[i]%2==0){\n            if(smalest_even_value<arr[i]){\n             \
    \   smalest_even_value=arr[i];\n                smalest_even_count=1;\n      \
    \          smalest_even_index=i;\n            }\n            else if(smalest_even_value==arr[i]){\n\
    \                smalest_even_count++;\n            }\n        }\n        else{\n\
    \            if(smalest_value<arr[i]){\n                smalest_value=arr[i];\n\
    \                smalest_index=i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if(smalest_even_count==1){\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n    }\n    else{\n        result.push_back(smalest_value);\n\
    \        result.push_back(smalest_index);\n        result.push_back(smalest_even_value);\n\
    \        result.push_back(smalest_even_index);\n    }\n    return result;", " \
    \   // Your code here\n    std::vector<long> res;\n    long smalest_value;\n \
    \   long smalest_index;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;\n    long smalest_index_value;\n\
    \    long smalest_index_value;\n    long smalest_index_value;"]
stop_tokens:
- "\n}"
