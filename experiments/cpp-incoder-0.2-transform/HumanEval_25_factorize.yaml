name: HumanEval_25_factorize
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
  \ of given integer in the order from smallest to largest.\n// Each of the factors\
  \ should be listed number of times corresponding to how many times it appeares in\
  \ factorization.\n// Input number should be equal to the product of all factors\n\
  // >>> factorize((8))\n// (std::vector<long>({(long)2, (long)2, (long)2}))\n// >>>\
  \ factorize((25))\n// (std::vector<long>({(long)5, (long)5}))\n// >>> factorize((70))\n\
  // (std::vector<long>({(long)2, (long)5, (long)7}))\nstd::vector<long> factorize(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
  \ == (std::vector<long>({(long)2})));\n    assert(candidate((4)) == (std::vector<long>({(long)2,\
  \ (long)2})));\n    assert(candidate((8)) == (std::vector<long>({(long)2, (long)2,\
  \ (long)2})));\n    assert(candidate((57)) == (std::vector<long>({(long)3, (long)19})));\n\
  \    assert(candidate((3249)) == (std::vector<long>({(long)3, (long)3, (long)19,\
  \ (long)19})));\n    assert(candidate((185193)) == (std::vector<long>({(long)3,\
  \ (long)3, (long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((20577))\
  \ == (std::vector<long>({(long)3, (long)19, (long)19, (long)19})));\n    assert(candidate((18))\
  \ == (std::vector<long>({(long)2, (long)3, (long)3})));\n}\n"
completions: ["    std::vector<long> factors;\n    long p = n;\n    long q = n;\n\
    \    long r = n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long\
    \ v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n\
    \    long a = n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long\
    \ e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n\
    \    long j = n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long\
    \ n = n;\n    long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n\
    \    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long\
    \ w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n\
    \    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long\
    \ f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n\
    \    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long\
    \ o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n\
    \    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long\
    \ x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n\
    \    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long\
    \ g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n\
    \    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long\
    \ p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n\
    \    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long\
    \ y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n\
    \    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long\
    \ h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n",
  "    std::vector<long> factors;\n    long i = 2;\n    long factor = 1;\n    while\
    \ (i <= n / i) {\n        while (n % i == 0) {\n            factor *= i;\n   \
    \         n /= i;\n        }\n        factors.push_back(factor);\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(1);\n    }\n    return factors;",
  "    std::vector<long> factors;\n    long p = n;\n    long q = n;\n    long r =\
    \ n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n   \
    \ long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a =\
    \ n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n   \
    \ long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j =\
    \ n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n   \
    \ long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s =\
    \ n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n   \
    \ long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b =\
    \ n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n   \
    \ long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k =\
    \ n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n   \
    \ long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t =\
    \ n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n   \
    \ long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c =\
    \ n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n   \
    \ long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l =\
    \ n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n   \
    \ long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u =\
    \ n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n   \
    \ long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d =\
    \ n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n   \
    \ long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n", "    std::vector<long>\
    \ factors;\n    long factor = 1;\n    long temp = 1;\n    while (temp <= n) {\n\
    \        if (n % temp == 0) {\n            factor *= temp;\n            factors.push_back(factor);\n\
    \            n /= temp;\n        }\n        temp++;\n    }\n    if (n > 1) {\n\
    \        factor *= n;\n        factors.push_back(factor);\n    }\n    return factors;",
  "    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n)) {\n \
    \       while (n % i == 0) {\n            factors.push_back(i);\n            n\
    \ /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;", "    std::vector<long> factors;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;", "    std::vector<long>\
    \ factors;\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n     \
    \   i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n   \
    \ return factors;", "    std::vector<long> factors;\n    long i = 2;\n    while\
    \ (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n     \
    \   factors.push_back(n);\n    }\n    return factors;", "    std::vector<long>\
    \ factors;\n    long factor = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;", "    std::vector<long> factors;\n    long i = 2;\n\
    \    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;", "    std::vector<long>\
    \ factors;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i\
    \ == 0) {\n            factors.push_back(i);\n            n /= i;\n        }\n\
    \        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n\
    \    return factors;", "    std::vector<long> factors;\n    long i = 2;\n    long\
    \ p = n;\n    while (p != 1) {\n        while (p % i == 0) {\n            factors.push_back(i);\n\
    \            p /= i;\n        }\n        i++;\n    }\n    return factors;", " \
    \   std::vector<long> factors;\n    long factor = 1;\n    long i = 2;\n    while\
    \ (i <= n / factor) {\n        if (n % i == 0) {\n            factor *= i;\n \
    \           factors.push_back(i);\n            while (n % i == 0) {\n        \
    \        n /= i;\n                factors.push_back(i);\n            }\n     \
    \   }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;", "    std::vector<long> factors;\n    long factor\
    \ = 1;\n    long i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0)\
    \ {\n            factors.push_back(i);\n            n /= i;\n        }\n     \
    \   i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n   \
    \ return factors;", "    std::vector<long> factors;\n    long factor = 1;\n  \
    \  long i = 2;\n    long count = 0;\n    while (i <= n) {\n        if (n % i ==\
    \ 0) {\n            factors.push_back(i);\n            n = n / i;\n          \
    \  count++;\n        }\n        i++;\n    }\n    if (n != 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;", "    std::vector<long> factors;\n    long factor\
    \ = 1;\n    long i = 2;\n    while (i <= n) {\n        while (n % i == 0) {\n\
    \            factors.push_back(i);\n            n /= i;\n        }\n        i++;\n\
    \    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;",
  "    std::vector<long> factors;\n    long p = n;\n    long q = n;\n    long r =\
    \ n;\n    long s = n;\n    long t = n;\n    long u = n;\n    long v = n;\n   \
    \ long w = n;\n    long x = n;\n    long y = n;\n    long z = n;\n    long a =\
    \ n;\n    long b = n;\n    long c = n;\n    long d = n;\n    long e = n;\n   \
    \ long f = n;\n    long g = n;\n    long h = n;\n    long i = n;\n    long j =\
    \ n;\n    long k = n;\n    long l = n;\n    long m = n;\n    long n = n;\n   \
    \ long o = n;\n    long p = n;\n    long q = n;\n    long r = n;\n    long s =\
    \ n;\n    long t = n;\n    long u = n;\n    long v = n;\n    long w = n;\n   \
    \ long x = n;\n    long y = n;\n    long z = n;\n    long a = n;\n    long b =\
    \ n;\n    long c = n;\n    long d = n;\n    long e = n;\n    long f = n;\n   \
    \ long g = n;\n    long h = n;\n    long i = n;\n    long j = n;\n    long k =\
    \ n;\n    long l = n;\n    long m = n;\n    long n = n;\n    long o = n;\n   \
    \ long p = n;\n    long q = n;\n    long r = n;\n    long s = n;\n    long t =\
    \ n;\n    long u = n;\n    long v = n;\n    long w = n;\n    long x = n;\n   \
    \ long y = n;\n    long z = n;\n    long a = n;\n    long b = n;\n    long c =\
    \ n;\n    long d = n;\n    long e = n;\n    long f = n;\n    long g = n;\n   \
    \ long h = n;\n    long i = n;\n    long j = n;\n    long k = n;\n    long l =\
    \ n;\n    long m = n;\n    long n = n;\n    long o = n;\n    long p = n;\n   \
    \ long q = n;\n    long r = n;\n    long s = n;\n    long t = n;\n    long u =\
    \ n;\n    long v = n;\n    long w = n;\n    long x = n;\n    long y = n;\n   \
    \ long z = n;\n    long a = n;\n    long b = n;\n    long c = n;\n    long d =\
    \ n;\n    long e = n;\n    long f = n;\n    long g = n;\n    long h = n;\n   \
    \ long i = n;\n    long j = n;\n    long k = n;\n    long l = n;\n", "    std::vector<long>\
    \ factors;\n    long factor = 1;\n    long count = 0;\n    long i = 2;\n    while\
    \ (i <= n / factor) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n            count++;\n        }\n        i++;\n    }\n \
    \   if (n != 1) {\n        factors.push_back(n);\n    }\n    return factors;",
  "    std::vector<long> factors;\n    long i = 2;\n    while (i <= sqrt(n)) {\n \
    \       while (n % i == 0) {\n            factors.push_back(i);\n            n\
    \ /= i;\n        }\n        i++;\n    }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;", "    std::vector<long> factors;\n    long i = 2;\n\
    \    while (i < n) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    if (n != 1) {\n    \
    \    factors.push_back(n);\n    }\n    return factors;"]
stop_tokens:
- "\n}"
