name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
  \ True if all keys are strings in lower \n// case or all keys are strings in upper\
  \ case, else return False.\n// The function should return False is the given dictionary\
  \ is empty.\n// Examples:\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"b\", \"banana\"}})))\n// (true)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})))\n// (false)\n// >>>\
  \ check_dict_case((std::map<std::string,std::string>({{\"a\", \"apple\"}, {8, \"\
  banana\"}, {\"a\", \"apple\"}})))\n// (false)\n// >>> check_dict_case((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}})))\n// (false)\n\
  // >>> check_dict_case((std::map<std::string,std::string>({{\"STATE\", \"NC\"},\
  \ {\"ZIP\", \"12345\"}})))\n// (true)\nbool check_dict_case(std::map<std::string,std::string>\
  \ dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}}))) == (false));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n\
  \    assert(candidate((std::map<std::string,std::string>({{\"STATE\", \"NC\"}, {\"\
  ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>({{\"\
  fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n    assert(candidate((std::map<std::string,std::string>()))\
  \ == (false));\n}\n"
completions: ["    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n \
    \       if (!kv.first.compare(0, 2, kv.first.size(), ::tolower)) {\n         \
    \   return false;\n        }\n        if (!kv.first.compare(0, 2, kv.first.size(),\
    \ ::toupper)) {\n            return false;\n        }\n    }\n    return true;",
  "    if (dict.empty()) return true;\n    for (auto &item : dict) {\n        if (item.first\
    \ != item.second.toLower()) return false;\n    }\n    return true;", "    if(dict.empty())\
    \ return true;\n    for(auto &pair : dict) {\n        if(pair.first != pair.second.toLower())\
    \ return false;\n    }\n    return true;", "    // Write your code here\n    if(dict.empty()){\n\
    \        return false;\n    }\n    for(auto &x: dict){\n        if(x.first < 'a'\
    \ || x.first > 'z'){\n            return false;\n        }\n        if(x.first\
    \ < 'A' || x.first > 'Z'){\n            return false;\n        }\n    }\n    return\
    \ true;", "    if (dict.empty()) return true;\n    for (auto &item : dict) {\n\
    \        if (item.first != item.second.toLower()) return false;\n    }\n    return\
    \ true;", "    if(dict.empty()) return true;\n    for(auto &kv : dict) {\n   \
    \     if(kv.first >= 'A' && kv.first <= 'Z') return true;\n        if(kv.first\
    \ >= 'a' && kv.first <= 'z') return true;\n    }\n    return false;", "    bool\
    \ result = true;\n    for (auto &item : dict)\n    {\n        auto key = item.first;\n\
    \        auto value = item.second;\n        auto lower = std::tolower(key);\n\
    \        auto upper = std::toupper(key);\n        if (lower != key || upper !=\
    \ key)\n        {\n            result = false;\n        }\n    }\n    return result;",
  "    if (dict.empty()) return true;\n    for (auto &kv : dict) {\n        if (kv.first\
    \ != kv.first.to_lower()) {\n            return false;\n        }\n        if\
    \ (kv.first != kv.first.to_upper()) {\n            return false;\n        }\n\
    \    }\n    return true;", "    if (dict.empty()) return false;\n    for (auto\
    \ &kv : dict) {\n        if (kv.first != kv.second.tolower()) return false;\n\
    \    }\n    return true;", "    bool flag = true;\n    for (auto &item : dict)\n\
    \    {\n        if (!item.first.compare(item.first.at(0)))\n        {\n      \
    \      flag = false;\n            break;\n        }\n    }\n    return flag;",
  "    // Write your code here\n    for(auto it = dict.begin(); it != dict.end();\
    \ ++it) {\n        if(it->first < 'A' || it->first > 'Z') {\n            return\
    \ false;\n        }\n    }\n    for(auto it = dict.begin(); it != dict.end();\
    \ ++it) {\n        if(it->first > 'A' || it->first < 'Z') {\n            return\
    \ false;\n        }\n    }\n    return true;", "    if (dict.empty()) return false;\n\
    \    for (auto &kv : dict) {\n        if (kv.first >= 'a' && kv.first <= 'z')\
    \ return true;\n        if (kv.first >= 'A' && kv.first <= 'Z') return true;\n\
    \    }\n    return false;", "    if (dict.empty()) return true;\n    for (auto\
    \ &kv : dict) {\n        if (kv.first != kv.second.toLower()) return false;\n\
    \    }\n    return true;", "    if (dict.empty()) return true;\n    for (auto\
    \ &kv : dict) {\n        auto &key = kv.first;\n        auto &value = kv.second;\n\
    \        if (std::all_of(value.begin(), value.end(), [](char c) {\n          \
    \  return std::islower(c) || std::isupper(c);\n        })) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    if (dict.empty()) return true;\n\
    \    \n    for (auto &kv : dict) {\n        if (kv.first < 'A' || kv.first > 'Z')\
    \ return false;\n    }\n    \n    return true;", "    bool ret = true;\n    for(auto\
    \ &x: dict) {\n        if(x.first != x.second.toLower()) {\n            ret =\
    \ false;\n            break;\n        }\n    }\n    return ret;", "    bool flag\
    \ = true;\n    for (auto &x: dict) {\n        flag = flag && x.first == x.first.substr(0,\
    \ 1) && (x.first == x.first.substr(0, 1) || x.first == x.first.substr(0, 2));\n\
    \    }\n    return flag;", "    if (dict.empty()) return true;\n    for (auto\
    \ &pair : dict) {\n        if (pair.first < 'A' || pair.first > 'Z') return false;\n\
    \    }\n    return true;", "    if (dict.empty()) return true;\n    for (auto\
    \ &kv : dict) {\n        auto &key = kv.first;\n        auto &value = kv.second;\n\
    \        if (std::all_of(value.begin(), value.end(), [](char c) { return std::islower(c);\
    \ })) {\n            return true;\n        } else if (std::all_of(value.begin(),\
    \ value.end(), [](char c) { return std::isupper(c); })) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    if (dict.empty()) return true;\n\
    \    for (auto &kv : dict) {\n        if (kv.first >= 'a' && kv.first <= 'z')\
    \ return false;\n        if (kv.first >= 'A' && kv.first <= 'Z') return false;\n\
    \    }\n    return true;"]
stop_tokens:
- "\n}"
