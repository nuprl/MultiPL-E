name: HumanEval_111_histogram
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
  \ a space separated lowercase letters, return a dictionary\n// of the letter with\
  \ the most repetition and containing the corresponding count.\n// If several letters\
  \ have the same occurrence, return all of them.\n// Example:\n// >>> histogram((\"\
  a b c\"))\n// (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}))\n\
  // >>> histogram((\"a b b a\"))\n// (std::map<std::string,long>({{\"a\", 2}, {\"\
  b\", 2}}))\n// >>> histogram((\"a b c a b\"))\n// (std::map<std::string,long>({{\"\
  a\", 2}, {\"b\", 2}}))\n// >>> histogram((\"b b b b a\"))\n// (std::map<std::string,long>({{\"\
  b\", 4}}))\n// >>> histogram((\"\"))\n// (std::map<std::string,long>())\nstd::map<std::string,long>\
  \ histogram(std::string test) {\n"
tests: "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
  a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1},\
  \ {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"\
  b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n\
  \    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n\
  }\n"
completions: ["    std::map<std::string,long> histogram;\n    std::string word;\n\
    \    long count = 1;\n    for (auto c : test) {\n        word = c;\n        histogram[word]\
    \ += count;\n        count += 1;\n    }\n    return histogram;", "    std::map<std::string,long>\
    \ histogram;\n    std::string word;\n    long count = 0;\n    for(auto c : test)\
    \ {\n        word = c;\n        ++count;\n        histogram[word] += 1;\n    }\n\
    \    return histogram;", "    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    std::map<std::string,long> histogram;\n    std::istringstream iss(test);\n\
    \    while(std::getline(iss, token, ' ')){\n        tokens.push_back(token);\n\
    \    }\n    for(auto &token : tokens){\n        histogram[token] = histogram.at(token)\
    \ + 1;\n    }\n    return histogram;", "    std::string temp;\n    std::map<std::string,long>\
    \ histogram;\n    for(auto &c: test) {\n        temp = temp + c;\n    }\n    for(auto\
    \ &c: temp) {\n        auto it = histogram.find(c);\n        if(it == histogram.end())\
    \ {\n            histogram[c] = 1;\n        } else {\n            histogram[c]\
    \ = it->second + 1;\n        }\n    }\n    return histogram;", "    std::map<std::string,long>\
    \ histogram;\n    std::string word;\n    std::string letter;\n    long count =\
    \ 1;\n    for(auto &c : test) {\n        letter = c;\n        word = test;\n \
    \       while(word.find(letter) != std::string::npos) {\n            word = word.substr(0,\
    \ word.find(letter));\n            ++count;\n        }\n        histogram[letter]\
    \ = count;\n    }\n    return histogram;", "  std::map<std::string,long> histogram;\n\
    \  std::string word;\n  long count = 1;\n  for (auto c : test) {\n    if (c ==\
    \ ' ') {\n      word = word;\n      count = 1;\n    } else {\n      histogram[word]\
    \ += count;\n      count = 1;\n      word = c;\n    }\n  }\n  histogram[word]\
    \ += count;\n  return histogram;", "    std::vector<std::string> tokens;\n   \
    \ std::string token;\n    std::istringstream iss(test);\n    while (std::getline(iss,\
    \ token, ' ')) {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long>\
    \ histogram;\n    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;", "    std::map<std::string,long> histogram;\n    std::string word;\n\
    \    long count = 0;\n    for(auto &c : test) {\n        word = c;\n        ++count;\n\
    \        auto it = histogram.find(word);\n        if(it == histogram.end()) {\n\
    \            histogram[word] = count;\n        } else {\n            it->second\
    \ = count;\n        }\n    }\n    return histogram;", "    std::map<std::string,long>\
    \ m;\n    std::string temp;\n    size_t pos = 0;\n    size_t count = 0;\n    while(pos\
    \ < test.size()) {\n        pos = test.find_first_of(' ', pos);\n        if(pos\
    \ == std::string::npos) {\n            pos = test.size();\n        }\n       \
    \ temp = test.substr(pos, test.size() - pos);\n        if(m.find(temp) == m.end())\
    \ {\n            m[temp] = 1;\n        } else {\n            m[temp] += 1;\n \
    \       }\n        pos = pos + 1;\n    }\n    return m;", "  std::map<std::string,long>\
    \ m;\n  std::string temp;\n  long cnt = 0;\n  for (auto c : test) {\n    if (m.find(c)\
    \ == m.end()) {\n      m.insert({c, 1});\n    } else {\n      m[c] += 1;\n   \
    \ }\n  }\n  for (auto i : m) {\n    if (i.second > cnt) {\n      temp = i.first;\n\
    \      cnt = i.second;\n    }\n  }\n  if (cnt == 0) {\n    return std::map<std::string,long>();\n\
    \  }\n  return m;", "    std::vector<std::string> tokens;\n    std::string token;\n\
    \    std::istringstream iss(test);\n    while (std::getline(iss, token, ' '))\
    \ {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long> histogram;\n\
    \    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;", "    std::vector<std::string> tokens;\n    std::string token;\n\
    \    std::istringstream iss(test);\n    while (std::getline(iss, token, ' '))\
    \ {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long> histogram;\n\
    \    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;", "    std::vector<std::string> tokens;\n    std::string token;\n\
    \    std::istringstream iss(test);\n    while (std::getline(iss, token, ' '))\
    \ {\n        tokens.push_back(token);\n    }\n    std::map<std::string,long> histogram;\n\
    \    for (auto &token : tokens) {\n        auto it = histogram.find(token);\n\
    \        if (it == histogram.end()) {\n            histogram[token] = 1;\n   \
    \     } else {\n            histogram[token] += 1;\n        }\n    }\n    return\
    \ histogram;", "    std::string letters = test;\n    std::map<std::string,long>\
    \ histogram;\n    std::string word;\n    long count = 0;\n    for(auto &c : letters)\
    \ {\n        word = word + c;\n        ++count;\n    }\n    histogram[word] =\
    \ count;\n    return histogram;", "    std::map<std::string,long> histogram;\n\
    \    std::string word;\n    long count = 0;\n    for(auto &c : test) {\n     \
    \   word = c;\n        ++count;\n        auto it = histogram.find(word);\n   \
    \     if(it == histogram.end()) {\n            histogram[word] = count;\n    \
    \    } else {\n            histogram[word] += count;\n        }\n    }\n    return\
    \ histogram;", "    std::map<std::string,long> m;\n    std::string word;\n   \
    \ long count = 0;\n    for(auto &c : test) {\n        word = c;\n        count\
    \ = m.count(word);\n        m.insert({word,count+1});\n    }\n    return m;",
  "    std::map<std::string,long> histogram;\n    std::string word;\n    long count\
    \ = 0;\n    for(auto &c : test) {\n        word = c;\n        histogram[word]\
    \ += 1;\n        count += 1;\n    }\n    return histogram;", "    std::map<std::string,long>\
    \ histogram;\n    std::string word;\n    long count = 1;\n    for(auto &c : test)\
    \ {\n        word = c;\n        histogram[word] += count;\n        count += 1;\n\
    \    }\n    return histogram;", "    std::map<std::string,long> histogram;\n \
    \   std::string temp;\n    long count = 1;\n    for(auto &c : test) {\n      \
    \  temp = c;\n        histogram[temp] += count;\n        count = 1;\n    }\n \
    \   return histogram;", "    std::map<std::string,long> histogram;\n    std::string\
    \ word;\n    long count = 0;\n    std::vector<std::string> tokens;\n    std::string\
    \ token;\n    while(std::getline(test, token, ' ')){\n        tokens.push_back(token);\n\
    \    }\n    for(auto &token : tokens){\n        word = token;\n        for(auto\
    \ &letter : word){\n            histogram[letter] += 1;\n        }\n    }\n  \
    \  for(auto &letter : histogram){\n        if(histogram.at(letter) > count){\n\
    \            count = histogram.at(letter);\n        }\n    }\n    return histogram;"]
stop_tokens:
- "\n}"
