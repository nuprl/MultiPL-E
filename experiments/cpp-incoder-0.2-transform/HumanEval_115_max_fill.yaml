name: HumanEval_115_max_fill
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a rectangular\
  \ grid of wells. Each row represents a single well,\n// and each 1 in a row represents\
  \ a single unit of water.\n// Each well has a corresponding bucket that can be used\
  \ to extract water from it, \n// and all buckets have the same capacity.\n// Your\
  \ task is to use the buckets to empty the wells.\n// Output the number of times\
  \ you need to lower the buckets.\n// Example 1:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1))\n// (6)\n// Example 2:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2))\n// (5)\n// Example 3:\n// >>> max_fill((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5))\n// (0)\n// Constraints:\n// * all wells have the same length\n// * 1 <=\
  \ grid.length <= 10^2\n// * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0\
  \ | 1\n// * 1 <= capacity <= 10\nlong max_fill(std::vector<std::vector<long>> grid,\
  \ long capacity) {\n"
tests: "}\nint main() {\n    auto candidate = max_fill;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)1,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1})})), (1)) == (6));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)1, (long)1, (long)1,\
  \ (long)1}), (std::vector<long>)std::vector<long>({(long)0, (long)1, (long)1, (long)1})})),\
  \ (2)) == (5));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)0,\
  \ (long)0, (long)0}), (std::vector<long>)std::vector<long>({(long)0, (long)0, (long)0})})),\
  \ (5)) == (0));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (2)) == (4));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1}), (std::vector<long>)std::vector<long>({(long)1, (long)1,\
  \ (long)1, (long)1})})), (9)) == (2));\n}\n"
completions: ["    // write your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long long ans_temp = 0;\n    long long ans_temp_temp = 0;\n    long long\
    \ ans_temp_temp_temp = 0;\n    long long ans_temp_temp_temp_temp = 0;\n    long\
    \ long ans_temp_temp_temp_temp_temp = 0;\n    long long ans_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp = 0;\n    long long\
    \ ans_temp_temp_temp_temp_temp_temp_temp_temp = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp =\
    \ 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp_temp\
    \ = 0;\n    long long ans_temp_temp_temp_temp_temp_temp_temp_temp_temp_", "  \
    \  long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long an = n;\n    long bn = m;\n    long cn = n;\n    long dn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n", "    // write your code here\n    long ans =\
    \ 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long cnt =\
    \ 0;\n    long ans = INT_MAX;\n    long long ans_cnt = 0;\n    long long ans_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt = 0;\n    long long ans_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt = 0;\n    long long\
    \ ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt = 0;\n \
    \   long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt = 0;\n \
    \   long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt = 0;\n\
    \    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt = 0;\n\
    \    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt\
    \ = 0;\n    long long ans_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_cnt_",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long cnt = 0;\n    long ans = 0;\n    long cnt = 0;\n    long cnt2 = 0;\n \
    \   long cnt3 = 0;\n    long cnt4 = 0;\n    long cnt5 = 0;\n    long cnt6 = 0;\n\
    \    long cnt7 = 0;\n    long cnt8 = 0;\n    long cnt9 = 0;\n    long cnt10 =\
    \ 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n    long\
    \ cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17 = 0;\n\
    \    long cnt18 = 0;\n    long cnt19 = 0;\n    long cnt20 = 0;\n    long cnt21\
    \ = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n    long\
    \ cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28 = 0;\n\
    \    long cnt29 = 0;\n    long cnt30 = 0;\n    long cnt31 = 0;\n    long cnt32\
    \ = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n    long\
    \ cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39 = 0;\n\
    \    long cnt40 = 0;\n    long cnt41 = 0;\n    long cnt42 = 0;\n    long cnt43\
    \ = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n    long\
    \ cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50 = 0;\n\
    \    long cnt51 = 0;\n    long cnt52 = 0;\n    long cnt53 = 0;\n    long cnt54\
    \ = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n    long\
    \ cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61 = 0;\n\
    \    long cnt62 = 0;\n    long cnt63 = 0;\n    long cnt64 = 0;\n    long cnt65\
    \ = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n    long\
    \ cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72 = 0;\n\
    \    long cnt73 = 0;\n    long cnt74 = 0;\n    long cnt75 = 0;\n    long cnt76\
    \ = 0;\n    long cnt77 = 0;\n    long cnt78 = 0;\n    long cnt79 = 0;\n    long\
    \ cnt80 = 0;\n    long cnt81 = 0;\n    ", "    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long l = grid[0][0];\n    long r = grid[0][0];\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long\
    \ g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long\
    \ p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n\
    \    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long\
    \ y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n\
    \    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n    long\
    \ H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n\
    \    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n    long\
    \ Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n\
    \    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n    long\
    \ Z = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long ii = 0;\n    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long\
    \ mm = 0;\n    long nn = 0;\n    long oo = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long Aa = 0;\n    long Bb = 0;\n    long Cc = 0;\n    long Dd =\
    \ 0;\n    long Ee = 0;\n    long Ff = 0;\n    long Gg = 0;\n    long Hh = 0;\n\
    \    long Ii = 0;\n    long Jj = 0;\n    long Kk = 0;\n    long Ll = 0;\n    long\
    \ Mm = 0;\n    long Nn = 0;\n    long Oo = 0;\n    long Pp = 0;\n    long Qq =\
    \ 0;\n", "    // write your code here\n    long ans = 0;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long cnt = 0;\n    long cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n\
    \    long cnt5 = 0;\n    long cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n\
    \    long cnt9 = 0;\n    long cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12\
    \ = 0;\n    long cnt13 = 0;\n    long cnt14 = 0;\n    long cnt15 = 0;\n    long\
    \ cnt16 = 0;\n    long cnt17 = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n\
    \    long cnt20 = 0;\n    long cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23\
    \ = 0;\n    long cnt24 = 0;\n    long cnt25 = 0;\n    long cnt26 = 0;\n    long\
    \ cnt27 = 0;\n    long cnt28 = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n\
    \    long cnt31 = 0;\n    long cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34\
    \ = 0;\n    long cnt35 = 0;\n    long cnt36 = 0;\n    long cnt37 = 0;\n    long\
    \ cnt38 = 0;\n    long cnt39 = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n\
    \    long cnt42 = 0;\n    long cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45\
    \ = 0;\n    long cnt46 = 0;\n    long cnt47 = 0;\n    long cnt48 = 0;\n    long\
    \ cnt49 = 0;\n    long cnt50 = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n\
    \    long cnt53 = 0;\n    long cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56\
    \ = 0;\n    long cnt57 = 0;\n    long cnt58 = 0;\n    long cnt59 = 0;\n    long\
    \ cnt60 = 0;\n    long cnt61 = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n\
    \    long cnt64 = 0;\n    long cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67\
    \ = 0;\n    long cnt68 = 0;\n    long cnt69 = 0;\n    long cnt70 = 0;\n    long\
    \ cnt71 = 0;\n    long cnt72 = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n\
    \    long cnt75 = 0;\n    long cnt76 = 0;\n    long cnt77 = 0;\n    long cnt78\
    \ = 0;\n    long cnt79 = 0;\n    long cnt80 = 0;", "    // write your code here\n\
    \    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long\
    \ f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long ab = 0;\n\
    \    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n    long af = 0;\n    long\
    \ ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long aj = 0;\n    long ak =\
    \ 0;\n    long al = 0;\n    long am = 0;\n    long an = 0;\n    long ao = 0;\n\
    \    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n    long as = 0;\n    long\
    \ at = 0;\n    long au = 0;\n    long av = 0;\n    long aw = 0;\n    long ax =\
    \ 0;\n    long ay = 0;\n    long az = 0;\n    long aaa = 0;\n    long aab = 0;\n\
    \    long aac = 0;\n    long aad = 0;\n    long aee = 0;\n    long aaf = 0;\n\
    \    long aag = 0;\n    long aah = 0;\n    long aai = 0;\n    long ajj = 0;\n\
    \    long akk = 0;\n    long ala = 0;\n    long amm = 0;\n    long ann = 0;\n\
    \    long aoo = 0;\n    long app = 0;\n    long aqq = 0;\n    long arr = 0;\n\
    \    long asa = 0;\n    long ata = 0;\n    long auu = 0;\n    long avv = 0;\n\
    \    long awx = 0;\n    long axy = 0;\n    long ayz = 0;\n    long aaax = 0;\n\
    \    long aaab = 0;\n    long aaac = 0;\n    long aaad = 0;\n    long aeee = 0;\n\
    \    long aafg = 0;\n    long aagh = 0;\n    long aaai = 0;\n    long ajjj = 0;\n\
    \    long akkk = 0;\n    long alal = 0;\n    long ammm = 0;\n    long annn = 0;\n\
    \    long aoop = 0;\n    ", "    long ans = 0;\n    long n = grid.size();\n  \
    \  long m = grid[0].size();\n    long an = n * m;\n    long long an2 = an * an;\n\
    \    long long an3 = an2 * an;\n    long long an4 = an3 * an;\n    long long an5\
    \ = an4 * an;\n    long long an6 = an5 * an;\n    long long an7 = an6 * an;\n\
    \    long long an8 = an7 * an;\n    long long an9 = an8 * an;\n    long long an10\
    \ = an9 * an;\n    long long an11 = an10 * an;\n    long long an12 = an11 * an;\n\
    \    long long an13 = an12 * an;\n    long long an14 = an13 * an;\n    long long\
    \ an15 = an14 * an;\n    long long an16 = an15 * an;\n    long long an17 = an16\
    \ * an;\n    long long an18 = an17 * an;\n    long long an19 = an18 * an;\n  \
    \  long long an20 = an19 * an;\n    long long an21 = an20 * an;\n    long long\
    \ an22 = an21 * an;\n    long long an23 = an22 * an;\n    long long an24 = an23\
    \ * an;\n    long long an25 = an24 * an;\n    long long an26 = an25 * an;\n  \
    \  long long an27 = an26 * an;\n    long long an28 = an27 * an;\n    long long\
    \ an29 = an28 * an;\n    long long an30 = an29 * an;\n    long long an31 = an30\
    \ * an;\n    long long an32 = an31 * an;\n    long long an33 = an32 * an;\n  \
    \  long long an34 = an33 * an;\n    long long an35 = an34 * an;\n    long long\
    \ an36 = an35 * an;\n    long long an37 = an36 * an;\n    long long an38 = an37\
    \ * an;\n    long long an39 = an38 * an;\n    long long an40 = an39 * an;\n  \
    \  long long an41 = an40 * an;\n    long long an42 = an41 * an;\n    long long\
    \ an43 = an42 * an;", "    long ans = 0;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long count = 0;\n    long ans1 = 0;\n    long ans2\
    \ = 0;\n    long ans3 = 0;\n    long ans4 = 0;\n    long ans5 = 0;\n    long ans6\
    \ = 0;\n    long ans7 = 0;\n    long ans8 = 0;\n    long ans9 = 0;\n    long ans10\
    \ = 0;\n    long ans11 = 0;\n    long ans12 = 0;\n    long ans13 = 0;\n    long\
    \ ans14 = 0;\n    long ans15 = 0;\n    long ans16 = 0;\n    long ans17 = 0;\n\
    \    long ans18 = 0;\n    long ans19 = 0;\n    long ans20 = 0;\n    long ansp\
    \ = 0;\n    long ansnp = 0;\n    long ansp1 = 0;\n    long ansnp1 = 0;\n    long\
    \ ansp2 = 0;\n    long ansnp2 = 0;\n    long ansp3 = 0;\n    long ansnp3 = 0;\n\
    \    long ansp4 = 0;\n    long ansnp4 = 0;\n    long ansp5 = 0;\n    long ansnp5\
    \ = 0;\n    long ansp6 = 0;\n    long ansnp6 = 0;\n    long ansp7 = 0;\n    long\
    \ ansnp7 = 0;\n    long ansp8 = 0;\n    long ansnp8 = 0;\n    long ansp9 = 0;\n\
    \    long ansnp9 = 0;\n    long ansp10 = 0;\n    long ansnp10 = 0;\n    long ansp11\
    \ = 0;\n    long ansnp11 = 0;\n    long ansp12 = 0;\n    long ansnp12 = 0;\n \
    \   long ansp13 = 0;\n    long ansnp13 = 0;\n    long ansp14 = 0;\n    long ansnp14\
    \ = 0;\n    long ansp15 = 0;\n    long ansnp15 = 0;\n    long ansp16 = 0;\n  \
    \  long ansnp16 = 0;\n    long ansp17 = 0;\n    long ansnp17 = 0;\n    long ansp18\
    \ = 0;\n    long ansnp18 = 0;\n    long ansp19 = 0;\n    long ansnp19 = 0;\n \
    \   long ansp20 = 0;\n    long ansnp20 = 0;\n    long ansp21 = 0;\n    long ansnp21\
    \ = 0;\n    long ansp22 = 0;\n    long ansnp22 = 0;\n    long ansp23 = 0;\n  \
    \  long ansnp23 = 0;\n    long ansp24 = 0;\n    long ansnp24 = 0;\n    long ansp25\
    \ = 0;\n    long ansnp25 = 0;\n    long ansp26 = 0;\n    long ansnp26 = 0;\n \
    \   long ansp", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long an = 0;\n    long cnt = 0;\n    long cur = 0;\n    long cur_cap = 0;\n\
    \    long cur_n = 0;\n    long cur_m = grid[0][0];\n    long cur_an = 0;\n   \
    \ long cur_n2 = 0;\n    long cur_m2 = 0;\n    long cur_an2 = 0;\n    long cur_n3\
    \ = 0;\n    long cur_m3 = 0;\n    long cur_an3 = 0;\n    long cur_n4 = 0;\n  \
    \  long cur_m4 = 0;\n    long cur_an4 = 0;\n    long cur_n5 = 0;\n    long cur_m5\
    \ = 0;\n    long cur_an5 = 0;\n    long cur_n6 = 0;\n    long cur_m6 = 0;\n  \
    \  long cur_an6 = 0;\n    long cur_n7 = 0;\n    long cur_m7 = 0;\n    long cur_an7\
    \ = 0;\n    long cur_n8 = 0;\n    long cur_m8 = 0;\n    long cur_an8 = 0;\n  \
    \  long cur_n9 = 0;\n    long cur_m9 = 0;\n    long cur_an9 = 0;\n    long cur_n10\
    \ = 0;\n    long cur_m10 = 0;\n    long cur_an10 = 0;\n    long cur_n11 = 0;\n\
    \    long cur_m11 = 0;\n    long cur_an11 = 0;\n    long cur_n12 = 0;\n    long\
    \ cur_m12 = 0;\n    long cur_an12 = 0;\n    long cur_n13 = 0;\n    long cur_m13\
    \ = 0;\n    long cur_an13 = 0;\n    long cur_n14 = 0;\n    long cur_m14 = 0;\n\
    \    long cur_an14 = 0;\n    long cur_n15 = 0;\n    long cur_m15 = 0;\n    long\
    \ cur_an15 = 0;\n    long cur_n16 = 0;\n    long cur_m16 = 0;\n    long cur_an16\
    \ = 0;\n    long cur_n17 = 0;\n    long cur_m17 = 0;\n    long cur_an17 = 0;\n\
    \    long cur_n18 = 0;\n    long cur_m18 = 0;\n    long cur_an18 = 0;\n    long\
    \ cur_n19 = 0;\n    long cur_m19 = 0;\n    long cur_an19 = 0;\n    long cur_n20\
    \ = 0;\n    long cur_m20 = 0;\n    long cur_an20 = 0;\n    long cur_n21 = 0;\n\
    \    long cur_m21 = 0;\n    long cur_an21 = 0;\n    long cur_n22 = 0;\n    long\
    \ cur_m22 = 0;\n    long cur_an22 = 0;\n    long cur_n23 = 0;\n    long cur_m23\
    \ = 0;\n    long cur_an23 = 0;\n    ", "    // write your code here\n    long\
    \ ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ count = 0;\n    long max_capacity = 0;\n    long min_capacity = INT_MAX;\n \
    \   long min_bucket = INT_MAX;\n    long max_bucket = INT_MIN;\n    long bucket_size\
    \ = 0;\n    long bucket_capacity = 0;\n    long bucket_min = 0;\n    long bucket_max\
    \ = 0;\n    long bucket_sum = 0;\n    long bucket_sum2 = 0;\n    long bucket_sum3\
    \ = 0;\n    long bucket_sum4 = 0;\n    long bucket_sum5 = 0;\n    long bucket_sum6\
    \ = 0;\n    long bucket_sum7 = 0;\n    long bucket_sum8 = 0;\n    long bucket_sum9\
    \ = 0;\n    long bucket_sum10 = 0;\n    long bucket_sum11 = 0;\n    long bucket_sum12\
    \ = 0;\n    long bucket_sum13 = 0;\n    long bucket_sum14 = 0;\n    long bucket_sum15\
    \ = 0;\n    long bucket_sum16 = 0;\n    long bucket_sum17 = 0;\n    long bucket_sum18\
    \ = 0;\n    long bucket_sum19 = 0;\n    long bucket_sum20 = 0;\n    long bucket_sum21\
    \ = 0;\n    long bucket_sum22 = 0;\n    long bucket_sum23 = 0;\n    long bucket_sum24\
    \ = 0;\n    long bucket_sum25 = 0;\n    long bucket_sum26 = 0;\n    long bucket_sum27\
    \ = 0;\n    long bucket_sum28 = 0;\n    long bucket_sum29 = 0;\n    long bucket_sum30\
    \ = 0;\n    long bucket_sum31 = 0;\n    long bucket_sum32 = 0;\n    long bucket_sum33\
    \ = 0;\n    long bucket_sum34 = 0;\n    long bucket_sum35 = 0;\n    long bucket_sum36\
    \ = 0;\n    long bucket_sum37 = 0;\n    long bucket_sum38 = 0;\n    long bucket_sum39\
    \ = 0;\n    long bucket_sum40 = 0;\n    long bucket_sum41 = 0;\n    long bucket_sum42\
    \ = 0;\n    long bucket_sum43 = 0;\n    long bucket_sum44 = 0;\n    long bucket_sum45\
    \ = 0;\n    long bucket_sum46 = 0;\n    long bucket_sum47 = 0;\n    long bucket_sum48\
    \ = 0;\n    long bucket_sum49 = 0;\n    long bucket_sum50 = 0;\n    long bucket_sum51\
    \ = 0;\n    long bucket_sum52 = 0;\n    long bucket_sum53 = 0;\n    long bucket_sum54\
    \ = 0;\n    long bucket_sum55 = 0;\n    long bucket_sum56 = 0;\n    long bucket_sum57\
    \ = 0;\n    long bucket_sum58 = 0;\n    long bucket_sum59 = 0;\n    long bucket_sum60\
    \ = 0;\n    long bucket_sum61 = 0;\n    long bucket_sum", "    // write your code\
    \ here\n    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long cnt = 0;\n    long cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n\
    \    long cnt5 = 0;\n    long cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n\
    \    long cnt9 = 0;\n    long cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12\
    \ = 0;\n    long cnt13 = 0;\n    long cnt14 = 0;\n    long cnt15 = 0;\n    long\
    \ cnt16 = 0;\n    long cnt17 = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n\
    \    long cnt20 = 0;\n    long cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23\
    \ = 0;\n    long cnt24 = 0;\n    long cnt25 = 0;\n    long cnt26 = 0;\n    long\
    \ cnt27 = 0;\n    long cnt28 = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n\
    \    long cnt31 = 0;\n    long cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34\
    \ = 0;\n    long cnt35 = 0;\n    long cnt36 = 0;\n    long cnt37 = 0;\n    long\
    \ cnt38 = 0;\n    long cnt39 = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n\
    \    long cnt42 = 0;\n    long cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45\
    \ = 0;\n    long cnt46 = 0;\n    long cnt47 = 0;\n    long cnt48 = 0;\n    long\
    \ cnt49 = 0;\n    long cnt50 = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n\
    \    long cnt53 = 0;\n    long cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56\
    \ = 0;\n    long cnt57 = 0;\n    long cnt58 = 0;\n    long cnt59 = 0;\n    long\
    \ cnt60 = 0;\n    long cnt61 = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n\
    \    long cnt64 = 0;\n    long cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67\
    \ = 0;\n    long cnt68 = 0;\n    long cnt69 = 0;\n    long cnt70 = 0;\n    long\
    \ cnt71 = 0;\n    long cnt72 = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n\
    \    long cnt75 = 0;\n    long cnt76 = 0;\n    long cnt77 = 0;\n    long cnt78\
    \ = 0;\n    long cnt79 = 0;\n    long cnt80 = 0;\n    long cnt81 = 0;\n    long\
    \ cnt82 = 0;\n", "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long w = 1;\n    long\
    \ v = 1;\n    long u = 1;\n    long v1 = 1;\n    long v2 = 1;\n    long v3 = 1;\n\
    \    long v4 = 1;\n    long v5 = 1;\n    long v6 = 1;\n    long v7 = 1;\n    long\
    \ v8 = 1;\n    long v9 = 1;\n    long v10 = 1;\n    long v11 = 1;\n    long v12\
    \ = 1;\n    long v13 = 1;\n    long v14 = 1;\n    long v15 = 1;\n    long v16\
    \ = 1;\n    long v17 = 1;\n    long v18 = 1;\n    long v19 = 1;\n    long v20\
    \ = 1;\n    long v21 = 1;\n    long v22 = 1;\n    long v23 = 1;\n    long v24\
    \ = 1;\n    long v25 = 1;\n    long v26 = 1;\n    long v27 = 1;\n    long v28\
    \ = 1;\n    long v29 = 1;\n    long v30 = 1;\n    long v31 = 1;\n    long v32\
    \ = 1;\n    long v33 = 1;\n    long v34 = 1;\n    long v35 = 1;\n    long v36\
    \ = 1;\n    long v37 = 1;\n    long v38 = 1;\n    long v39 = 1;\n    long v40\
    \ = 1;\n    long v41 = 1;\n    long v42 = 1;\n    long v43 = 1;\n    long v44\
    \ = 1;\n    long v45 = 1;\n    long v46 = 1;\n    long v47 = 1;\n    long v48\
    \ = 1;\n    long v49 = 1;\n    long v50 = 1;\n    long v51 = 1;\n    long v52\
    \ = 1;\n    long v53 = 1;\n    long v54 = 1;\n    long v55 = 1;\n    long v56\
    \ = 1;\n    long v57 = 1;\n    long v58 = 1;\n    long v59 = 1;\n    long v60\
    \ = 1;\n    long v61 = 1;\n    long v62 = 0;\n    long v63 = 0;\n    long v64\
    \ = 0;\n    long v65 = 0;\n    long v66 = 0;\n    long v67 = 0;\n    long v68\
    \ = 0;\n    long v69 = 0;\n    long v70 = 0;\n    long v71 = 0;\n    long v72\
    \ = 0;\n    long v73 = 0;\n    long v74 = 0;\n    long v75 = 0;\n    long v76\
    \ = 0;\n    long v77 = 0;\n    long v78 = 0;\n    long v", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long cnt = 0;\n\
    \    long ans = INT_MAX;\n    std::vector<long> b(n);\n    std::vector<long> c(m);\n\
    \    long cnt = 0;\n    for(long i = 0; i < n; i++) {\n        for(long j = 0;\
    \ j < m; j++) {\n            if(grid[i][j] == 1) {\n                b[i] = b[i]\
    \ + capacity;\n                c[j] = c[j] + capacity;\n            }\n      \
    \  }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m;\
    \ j++) {\n            if(grid[i][j] == 1) {\n                if(b[i] > c[j]) {\n\
    \                    b[i] = b[i] - c[j];\n                    ans = ans + 1;\n\
    \                }\n            }\n        }\n    }\n    return ans;", "    long\
    \ ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ cnt = 0;\n    long ans = INT_MAX;\n    std::vector<std::vector<long>> ans(n);\n\
    \    for(long i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n  \
    \          long cnt = 0;\n            for(long k = 0; k < n; k++) {\n        \
    \        for(long l = 0; l < m; l++) {\n                    if(grid[i][k] == grid[k][l])\
    \ {\n                        cnt++;\n                    }\n                }\n\
    \            }\n            if(cnt > ans[i]) {\n                ans[i] = cnt;\n\
    \            }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            long cnt = 0;\n            for(long k = 0;\
    \ k < n; k++) {\n                for(long l = 0; l < m; l++) {\n             \
    \       if(grid[i][k] == grid[k][l]) {\n                        cnt++;\n     \
    \               }\n                }\n            }\n            if(cnt > ans[i])\
    \ {\n                ans[i] = cnt;\n            }\n        }\n    }\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            long\
    \ cnt = 0;\n            for(long k = 0; k < n; k++) {\n                for(long\
    \ l = 0; l < m; l++) {\n                    if(grid[i][k] == grid[k][l]) {\n \
    \                       cnt++;\n                    }\n                }\n   \
    \         }\n            if(cnt > ans[i]) {\n                ans[i] = cnt;\n \
    \           }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            long cnt = 0;\n            for(long k = 0;\
    \ k < n; k++) {\n                for(long l = 0; l < m; l++) {\n             \
    \       if(grid[i][k] == grid[k][l]) {\n                        cnt++;\n     \
    \               }\n                }\n            }\n            if(cnt > ans[i])\
    \ {\n                ans[i] = cnt;\n            }\n        }\n    }\n    for(long\
    \ i = 0; i < n; i++) {\n        for(long j = 0; j < m; j++) {\n            long\
    \ cnt = 0;\n            for(long k = 0; k < n; k++) {\n                for(long\
    \ l = 0; l < m; l++) {\n                    if(grid[i][k] == grid[k][l]) {\n \
    \                       cnt++;\n                    }\n                }\n   \
    \         }\n            if(cnt > ans[i]) {\n                ans[i] = cnt;\n \
    \           }\n        }\n    }\n    for(long i = 0; i < n; i++) {\n        for(long\
    \ j = 0; j < m; j++) {\n            long cnt = 0;\n            for(long k = 0;\
    \ k < n; k++) {\n                for(long l = 0; l < m; l", "    long ans = 0;\n\
    \    long n = grid.size();\n    long m = grid[0].size();\n    long cnt = 0;\n\
    \    std::vector<std::vector<long>> buckets(n);\n    std::vector<std::vector<long>>\
    \ buckets_rev(m);\n    std::vector<std::vector<long>> buckets_rev_rev(m);\n  \
    \  std::vector<std::vector<long>> buckets_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>> buckets_rev_rev_rev_rev_rev(m);\n\
    \    std::vector<std::vector<long>> buckets_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev(m);\n    std::vector<std::vector<long>>\
    \ buckets_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev", "    long\
    \ ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n    long\
    \ count = 0;\n    long cur = 0;\n    long cur_cap = capacity;\n    long cur_n\
    \ = n;\n    long cur_m = m;\n    long cur_ans = 0;\n    long cur_count = 0;\n\
    \    long cur_cur = 0;\n    long cur_cur_cap = cur_cap;\n    long cur_cur_n =\
    \ cur_n;\n    long cur_cur_m = cur_m;\n    long cur_cur_ans = 0;\n    long cur_cur_count\
    \ = 0;\n    long cur_cur_cur = 0;\n    long cur_cur_cur_cap = cur_cur_cap;\n \
    \   long cur_cur_cur_n = cur_cur_n;\n    long cur_cur_cur_m = cur_cur_m;\n   \
    \ long cur_cur_cur_ans = 0;\n    long cur_cur_cur_count = 0;\n    long cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cap = cur_cur_cur_cap;\n    long cur_cur_cur_cur_n\
    \ = cur_cur_cur_n;\n    long cur_cur_cur_cur_m = cur_cur_cur_m;\n    long cur_cur_cur_cur_ans\
    \ = 0;\n    long cur_cur_cur_cur_count = 0;\n    long cur_cur_cur_cur_cur = 0;\n\
    \    long cur_cur_cur_cur_cur_cap = cur_cur_cur_cur_cap;\n    long cur_cur_cur_cur_n\
    \ = cur_cur_cur_cur_n;\n    long cur_cur_cur_cur_m = cur_cur_cur_cur_m;\n    long\
    \ cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur_count = 0;\n    long cur_cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cur_cap = cur_cur_cur_cur_cap;\n    long cur_cur_cur_cur_n\
    \ = cur_cur_cur_cur_n;\n    long cur_cur_cur_cur_m = cur_cur_cur_cur_m;\n    long\
    \ cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur_count = 0;\n    long cur_cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cur_cap = cur_cur_cur_cur_cap;\n    long cur_cur_cur_cur_n\
    \ = cur_cur_cur_cur_n;\n    long cur_cur_cur_cur_m = cur_cur_cur_cur_m;\n    long\
    \ cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur_count = 0;\n    long cur_cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cur_cap = cur_cur_cur_cur_cap;\n    long cur_cur_cur_cur_n\
    \ = cur_cur_cur_cur_n;\n    long cur_cur_cur_cur_m = cur_cur_cur_cur_m;\n    long\
    \ cur_cur_cur_cur_ans = 0;\n    long cur_cur_cur_cur_count = 0;\n    long cur_cur_cur_cur_cur\
    \ = 0;\n    long cur_cur_cur_cur_cur_cap = ", "    // write your code here\n \
    \   long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n \
    \   long an = n;\n    long bn = m;\n    long cn = n;\n    long dn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    long dnn = m;\n    long cnn = n;\n    long dnn = m;\n    long\
    \ cnn = n;\n    ", "    // write your code here\n    long ans = 0;\n    long n\
    \ = grid.size();\n    long m = grid[0].size();\n    long long an = 0;\n    long\
    \ long max = 0;\n    long long cur = 0;\n    long long cur2 = 0;\n    long long\
    \ cur3 = 0;\n    long long cur4 = 0;\n    long long cur5 = 0;\n    long long cur6\
    \ = 0;\n    long long cur7 = 0;\n    long long cur8 = 0;\n    long long cur9 =\
    \ 0;\n    long long cur10 = 0;\n    long long cur11 = 0;\n    long long cur12\
    \ = 0;\n    long long cur13 = 0;\n    long long cur14 = 0;\n    long long cur15\
    \ = 0;\n    long long cur16 = 0;\n    long long cur17 = 0;\n    long long cur18\
    \ = 0;\n    long long cur19 = 0;\n    long long cur20 = 0;\n    long long cur21\
    \ = 0;\n    long long cur22 = 0;\n    long long cur23 = 0;\n    long long cur24\
    \ = 0;\n    long long cur25 = 0;\n    long long cur26 = 0;\n    long long cur27\
    \ = 0;\n    long long cur28 = 0;\n    long long cur29 = 0;\n    long long cur30\
    \ = 0;\n    long long cur31 = 0;\n    long long cur32 = 0;\n    long long cur33\
    \ = 0;\n    long long cur34 = 0;\n    long long cur35 = 0;\n    long long cur36\
    \ = 0;\n    long long cur37 = 0;\n    long long cur38 = 0;\n    long long cur39\
    \ = 0;\n    long long cur40 = 0;\n    long long cur41 = 0;\n    long long cur42\
    \ = 0;\n    long long cur43 = 0;\n    long long cur44 = 0;\n    long long cur45\
    \ = 0;\n    long long cur46 = 0;\n    long long cur47 = 0;\n    long long cur48\
    \ = 0;\n    long long cur49 = 0;\n    long long cur50 = 0;\n    long long cur51\
    \ = 0;\n    long long cur52 = 0;\n    long long cur53 = 0;\n    long long cur54\
    \ = 0;\n    long long cur55 = 0;\n    long long cur56 = 0;\n    long long cur57\
    \ = 0;\n    long long cur58 = 0;\n    long long cur59 = 0;\n    long long cur60\
    \ = 0;\n    long long cur61 = 0;\n    long long cur62 = 0;\n    long long cur63\
    \ = 0;\n    long long cur64 = 0;\n    long long cur65 = 0;\n    long long cur66\
    \ = 0;\n    long long cur67 = 0;\n    long long cur68 = 0;\n    long long cur",
  "    long ans = 0;\n    long n = grid.size();\n    long m = grid[0].size();\n  \
    \  long an = n;\n    long bn = m;\n    long cn = capacity;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = cn;\n    long cnn = cn;\n\
    \    long cnm = cn;\n    long cnn = cn;\n    long cnm = "]
stop_tokens:
- "\n}"
