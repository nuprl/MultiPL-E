name: HumanEval_120_maximum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers\
  \ and a positive integer k, return a sorted list \n// of length k with the maximum\
  \ k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
  \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
  // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
  \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
  \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
  // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2.\
  \ The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k\
  \ <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n"
tests: "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
  \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
  \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
  \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
  \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
  \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15,\
  \ (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
  \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
  \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
  \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
  }\n"
completions: ["    // Your code here\n    long long ans = arr[0];\n    long long max\
    \ = 0;\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    for(int i = 0; i < k; i++) {\n\
    \        if(arr[i] > max) {\n            ans = max;\n            break;\n    \
    \    }\n    }\n    std::vector<long> ans;\n    ans.push_back(ans);\n    return\
    \ ans;", "    // Your code here\n    long max = 0;\n    std::vector<long> ans;\n\
    \    for(long i = 0; i < arr.size(); i++){\n        if(arr[i] > max){\n      \
    \      max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] > max && arr[i] > k){\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    long n = arr.size();\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n\
    \    long max_idx2 = 1;\n    long max_idx3 = 1;\n    long max_idx4 = 1;\n    long\
    \ max_idx5 = 1;\n    long max_idx6 = 1;\n    long max_idx7 = 1;\n    long max_idx8\
    \ = 1;\n    long max_idx9 = 1;\n    long max_idx10 = 1;\n    long max_idx11 =\
    \ 1;\n    long max_idx12 = 1;\n    long max_idx13 = 1;\n    long max_idx14 = 1;\n\
    \    long max_idx15 = 1;\n    long max_idx16 = 1;\n    long max_idx17 = 1;\n \
    \   long max_idx18 = 1;\n    long max_idx19 = 1;\n    long max_idx20 = 1;\n  \
    \  long max_idx21 = 1;\n    long max_idx22 = 1;\n    long max_idx23 = 1;\n   \
    \ long max_idx24 = 1;\n    long max_idx25 = 1;\n    long max_idx26 = 1;\n    long\
    \ max_idx27 = 1;\n    long max_idx28 = 1;\n    long max_idx29 = 1;\n    long max_idx30\
    \ = 1;\n    long max_idx31 = 1;\n    long max_idx32 = 1;\n    long max_idx33 =\
    \ 1;\n    long max_idx34 = 1;\n    long max_idx35 = 1;\n    long max_idx36 = 1;\n\
    \    long max_idx37 = 1;\n    long max_idx38 = 1;\n    long max_idx39 = 1;\n \
    \   long max_idx40 = 1;\n    long max_idx41 = 1;\n    long max_idx42 = 1;\n  \
    \  long max_idx43 = 1;\n    long max_idx44 = 1;\n    long max_idx45 = 1;\n   \
    \ long max_idx46 = 1;\n    long max_idx47 = 1;\n    long max_idx48 = 1;\n    long\
    \ max_idx49 = 1;\n    long max_idx50 = 1;\n    long max_idx51 = 1;\n    long max_idx52\
    \ = 1;\n    long max_idx53 = 1;\n    long max_idx54 = 1;\n    long max_idx55 =\
    \ 1;\n    long max_idx56 = 1;\n    long max_idx57 = 1;\n    long max_idx58 = 1;\n\
    \    long max_idx59 = 1;\n    long max_idx60 = 1;\n    long max_idx61 = 1;\n \
    \   long max_idx62 = 1;\n    long max_idx63 = 1;\n    long max_idx64 = 1;\n  \
    \  long max_idx65 = 1;\n    long max_idx66 = 1;\n    long max_idx67 = 1;\n   \
    \ long max_idx68 = 1;\n    long max_idx69 = 1;\n", "    // Your code here\n  \
    \  std::vector<long> max;\n    max.reserve(k);\n    long maxVal = arr[0];\n  \
    \  for(long i = 1; i < k; i++) {\n        if(arr[i] > maxVal) {\n            maxVal\
    \ = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            max.push_back(arr[i]);\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    long ans = 0, n = arr.size();\n    std::vector<long>\
    \ arr1;\n    std::vector<long> arr2;\n    long temp;\n    long i;\n    for(i =\
    \ 0; i < n; i++) {\n        arr1.push_back(arr[i]);\n    }\n    for(i = 0; i <\
    \ n; i++) {\n        arr2.push_back(arr[i]);\n    }\n    for(i = 0; i < n; i++)\
    \ {\n        if(arr1[i] > arr2[i]) {\n            temp = arr1[i];\n          \
    \  arr1[i] = arr2[i];\n            arr2[i] = temp;\n        }\n    }\n    for(i\
    \ = 0; i < k; i++) {\n        ans = max(ans, arr1[i]);\n    }\n    return arr1;",
  "    std::vector<long> ans;\n    long max_val = arr[0];\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val =\
    \ arr[i];\n        }\n    }\n    long cur = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[cur]);\n\
    \            cur++;\n        }\n    }\n    ans.push_back(arr[cur]);\n    return\
    \ ans;", "    std::vector<long> result;\n    long max = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    if (k == 1) {\n        result.push_back(max);\n       \
    \ return result;\n    }\n    long mid = arr.size() / 2;\n    std::vector<long>\
    \ left = maximum(arr, k - 1);\n    std::vector<long> right = maximum(arr, k);\n\
    \    for (long i = 0; i < left.size(); i++) {\n        if (left[i] > max) {\n\
    \            max = left[i];\n        }\n    }\n    for (long i = 0; i < right.size();\
    \ i++) {\n        if (right[i] > max) {\n            max = right[i];\n       \
    \ }\n    }\n    result.push_back(max);\n    return result;", "    // write your\
    \ code here\n    \n    long long max = 0;\n    long long maxIndex = 0;\n    \n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n     \
    \       max = arr[i];\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ std::vector<long> result;\n    \n    for(int i = 0; i < k; i++) {\n        result.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    \n    return result;", "    long n = arr.size();\n\
    \    std::vector<long> max(n);\n    long max_index = 0;\n    long max_value =\
    \ arr[0];\n    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_value)\
    \ {\n            max_value = arr[i];\n            max_index = i;\n        }\n\
    \    }\n    for (long i = max_index; i < k; i++) {\n        max[i] = max_value;\n\
    \    }\n    return max;", "    // Your code here\n    long n = arr.size();\n \
    \   long max_size = n;\n    std::vector<long> max_arr;\n    for(long i = 0; i\
    \ < n; i++) {\n        if(arr[i] > max_arr[i]) {\n            max_arr[i] = arr[i];\n\
    \            max_size = i;\n        }\n    }\n    for(long i = 0; i < max_size;\
    \ i++) {\n        for(long j = i + 1; j < max_size; j++) {\n            if(arr[j]\
    \ > arr[i]) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n\
    \                arr[j] = temp;\n            }\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        max_arr.push_back(arr[i]);\n    }\n    return\
    \ max_arr;", "    // Your code here\n    long long max = 0;\n    long long maxIndex\
    \ = 0;\n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n\
    \    std::vector<long> ans;\n    for(long long i = 0; i < k; i++) {\n        ans.push_back(arr[maxIndex]);\n\
    \        maxIndex--;\n    }\n    return ans;", "    // write your code here\n\
    \    long n = arr.size();\n    long max_size = n;\n    long max_num = arr[0];\n\
    \    std::vector<long> max_nums(max_size);\n    for(long i = 0; i < n; i++) {\n\
    \        if(arr[i] > max_num) {\n            max_num = arr[i];\n        }\n  \
    \  }\n    for(long i = 0; i < max_size; i++) {\n        if(max_nums[i] >= k) {\n\
    \            max_nums[i] = max_num;\n        }\n    }\n    return max_nums;",
  "    long n = arr.size();\n    std::vector<long> res;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    for(long i = max_idx; i >= 0; i--) {\n        res.push_back(arr[i]);\n\
    \        if(res.size() == k) {\n            break;\n        }\n    }\n    return\
    \ res;", "    // Your code here\n    std::vector<long> ans;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "    //\
    \ Your code here\n    long n = arr.size();\n    long max_element = 0;\n    long\
    \ max_index = 0;\n    long max_value = arr[0];\n    long max_index2 = 0;\n   \
    \ long max_value2 = arr[0];\n    long max_index3 = 0;\n    long max_value3 = arr[0];\n\
    \    long max_index4 = 0;\n    long max_value4 = arr[0];\n    long max_index5\
    \ = 0;\n    long max_value5 = arr[0];\n    long max_index6 = 0;\n    long max_value6\
    \ = arr[0];\n    long max_index7 = 0;\n    long max_value7 = arr[0];\n    long\
    \ max_index8 = 0;\n    long max_value8 = arr[0];\n    long max_index9 = 0;\n \
    \   long max_value9 = arr[0];\n    long max_index10 = 0;\n    long max_value10\
    \ = arr[0];\n    long max_index11 = 0;\n    long max_value11 = arr[0];\n    long\
    \ max_index12 = 0;\n    long max_value12 = arr[0];\n    long max_index13 = 0;\n\
    \    long max_value13 = arr[0];\n    long max_index14 = 0;\n    long max_value14\
    \ = arr[0];\n    long max_index15 = 0;\n    long max_value15 = arr[0];\n    long\
    \ max_index16 = 0;\n    long max_value16 = arr[0];\n    long max_index17 = 0;\n\
    \    long max_value17 = arr[0];\n    long max_index18 = 0;\n    long max_value18\
    \ = arr[0];\n    long max_index19 = 0;\n    long max_value19 = arr[0];\n    long\
    \ max_index20 = 0;\n    long max_value20 = arr[0];\n    long max_index21 = 0;\n\
    \    long max_value21 = arr[0];\n    long max_index22 = 0;\n    long max_value22\
    \ = arr[0];\n    long max_index23 = 0;\n    long max_value23 = arr[0];\n    long\
    \ max_index24 = 0;\n    long max_value24 = arr[0];\n    long max_index25 = 0;\n\
    \    long max_value25 = arr[0];\n    long max_index26 = 0;\n    long max_value26\
    \ = arr[0];\n    long max_index27 = 0;\n    long max_value27 = arr[0];\n    long\
    \ max_index28 = 0;\n    long max_value28 = arr[0];\n    long max_index29 = 0;\n\
    \    long max_value29 = arr[0];\n    long max_index30 = 0;\n    long max_value30\
    \ = arr[0];\n    long max_index31 = 0;\n    long max_value31 = arr[0];\n    long\
    \ max_index32 = 0;\n    long max_value32 = arr[0];\n", "    std::vector<long>\
    \ result;\n    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ > k) {\n        return result;\n    }\n    return std::vector<long>();", " \
    \   // Your code here\n    long n = arr.size();\n    long max_size = n;\n    long\
    \ max_num = arr[0];\n    long max_pos = 0;\n    std::vector<long> max_vec;\n \
    \   for (long i = 1; i < n; i++) {\n        if (arr[i] > max_num) {\n        \
    \    max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    for (long\
    \ i = max_pos; i < k; i++) {\n        max_vec.push_back(arr[i]);\n    }\n    return\
    \ max_vec;", "    // Your code here\n    std::vector<long> ans;\n    long max\
    \ = 0;\n    long cur = 0;\n    long i = 0;\n    long j = 0;\n    long size = arr.size();\n\
    \    while(i < size) {\n        max = arr[i];\n        while(j < size && arr[j]\
    \ > max) {\n            max = arr[j];\n            j++;\n        }\n        ans.push_back(max);\n\
    \        i++;\n    }\n    while(j < size) {\n        ans.push_back(arr[j]);\n\
    \        j++;\n    }\n    while(j < size) {\n        ans.push_back(max);\n   \
    \     j++;\n    }\n    return ans;", "    // Your code goes here\n    std::vector<long>\
    \ arr1;\n    arr1.reserve(arr.size());\n    long max = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            arr1.push_back(arr[i]);\n        }\n    }\n    arr1.push_back(max);\n\
    \    arr1.sort();\n    arr1.erase(arr1.begin() + k);\n    return arr1;", "   \
    \ // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long mid = 0;\n    long temp = 0;\n    long count\
    \ = 0;\n    while(i < arr.size() && j < k) {\n        mid = (i + j) / 2;\n   \
    \     if(arr[mid] > max) {\n            max = arr[mid];\n            j = mid;\n\
    \        } else {\n            i = mid + 1;\n        }\n    }\n    while(j < k)\
    \ {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    while(i < arr.size()) {\n        mid = (i + j) / 2;\n \
    \       if(arr[mid] > max) {\n            max = arr[mid];\n            j = mid;\n\
    \        } else {\n            i = mid + 1;\n        }\n    }\n    while(j < k)\
    \ {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    while(i < arr.size() && j < k) {\n        mid = (i + j)\
    \ / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n          \
    \  j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n  \
    \  while(j < k) {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n\
    \            max = arr[mid];\n            j = mid;\n        } else {\n       \
    \     i = mid + 1;\n        }\n    }\n    while(i < arr.size()) {\n        mid\
    \ = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid;\n        } else {\n            i = mid + 1;\n        }\n\
    \    }\n    while(j < k) {\n        mid = (i + j) / 2;\n        if(arr[mid] >\
    \ max) {\n            max = arr[mid];\n            j = mid;\n        } else {\n\
    \            i = mid + 1;\n        }\n    }\n    while(i < arr.size() && j < k)\
    \ {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    while(j < k) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(i < arr.size()) {\n\
    \        mid = (i + j) / 2;\n        if(arr[mid"]
stop_tokens:
- "\n}"
