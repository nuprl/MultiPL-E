name: HumanEval_120_maximum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers\
  \ and a positive integer k, return a sorted list \n// of length k with the maximum\
  \ k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
  \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
  // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
  \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
  \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
  // Note:\n// 1. The length of the array will be in the range of [1, 1000].\n// 2.\
  \ The elements in the array will be in the range of [-1000, 1000].\n// 3. 0 <= k\
  \ <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n"
tests: "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
  \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
  \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
  \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
  \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
  \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5, (long)15,\
  \ (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
  \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
  \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
  \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
  \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
  }\n"
completions: ["    // Your code here\n    long long ans = arr[0];\n    long long max\
    \ = 0;\n    for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    for(int i = 0; i < k; i++) {\n\
    \        if(arr[i] > max) {\n            ans = max;\n            break;\n    \
    \    }\n    }\n    std::vector<long> ans;\n    ans.push_back(ans);\n    return\
    \ ans;", "    // Your code here\n    long max = 0;\n    std::vector<long> ans;\n\
    \    for(long i = 0; i < arr.size(); i++){\n        if(arr[i] > max){\n      \
    \      max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] > max && arr[i] > k){\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    long n = arr.size();\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n\
    \    long max_idx2 = 1;\n    long max_idx3 = 1;\n    long max_idx4 = 1;\n    long\
    \ max_idx5 = 1;\n    long max_idx6 = 1;\n    long max_idx7 = 1;\n    long max_idx8\
    \ = 1;\n    long max_idx9 = 1;\n    long max_idx10 = 1;\n    long max_idx11 =\
    \ 1;\n    long max_idx12 = 1;\n    long max_idx13 = 1;\n    long max_idx14 = 1;\n\
    \    long max_idx15 = 1;\n    long max_idx16 = 1;\n    long max_idx17 = 1;\n \
    \   long max_idx18 = 1;\n    long max_idx19 = 1;\n    long max_idx20 = 1;\n  \
    \  long max_idx21 = 1;\n    long max_idx22 = 1;\n    long max_idx23 = 1;\n   \
    \ long max_idx24 = 1;\n    long max_idx25 = 1;\n    long max_idx26 = 1;\n    long\
    \ max_idx27 = 1;\n    long max_idx28 = 1;\n    long max_idx29 = 1;\n    long max_idx30\
    \ = 1;\n    long max_idx31 = 1;\n    long max_idx32 = 1;\n    long max_idx33 =\
    \ 1;\n    long max_idx34 = 1;\n    long max_idx35 = 1;\n    long max_idx36 = 1;\n\
    \    long max_idx37 = 1;\n    long max_idx38 = 1;\n    long max_idx39 = 1;\n \
    \   long max_idx40 = 1;\n    long max_idx41 = 1;\n    long max_idx42 = 1;\n  \
    \  long max_idx43 = 1;\n    long max_idx44 = 1;\n    long max_idx45 = 1;\n   \
    \ long max_idx46 = 1;\n    long max_idx47 = 1;\n    long max_idx48 = 1;\n    long\
    \ max_idx49 = 1;\n    long max_idx50 = 1;\n    long max_idx51 = 1;\n    long max_idx52\
    \ = 1;\n    long max_idx53 = 1;\n    long max_idx54 = 1;\n    long max_idx55 =\
    \ 1;\n    long max_idx56 = 1;\n    long max_idx57 = 1;\n    long max_idx58 = 1;\n\
    \    long max_idx59 = 1;\n    long max_idx60 = 1;\n    long max_idx61 = 1;\n \
    \   long max_idx62 = 1;\n    long max_idx63 = 1;\n    long max_idx64 = 1;\n  \
    \  long max_idx65 = 1;\n    long max_idx66 = 1;\n    long max_idx67 = 1;\n   \
    \ long max_idx68 = 1;\n    long max_idx69 = 1;\n", "    // Your code here\n  \
    \  std::vector<long> max;\n    max.reserve(k);\n    long maxVal = arr[0];\n  \
    \  for(long i = 1; i < k; i++) {\n        if(arr[i] > maxVal) {\n            maxVal\
    \ = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            max.push_back(arr[i]);\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    long ans = 0, n = arr.size();\n    std::vector<long>\
    \ arr1;\n    std::vector<long> arr2;\n    long temp;\n    long i;\n    for(i =\
    \ 0; i < n; i++) {\n        arr1.push_back(arr[i]);\n    }\n    for(i = 0; i <\
    \ n; i++) {\n        arr2.push_back(arr[i]);\n    }\n    for(i = 0; i < n; i++)\
    \ {\n        if(arr1[i] > arr2[i]) {\n            temp = arr1[i];\n          \
    \  arr1[i] = arr2[i];\n            arr2[i] = temp;\n        }\n    }\n    for(i\
    \ = 0; i < k; i++) {\n        ans = max(ans, arr1[i]);\n    }\n    return arr1;",
  "    std::vector<long> ans;\n    long max_val = arr[0];\n    for (long i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val =\
    \ arr[i];\n        }\n    }\n    long cur = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[cur]);\n\
    \            cur++;\n        }\n    }\n    ans.push_back(arr[cur]);\n    return\
    \ ans;", "    std::vector<long> result;\n    long max = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    if (k == 1) {\n        result.push_back(max);\n       \
    \ return result;\n    }\n    long mid = arr.size() / 2;\n    std::vector<long>\
    \ left = maximum(arr, k - 1);\n    std::vector<long> right = maximum(arr, k);\n\
    \    for (long i = 0; i < left.size(); i++) {\n        if (left[i] > max) {\n\
    \            max = left[i];\n        }\n    }\n    for (long i = 0; i < right.size();\
    \ i++) {\n        if (right[i] > max) {\n            max = right[i];\n       \
    \ }\n    }\n    result.push_back(max);\n    return result;", "    // write your\
    \ code here\n    \n    long long max = 0;\n    long long maxIndex = 0;\n    \n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n     \
    \       max = arr[i];\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ std::vector<long> result;\n    \n    for(int i = 0; i < k; i++) {\n        result.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    \n    return result;", "    long n = arr.size();\n\
    \    std::vector<long> max(n);\n    long max_index = 0;\n    long max_value =\
    \ arr[0];\n    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_value)\
    \ {\n            max_value = arr[i];\n            max_index = i;\n        }\n\
    \    }\n    for (long i = max_index; i < k; i++) {\n        max[i] = max_value;\n\
    \    }\n    return max;", "    // Your code here\n    long n = arr.size();\n \
    \   long max_size = n;\n    std::vector<long> max_arr;\n    for(long i = 0; i\
    \ < n; i++) {\n        if(arr[i] > max_arr[i]) {\n            max_arr[i] = arr[i];\n\
    \            max_size = i;\n        }\n    }\n    for(long i = 0; i < max_size;\
    \ i++) {\n        for(long j = i + 1; j < max_size; j++) {\n            if(arr[j]\
    \ > arr[i]) {\n                long temp = arr[i];\n                arr[i] = arr[j];\n\
    \                arr[j] = temp;\n            }\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        max_arr.push_back(arr[i]);\n    }\n    return\
    \ max_arr;", "    // Your code here\n    long long max = 0;\n    long long maxIndex\
    \ = 0;\n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n            maxIndex = i;\n        }\n    }\n\
    \    std::vector<long> ans;\n    for(long long i = 0; i < k; i++) {\n        ans.push_back(arr[maxIndex]);\n\
    \        maxIndex--;\n    }\n    return ans;", "    // write your code here\n\
    \    long n = arr.size();\n    long max_size = n;\n    long max_num = arr[0];\n\
    \    std::vector<long> max_nums(max_size);\n    for(long i = 0; i < n; i++) {\n\
    \        if(arr[i] > max_num) {\n            max_num = arr[i];\n        }\n  \
    \  }\n    for(long i = 0; i < max_size; i++) {\n        if(max_nums[i] >= k) {\n\
    \            max_nums[i] = max_num;\n        }\n    }\n    return max_nums;",
  "    long n = arr.size();\n    std::vector<long> res;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    for(long i = max_idx; i >= 0; i--) {\n        res.push_back(arr[i]);\n\
    \        if(res.size() == k) {\n            break;\n        }\n    }\n    return\
    \ res;", "    // Your code here\n    std::vector<long> ans;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "    //\
    \ Your code here\n    long n = arr.size();\n    long max_element = 0;\n    long\
    \ max_index = 0;\n    long max_value = arr[0];\n    long max_index2 = 0;\n   \
    \ long max_value2 = arr[0];\n    long max_index3 = 0;\n    long max_value3 = arr[0];\n\
    \    long max_index4 = 0;\n    long max_value4 = arr[0];\n    long max_index5\
    \ = 0;\n    long max_value5 = arr[0];\n    long max_index6 = 0;\n    long max_value6\
    \ = arr[0];\n    long max_index7 = 0;\n    long max_value7 = arr[0];\n    long\
    \ max_index8 = 0;\n    long max_value8 = arr[0];\n    long max_index9 = 0;\n \
    \   long max_value9 = arr[0];\n    long max_index10 = 0;\n    long max_value10\
    \ = arr[0];\n    long max_index11 = 0;\n    long max_value11 = arr[0];\n    long\
    \ max_index12 = 0;\n    long max_value12 = arr[0];\n    long max_index13 = 0;\n\
    \    long max_value13 = arr[0];\n    long max_index14 = 0;\n    long max_value14\
    \ = arr[0];\n    long max_index15 = 0;\n    long max_value15 = arr[0];\n    long\
    \ max_index16 = 0;\n    long max_value16 = arr[0];\n    long max_index17 = 0;\n\
    \    long max_value17 = arr[0];\n    long max_index18 = 0;\n    long max_value18\
    \ = arr[0];\n    long max_index19 = 0;\n    long max_value19 = arr[0];\n    long\
    \ max_index20 = 0;\n    long max_value20 = arr[0];\n    long max_index21 = 0;\n\
    \    long max_value21 = arr[0];\n    long max_index22 = 0;\n    long max_value22\
    \ = arr[0];\n    long max_index23 = 0;\n    long max_value23 = arr[0];\n    long\
    \ max_index24 = 0;\n    long max_value24 = arr[0];\n    long max_index25 = 0;\n\
    \    long max_value25 = arr[0];\n    long max_index26 = 0;\n    long max_value26\
    \ = arr[0];\n    long max_index27 = 0;\n    long max_value27 = arr[0];\n    long\
    \ max_index28 = 0;\n    long max_value28 = arr[0];\n    long max_index29 = 0;\n\
    \    long max_value29 = arr[0];\n    long max_index30 = 0;\n    long max_value30\
    \ = arr[0];\n    long max_index31 = 0;\n    long max_value31 = arr[0];\n    long\
    \ max_index32 = 0;\n    long max_value32 = arr[0];\n", "    std::vector<long>\
    \ result;\n    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    if (result.size()\
    \ > k) {\n        return result;\n    }\n    return std::vector<long>();", " \
    \   // Your code here\n    long n = arr.size();\n    long max_size = n;\n    long\
    \ max_num = arr[0];\n    long max_pos = 0;\n    std::vector<long> max_vec;\n \
    \   for (long i = 1; i < n; i++) {\n        if (arr[i] > max_num) {\n        \
    \    max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    for (long\
    \ i = max_pos; i < k; i++) {\n        max_vec.push_back(arr[i]);\n    }\n    return\
    \ max_vec;", "    // Your code here\n    std::vector<long> ans;\n    long max\
    \ = 0;\n    long cur = 0;\n    long i = 0;\n    long j = 0;\n    long size = arr.size();\n\
    \    while(i < size) {\n        max = arr[i];\n        while(j < size && arr[j]\
    \ > max) {\n            max = arr[j];\n            j++;\n        }\n        ans.push_back(max);\n\
    \        i++;\n    }\n    while(j < size) {\n        ans.push_back(arr[j]);\n\
    \        j++;\n    }\n    while(j < size) {\n        ans.push_back(max);\n   \
    \     j++;\n    }\n    return ans;", "    // Your code goes here\n    std::vector<long>\
    \ arr1;\n    arr1.reserve(arr.size());\n    long max = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            arr1.push_back(arr[i]);\n        }\n    }\n    arr1.push_back(max);\n\
    \    arr1.sort();\n    arr1.erase(arr1.begin() + k);\n    return arr1;", "   \
    \ // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long mid = 0;\n    long temp = 0;\n    long count\
    \ = 0;\n    while(i < arr.size() && j < k) {\n        mid = (i + j) / 2;\n   \
    \     if(arr[mid] > max) {\n            max = arr[mid];\n            j = mid;\n\
    \        } else {\n            i = mid + 1;\n        }\n    }\n    while(j < k)\
    \ {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    while(i < arr.size()) {\n        mid = (i + j) / 2;\n \
    \       if(arr[mid] > max) {\n            max = arr[mid];\n            j = mid;\n\
    \        } else {\n            i = mid + 1;\n        }\n    }\n    while(j < k)\
    \ {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    while(i < arr.size() && j < k) {\n        mid = (i + j)\
    \ / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n          \
    \  j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n  \
    \  while(j < k) {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n\
    \            max = arr[mid];\n            j = mid;\n        } else {\n       \
    \     i = mid + 1;\n        }\n    }\n    while(i < arr.size()) {\n        mid\
    \ = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid;\n        } else {\n            i = mid + 1;\n        }\n\
    \    }\n    while(j < k) {\n        mid = (i + j) / 2;\n        if(arr[mid] >\
    \ max) {\n            max = arr[mid];\n            j = mid;\n        } else {\n\
    \            i = mid + 1;\n        }\n    }\n    while(i < arr.size() && j < k)\
    \ {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    while(j < k) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(i < arr.size()) {\n\
    \        mid = (i + j) / 2;\n        if(arr[mid", "    long n = arr.size();\n\
    \    long max_val = arr[0];\n    std::vector<long> ans;\n    ans.push_back(0);\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_val) {\n         \
    \   max_val = arr[i];\n            ans.clear();\n            ans.push_back(i);\n\
    \        }\n        else if(arr[i] == max_val) {\n            ans.push_back(i);\n\
    \        }\n    }\n    if(ans.size() > k) {\n        ans.resize(k);\n    }\n \
    \   return ans;", "    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(max.size() < k) {\n  \
    \          max.push_back(arr[i]);\n        }\n        else if(arr[i] > max[k-1])\
    \ {\n            max[k] = arr[i];\n        }\n    }\n    return max;", "    std::vector<long>\
    \ res;\n    long max = 0;\n    long min = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n  \
    \  if (max > min) {\n        long mid = max + (max - min) / 2;\n        long mid2\
    \ = mid * mid;\n        long mid3 = mid2 * mid;\n        long mid4 = mid3 * mid;\n\
    \        long mid5 = mid4 * mid;\n        long mid6 = mid5 * mid;\n        long\
    \ mid7 = mid6 * mid;\n        long mid8 = mid7 * mid;\n        long mid9 = mid8\
    \ * mid;\n        long mid10 = mid9 * mid;\n        long mid11 = mid10 * mid;\n\
    \        long mid12 = mid11 * mid;\n        long mid13 = mid12 * mid;\n      \
    \  long mid14 = mid13 * mid;\n        long mid15 = mid14 * mid;\n        long\
    \ mid16 = mid15 * mid;\n        long mid17 = mid16 * mid;\n        long mid18\
    \ = mid17 * mid;\n        long mid19 = mid18 * mid;\n        long mid20 = mid19\
    \ * mid;\n        long mid21 = mid20 * mid;\n        long mid22 = mid21 * mid;\n\
    \        long mid23 = mid22 * mid;\n        long mid24 = mid23 * mid;\n      \
    \  long mid25 = mid24 * mid;\n        long mid26 = mid25 * mid;\n        long\
    \ mid27 = mid26 * mid;\n        long mid28 = mid27 * mid;\n        long mid29\
    \ = mid28 * mid;\n        long mid30 = mid29 * mid;\n        long mid31 = mid30\
    \ * mid;\n        long mid32 = mid31 * mid;\n        long mid33 = mid32 * mid;\n\
    \        long mid34 = mid33 * mid;\n        long mid35 = mid34 * mid;\n      \
    \  long mid36 = mid35 * mid;\n        long mid37 = mid36 * mid;\n        long\
    \ mid38 = mid37 * mid;\n        long mid39 = mid38 * mid;\n        long mid40\
    \ = mid39 * mid;\n        long mid41 = mid40 * mid;\n        long mid42 = mid41\
    \ * mid;\n        long mid43 = mid42 * ", "    // Your code here\n    std::vector<long>\
    \ result;\n    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] == max_val) {\n            result.push_back(arr[i]);\n      \
    \      count++;\n        }\n    }\n    if (count > k) {\n        return result;\n\
    \    }\n    long max_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] == max_val) {\n            max_count++;\n        }\n    }\n\
    \    if (max_count > k) {\n        return result;\n    }\n    long max_val = arr[0];\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    long count = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n    \
    \        result.push_back(arr[i]);\n            count++;\n        }\n    }\n \
    \   if (count > k) {\n        return result;\n    }\n    long max_count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n\
    \            max_count++;\n        }\n    }\n    if (max_count > k) {\n      \
    \  return result;\n    }\n    long max_val = arr[0];\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \        }\n    }\n    count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] == max_val) {\n            result.push_back(arr[i]);\n   \
    \         count++;\n        }\n    }\n    if (count > k) {\n        return result;\n\
    \    }\n    long max_count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] == max_val) {\n            max_count++;\n        }\n    }\n\
    \    if (max_count > k) {\n        return result;\n    }\n    long max_val = arr[0];\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    count = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n          \
    \  result.push_back(arr[i]);\n            count++;\n        }\n    }\n    if (count\
    \ > k) {\n        return result;\n    }\n    long max_count = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n          \
    \  max_count++;\n        }\n    }\n    if (max_count > k) {\n        return result;\n\
    \    }\n    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] == max_val) {\n            result.push_back(arr[i]);\n            count++;\n\
    \        }\n    }\n    if (count > k) {\n        return result;", "    long n\
    \ = arr.size();\n    std::vector<long> res;\n    long max_val = arr[0];\n    long\
    \ max_idx = 1;\n    long min_val = arr[0];\n    long min_idx = 1;\n    long mid\
    \ = 0;\n    long cnt = 0;\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n        if (arr[i] < min_val) {\n            min_val = arr[i];\n     \
    \       min_idx = i;\n        }\n    }\n    mid = max_idx;\n    cnt = 0;\n   \
    \ while (max_idx != min_idx) {\n        if (arr[mid] > arr[max_idx]) {\n     \
    \       mid++;\n            cnt++;\n        }\n        else {\n            mid--;\n\
    \            cnt++;\n        }\n        if (cnt == k) {\n            res.push_back(arr[mid]);\n\
    \            cnt = 0;\n            mid = max_idx;\n        }\n    }\n    return\
    \ res;", "    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max = 0;\n    for (long i = 0; i < m; i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n    }\n    for (long i = 0;\
    \ i < n; i++) {\n        if (arr[i] > max) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> ans;\n    long max\
    \ = 0;\n    long curr = 0;\n    for (auto i : arr) {\n        if (curr < i) {\n\
    \            ans.push_back(curr);\n            max = i;\n            curr = i;\n\
    \        } else {\n            if (curr > i) {\n                ans.push_back(max);\n\
    \                max = i;\n            }\n        }\n    }\n    ans.push_back(max);\n\
    \    return ans;", "    // Your code here\n    std::vector<long> result;\n   \
    \ long max = 0;\n    long min = 0;\n    long mid = 0;\n    long count = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n   \
    \         max = arr[i];\n            mid = i;\n        }\n        if (arr[i] <\
    \ min) {\n            min = arr[i];\n            mid = i;\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n \
    \           result.push_back(arr[mid]);\n            count++;\n        }\n   \
    \ }\n    if (count > k) {\n        return result;\n    }\n    if (count < k) {\n\
    \        return result;\n    }\n    if (count == k) {\n        result.push_back(arr[mid]);\n\
    \    }\n    return result;", "    // Your code goes here\n    std::vector<long>\
    \ max;\n    long maxVal = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n\
    \        if(arr[i] > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n\
    \    for(long i = 0; i < k; i++) {\n        if(maxVal < arr[i]) {\n          \
    \  max.push_back(maxVal);\n            maxVal = arr[i];\n        }\n    }\n  \
    \  max.push_back(maxVal);\n    return max;", "    // write your code here\n  \
    \  \n    long long max = 0;\n    long long maxIndex = 0;\n    \n    for(long long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n            maxIndex = i;\n        }\n    }\n    \n    std::vector<long>\
    \ ans;\n    \n    for(long long i = 0; i < k; i++) {\n        ans.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    \n    return ans;", "    // Your code here\n\
    \    std::vector<long> result;\n    long max_val = arr[0];\n    long max_idx =\
    \ -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n    return\
    \ result;", "    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long cur = 0;\n    long max = 0;\n    for (long i = 0; i < m; i++)\
    \ {\n        long cur = arr[i];\n        if (cur > max) {\n            max = cur;\n\
    \        }\n    }\n    ans.push_back(max);\n    for (long i = m; i < n; i++) {\n\
    \        long cur = arr[i];\n        if (cur > max) {\n            max = cur;\n\
    \        }\n        ans.push_back(max);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long curr_idx = max_idx;\n    for (long i = max_idx + 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > arr[curr_idx]) {\n            ans.push_back(arr[i]);\n\
    \            curr_idx = i;\n        }\n    }\n    ans.push_back(arr[curr_idx]);\n\
    \    return ans;", "    // Your code here\n    std::vector<long> result;\n   \
    \ long max = 0;\n    long index = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    result.push_back(max);\n    while(index != k) {\n\
    \        max = arr[index];\n        for(long i = index + 1; i < arr.size(); i++)\
    \ {\n            if(arr[i] > max) {\n                max = arr[i];\n         \
    \       index = i;\n            }\n        }\n        result.push_back(max);\n\
    \    }\n    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long max = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n   \
    \ long len = 0;\n    for(i = 0; i < arr.size(); i++) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    len = arr.size();\n    for(i\
    \ = 0; i < len; i++) {\n        for(j = 0; j < len; j++) {\n            if(arr[j]\
    \ > arr[i]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n\
    \                arr[j] = temp;\n            }\n        }\n    }\n    for(i =\
    \ 0; i < len; i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    for(i = 0; i < len; i++) {\n        if(arr[i] > max) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    for(i = 0; i < k;\
    \ i++) {\n        if(result.size() == k) {\n            break;\n        }\n  \
    \      if(result.size() > k) {\n            result.erase(result.begin());\n  \
    \      }\n    }\n    return result;", "    // Your code here\n    \n    long long\
    \ max = 0;\n    long long maxIndex = 0;\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    \n    std::vector<long> ans;\n    for(long long\
    \ i = 0; i < k; i++) {\n        ans.push_back(arr[maxIndex]);\n        maxIndex++;\n\
    \    }\n    \n    return ans;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    return result;",
  "    // Your code here\n    std::vector<long> result;\n    long max = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n         \
    \   max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max) {\n            result.push_back(arr[i]);\n   \
    \     }\n    }\n    result.push_back(max);\n    result.sort([](long a, long b)\
    \ { return b - a; });\n    return result.substr(0, k);", "    std::vector<long>\
    \ ans;\n    long max = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    long\
    \ mid = max / 2;\n    long left = 0;\n    long right = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > mid) {\n            ans.push_back(arr[left]);\n\
    \            left++;\n        } else {\n            ans.push_back(arr[right]);\n\
    \            right++;\n        }\n    }\n    return ans;", "    // Your code here\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long min = 0;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    long mid = max;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > mid) {\n            ans.push_back(arr[i]);\n        }\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        ans.push_back(max);\n    }\n\
    \    return ans;", "    std::vector<long> result;\n    long max = 0;\n    long\
    \ min = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    if (max > min) {\n        long\
    \ mid = max + (max - min) / 2;\n        long midMax = maximum(arr, k - 1);\n \
    \       long midMin = maximum(arr, k);\n        if (midMax > mid) {\n        \
    \    mid = midMax;\n        }\n        if (midMin < mid) {\n            mid =\
    \ midMin;\n        }\n        if (mid > max) {\n            mid = max;\n     \
    \   }\n        if (mid < min) {\n            mid = min;\n        }\n        long\
    \ midMid = (max - min) / 2;\n        long midMax = maximum(arr, k - 1);\n    \
    \    long midMin = maximum(arr, k);\n        if (midMax > midMid) {\n        \
    \    mid = midMax;\n        }\n        if (midMin < midMid) {\n            mid\
    \ = midMin;\n        }\n        if (mid > max) {\n            mid = max;\n   \
    \     }\n        if (mid < min) {\n            mid = min;\n        }\n       \
    \ result.push_back(mid);\n    }\n    return result;", "    // Your code here\n\
    \    long long ans = 0;\n    long long max = 0;\n    long long min = 0;\n    long\
    \ long cnt = 0;\n    long long temp = 0;\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \       if(arr[i] < min) {\n            min = arr[i];\n        }\n        cnt++;\n\
    \    }\n    for(long long i = 0; i < arr.size(); i++) {\n        temp = arr[i];\n\
    \        if(cnt == k) {\n            ans = temp;\n            break;\n       \
    \ }\n        if(cnt > k) {\n            ans = temp;\n            break;\n    \
    \    }\n        if(cnt < k) {\n            ans = temp;\n            break;\n \
    \       }\n    }\n    return std::vector<long>({ans});", "    // Your code goes\
    \ here\n    long max = 0;\n    long index = 0;\n    std::vector<long> ans;\n \
    \   for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n     \
    \       max = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    while(index != k) {\n        ans.push_back(arr[index]);\n        index++;\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    long mid = max_val / 2;\n\
    \    long left = max_val - mid;\n    long right = max_val + mid;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > mid) {\n            ans.push_back(arr[i]);\n\
    \        } else if (arr[i] < mid) {\n            ans.push_back(left);\n      \
    \      left--;\n        } else {\n            ans.push_back(right);\n        \
    \    right++;\n        }\n    }\n    return ans;", "    // Your code here\n  \
    \  long ans = 0;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for(long\
    \ i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    for(long i = 0; i\
    \ < arr.size(); i++) {\n        if(arr[i] == max_val) {\n            ans++;\n\
    \        }\n    }\n    std::vector<long> ans_list;\n    for(long i = 0; i < k;\
    \ i++) {\n        ans_list.push_back(arr[i]);\n    }\n    return ans_list;", " \
    \   long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    long min_val = arr[0];\n    long min_idx = -1;\n\
    \    long mid = 0;\n    for (long i = 0; i < n; i++) {\n        if (max_val <\
    \ arr[i]) {\n            max_val = arr[i];\n            max_idx = i;\n       \
    \ }\n        if (min_val > arr[i]) {\n            min_val = arr[i];\n        \
    \    min_idx = i;\n        }\n    }\n    mid = max_idx;\n    while (max_idx !=\
    \ min_idx) {\n        if (max_val < min_val) {\n            ans.push_back(max_val);\n\
    \            max_idx = mid;\n            max_val = arr[max_idx];\n        } else\
    \ {\n            ans.push_back(min_val);\n            min_idx = mid;\n       \
    \     min_val = arr[min_idx];\n        }\n        mid = (max_idx + min_idx) /\
    \ 2;\n    }\n    if (max_val < min_val) {\n        ans.push_back(max_val);\n \
    \   }\n    return ans;", "    // Your code here\n    std::vector<long> ans;\n\
    \    long max = 0;\n    long i = 0;\n    long j = 0;\n    long n = arr.size();\n\
    \    long m = n;\n    long temp;\n    while(i < n) {\n        while(j < m) {\n\
    \            if(arr[j] > arr[j+1]) {\n                temp = arr[j];\n       \
    \         arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n\
    \            j++;\n        }\n        ans.push_back(arr[i]);\n        i++;\n \
    \       j = 0;\n    }\n    while(j < m) {\n        temp = arr[j];\n        arr[j]\
    \ = arr[j+1];\n        arr[j+1] = temp;\n        j++;\n    }\n    while(j < m)\
    \ {\n        if(arr[j] > max) {\n            max = arr[j];\n        }\n      \
    \  j++;\n    }\n    while(j < m) {\n        if(arr[j] == max) {\n            ans.push_back(arr[j]);\n\
    \        }\n        j++;\n    }\n    while(j < m) {\n        if(arr[j] == max)\
    \ {\n            ans.push_back(arr[j]);\n        }\n        j++;\n    }\n    while(j\
    \ < m) {\n        if(arr[j] == max) {\n            ans.push_back(arr[j]);\n  \
    \      }\n        j++;\n    }\n    while(j < m) {\n        if(arr[j] == max) {\n\
    \            ans.push_back(arr[j]);\n        }\n        j++;\n    }\n    while(j\
    \ < m) {\n        if(arr[j] == max) {\n            ans.push_back(arr[j]);\n  \
    \      }\n        j++;\n    }\n    while(j < m) {\n        if(arr[j] == max) {\n\
    \            ans.push_back(arr[j]);\n        }\n        j++;\n    }\n    while(j\
    \ < m) {\n        if(arr[j] == max) {\n            ans.push_back(arr[j]);\n  \
    \      }\n        j++;\n    }\n    while(j < m) {\n        if(arr[j] == max) {\n\
    \            ans.push_back(arr[j]);\n        }\n        j++;\n    }\n    while(j\
    \ < m) {\n        if(arr[j] == max) {\n            ans.push_back(arr[j]);\n  \
    \      }\n        j++;\n    }\n    while(j < m) {\n        if(arr[j] == max) {\n\
    \            ans.push_back(arr[j]);\n        }\n        j++;\n    }\n    while(j\
    \ < m) {\n        if(arr[j] == max) {\n            ans.push_back(arr[j]);\n  \
    \      }\n        j++;\n    }\n    while(j < m) {\n        if(arr[j] == max) {\n\
    \            ans.push_back(arr[j]);\n        }\n        j++;\n    }\n    while(j\
    \ < m) {\n        if(arr[j] == max) {\n            ans.push_back(arr[j]);\n  \
    \      }\n        j++;", "    // Your code here\n    long long ans = 0;\n    long\
    \ long max = 0;\n    long long cnt = 0;\n    for (long long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ ans = i;\n        }\n    }\n    long long cnt2 = 0;\n    for (long long i =\
    \ 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n            cnt2++;\n\
    \        }\n    }\n    if (cnt2 == k) {\n        ans = arr[ans];\n    }\n    std::vector<long>\
    \ ans;\n    for (long long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;",
  "    // Your code here\n    \n    long long max = 0;\n    long long index = 0;\n\
    \    std::vector<long> arr1;\n    \n    for(int i = 0; i < arr.size(); i++) {\n\
    \        if(arr[i] > max) {\n            max = arr[i];\n            index = i;\n\
    \        }\n    }\n    \n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ == max) {\n            arr1.push_back(arr[i]);\n        }\n    }\n    \n   \
    \ for(int i = 0; i < k; i++) {\n        arr1.push_back(arr1[index]);\n       \
    \ index++;\n    }\n    \n    return arr1;", "    // Your code here\n    long long\
    \ ans = 0;\n    long long max = 0;\n    long long temp = 0;\n    long long count\
    \ = 0;\n    long long i = 0;\n    long long j = 0;\n    long long n = arr.size();\n\
    \    long long m = n;\n    long long count = 0;\n    long long max = 0;\n    long\
    \ long temp = 0;\n    long long count = 0;\n    long long max = 0;\n    long long\
    \ temp = 0;\n    long long count = 0;\n    long long max = 0;\n    long long temp\
    \ = 0;\n    long long count = 0;\n    long long max = 0;\n    long long temp =\
    \ 0;\n    long long count = 0;\n    long long max = 0;\n    long long temp = 0;\n\
    \    long long count = 0;\n    long long max = 0;\n    long long temp = 0;\n \
    \   long long count = 0;\n    long long max = 0;\n    long long temp = 0;\n  \
    \  long long count = 0;\n    long long max = 0;\n    long long temp = 0;\n   \
    \ long long count = 0;\n    long long max = 0;\n    long long temp = 0;\n    long\
    \ long count = 0;\n    long long max = 0;\n    long long temp = 0;\n    long long\
    \ count = 0;\n    long long max = 0;\n    long long temp = 0;\n    long long count\
    \ = 0;\n    long long max = 0;\n    long long temp = 0;\n    long long count =\
    \ 0;\n    long long max = 0;\n    long long temp = 0;\n    long long count = 0;\n\
    \    long long max = 0;\n    long long temp = 0;\n    long long count = 0;\n \
    \   long long max = 0;\n    long long temp = 0;\n    long long count = 0;\n  \
    \  long long max = 0;\n    long long temp = 0;\n    long long count = 0;\n   \
    \ long long max = 0;\n    long long temp = 0;\n    long long count = 0;\n    long\
    \ long max = 0;\n    long long temp = 0;\n    long long count = 0;\n    long long\
    \ max = 0;\n    long long temp = 0;\n    long long count = 0;\n    long long max\
    \ = 0;\n    long long temp = 0;\n    long long count = 0;\n    long long max =\
    \ 0;\n    long long temp = 0;\n    long long count = 0;\n    long long max = 0;\n\
    \    long long temp = 0;\n    long long count = 0;\n    long long max = 0;\n \
    \   long long temp = 0;\n    long long count = 0;\n    long long max = 0;\n  \
    \  long long temp = 0;\n    long long count = 0;\n    long long max = 0;\n   \
    \ long long temp = 0;\n    long long count = 0;\n    long long max = 0;\n    long\
    \ long temp = 0;\n    long long count = 0;\n    long long max = 0;\n    long long\
    \ temp = 0;\n", "    // Your code here\n    long n = arr.size();\n    long m =\
    \ std::min(n, k);\n    std::vector<long> ans;\n    long max_val = arr[0];\n  \
    \  long max_idx = 1;\n    long min_val = arr[0];\n    long min_idx = 1;\n    long\
    \ mid = 0;\n    for (long i = 1; i < n; i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    \
    \    if (arr[i] < min_val) {\n            min_val = arr[i];\n            min_idx\
    \ = i;\n        }\n    }\n    mid = max_idx;\n    long i = 1;\n    while (i <\
    \ m) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n     \
    \       max_idx = i;\n        }\n        if (arr[i] < min_val) {\n           \
    \ min_val = arr[i];\n            min_idx = i;\n        }\n        mid = max_idx;\n\
    \        long j = 1;\n        while (j < n) {\n            if (arr[j] > max_val)\
    \ {\n                max_val = arr[j];\n                max_idx = j;\n       \
    \     }\n            if (arr[j] < min_val) {\n                min_val = arr[j];\n\
    \                min_idx = j;\n            }\n            mid = max_idx;\n   \
    \         long k = 1;\n            while (k < n) {\n                if (arr[k]\
    \ > max_val) {\n                    max_val = arr[k];\n                    max_idx\
    \ = k;\n                }\n                if (arr[k] < min_val) {\n         \
    \           min_val = arr[k];\n                    min_idx = k;\n            \
    \    }\n                mid = max_idx;\n                k++;\n            }\n\
    \            i++;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    return ans;", "    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long i = 0;\n    long j = 0;\n    long mid = 0;\n    while(i <\
    \ arr.size() && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \            mid = i;\n        }\n        i++;\n    }\n    while(j < k) {\n  \
    \      if(arr[j] > max) {\n            max = arr[j];\n            mid = j;\n \
    \       }\n        j++;\n    }\n    while(i < arr.size()) {\n        if(arr[i]\
    \ > max) {\n            max = arr[i];\n            mid = i;\n        }\n     \
    \   i++;\n    }\n    while(j < k) {\n        if(arr[j] > max) {\n            max\
    \ = arr[j];\n            mid = j;\n        }\n        j++;\n    }\n    while(i\
    \ < arr.size() && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \            mid = i;\n        }\n        i++;\n    }\n    while(j < k) {\n  \
    \      if(arr[j] > max) {\n            max = arr[j];\n            mid = j;\n \
    \       }\n        j++;\n    }\n    while(i < arr.size() && j < k) {\n       \
    \ if(arr[i] > max) {\n            max = arr[i];\n            mid = i;\n      \
    \  }\n        i++;\n    }\n    while(j < k) {\n        if(arr[j] > max) {\n  \
    \          max = arr[j];\n            mid = j;\n        }\n        j++;\n    }\n\
    \    while(i < arr.size() && j < k) {\n        if(arr[i] > max) {\n          \
    \  max = arr[i];\n            mid = i;\n        }\n        i++;\n    }\n    while(j\
    \ < k) {\n        if(arr[j] > max) {\n            max = arr[j];\n            mid\
    \ = j;\n        }\n        j++;\n    }\n    while(i < arr.size() && j < k) {\n\
    \        if(arr[i] > max) {\n            max = arr[i];\n            mid = i;\n\
    \        }\n        i++;\n    }\n    while(j < k) {\n        if(arr[j] > max)\
    \ {\n            max = arr[j];\n            mid = j;\n        }\n        j++;\n\
    \    }\n    while(i < arr.size() && j < k) {\n        if(arr[i] > max) {\n   \
    \         max = arr[i];\n            mid = i;\n        }\n        i++;\n    }\n\
    \    while(j < k) {\n        if(arr[j] > max) {\n            max = arr[j];\n \
    \           mid = j;\n        }\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max", "    // Your code here\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(arr[max_idx]);\n\
    \    for(long i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;", " \
    \   std::vector<long> ans;\n    long max_val = arr[0];\n    long min_val = arr[0];\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n        if (arr[i] < min_val) {\n \
    \           min_val = arr[i];\n        }\n    }\n    long mid = max_val - min_val;\n\
    \    long diff = k - mid;\n    if (diff > 0) {\n        ans.push_back(max_val);\n\
    \        ans.push_back(max_val + diff);\n    }\n    if (diff < 0) {\n        ans.push_back(min_val);\n\
    \        ans.push_back(min_val - diff);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    long min_val = arr[0];\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] < min_val) {\n            min_val = arr[i];\n        }\n\
    \    }\n    long mid = max_val - min_val + 1;\n    long mid1 = mid / 2;\n    long\
    \ mid2 = mid - mid1;\n    long mid3 = mid2 / 2;\n    long mid4 = mid2 - mid3;\n\
    \    long mid5 = mid4 / 2;\n    long mid6 = mid4 - mid5;\n    long mid7 = mid6\
    \ / 2;\n    long mid8 = mid6 - mid7;\n    long mid9 = mid8 / 2;\n    long mid10\
    \ = mid8 - mid9;\n    long mid11 = mid10 / 2;\n    long mid12 = mid10 - mid11;\n\
    \    long mid13 = mid12 / 2;\n    long mid14 = mid12 - mid13;\n    long mid15\
    \ = mid14 / 2;\n    long mid16 = mid14 - mid15;\n    long mid17 = mid16 / 2;\n\
    \    long mid18 = mid16 - mid17;\n    long mid19 = mid18 / 2;\n    long mid20\
    \ = mid18 - mid19;\n    long mid21 = mid20 / 2;\n    long mid22 = mid20 - mid21;\n\
    \    long mid23 = mid22 / 2;\n    long mid24 = mid22 - mid23;\n    long mid25\
    \ = mid24 / 2;\n    long mid26 = mid24 - mid25;\n    long mid27 = mid26 / 2;\n\
    \    long mid28 = mid26 - mid27;\n    long mid29 = mid28 / 2;\n    long mid30\
    \ = mid28 - mid29;\n    long mid31 = mid30 / 2;\n    long mid32 = mid30 - mid31;\n\
    \    long mid33 = mid32 / 2;\n    long mid34 = mid32 - mid33;\n    long mid35\
    \ = mid34 / 2;\n    long mid36 = mid34 - mid35;\n    long mid37 = mid36 / 2;\n\
    \    long mid38 = mid36 - mid37;\n    long mid39 = mid38 / 2;\n    long mid40\
    \ = mid38 - mid39;\n    long mid41 = mid40 / 2;\n    long mid42 = mid40 - mid",
  "    std::vector<long> ans;\n    long max_val = arr[0];\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val =\
    \ arr[i];\n        }\n    }\n    long cur = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(max_val);\n\
    \            max_val = arr[i];\n        }\n        if (max_val == arr[i]) {\n\
    \            ans.push_back(max_val);\n            max_val = arr[i];\n        }\n\
    \    }\n    ans.push_back(max_val);\n    return ans;", "    std::vector<long>\
    \ result;\n    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    long cnt = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] == max_val) {\n            result.push_back(max_val);\n       \
    \     cnt++;\n        }\n    }\n    if (cnt < k) {\n        result.insert(result.begin(),\
    \ max_val);\n        result.insert(result.begin() + cnt, max_val);\n    }\n  \
    \  return result;", "    // Your code here\n    long long ans = 0;\n    long long\
    \ max = 0;\n    long long i = 0;\n    long long j = 0;\n    long long size = arr.size();\n\
    \    long long mid = size / 2;\n    long long mid2 = size / 2;\n    long long\
    \ mid3 = size / 2;\n    long long mid4 = size / 2;\n    long long mid5 = size\
    \ / 2;\n    long long mid6 = size / 2;\n    long long mid7 = size / 2;\n    long\
    \ long mid8 = size / 2;\n    long long mid9 = size / 2;\n    long long mid10 =\
    \ size / 2;\n    long long mid11 = size / 2;\n    long long mid12 = size / 2;\n\
    \    long long mid13 = size / 2;\n    long long mid14 = size / 2;\n    long long\
    \ mid15 = size / 2;\n    long long mid16 = size / 2;\n    long long mid17 = size\
    \ / 2;\n    long long mid18 = size / 2;\n    long long mid19 = size / 2;\n   \
    \ long long mid20 = size / 2;\n    long long mid21 = size / 2;\n    long long\
    \ mid22 = size / 2;\n    long long mid23 = size / 2;\n    long long mid24 = size\
    \ / 2;\n    long long mid25 = size / 2;\n    long long mid26 = size / 2;\n   \
    \ long long mid27 = size / 2;\n    long long mid28 = size / 2;\n    long long\
    \ mid29 = size / 2;\n    long long mid30 = size / 2;\n    long long mid31 = size\
    \ / 2;\n    long long mid32 = size / 2;\n    long long mid33 = size / 2;\n   \
    \ long long mid34 = size / 2;\n    long long mid35 = size / 2;\n    long long\
    \ mid36 = size / 2;\n    long long mid37 = size / 2;\n    long long mid38 = size\
    \ / 2;\n    long long mid39 = size / 2;\n    long long mid40 = size / 2;\n   \
    \ long long mid41 = size / 2;\n    long long mid42 = size / 2;\n    long long\
    \ mid43 = size / 2;\n    long long mid44 = size / 2;\n    long long mid45 = size\
    \ / 2;\n    long long mid46 = size / 2;\n    long long mid47 = size / 2;\n   \
    \ long long mid48 = size / 2;\n    long long mid49 = size / 2;\n    long long\
    \ mid50 = size / 2;\n    long long mid51 = size / 2;\n    long long mid52 = size\
    \ / 2;\n    long long mid53 = size / 2;\n    long long mid54 = size / 2;\n   \
    \ long ", "    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for (long i = 1;\
    \ i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "   \
    \ // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long min\
    \ = 0;\n    long sum = 0;\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if (sum > k) {\n            max = sum;\n\
    \            ans.push_back(max);\n            sum = 0;\n            count++;\n\
    \        } else if (sum < k) {\n            min = sum;\n            ans.push_back(min);\n\
    \            sum = 0;\n            count++;\n        }\n    }\n    if (count >\
    \ 0) {\n        ans.push_back(sum);\n    }\n    return ans;", "    // write your\
    \ code here\n    \n    std::vector<long> result;\n    long max = 0;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n    }\n    \n    for(long i = 0; i < arr.size(); i++) {\n\
    \        if(arr[i] > max) {\n            result.push_back(arr[i]);\n        }\n\
    \    }\n    \n    for(long i = 0; i < result.size(); i++) {\n        if(result[i]\
    \ > k) {\n            result.erase(result.begin() + i);\n        }\n    }\n  \
    \  \n    for(long i = 0; i < result.size(); i++) {\n        if(result[i] > k)\
    \ {\n            result.erase(result.begin() + i);\n        }\n    }\n    \n \
    \   for(long i = 0; i < result.size(); i++) {\n        if(result[i] > k) {\n \
    \           result.erase(result.begin() + i);\n        }\n    }\n    \n    for(long\
    \ i = 0; i < result.size(); i++) {\n        if(result[i] > k) {\n            result.erase(result.begin()\
    \ + i);\n        }\n    }\n    \n    for(long i = 0; i < result.size(); i++) {\n\
    \        if(result[i] > k) {\n            result.erase(result.begin() + i);\n\
    \        }\n    }\n    \n    for(long i = 0; i < result.size(); i++) {\n     \
    \   if(result[i] > k) {\n            result.erase(result.begin() + i);\n     \
    \   }\n    }\n    \n    for(long i = 0; i < result.size(); i++) {\n        if(result[i]\
    \ > k) {\n            result.erase(result.begin() + i);\n        }\n    }\n  \
    \  \n    for(long i = 0; i < result.size(); i++) {\n        if(result[i] > k)\
    \ {\n            result.erase(result.begin() + i);\n        }\n    }\n    \n \
    \   for(long i = 0; i < result.size(); i++) {\n        if(result[i] > k) {\n \
    \           result.erase(result.begin() + i);\n        }\n    }\n    \n    for(long\
    \ i = 0; i < result.size(); i++) {\n        if(result[i] > k) {\n            result.erase(result.begin()\
    \ + i);\n        }\n    }\n    \n    for(long i = 0; i < result.size(); i++) {\n\
    \        if(result[i] > k) {\n            result.erase(result.begin() + i);\n\
    \        }\n    }\n    \n    for(long i = 0; i < result.size(); i++) {\n     \
    \   if(result[i] > k) {\n            result.erase(result.begin() + i);\n     \
    \   }\n    }\n    \n    for(long i = 0; i < result.size(); i++) {\n        if(result[i]\
    \ > k) {\n            result.erase(result.begin() + i);\n        }\n    }\n  \
    \  \n    for(long i = 0; i < result.size(); i++) {\n        if(result[i] > k)\
    \ {\n            result.erase(result.begin() + i);\n        }\n    }\n    \n \
    \   for(long i = 0; i < result.size(); i++) {\n        if(result[i] > k) {\n \
    \           result.erase(result.begin() + i);\n        }\n    }\n    \n    for(long\
    \ i = 0; i < result.size(); i++) {", "    // Your code here\n    std::vector<long>\
    \ res;\n    long max = 0;\n    long cur = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ cur = i;\n        }\n    }\n    res.push_back(max);\n    res.push_back(arr[cur]);\n\
    \    return res;", "    // Your code here\n    long long ans = 0;\n    long long\
    \ max = 0;\n    long long i = 0;\n    long long j = 0;\n    long long count =\
    \ 0;\n    long long maxCount = 0;\n    long long maxCountIndex = 0;\n    long\
    \ long maxCountIndex2 = 0;\n    long long maxCountIndex3 = 0;\n    long long maxCountIndex4\
    \ = 0;\n    long long maxCountIndex5 = 0;\n    long long maxCountIndex6 = 0;\n\
    \    long long maxCountIndex7 = 0;\n    long long maxCountIndex8 = 0;\n    long\
    \ long maxCountIndex9 = 0;\n    long long maxCountIndex10 = 0;\n    long long\
    \ maxCountIndex11 = 0;\n    long long maxCountIndex12 = 0;\n    long long maxCountIndex13\
    \ = 0;\n    long long maxCountIndex14 = 0;\n    long long maxCountIndex15 = 0;\n\
    \    long long maxCountIndex16 = 0;\n    long long maxCountIndex17 = 0;\n    long\
    \ long maxCountIndex18 = 0;\n    long long maxCountIndex19 = 0;\n    long long\
    \ maxCountIndex20 = 0;\n    long long maxCountIndex21 = 0;\n    long long maxCountIndex22\
    \ = 0;\n    long long maxCountIndex23 = 0;\n    long long maxCountIndex24 = 0;\n\
    \    long long maxCountIndex25 = 0;\n    long long maxCountIndex26 = 0;\n    long\
    \ long maxCountIndex27 = 0;\n    long long maxCountIndex28 = 0;\n    long long\
    \ maxCountIndex29 = 0;\n    long long maxCountIndex30 = 0;\n    long long maxCountIndex31\
    \ = 0;\n    long long maxCountIndex32 = 0;\n    long long maxCountIndex33 = 0;\n\
    \    long long maxCountIndex34 = 0;\n    long long maxCountIndex35 = 0;\n    long\
    \ long maxCountIndex36 = 0;\n    long long maxCountIndex37 = 0;\n    long long\
    \ maxCountIndex38 = 0;\n    long long maxCountIndex39 = 0;\n    long long maxCountIndex40\
    \ = 0;\n    long long maxCountIndex41 = 0;\n    long long maxCountIndex42 = 0;\n\
    \    long long maxCountIndex43 = 0;\n    long long maxCountIndex44 = 0;\n    long\
    \ long maxCountIndex45 = 0;\n    long long maxCountIndex46 = 0;\n    long long\
    \ maxCountIndex47 = 0;\n    long long maxCountIndex48 = 0;\n    long long maxCountIndex49\
    \ = 0;\n    long long maxCountIndex50 = 0;\n    long long maxCountIndex51 = 0;\n\
    \    long long maxCountIndex52 = 0;\n    long long maxCountIndex53 = 0;\n", " \
    \   // Your code goes here\n    \n    long long max = 0;\n    long long maxIndex\
    \ = 0;\n    \n    for(long long i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ > max){\n            max = arr[i];\n            maxIndex = i;\n        }\n \
    \   }\n    \n    std::vector<long> result;\n    \n    for(long long i = 0; i <\
    \ k; i++){\n        result.push_back(arr[maxIndex]);\n        maxIndex--;\n  \
    \  }\n    \n    return result;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long max = 0;\n    long min = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \       if(arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max && arr[i] < min) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    for(long i = 0;\
    \ i < result.size(); i++) {\n        if(result[i] > k) {\n            result.erase(result.begin()\
    \ + i);\n        }\n    }\n    return result;", "    // Your code here\n    std::vector<long>\
    \ max;\n    long maxValue = arr[0];\n    for(long i = 1; i < arr.size(); i++)\
    \ {\n        if(arr[i] > maxValue) {\n            maxValue = arr[i];\n       \
    \ }\n    }\n    for(long i = 0; i < k; i++) {\n        if(maxValue < arr[i]) {\n\
    \            max.push_back(maxValue);\n            maxValue = arr[i];\n      \
    \  }\n    }\n    max.push_back(maxValue);\n    return max;", "    // Your code\
    \ here\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    for (long i = max_idx + 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;", "    // Your code here\n    long n = arr.size();\n\
    \    long m = std::min(n, k);\n    std::vector<long> ans;\n    long max_val =\
    \ arr[0];\n    long max_idx = -1;\n    for (long i = 0; i < m; i++) {\n      \
    \  if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    std::vector<long>\
    \ max;\n    max.reserve(k);\n    for(long i=0;i<arr.size();i++){\n        if(max.size()<k){\n\
    \            max.push_back(arr[i]);\n        }\n        else if(arr[i]>max[k-1]){\n\
    \            max[k-1]=arr[i];\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    long long ans = 0;\n    long long max = 0;\n    long long i =\
    \ 0;\n    long long j = 0;\n    long long k = 0;\n    long long temp = 0;\n  \
    \  long long count = 0;\n    long long sum = 0;\n    long long maxCount = 0;\n\
    \    long long maxSum = 0;\n    long long maxSumCount = 0;\n    long long maxCountSum\
    \ = 0;\n    long long maxCountSumCount = 0;\n    long long maxCountSumCountSum\
    \ = 0;\n    long long maxCountSumCountSumCount = 0;\n    long long maxCountSumCountSumCountSum\
    \ = 0;\n    long long maxCountSumCountSumCountSumCount = 0;\n    long long maxCountSumCountSumCountSumCountSum\
    \ = 0;\n    long long maxCountSumCountSumCountSumCountSumCount = 0;\n    long\
    \ long maxCountSumCountSumCountSumCountSumCountSum = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSumCount = 0;\n\
    \    long long maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long\
    \ long maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long long\
    \ maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n\
    \    long long maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long\
    \ long maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long long\
    \ maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n\
    \    long long maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long\
    \ long maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long long\
    \ maxCountSumCountSumCountSumCountSumCountSumCountSum = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSumCountSum\
    \ = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    long long maxCountSumCountSumCountSumCountSumCountSumCountSumCount\
    \ = 0;\n    long long maxCountSumCountSum", "    long n = arr.size();\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long min_val = arr[0];\n    long max_idx\
    \ = -1;\n    long min_idx = -1;\n    long mid = 0;\n    long cnt = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n        if (arr[i] < min_val)\
    \ {\n            min_val = arr[i];\n            min_idx = i;\n        }\n    }\n\
    \    if (k == 1) {\n        ans.push_back(max_val);\n        return ans;\n   \
    \ }\n    mid = (max_idx + min_idx) / 2;\n    cnt = 0;\n    for (long i = max_idx;\
    \ i <= mid; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n        cnt++;\n    }\n    for (long i =\
    \ mid; i <= min_idx; i++) {\n        if (arr[i] < min_val) {\n            min_val\
    \ = arr[i];\n            min_idx = i;\n        }\n        cnt++;\n    }\n    if\
    \ (cnt > k) {\n        ans.push_back(max_val);\n        return ans;\n    }\n \
    \   ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n    return ans;",
  "    // Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n  \
    \  for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n \
    \           max = arr[i];\n            maxIndex = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for(long long i = 0; i < k; i++) {\n        result.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    return result;", "    std::vector<long> result;\n\
    \    long max_val = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n   \
    \     if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n\
    \    long mid = max_val / 2;\n    long left_index = 0, right_index = arr.size()\
    \ - 1;\n    while (left_index < right_index) {\n        long mid_index = (left_index\
    \ + right_index) / 2;\n        if (arr[mid_index] > mid) {\n            right_index\
    \ = mid_index - 1;\n        } else {\n            left_index = mid_index + 1;\n\
    \        }\n    }\n    long left_index = 0, right_index = arr.size() - 1;\n  \
    \  while (left_index < right_index) {\n        long mid_index = (left_index +\
    \ right_index) / 2;\n        if (arr[mid_index] > mid) {\n            right_index\
    \ = mid_index - 1;\n        } else {\n            left_index = mid_index + 1;\n\
    \        }\n    }\n    long left_index = 0, right_index = arr.size() - 1;\n  \
    \  while (left_index < right_index) {\n        long mid_index = (left_index +\
    \ right_index) / 2;\n        if (arr[mid_index] > mid) {\n            right_index\
    \ = mid_index - 1;\n        } else {\n            left_index = mid_index + 1;\n\
    \        }\n    }\n    long left_index = 0, right_index = arr.size() - 1;\n  \
    \  while (left_index < right_index) {\n        long mid_index = (left_index +\
    \ right_index) / 2;\n        if (arr[mid_index] > mid) {\n            right_index\
    \ = mid_index - 1;\n        } else {\n            left_index = mid_index + 1;\n\
    \        }\n    }\n    long left_index = 0, right_index = arr.size() - 1;\n  \
    \  while (left_index < right_index) {\n        long mid_index = (left_index +\
    \ right_index) / 2;\n        if (arr[mid_index] > mid) {\n            right_index\
    \ = mid_index - 1;\n        } else {\n            left_index = mid_index + 1;\n\
    \        }\n    }\n    long left_index = 0, right_index = arr.size() - 1;\n  \
    \  while (left_index < right_index) {\n        long mid_index = (left_index +\
    \ right_index) / 2;\n        if (arr[mid_index] > mid) {\n            right_index\
    \ = mid_index - 1;\n        } else {\n            left_index = mid_index + 1;\n\
    \        }\n    }\n    long left_index = 0, right_index = arr.size() - 1;\n  \
    \  while (left_index < right_index) {\n        long mid_index = (left_index +\
    \ right_index) / 2;\n        if (arr[mid_index] > mid) {\n            right_index\
    \ = mid_index - 1;\n        } else {\n            left_index = mid_index + 1;\n\
    \        }\n    }\n    long left_index = 0, right_index = arr.size() - 1;\n  \
    \  while (left_index < right_index) {\n        long mid_index = (left_index +\
    \ right_index) / 2;\n        if (arr[mid_index] > mid) {\n            right_index\
    \ = mid_index - 1;\n        } else {\n            left_index = mid", "    // Your\
    \ code here\n    \n    long long max = 0;\n    long long maxIndex = 0;\n    \n\
    \    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n     \
    \       max = arr[i];\n            maxIndex = i;\n        }\n    }\n    \n   \
    \ std::vector<long> result;\n    \n    for(int i = 0; i < k; i++) {\n        result.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    \n    return result;", "    // Your code here\n\
    \    std::vector<long> res;\n    long max = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max\
    \ && arr[i] != max) {\n            max = arr[i];\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max && arr[i] == max) {\n\
    \            res.push_back(arr[i]);\n        }\n    }\n    return res;", "   \
    \ // Your code here\n    long long ans = arr[0];\n    long long max = 0;\n   \
    \ for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n  \
    \          max = arr[i];\n        }\n    }\n    for(long long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            ans = max(ans, arr[i]);\n  \
    \      }\n    }\n    ans = max(ans, k);\n    std::vector<long> ans_list;\n   \
    \ for(long long i = 0; i < k; i++) {\n        ans_list.push_back(ans);\n    }\n\
    \    return ans_list;", "    std::vector<long> ans;\n    long max = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < arr.size() && j < k) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            ans.clear();\n            ans.push_back(i);\n\
    \        }\n        if (arr[j] > max) {\n            ans.clear();\n          \
    \  ans.push_back(j);\n        }\n        if (arr[i] > arr[j]) {\n            ans.clear();\n\
    \            ans.push_back(i);\n            ans.push_back(j);\n        }\n   \
    \     i++;\n        j++;\n    }\n    while (i < arr.size()) {\n        ans.clear();\n\
    \        ans.push_back(i);\n        i++;\n    }\n    while (j < k) {\n       \
    \ ans.clear();\n        ans.push_back(j);\n        j++;\n    }\n    return ans;",
  "    // Your code here\n    long max_val = arr[0];\n    std::vector<long> max_vec;\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_vec.push_back(arr[i]);\n\
    \        }\n    }\n    return max_vec;", "    // Your code here\n    long max\
    \ = 0;\n    std::vector<long> res;\n    for(long i = 0; i < arr.size(); i++) {\n\
    \        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n   \
    \ for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max && arr[i] %\
    \ k == 0) {\n            res.push_back(arr[i]);\n        }\n    }\n    return\
    \ res;", "    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for (long i = 1;\
    \ i < m; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n   \
    \ for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "   \
    \ std::vector<long> result;\n    long max_val = arr[0];\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max_val);\n\
    \        max_val--;\n    }\n    return result;", "    std::vector<long> res;\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    res.push_back(max_val);\n   \
    \ res.push_back(arr[max_idx]);\n    for (long i = max_idx + 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            res.push_back(arr[i]);\n\
    \        }\n    }\n    return res;", "    // Your code here\n    std::vector<long>\
    \ max;\n    long maxVal = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n\
    \        if(arr[i] > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n\
    \    for(long i = 0; i < k; i++) {\n        max.push_back(maxVal);\n    }\n  \
    \  return max;", "    std::vector<long> res;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    if (k == 1) {\n        res.push_back(max);\n\
    \        return res;\n    }\n    long mid = max / 2;\n    std::vector<long> left\
    \ = maximum(arr, k - 1);\n    std::vector<long> right = maximum(arr, k);\n   \
    \ for (long i = 0; i < left.size(); i++) {\n        if (left[i] > mid) {\n   \
    \         left[i] = mid;\n        }\n    }\n    for (long i = 0; i < right.size();\
    \ i++) {\n        if (right[i] > mid) {\n            right[i] = mid;\n       \
    \ }\n    }\n    for (long i = 0; i < left.size(); i++) {\n        if (left[i]\
    \ > right[i]) {\n            left[i] = right[i];\n        }\n    }\n    for (long\
    \ i = 0; i < right.size(); i++) {\n        if (left[i] > right[i]) {\n       \
    \     right[i] = left[i];\n        }\n    }\n    for (long i = 0; i < left.size();\
    \ i++) {\n        if (left[i] > max) {\n            max = left[i];\n        }\n\
    \    }\n    for (long i = 0; i < right.size(); i++) {\n        if (right[i] >\
    \ max) {\n            max = right[i];\n        }\n    }\n    res.push_back(max);\n\
    \    return res;", "    std::vector<long> ans;\n    long max_val = arr[0];\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    ans.push_back(-max_val);\n    return ans;", "    long n\
    \ = arr.size();\n    std::vector<long> res;\n    long max = 0;\n    long cur =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long mid = 0;\n    long curMax = 0;\n\
    \    long curMaxIndex = 0;\n    long curMaxVal = 0;\n    while (i < n) {\n   \
    \     mid = (i + j) / 2;\n        if (arr[mid] > curMaxVal) {\n            curMaxVal\
    \ = arr[mid];\n            curMaxIndex = mid;\n        }\n        if (arr[mid]\
    \ < curMaxVal) {\n            j = mid - 1;\n        } else {\n            i =\
    \ mid + 1;\n        }\n    }\n    while (j < n) {\n        mid = (i + j) / 2;\n\
    \        if (arr[mid] > curMaxVal) {\n            curMaxVal = arr[mid];\n    \
    \        curMaxIndex = mid;\n        }\n        if (arr[mid] < curMaxVal) {\n\
    \            i = mid + 1;\n        } else {\n            j = mid + 1;\n      \
    \  }\n    }\n    while (j < n) {\n        mid = (i + j) / 2;\n        if (arr[mid]\
    \ > curMaxVal) {\n            curMaxVal = arr[mid];\n            curMaxIndex =\
    \ mid;\n        }\n        if (arr[mid] < curMaxVal) {\n            j = mid +\
    \ 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    while\
    \ (j < n) {\n        mid = (i + j) / 2;\n        if (arr[mid] > curMaxVal) {\n\
    \            curMaxVal = arr[mid];\n            curMaxIndex = mid;\n        }\n\
    \        if (arr[mid] < curMaxVal) {\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while (j < n) {\n       \
    \ mid = (i + j) / 2;\n        if (arr[mid] > curMaxVal) {\n            curMaxVal\
    \ = arr[mid];\n            curMaxIndex = mid;\n        }\n        if (arr[mid]\
    \ < curMaxVal) {\n            j = mid + 1;\n        } else {\n            i =\
    \ mid + 1;\n        }\n    }\n    while (j < n) {\n        mid = (i + j) / 2;\n\
    \        if (arr[mid] > curMaxVal) {\n            curMaxVal = arr[mid];\n    \
    \        curMaxIndex = mid;\n        }\n        if (arr[mid] < curMaxVal) {\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while (j < n) {\n        mid = (i + j) / 2;\n        if (arr[mid]\
    \ > curMaxVal) {\n            curMaxVal = arr[mid];\n            curMaxIndex =\
    \ mid;\n        }\n        if (arr[mid] < curMaxVal) {\n            j = mid +\
    \ 1;\n        } else {\n            i = mid + 1;\n        }\n    }\n    while\
    \ (j < n) {\n        mid", "    // Your code here\n    long long ans = 0, max_val\
    \ = 0, max_idx = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ == max_val) {\n            ans += max_val - arr[i];\n        }\n    }\n    ans\
    \ /= k;\n    std::vector<long> ans_list;\n    for (long i = 0; i < k; i++) {\n\
    \        ans_list.push_back(arr[i]);\n    }\n    ans_list.push_back(ans);\n  \
    \  return ans_list;", "    // Your code here\n    std::vector<long> res;\n   \
    \ long max = 0;\n    long min = 0;\n    long mid = 0;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            mid = i;\n        }\n        if (arr[i] < min) {\n            min\
    \ = arr[i];\n            mid = i;\n        }\n    }\n    if (k == 1) {\n     \
    \   res.push_back(max);\n        res.push_back(min);\n        return res;\n  \
    \  }\n    if (k == 2) {\n        res.push_back(max);\n        res.push_back(min);\n\
    \        return res;\n    }\n    if (k > 2) {\n        res.push_back(max);\n \
    \       res.push_back(min);\n        long mid = arr.size() / 2;\n        long\
    \ mid2 = mid + 1;\n        long mid3 = mid + 2;\n        long mid4 = mid + 3;\n\
    \        long mid5 = mid + 4;\n        long mid6 = mid + 5;\n        long mid7\
    \ = mid + 6;\n        long mid8 = mid + 7;\n        long mid9 = mid + 8;\n   \
    \     long mid10 = mid + 9;\n        long mid11 = mid + 10;\n        long mid12\
    \ = mid + 11;\n        long mid13 = mid + 12;\n        long mid14 = mid + 13;\n\
    \        long mid15 = mid + 14;\n        long mid16 = mid + 15;\n        long\
    \ mid17 = mid + 16;\n        long mid18 = mid + 17;\n        long mid19 = mid\
    \ + 18;\n        long mid20 = mid + 19;\n        long mid21 = mid + 20;\n    \
    \    long mid22 = mid + 21;\n        long mid23 = mid + 22;\n        long mid24\
    \ = mid + 23;\n        long mid25 = mid + 24;\n        long mid26 = mid + 25;\n\
    \        long mid27 = mid + 26;\n        long mid28 = mid + 27;\n        long\
    \ mid29 = mid + 28;\n        long mid30 = mid + 29;\n        long mid31 = mid\
    \ + 30;\n        long mid32 = mid + 31;\n        long mid33 = mid + 32;\n    \
    \    long mid34 = mid + 33;\n        long mid35 = mid + 34;\n        long mid36\
    \ = mid + 35;\n        long mid37 = mid + 36;\n        long mid38 = mid + 37;\n\
    \        long mid39 = mid + 38;\n        long mid40 = mid + 39;\n        long\
    \ mid41 = mid + 40;\n        long mid42 = mid + 41;\n        long mid43 = mid\
    \ + 42;\n        long mid44 = m", "    // Your code here\n    long n = arr.size();\n\
    \    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n\
    \    long min_val = arr[0];\n    long min_idx = -1;\n    for(long i = 0; i < n;\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n        if(arr[i] < min_val) {\n           \
    \ min_val = arr[i];\n            min_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    ans.push_back(arr[max_idx]);\n    for(long i = max_idx + 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n        if(arr[i] < min_val) {\n            min_val = arr[i];\n\
    \            min_idx = i;\n        }\n    }\n    ans.push_back(min_val);\n   \
    \ ans.push_back(arr[min_idx]);\n    return ans;", "    // Your code here\n   \
    \ \n    long long max = 0;\n    long long maxIndex = 0;\n    \n    for(int i =\
    \ 0; i < arr.size(); i++){\n        if(arr[i] > max){\n            max = arr[i];\n\
    \            maxIndex = i;\n        }\n    }\n    \n    std::vector<long> ans;\n\
    \    \n    while(maxIndex != 0){\n        ans.push_back(arr[maxIndex]);\n    \
    \    maxIndex--;\n    }\n    \n    return ans;", "    // Your code here\n    std::vector<long>\
    \ ans;\n    long max = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n        \
    \    ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(max);\n    return\
    \ ans;", "    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long max = 0;\n    long temp = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            temp = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            result.push_back(temp);\n \
    \           temp = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            result.push_back(temp);\n \
    \       }\n    }\n    return result;", "    // Your code goes here\n    std::vector<long>\
    \ result;\n    long max = 0;\n    long min = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n  \
    \  if (max > min) {\n        for (long i = 0; i < arr.size(); i++) {\n       \
    \     if (arr[i] > max) {\n                max = arr[i];\n            }\n    \
    \        if (arr[i] < min) {\n                min = arr[i];\n            }\n \
    \       }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n    \
    \        max = arr[i];\n        }\n        if (arr[i] < min) {\n            min\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] > max) {\n            max = arr[i];\n        }\n        if\
    \ (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n    \
    \        max = arr[i];\n        }\n        if (arr[i] < min) {\n            min\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] > max) {\n            max = arr[i];\n        }\n        if\
    \ (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    for (", "    // Your code here\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long index = 0;\n    long\
    \ sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    ans.push_back(arr[index]);\n    for(long i = index + 1; i\
    \ < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n    \
    \        max = sum;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    return ans;", "    // Your code here\n    std::vector<long> res;\n    long\
    \ max = 0;\n    long min = 0;\n    long mid = 0;\n    long cnt = 0;\n    long\
    \ temp = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max) {\n            max = arr[i];\n            mid = i;\n        }\n       \
    \ if (arr[i] < min) {\n            min = arr[i];\n            mid = i;\n     \
    \   }\n    }\n    cnt = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] == max) {\n            cnt++;\n            if (cnt > k) {\n  \
    \              res.push_back(max);\n                res.push_back(min);\n    \
    \            break;\n            }\n        }\n    }\n    return res;", "    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        ans.push_back(max_val);\n\
    \        max_val--;\n    }\n    return ans;", "    long n = arr.size();\n    long\
    \ m = n;\n    std::vector<long> ans;\n    long max = 0;\n    long min = 0;\n \
    \   long mid = 0;\n    long cnt = 0;\n    long cur = 0;\n    long temp = 0;\n\
    \    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;", "    long n = arr.size();\n    std::vector<long> max_arr(n);\n    long\
    \ max_val = arr[0];\n    long max_index = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_index = i;\n        }\n    }\n    max_arr.at(max_index) = max_val;\n\
    \    for (long i = max_index + 1; i < n; i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_arr.at(i) = arr[i];\n        }\n    }\n    return max_arr;",
  "    // Your code here\n    std::vector<long> max;\n    long maxVal = arr[0];\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > maxVal) {\n \
    \           maxVal = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        max.push_back(maxVal);\n\
    \    }\n    return max;", "    long n = arr.size();\n    std::vector<long> ans;\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    \n    for (long i = 0;\
    \ i < n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    \n    for (long i = 0; i < k;\
    \ i++) {\n        ans.push_back(arr[max_idx]);\n        max_idx--;\n    }\n  \
    \  \n    return ans;", "    long n = arr.size();\n    std::vector<long> res;\n\
    \    long max_num = arr[0];\n    long max_index = -1;\n    for (long i = 1; i\
    \ < n; i++) {\n        if (arr[i] > max_num) {\n            max_num = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    res.push_back(max_num);\n \
    \   for (long i = max_index + 1; i <= k; i++) {\n        if (arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n            max_index = i;\n        }\n  \
    \  }\n    res.push_back(max_num);\n    return res;", "    // Your code here\n\
    \    long long max = 0;\n    long long maxIndex = 0;\n    long long index = 0;\n\
    \    long long size = arr.size();\n    long long temp = 0;\n    long long tempIndex\
    \ = 0;\n    long long tempMax = 0;\n    long long tempMaxIndex = 0;\n    long\
    \ long tempMaxIndex2 = 0;\n    long long tempMaxIndex3 = 0;\n    long long tempMaxIndex4\
    \ = 0;\n    long long tempMaxIndex5 = 0;\n    long long tempMaxIndex6 = 0;\n \
    \   long long tempMaxIndex7 = 0;\n    long long tempMaxIndex8 = 0;\n    long long\
    \ tempMaxIndex9 = 0;\n    long long tempMaxIndex10 = 0;\n    long long tempMaxIndex11\
    \ = 0;\n    long long tempMaxIndex12 = 0;\n    long long tempMaxIndex13 = 0;\n\
    \    long long tempMaxIndex14 = 0;\n    long long tempMaxIndex15 = 0;\n    long\
    \ long tempMaxIndex16 = 0;\n    long long tempMaxIndex17 = 0;\n    long long tempMaxIndex18\
    \ = 0;\n    long long tempMaxIndex19 = 0;\n    long long tempMaxIndex20 = 0;\n\
    \    long long tempMaxIndex21 = 0;\n    long long tempMaxIndex22 = 0;\n    long\
    \ long tempMaxIndex23 = 0;\n    long long tempMaxIndex24 = 0;\n    long long tempMaxIndex25\
    \ = 0;\n    long long tempMaxIndex26 = 0;\n    long long tempMaxIndex27 = 0;\n\
    \    long long tempMaxIndex28 = 0;\n    long long tempMaxIndex29 = 0;\n    long\
    \ long tempMaxIndex30 = 0;\n    long long tempMaxIndex31 = 0;\n    long long tempMaxIndex32\
    \ = 0;\n    long long tempMaxIndex33 = 0;\n    long long tempMaxIndex34 = 0;\n\
    \    long long tempMaxIndex35 = 0;\n    long long tempMaxIndex36 = 0;\n    long\
    \ long tempMaxIndex37 = 0;\n    long long tempMaxIndex38 = 0;\n    long long tempMaxIndex39\
    \ = 0;\n    long long tempMaxIndex40 = 0;\n    long long tempMaxIndex41 = 0;\n\
    \    long long tempMaxIndex42 = 0;\n    long long tempMaxIndex43 = 0;\n    long\
    \ long tempMaxIndex44 = 0;\n    long long tempMaxIndex45 = 0;\n    long long tempMaxIndex46\
    \ = 0;\n    long long tempMaxIndex47 = 0;\n    long long tempMaxIndex48 = 0;\n\
    \    long long tempMaxIndex49 = 0;\n    long long tempMaxIndex50 = 0;\n    long\
    \ long tempMaxIndex51 = 0;\n    long long tempMaxIndex", "    // Your code here\n\
    \    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long>\
    \ ans;\n    long temp = 0;\n    for (long i = 0; i < m; i++) {\n        temp =\
    \ std::max(temp, arr[i]);\n        ans.push_back(temp);\n    }\n    return ans;",
  "    // Your code here\n    \n    long long ans = 0;\n    long long max_val = arr[0];\n\
    \    long long min_val = arr[0];\n    long long max_idx = -1;\n    long long min_idx\
    \ = -1;\n    \n    for (long long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n        if (arr[i] < min_val) {\n            min_val = arr[i];\n     \
    \       min_idx = i;\n        }\n    }\n    \n    if (max_val == min_val) {\n\
    \        ans = max_val;\n    } else {\n        ans = max_val - min_val;\n    }\n\
    \    \n    if (ans <= k) {\n        ans = k - 1;\n    }\n    \n    std::vector<long>\
    \ ans_list;\n    \n    for (long long i = 0; i < arr.size(); i++) {\n        if\
    \ (i == max_idx) {\n            ans_list.push_back(arr[i]);\n        }\n    }\n\
    \    \n    return ans_list;", "    std::vector<long> result;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    for (size_t i = 0; i < k; i++) {\n  \
    \      result.push_back(arr[max_idx]);\n        max_idx--;\n    }\n    return\
    \ result;", "    // Your code here\n    std::vector<long> ans;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "    //\
    \ Your code here\n    std::vector<long> result;\n    long max = 0;\n    long min\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n        if(arr[i] < min) {\n          \
    \  min = arr[i];\n        }\n    }\n    long mid = (max - min)/2;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > mid) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < result.size(); i++) {\n        if(result[i]\
    \ > k) {\n            result.erase(result.begin() + i);\n        }\n    }\n  \
    \  return result;", "    std::vector<long> ans;\n    long max = 0;\n    long curr\
    \ = 0;\n    for (auto i : arr) {\n        if (curr < i) {\n            ans.push_back(max);\n\
    \            max = i;\n            curr = 0;\n        } else {\n            curr\
    \ += i;\n        }\n        if (curr > k) {\n            ans.push_back(max);\n\
    \            max = curr;\n        }\n    }\n    ans.push_back(max);\n    return\
    \ ans;", "    std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    if (max_idx != -1) {\n        ans.push_back(arr[max_idx]);\n\
    \    }\n    sort(ans.begin(), ans.end());\n    return ans;", "    // Your code\
    \ here\n    std::vector<long> arr1;\n    long max = 0;\n    long temp = 0;\n \
    \   long i = 0;\n    long j = 0;\n    long count = 0;\n    long sum = 0;\n   \
    \ long temp1 = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 =\
    \ 0;\n    long temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long\
    \ temp8 = 0;\n    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n\
    \    long temp12 = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15\
    \ = 0;\n    long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n   \
    \ long temp19 = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22\
    \ = 0;\n    long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n   \
    \ long temp26 = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29\
    \ = 0;\n    long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n   \
    \ long temp33 = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36\
    \ = 0;\n    long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n   \
    \ long temp40 = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43\
    \ = 0;\n    long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n   \
    \ long temp47 = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50\
    \ = 0;\n    long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n   \
    \ long temp54 = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57\
    \ = 0;\n    long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n   \
    \ long temp61 = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64\
    \ = 0;\n    long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n   \
    \ long temp68 = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71\
    \ = 0;\n    long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n   \
    \ long temp75 = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78\
    \ = 0;\n    long temp79 = 0;\n    long temp", "    // Your code here\n    long\
    \ long max = 0;\n    std::vector<long> maxList;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \   }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max &&\
    \ arr[i] <= k) {\n            maxList.push_back(arr[i]);\n        }\n    }\n \
    \   return maxList;", "    // Your code here\n    std::vector<long> ans;\n   \
    \ long max = 0;\n    long min = 0;\n    long mid = 0;\n    long count = 0;\n \
    \   for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n     \
    \       max = arr[i];\n            mid = i;\n        }\n        if(arr[i] < min)\
    \ {\n            min = arr[i];\n            mid = i;\n        }\n    }\n    while(count\
    \ < k) {\n        if(arr[mid] > max) {\n            ans.push_back(max);\n    \
    \        max = arr[mid];\n            mid = mid+1;\n            count++;\n   \
    \     }\n        if(arr[mid] < min) {\n            ans.push_back(min);\n     \
    \       min = arr[mid];\n            mid = mid+1;\n            count++;\n    \
    \    }\n    }\n    ans.push_back(max);\n    return ans;", "    long n = arr.size();\n\
    \    std::vector<long> res;\n    long max_val = arr[0];\n    long min_val = arr[0];\n\
    \    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_val) {\n       \
    \     max_val = arr[i];\n        }\n        if (arr[i] < min_val) {\n        \
    \    min_val = arr[i];\n        }\n    }\n    if (k > max_val - min_val) {\n \
    \       std::cerr << \"k should be less than the difference between max and min\"\
    \ << std::endl;\n        return res;\n    }\n    if (k == max_val - min_val) {\n\
    \        res.push_back(max_val);\n        return res;\n    }\n    long mid = max_val\
    \ + min_val / 2;\n    std::vector<long> left_res = maximum(arr, k - 1);\n    std::vector<long>\
    \ right_res = maximum(arr, k);\n    std::vector<long> left_max = maximum(left_res,\
    \ k - 1);\n    std::vector<long> right_max = maximum(right_res, k);\n    std::vector<long>\
    \ left_min = maximum(left_max, k - 1);\n    std::vector<long> right_min = maximum(right_max,\
    \ k);\n    std::vector<long> left_mid = maximum(left_min, k - 1);\n    std::vector<long>\
    \ right_mid = maximum(right_min, k);\n    std::vector<long> left_res = left_mid;\n\
    \    std::vector<long> right_res = right_mid;\n    std::vector<long> left_max\
    \ = left_mid;\n    std::vector<long> right_max = right_mid;\n    std::vector<long>\
    \ left_min = left_mid;\n    std::vector<long> right_min = right_mid;\n    std::vector<long>\
    \ left_mid = left_res;\n    std::vector<long> right_mid = right_res;\n    std::vector<long>\
    \ left_res = left_max;\n    std::vector<long> right_res = right_max;\n    std::vector<long>\
    \ left_max = left_min;\n    std::vector<long> right_max = right_min;\n    std::vector<long>\
    \ left_min = left_mid;\n    std::vector<long> right_min = right_mid;\n    std::vector<long>\
    \ left_mid = left_res;\n    std::vector<long> right_mid = right_res;\n    std::vector<long>\
    \ left_res = left_max;\n    std::vector<long> right_res = right_max;\n    std::vector<long>\
    \ left_max = left_min;\n    std::vector<long> right_max = right_min;\n    std::vector<long>\
    \ left_min = left_mid;\n    std::vector<long> right_min = right_mid;\n    std::vector<long>\
    \ left_mid = left_res;\n    std::vector<long> right_mid = right_res;\n    std::vector<long>\
    \ left_res = left_max;\n    std::vector<long> right_res = right_max;\n    std::vector<long>\
    \ left_max = left_min;\n    std::vector<long> right_max = right_min;\n    std::vector<long>\
    \ left_min = ", "    std::vector<long> ans;\n    long max_val = arr[0];\n    for\
    \ (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n     \
    \       max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        ans.push_back(max_val);\n        max_val--;\n    }\n    return ans;",
  "    // Your code here\n    \n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    \n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n\
    \            max = arr[i];\n            maxIndex = i;\n        }\n    }\n    \n\
    \    std::vector<long> ans;\n    \n    for (int i = 0; i < k; i++) {\n       \
    \ ans.push_back(arr[maxIndex]);\n        maxIndex++;\n    }\n    \n    return\
    \ ans;", "    // Your code here\n    std::vector<long> result;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    if (max_idx != -1) {\n        result.push_back(arr[max_idx]);\n\
    \    }\n    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            result.push_back(arr[i]);\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    long long ans = 0;\n    long long max\
    \ = 0;\n    long long min = 0;\n    long long sum = 0;\n    long long count =\
    \ 0;\n    long long index = 0;\n    long long temp = 0;\n    long long temp2 =\
    \ 0;\n    long long temp3 = 0;\n    long long temp4 = 0;\n    long long temp5\
    \ = 0;\n    long long temp6 = 0;\n    long long temp7 = 0;\n    long long temp8\
    \ = 0;\n    long long temp9 = 0;\n    long long temp10 = 0;\n    long long temp11\
    \ = 0;\n    long long temp12 = 0;\n    long long temp13 = 0;\n    long long temp14\
    \ = 0;\n    long long temp15 = 0;\n    long long temp16 = 0;\n    long long temp17\
    \ = 0;\n    long long temp18 = 0;\n    long long temp19 = 0;\n    long long temp20\
    \ = 0;\n    long long temp21 = 0;\n    long long temp22 = 0;\n    long long temp23\
    \ = 0;\n    long long temp24 = 0;\n    long long temp25 = 0;\n    long long temp26\
    \ = 0;\n    long long temp27 = 0;\n    long long temp28 = 0;\n    long long temp29\
    \ = 0;\n    long long temp30 = 0;\n    long long temp31 = 0;\n    long long temp32\
    \ = 0;\n    long long temp33 = 0;\n    long long temp34 = 0;\n    long long temp35\
    \ = 0;\n    long long temp36 = 0;\n    long long temp37 = 0;\n    long long temp38\
    \ = 0;\n    long long temp39 = 0;\n    long long temp40 = 0;\n    long long temp41\
    \ = 0;\n    long long temp42 = 0;\n    long long temp43 = 0;\n    long long temp44\
    \ = 0;\n    long long temp45 = 0;\n    long long temp46 = 0;\n    long long temp47\
    \ = 0;\n    long long temp48 = 0;\n    long long temp49 = 0;\n    long long temp50\
    \ = 0;\n    long long temp51 = 0;\n    long long temp52 = 0;\n    long long temp53\
    \ = 0;\n    long long temp54 = 0;\n    long long temp55 = 0;\n    long long temp56\
    \ = 0;\n    long long temp57 = 0;\n    long long temp58 = 0;\n    long long temp59\
    \ = 0;\n    long long temp60 = 0;\n    long long temp61 = 0;\n    long long temp62\
    \ = 0;\n    long long temp63 = 0;\n    long long temp64 = 0;\n    long long temp65\
    \ = 0;\n    long long temp66 = 0;\n    long long temp67 = 0;\n    long long temp68\
    \ = 0;\n    ", "    // Your code goes here\n    std::vector<long> result;\n  \
    \  long max = 0;\n    long min = 0;\n    long mid = 0;\n    long count = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n            mid = i;\n        }\n        if (arr[i]\
    \ < min) {\n            min = arr[i];\n            mid = i;\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n \
    \           result.push_back(arr[mid]);\n            count++;\n        }\n   \
    \ }\n    if (count > k) {\n        result.push_back(arr[mid]);\n    }\n    return\
    \ result;", "    // Your code here\n    long long ans = 0;\n    long long max\
    \ = 0;\n    long long i = 0;\n    long long j = 0;\n    long long k = 0;\n   \
    \ long long n = arr.size();\n    long long m = n;\n    long long temp = 0;\n \
    \   long long count = 0;\n    long long maxCount = 0;\n    long long maxCount2\
    \ = 0;\n    long long maxCount3 = 0;\n    long long maxCount4 = 0;\n    long long\
    \ maxCount5 = 0;\n    long long maxCount6 = 0;\n    long long maxCount7 = 0;\n\
    \    long long maxCount8 = 0;\n    long long maxCount9 = 0;\n    long long maxCount10\
    \ = 0;\n    long long maxCount11 = 0;\n    long long maxCount12 = 0;\n    long\
    \ long maxCount13 = 0;\n    long long maxCount14 = 0;\n    long long maxCount15\
    \ = 0;\n    long long maxCount16 = 0;\n    long long maxCount17 = 0;\n    long\
    \ long maxCount18 = 0;\n    long long maxCount19 = 0;\n    long long maxCount20\
    \ = 0;\n    long long maxCount21 = 0;\n    long long maxCount22 = 0;\n    long\
    \ long maxCount23 = 0;\n    long long maxCount24 = 0;\n    long long maxCount25\
    \ = 0;\n    long long maxCount26 = 0;\n    long long maxCount27 = 0;\n    long\
    \ long maxCount28 = 0;\n    long long maxCount29 = 0;\n    long long maxCount30\
    \ = 0;\n    long long maxCount31 = 0;\n    long long maxCount32 = 0;\n    long\
    \ long maxCount33 = 0;\n    long long maxCount34 = 0;\n    long long maxCount35\
    \ = 0;\n    long long maxCount36 = 0;\n    long long maxCount37 = 0;\n    long\
    \ long maxCount38 = 0;\n    long long maxCount39 = 0;\n    long long maxCount40\
    \ = 0;\n    long long maxCount41 = 0;\n    long long maxCount42 = 0;\n    long\
    \ long maxCount43 = 0;\n    long long maxCount44 = 0;\n    long long maxCount45\
    \ = 0;\n    long long maxCount46 = 0;\n    long long maxCount47 = 0;\n    long\
    \ long maxCount48 = 0;\n    long long maxCount49 = 0;\n    long long maxCount50\
    \ = 0;\n    long long maxCount51 = 0;\n    long long maxCount52 = 0;\n    long\
    \ long maxCount53 = 0;\n    long long maxCount54 = 0;\n    long long maxCount55\
    \ = 0;\n    long long maxCount56 = 0;\n    long long maxCount57 = 0;\n    long ",
  "    // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long\
    \ temp = 0;\n    long i = 0;\n    long j = 0;\n    long count = 0;\n    long size\
    \ = arr.size();\n    while(i < size) {\n        temp = arr[i];\n        while(j\
    \ < size && temp > arr[j]) {\n            temp = arr[j];\n            j++;\n \
    \       }\n        if(temp > max) {\n            max = temp;\n            ans.clear();\n\
    \            ans.push_back(max);\n            count++;\n        }\n        else\
    \ if(temp == max) {\n            ans.push_back(max);\n            count++;\n \
    \       }\n        else {\n            while(j < size && temp < arr[j]) {\n  \
    \              j++;\n            }\n            ans.push_back(max);\n        \
    \    count++;\n        }\n        i++;\n    }\n    while(j < size) {\n       \
    \ ans.push_back(max);\n        count++;\n        j++;\n    }\n    while(count\
    \ < k) {\n        ans.push_back(max);\n        count++;\n    }\n    return ans;",
  "    // Your code here\n    std::vector<long> result;\n    long max = 0;\n    long\
    \ min = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n\
    \            min = arr[i];\n        }\n    }\n    long mid = max - (max - min)\
    \ / 2;\n    long mid2 = mid / 2;\n    long mid3 = mid / 3;\n    long mid4 = mid\
    \ / 4;\n    long mid5 = mid / 5;\n    long mid6 = mid / 6;\n    long mid7 = mid\
    \ / 7;\n    long mid8 = mid / 8;\n    long mid9 = mid / 9;\n    long mid10 = mid\
    \ / 10;\n    long mid11 = mid / 11;\n    long mid12 = mid / 12;\n    long mid13\
    \ = mid / 13;\n    long mid14 = mid / 14;\n    long mid15 = mid / 15;\n    long\
    \ mid16 = mid / 16;\n    long mid17 = mid / 17;\n    long mid18 = mid / 18;\n\
    \    long mid19 = mid / 19;\n    long mid20 = mid / 20;\n    long mid21 = mid\
    \ / 21;\n    long mid22 = mid / 22;\n    long mid23 = mid / 23;\n    long mid24\
    \ = mid / 24;\n    long mid25 = mid / 25;\n    long mid26 = mid / 26;\n    long\
    \ mid27 = mid / 27;\n    long mid28 = mid / 28;\n    long mid29 = mid / 29;\n\
    \    long mid30 = mid / 30;\n    long mid31 = mid / 31;\n    long mid32 = mid\
    \ / 32;\n    long mid33 = mid / 33;\n    long mid34 = mid / 34;\n    long mid35\
    \ = mid / 35;\n    long mid36 = mid / 36;\n    long mid37 = mid / 37;\n    long\
    \ mid38 = mid / 38;\n    long mid39 = mid / 39;\n    long mid40 = mid / 40;\n\
    \    long mid41 = mid / 41;\n    long mid42 = mid / 42;\n    long mid43 = mid\
    \ / 43;\n    long mid44 = mid / 44;\n    long mid45 = mid / 45;\n    long mid46\
    \ = mid / 46;\n    long mid47 = m", "    std::vector<long> res;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    res.push_back(max_val);\n    for (size_t\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           max_val = arr[i];\n        }\n    }\n    res.push_back(max_val);\n\
    \    return res;", "    // Your code here\n    \n    long long max = 0;\n    long\
    \ long maxIndex = 0;\n    \n    for(int i = 0; i < arr.size(); i++){\n       \
    \ if(arr[i] > max){\n            max = arr[i];\n            maxIndex = i;\n  \
    \      }\n    }\n    \n    std::vector<long> result;\n    \n    for(int i = 0;\
    \ i < k; i++){\n        result.push_back(arr[maxIndex]);\n        maxIndex--;\n\
    \    }\n    \n    return result;", "    std::vector<long> res;\n    long max =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            res.push_back(arr[i]);\n \
    \       }\n    }\n    return res;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    if (max_idx != -1)\
    \ {\n        result.push_back(max_val);\n        result.insert(result.end(), arr.begin()\
    \ + max_idx, arr.begin() + max_idx + k);\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    long max = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n        \
    \    ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "    // write\
    \ your code here\n    long max_val = arr[0];\n    std::vector<long> max_vec;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max_val) {\n            max_vec.push_back(arr[i]);\n\
    \        }\n    }\n    return max_vec;", "    // Your code here\n    std::vector<long>\
    \ result;\n    long max = 0;\n    long min = 0;\n    long mid = 0;\n    long sum\
    \ = 0;\n    long count = 0;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     sum = sum + arr[i];\n        if (sum > max) {\n            max = sum;\n\
    \            mid = i;\n        }\n        if (sum < min) {\n            min =\
    \ sum;\n            mid = i;\n        }\n    }\n    mid = arr.size() / 2;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (i == mid) {\n        \
    \    result.push_back(arr[i]);\n        }\n        if (arr[i] > max) {\n     \
    \       result.push_back(arr[i]);\n        }\n        if (arr[i] < min) {\n  \
    \          result.push_back(arr[i]);\n        }\n    }\n    result.push_back(max);\n\
    \    result.push_back(min);\n    result.push_back(arr[mid]);\n    return result;",
  "    std::vector<long> res;\n    long max_val = arr[0];\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val =\
    \ arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        res.push_back(max_val);\n\
    \    }\n    return res;", "    // Your code here\n    long n = arr.size();\n \
    \   long max_num = arr[0];\n    std::vector<long> max_nums(n);\n    long max_index\
    \ = 0;\n    long max_index2 = 0;\n    long max_index3 = 0;\n    long max_index4\
    \ = 0;\n    long max_index5 = 0;\n    long max_index6 = 0;\n    long max_index7\
    \ = 0;\n    long max_index8 = 0;\n    long max_index9 = 0;\n    long max_index10\
    \ = 0;\n    long max_index11 = 0;\n    long max_index12 = 0;\n    long max_index13\
    \ = 0;\n    long max_index14 = 0;\n    long max_index15 = 0;\n    long max_index16\
    \ = 0;\n    long max_index17 = 0;\n    long max_index18 = 0;\n    long max_index19\
    \ = 0;\n    long max_index20 = 0;\n    long max_index21 = 0;\n    long max_index22\
    \ = 0;\n    long max_index23 = 0;\n    long max_index24 = 0;\n    long max_index25\
    \ = 0;\n    long max_index26 = 0;\n    long max_index27 = 0;\n    long max_index28\
    \ = 0;\n    long max_index29 = 0;\n    long max_index30 = 0;\n    long max_index31\
    \ = 0;\n    long max_index32 = 0;\n    long max_index33 = 0;\n    long max_index34\
    \ = 0;\n    long max_index35 = 0;\n    long max_index36 = 0;\n    long max_index37\
    \ = 0;\n    long max_index38 = 0;\n    long max_index39 = 0;\n    long max_index40\
    \ = 0;\n    long max_index41 = 0;\n    long max_index42 = 0;\n    long max_index43\
    \ = 0;\n    long max_index44 = 0;\n    long max_index45 = 0;\n    long max_index46\
    \ = 0;\n    long max_index47 = 0;\n    long max_index48 = 0;\n    long max_index49\
    \ = 0;\n    long max_index50 = 0;\n    long max_index51 = 0;\n    long max_index52\
    \ = 0;\n    long max_index53 = 0;\n    long max_index54 = 0;\n    long max_index55\
    \ = 0;\n    long max_index56 = 0;\n    long max_index57 = 0;\n    long max_index58\
    \ = 0;\n    long max_index59 = 0;\n    long max_index60 = 0;\n    long max_index61\
    \ = 0;\n    long max_index62 = 0;\n    long max_index63 = 0;\n    long max_index64\
    \ = 0;\n    long max_index65 = 0;\n    long max_index66 = 0;\n    long max_index67\
    \ = 0;\n    long max_index68 = 0;\n    long max_index69 = 0;\n    long max_index70\
    \ = 0;", "    // Your code here\n    std::vector<long> result;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    return result;", "    // write your code here\n    long n = arr.size();\n\
    \    long max_num = arr[0];\n    std::vector<long> result;\n    for(long i = 1;\
    \ i < n; i++) {\n        if(arr[i] > max_num) {\n            max_num = arr[i];\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(max_num);\n\
    \    }\n    return result;", "    // Your code here\n    long max_val = arr[0];\n\
    \    std::vector<long> ans;\n    for(long i = 0; i < arr.size(); i++) {\n    \
    \    if(arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "   \
    \ // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long cnt = 0;\n    long temp = 0;\n    long cnt2\
    \ = 0;\n    long temp2 = 0;\n    long cnt3 = 0;\n    long temp3 = 0;\n    long\
    \ cnt4 = 0;\n    long temp4 = 0;\n    long cnt5 = 0;\n    long temp5 = 0;\n  \
    \  long cnt6 = 0;\n    long temp6 = 0;\n    long cnt7 = 0;\n    long temp7 = 0;\n\
    \    long cnt8 = 0;\n    long temp8 = 0;\n    long cnt9 = 0;\n    long temp9 =\
    \ 0;\n    long cnt10 = 0;\n    long temp10 = 0;\n    long cnt11 = 0;\n    long\
    \ temp11 = 0;\n    long cnt12 = 0;\n    long temp12 = 0;\n    long cnt13 = 0;\n\
    \    long temp13 = 0;\n    long cnt14 = 0;\n    long temp14 = 0;\n    long cnt15\
    \ = 0;\n    long temp15 = 0;\n    long cnt16 = 0;\n    long temp16 = 0;\n    long\
    \ cnt17 = 0;\n    long temp17 = 0;\n    long cnt18 = 0;\n    long temp18 = 0;\n\
    \    long cnt19 = 0;\n    long temp19 = 0;\n    long cnt20 = 0;\n    long temp20\
    \ = 0;\n    long cnt21 = 0;\n    long temp21 = 0;\n    long cnt22 = 0;\n    long\
    \ temp22 = 0;\n    long cnt23 = 0;\n    long temp23 = 0;\n    long cnt24 = 0;\n\
    \    long temp24 = 0;\n    long cnt25 = 0;\n    long temp25 = 0;\n    long cnt26\
    \ = 0;\n    long temp26 = 0;\n    long cnt27 = 0;\n    long temp27 = 0;\n    long\
    \ cnt28 = 0;\n    long temp28 = 0;\n    long cnt29 = 0;\n    long temp29 = 0;\n\
    \    long cnt30 = 0;\n    long temp30 = 0;\n    long cnt31 = 0;\n    long temp31\
    \ = 0;\n    long cnt32 = 0;\n    long temp32 = 0;\n    long cnt33 = 0;\n    long\
    \ temp33 = 0;\n    long cnt34 = 0;\n    long temp34 = 0;\n    long cnt35 = 0;\n\
    \    long temp35 = 0;\n    long cnt36 = 0;\n    long temp36 = 0;\n    long cnt37\
    \ = 0;\n    long temp37 = 0;\n    long cnt38 = 0;\n    long temp38 = 0;\n    long\
    \ cnt39 = 0;\n    long temp39 = 0;\n    long cnt40 = 0;\n    long temp40 = 0;\n\
    \    long cnt41 = 0;\n    long temp41 = 0;\n    long cnt42", "    // Your code\
    \ here\n    long long max = 0;\n    std::vector<long> ans;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ == max) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;", "    std::vector<long> res;\n    long max_val = arr[0];\n    long max_idx\
    \ = -1;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    res.push_back(max_val);\n    for(long i = max_idx; i < arr.size(); i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n        }\n  \
    \  }\n    for(long i = max_idx; i < k; i++) {\n        res.push_back(max_val);\n\
    \    }\n    return res;", "    // Your code goes here\n    long long ans = 0,\
    \ i = 0;\n    std::vector<long> ans_list;\n    while(i < arr.size() && ans < arr[i])\
    \ {\n        ans = max(ans, arr[i]);\n        ans_list.push_back(arr[i]);\n  \
    \      i++;\n    }\n    while(i < arr.size() && ans < k) {\n        ans = max(ans,\
    \ arr[i]);\n        ans_list.push_back(arr[i]);\n        i++;\n    }\n    while(i\
    \ < arr.size() && ans == k) {\n        ans_list.push_back(arr[i]);\n        i++;\n\
    \    }\n    return ans_list;", "    // write your code here\n    long n = arr.size();\n\
    \    long max_val = arr[0];\n    long max_idx = 1;\n    std::vector<long> ans;\n\
    \    for(long i = 1; i < n; i++) {\n        if(arr[i] > max_val) {\n         \
    \   max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    while(max_idx < k) {\n        ans.push_back(arr[max_idx]);\n        max_idx++;\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long max = 0;\n   \
    \ long cur = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            cur = i;\n        }\n    }\n\
    \    ans.push_back(max);\n    for (long i = cur + 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > max) {\n            max = arr[i];\n            ans.push_back(max);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> ans;\n    long max\
    \ = 0;\n    long cur = 0;\n    for (auto i : arr) {\n        if (cur < i) {\n\
    \            max = i;\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = k - 1; i >= 0; i--) {\n        long cur = 0;\n        for (auto\
    \ i : arr) {\n            if (cur < i) {\n                max = i;\n         \
    \       cur = i;\n            }\n        }\n        ans.push_back(max);\n    }\n\
    \    return ans;", "    // Your code here\n    \n    long long max = 0;\n    long\
    \ long maxIndex = 0;\n    long long maxIndex2 = 0;\n    long long maxIndex3 =\
    \ 0;\n    long long maxIndex4 = 0;\n    long long maxIndex5 = 0;\n    long long\
    \ maxIndex6 = 0;\n    long long maxIndex7 = 0;\n    long long maxIndex8 = 0;\n\
    \    long long maxIndex9 = 0;\n    long long maxIndex10 = 0;\n    long long maxIndex11\
    \ = 0;\n    long long maxIndex12 = 0;\n    long long maxIndex13 = 0;\n    long\
    \ long maxIndex14 = 0;\n    long long maxIndex15 = 0;\n    long long maxIndex16\
    \ = 0;\n    long long maxIndex17 = 0;\n    long long maxIndex18 = 0;\n    long\
    \ long maxIndex19 = 0;\n    long long maxIndex20 = 0;\n    long long maxIndex21\
    \ = 0;\n    long long maxIndex22 = 0;\n    long long maxIndex23 = 0;\n    long\
    \ long maxIndex24 = 0;\n    long long maxIndex25 = 0;\n    long long maxIndex26\
    \ = 0;\n    long long maxIndex27 = 0;\n    long long maxIndex28 = 0;\n    long\
    \ long maxIndex29 = 0;\n    long long maxIndex30 = 0;\n    long long maxIndex31\
    \ = 0;\n    long long maxIndex32 = 0;\n    long long maxIndex33 = 0;\n    long\
    \ long maxIndex34 = 0;\n    long long maxIndex35 = 0;\n    long long maxIndex36\
    \ = 0;\n    long long maxIndex37 = 0;\n    long long maxIndex38 = 0;\n    long\
    \ long maxIndex39 = 0;\n    long long maxIndex40 = 0;\n    long long maxIndex41\
    \ = 0;\n    long long maxIndex42 = 0;\n    long long maxIndex43 = 0;\n    long\
    \ long maxIndex44 = 0;\n    long long maxIndex45 = 0;\n    long long maxIndex46\
    \ = 0;\n    long long maxIndex47 = 0;\n    long long maxIndex48 = 0;\n    long\
    \ long maxIndex49 = 0;\n    long long maxIndex50 = 0;\n    long long maxIndex51\
    \ = 0;\n    long long maxIndex52 = 0;\n    long long maxIndex53 = 0;\n    long\
    \ long maxIndex54 = 0;\n    long long maxIndex55 = 0;\n    long long maxIndex56\
    \ = 0;\n    long long maxIndex57 = 0;\n    long long maxIndex58 = 0;\n    long\
    \ long maxIndex59 = 0;\n    long long maxIndex60 = 0;\n    long long maxIndex61\
    \ = 0;\n    long long maxIndex62 = 0;\n    long long maxIndex63 = 0;\n", "   \
    \ // Your code here\n    std::vector<long> result;\n    long max = 0;\n    long\
    \ index = 0;\n    long sum = 0;\n    long sum2 = 0;\n    long sum3 = 0;\n    long\
    \ sum4 = 0;\n    long sum5 = 0;\n    long sum6 = 0;\n    long sum7 = 0;\n    long\
    \ sum8 = 0;\n    long sum9 = 0;\n    long sum10 = 0;\n    long sum11 = 0;\n  \
    \  long sum12 = 0;\n    long sum13 = 0;\n    long sum14 = 0;\n    long sum15 =\
    \ 0;\n    long sum16 = 0;\n    long sum17 = 0;\n    long sum18 = 0;\n    long\
    \ sum19 = 0;\n    long sum20 = 0;\n    long sum21 = 0;\n    long sum22 = 0;\n\
    \    long sum23 = 0;\n    long sum24 = 0;\n    long sum25 = 0;\n    long sum26\
    \ = 0;\n    long sum27 = 0;\n    long sum28 = 0;\n    long sum29 = 0;\n    long\
    \ sum30 = 0;\n    long sum31 = 0;\n    long sum32 = 0;\n    long sum33 = 0;\n\
    \    long sum34 = 0;\n    long sum35 = 0;\n    long sum36 = 0;\n    long sum37\
    \ = 0;\n    long sum38 = 0;\n    long sum39 = 0;\n    long sum40 = 0;\n    long\
    \ sum41 = 0;\n    long sum42 = 0;\n    long sum43 = 0;\n    long sum44 = 0;\n\
    \    long sum45 = 0;\n    long sum46 = 0;\n    long sum47 = 0;\n    long sum48\
    \ = 0;\n    long sum49 = 0;\n    long sum50 = 0;\n    long sum51 = 0;\n    long\
    \ sum52 = 0;\n    long sum53 = 0;\n    long sum54 = 0;\n    long sum55 = 0;\n\
    \    long sum56 = 0;\n    long sum57 = 0;\n    long sum58 = 0;\n    long sum59\
    \ = 0;\n    long sum60 = 0;\n    long sum61 = 0;\n    long sum62 = 0;\n    long\
    \ sum63 = 0;\n    long sum64 = 0;\n    long sum65 = 0;\n    long sum66 = 0;\n\
    \    long sum67 = 0;\n    long sum68 = 0;\n    long sum69 = 0;\n    long sum70\
    \ = 0;\n    long sum71 = 0;\n    long sum72 = 0;\n    long sum73 = 0;\n    long\
    \ sum74 = 0;\n    long sum75 = 0;\n    long sum76 = 0;\n    long sum77 = 0;\n\
    \    long sum78 = 0;\n    long sum79 = 0;\n    long sum80 = 0;\n    long sum81\
    \ = 0;\n    long sum82 = 0;\n    long sum83", "    // Your code here\n    \n \
    \   long long max = 0;\n    std::vector<long> ans;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \   }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    \n    if(ans.size()\
    \ == k) {\n        return ans;\n    }\n    \n    long long max2 = 0;\n    std::vector<long>\
    \ ans2;\n    for(long i = 0; i < ans.size(); i++) {\n        if(ans[i] > max2)\
    \ {\n            max2 = ans[i];\n        }\n    }\n    for(long i = 0; i < ans.size();\
    \ i++) {\n        if(ans[i] == max2) {\n            ans2.push_back(ans[i]);\n\
    \        }\n    }\n    \n    if(ans2.size() == k) {\n        return ans2;\n  \
    \  }\n    \n    long long max3 = 0;\n    std::vector<long> ans3;\n    for(long\
    \ i = 0; i < ans2.size(); i++) {\n        if(ans2[i] > max3) {\n            max3\
    \ = ans2[i];\n        }\n    }\n    for(long i = 0; i < ans2.size(); i++) {\n\
    \        if(ans2[i] == max3) {\n            ans3.push_back(ans2[i]);\n       \
    \ }\n    }\n    \n    if(ans3.size() == k) {\n        return ans3;\n    }\n  \
    \  \n    long long max4 = 0;\n    std::vector<long> ans4;\n    for(long i = 0;\
    \ i < ans3.size(); i++) {\n        if(ans3[i] > max4) {\n            max4 = ans3[i];\n\
    \        }\n    }\n    for(long i = 0; i < ans3.size(); i++) {\n        if(ans3[i]\
    \ == max4) {\n            ans4.push_back(ans3[i]);\n        }\n    }\n    \n \
    \   if(ans4.size() == k) {\n        return ans4;\n    }\n    \n    long long max5\
    \ = 0;\n    std::vector<long> ans5;\n    for(long i = 0; i < ans4.size(); i++)\
    \ {\n        if(ans4[i] > max5) {\n            max5 = ans4[i];\n        }\n  \
    \  }\n    for(long i = 0; i < ans4.size(); i++) {\n        if(ans4[i] == max5)\
    \ {\n            ans5.push_back(ans4[i]);\n        }\n    }\n    \n    if(ans5.size()\
    \ == k) {\n        return ans5;\n    }\n    \n    long long max6 = 0;\n    std::vector<long>\
    \ ans6;\n    for(long i = 0; i < ans5.size(); i++) {\n        if(ans5[i] > max6)\
    \ {\n            max6 = ans5[i];\n        }\n    }\n    for(long i = 0; i < ans5.size();\
    \ i++) {\n        if(ans5[i] == max6) {\n            ans6.push_back(ans5[i]);\n\
    \        }\n    }\n    \n    if(ans6.size() == k) {\n        return ans", "  \
    \  // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> ans;\n    long max\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            ans.push_back(arr[i]);\n \
    \       }\n    }\n    return ans;", "    // Your code here\n    std::vector<long>\
    \ ans;\n    long max = 0;\n    long i = 0;\n    long j = 0;\n    long n = arr.size();\n\
    \    long mid = n / 2;\n    while (i < n) {\n        if (max < arr[i]) {\n   \
    \         max = arr[i];\n        }\n        i++;\n    }\n    long mid1 = mid -\
    \ 1;\n    while (j < n) {\n        if (max < arr[j]) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    long mid2 = mid + 1;\n    while (i < n) {\n\
    \        if (max < arr[i]) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    long mid3 = mid + 1;\n    while (j < n) {\n        if (max < arr[j])\
    \ {\n            max = arr[j];\n        }\n        j++;\n    }\n    long mid4\
    \ = mid + 1;\n    while (i < n) {\n        if (max < arr[i]) {\n            max\
    \ = arr[i];\n        }\n        i++;\n    }\n    long mid5 = mid + 1;\n    while\
    \ (j < n) {\n        if (max < arr[j]) {\n            max = arr[j];\n        }\n\
    \        j++;\n    }\n    long mid6 = mid + 1;\n    while (i < n) {\n        if\
    \ (max < arr[i]) {\n            max = arr[i];\n        }\n        i++;\n    }\n\
    \    long mid7 = mid + 1;\n    while (j < n) {\n        if (max < arr[j]) {\n\
    \            max = arr[j];\n        }\n        j++;\n    }\n    long mid8 = mid\
    \ + 1;\n    while (i < n) {\n        if (max < arr[i]) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    long mid9 = mid + 1;\n    while (j < n) {\n\
    \        if (max < arr[j]) {\n            max = arr[j];\n        }\n        j++;\n\
    \    }\n    long mid10 = mid + 1;\n    while (i < n) {\n        if (max < arr[i])\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    long mid11\
    \ = mid + 1;\n    while (j < n) {\n        if (max < arr[j]) {\n            max\
    \ = arr[j];\n        }\n        j++;\n    }\n    long mid12 = mid + 1;\n    while\
    \ (i < n) {\n        if (max < arr[i]) {\n            max = arr[i];\n        }\n\
    \        i++;\n    }\n    long mid13 = mid + 1;\n    while (j < n) {\n       \
    \ if (max < arr[j]) {\n            max = arr[j];\n        }\n        j++;\n  \
    \  }\n    long mid14 = mid + 1;\n    while (i < n) {\n        if (max < arr[i])\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    long mid15\
    \ = mid + ", "    std::vector<long> ans;\n    long max = 0;\n    long min = 0;\n\
    \    long mid = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            mid = i;\n        }\n     \
    \   if (arr[i] < min) {\n            min = arr[i];\n            mid = i;\n   \
    \     }\n    }\n    long mid1 = mid - 1;\n    long mid2 = mid + 1;\n    long mid3\
    \ = mid + 2;\n    long mid4 = mid + 3;\n    long mid5 = mid + 4;\n    long mid6\
    \ = mid + 5;\n    long mid7 = mid + 6;\n    long mid8 = mid + 7;\n    long mid9\
    \ = mid + 8;\n    long mid10 = mid + 9;\n    long mid11 = mid + 10;\n    long\
    \ mid12 = mid + 11;\n    long mid13 = mid + 12;\n    long mid14 = mid + 13;\n\
    \    long mid15 = mid + 14;\n    long mid16 = mid + 15;\n    long mid17 = mid\
    \ + 16;\n    long mid18 = mid + 17;\n    long mid19 = mid + 18;\n    long mid20\
    \ = mid + 19;\n    long mid21 = mid + 20;\n    long mid22 = mid + 21;\n    long\
    \ mid23 = mid + 22;\n    long mid24 = mid + 23;\n    long mid25 = mid + 24;\n\
    \    long mid26 = mid + 25;\n    long mid27 = mid + 26;\n    long mid28 = mid\
    \ + 27;\n    long mid29 = mid + 28;\n    long mid30 = mid + 29;\n    long mid31\
    \ = mid + 30;\n    long mid32 = mid + 31;\n    long mid33 = mid + 32;\n    long\
    \ mid34 = mid + 33;\n    long mid35 = mid + 34;\n    long mid36 = mid + 35;\n\
    \    long mid37 = mid + 36;\n    long mid38 = mid + 37;\n    long mid39 = mid\
    \ + 38;\n    long mid40 = mid + 39;\n    long mid41 = mid + 40;\n    long mid42\
    \ = mid + 41;\n    long mid43 = mid + 42;\n    long mid44 = mid + 43;\n    long\
    \ mid45 = mid + 44;\n    long mid46 = mid + 45;\n    long mid47 = mid + 46;\n\
    \    long mid48 = mid + 47;\n    long mid49 = mid + 48;\n    long mid50 = mid\
    \ + 49;\n    long mid51 = m", "    // Your code goes here\n    \n    long long\
    \ ans = 0;\n    long long max = 0;\n    long long min = 0;\n    \n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n           \
    \ max = arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    \n    for(long long i = 0; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr[i];\n        }\n    }\n    \n    for(long long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    \n    for(long long i = 0; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr[i];\n        }\n    }\n    \n    for(long long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    \n    for(long long i = 0; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr[i];\n        }\n    }\n    \n    for(long long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    \n    for(long long i = 0; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr[i];\n        }\n    }\n    \n    for(long long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    \n    for(long long i = 0; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr[i];\n        }\n    }\n    \n    for(long long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    \n    for(long long i = 0; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr", "    std::vector<long> ans;\n    long max_val\
    \ = arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n        if (max_val\
    \ < arr[i]) {\n            max_val = arr[i];\n        }\n    }\n    long cnt =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(max_val);\n            cnt++;\n            max_val\
    \ = arr[i];\n        }\n    }\n    if (cnt < k) {\n        ans.resize(k, max_val);\n\
    \    }\n    return ans;", "    // Your code goes here\n    \n    long long int\
    \ max = 0;\n    long long int maxIndex = 0;\n    \n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ maxIndex = i;\n        }\n    }\n    \n    std::vector<long> result;\n    \n\
    \    for (int i = 0; i < k; i++) {\n        result.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    \n    return result;", "    // Your code here\n\
    \    std::vector<long> result;\n    long max = 0;\n    long min = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n         \
    \   max = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    long mid = max;\n    long mid2 = min;\n    long mid3 =\
    \ max;\n    long mid4 = min;\n    long mid5 = max;\n    long mid6 = min;\n   \
    \ long mid7 = max;\n    long mid8 = min;\n    long mid9 = max;\n    long mid10\
    \ = min;\n    long mid11 = max;\n    long mid12 = min;\n    long mid13 = max;\n\
    \    long mid14 = min;\n    long mid15 = max;\n    long mid16 = min;\n    long\
    \ mid17 = max;\n    long mid18 = min;\n    long mid19 = max;\n    long mid20 =\
    \ min;\n    long mid21 = max;\n    long mid22 = min;\n    long mid23 = max;\n\
    \    long mid24 = min;\n    long mid25 = max;\n    long mid26 = min;\n    long\
    \ mid27 = max;\n    long mid28 = min;\n    long mid29 = max;\n    long mid30 =\
    \ min;\n    long mid31 = max;\n    long mid32 = min;\n    long mid33 = max;\n\
    \    long mid34 = min;\n    long mid35 = max;\n    long mid36 = min;\n    long\
    \ mid37 = max;\n    long mid38 = min;\n    long mid39 = max;\n    long mid40 =\
    \ min;\n    long mid41 = max;\n    long mid42 = min;\n    long mid43 = max;\n\
    \    long mid44 = min;\n    long mid45 = max;\n    long mid46 = min;\n    long\
    \ mid47 = max;\n    long mid48 = min;\n    long mid49 = max;\n    long mid50 =\
    \ min;\n    long mid51 = max;\n    long mid52 = min;\n    long mid53 = max;\n\
    \    long mid54 = min;\n    long mid55 = max;\n    long mid56 = min;\n    long\
    \ mid57 = max;\n    long mid58 = min;\n    long ", "    // Your code here\n  \
    \  long max_val = arr[0];\n    std::vector<long> max_arr;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n  \
    \      if(arr[i] > max_val) {\n            max_arr.push_back(arr[i]);\n      \
    \  }\n    }\n    return max_arr;", "    // write your code here\n    std::vector<long>\
    \ ans;\n    long max = 0;\n    for(long i = 0; i < arr.size(); i++) {\n      \
    \  if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max && arr[i] % k == 0) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "   \
    \ // Your code here\n    long long max = 0;\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n    \
    \    if(arr[i] == max) {\n            ans.push_back(arr[i]);\n        }\n    }\n\
    \    for(long i = 0; i < k; i++) {\n        ans.push_back(max);\n    }\n    return\
    \ ans;", "    // Your code here\n    long long max = 0;\n    long long temp =\
    \ 0;\n    long long count = 0;\n    for(long long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            temp = arr[i];\n            count = 0;\n            for(long long\
    \ j = 0; j < arr.size(); j++) {\n                if(arr[j] > temp) {\n       \
    \             temp = arr[j];\n                    count++;\n                }\n\
    \            }\n            if(count == k) {\n                arr.erase(arr.begin()\
    \ + i);\n                arr.insert(arr.begin() + i, temp);\n            }\n \
    \       }\n    }\n    return arr;", "    // Your code here\n    long n = arr.size();\n\
    \    long m = std::min(n, k);\n    std::vector<long> result;\n    for(long i =\
    \ 0; i < m; i++) {\n        long max = 0;\n        for(long j = 0; j < n; j++)\
    \ {\n            if(arr[j] > max) {\n                max = arr[j];\n         \
    \   }\n        }\n        result.push_back(max);\n    }\n    return result;",
  "    // Your code here\n    std::vector<long> max;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(max.size() == k) {\n            break;\n        }\n     \
    \   if(arr[i] > max[k]) {\n            max.resize(k, arr[i]);\n        }\n   \
    \ }\n    return max;", "    // Your code here\n    long n = arr.size();\n    long\
    \ max_val = arr[0];\n    std::vector<long> ans;\n    for(long i = 0; i < n; i++)\
    \ {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    for(long i = 0; i < n; i++) {\n        if(arr[i] > max_val) {\n  \
    \          ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(max_val);\n\
    \    return ans;", "    long n = arr.size();\n    long m = std::min(n, k);\n \
    \   std::vector<long> ans;\n    long cur = 0;\n    long max = 0;\n    for (long\
    \ i = 0; i < m; i++) {\n        long curMax = std::max(arr[cur], arr[i]);\n  \
    \      if (curMax < max) {\n            max = curMax;\n        }\n        cur\
    \ = i;\n    }\n    ans.push_back(max);\n    return ans;", "    // Your code here\n\
    \    std::vector<long> ans;\n    long max = 0;\n    long index = 0;\n    long\
    \ sum = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n\
    \        if(sum > max) {\n            max = sum;\n            index = i;\n   \
    \     }\n    }\n    ans.push_back(arr[index]);\n    for(long i = index + 1; i\
    \ < arr.size(); i++) {\n        sum += arr[i];\n        if(sum > max) {\n    \
    \        max = sum;\n            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n\
    \    return ans;", "    long n = arr.size();\n    std::vector<long> max(n);\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i <\
    \ n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    max[max_idx] = max_val;\n   \
    \ for (long i = max_idx + 1; i < k; i++) {\n        max[i] = arr[i];\n    }\n\
    \    return max;", "    // Your code here\n    std::vector<long> result;\n   \
    \ long max = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n    long\
    \ count = 0;\n    long size = arr.size();\n    while (i < size) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n    }\n\
    \    i = size;\n    while (i > k) {\n        if (max < arr[i]) {\n           \
    \ temp = arr[i];\n            arr[i] = max;\n            max = temp;\n       \
    \ }\n        i--;\n    }\n    while (j < size) {\n        if (arr[j] > max) {\n\
    \            max = arr[j];\n        }\n        j++;\n    }\n    j = size;\n  \
    \  while (j > k) {\n        if (max < arr[j]) {\n            temp = arr[j];\n\
    \            arr[j] = max;\n            max = temp;\n        }\n        j--;\n\
    \    }\n    while (i < size) {\n        if (arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        i++;\n    }\n    i = size;\n    while (i < k) {\n\
    \        result.push_back(max);\n        i++;\n    }\n    return result;", " \
    \   // Your code here\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    // Your code goes here\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;", " \
    \   // Your code here\n    long max = 0;\n    std::vector<long> ans;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n         \
    \   max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max) {\n            ans.push_back(arr[i]);\n      \
    \  }\n    }\n    return ans;", "    std::vector<long> ans;\n    long max = 0;\n\
    \    long min = 0;\n    long mid = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        mid = (min + max) / 2;\n        if (arr[i] > mid) {\n           \
    \ max = mid;\n        } else if (arr[i] < mid) {\n            min = mid;\n   \
    \     } else {\n            ans.push_back(mid);\n        }\n    }\n    if (ans.size()\
    \ > k) {\n        ans.resize(ans.size() - k);\n    }\n    return ans;", "    //\
    \ Your code goes here\n    \n    long long max = 0;\n    long long temp = 0;\n\
    \    long long count = 0;\n    long long i = 0;\n    \n    while(i < arr.size()\
    \ && count < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n   \
    \         temp = i;\n        }\n        i++;\n        count++;\n    }\n    \n\
    \    std::vector<long> ans;\n    while(count > 0) {\n        ans.push_back(arr[temp]);\n\
    \        temp++;\n        count--;\n    }\n    \n    return ans;", "    // Your\
    \ code here\n    long long max = 0;\n    long long maxIndex = 0;\n    for(long\
    \ long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n           \
    \ max = arr[i];\n            maxIndex = i;\n        }\n    }\n    std::vector<long>\
    \ result;\n    for(long long i = 0; i < k; i++) {\n        result.push_back(arr[maxIndex]);\n\
    \        maxIndex++;\n    }\n    return result;", "    // Your code here\n   \
    \ \n    long long max = 0;\n    long long index = 0;\n    long long count = 0;\n\
    \    \n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n            index = i;\n        }\n    }\n   \
    \ \n    for(long long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max)\
    \ {\n            count++;\n        }\n    }\n    \n    std::vector<long> ans;\n\
    \    \n    while(count < k) {\n        ans.push_back(arr[index]);\n        index++;\n\
    \        count++;\n    }\n    \n    return ans;", "    // Your code here\n   \
    \ long max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    std::vector<long> ans;\n    ans.push_back(arr[max_idx]);\n\
    \    for(long i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > arr[max_idx])\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;", " \
    \   // Your code here\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return result;", "    // Your code here\n    std::vector<long>\
    \ ans;\n    long max = 0;\n    long min = 0;\n    long mid = 0;\n    long count\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            mid = i;\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr[i];\n            mid = i;\n        }\n     \
    \   if(arr[i] == max) {\n            count++;\n        }\n    }\n    ans.push_back(max);\n\
    \    ans.push_back(min);\n    ans.push_back(arr[mid]);\n    ans.push_back(count);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[mid]);\n\
    \    ans.push_back(arr[mid]);\n    ", "    // Your code here\n    std::vector<long>\
    \ max;\n    max.reserve(k);\n    long maxVal = arr[0];\n    for(long i = 1; i\
    \ < k; i++) {\n        if(arr[i] > maxVal) {\n            maxVal = arr[i];\n \
    \       }\n    }\n    for(long i = 0; i < k; i++) {\n        if(arr[i] > maxVal)\
    \ {\n            max.push_back(arr[i]);\n        }\n    }\n    return max;", " \
    \   long n = arr.size();\n    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ n; i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        long val = arr[i];\n\
    \        long idx = i;\n        while (idx < arr.size() && arr[idx] > val) {\n\
    \            idx++;\n        }\n        ans.push_back(val);\n        ans.insert(ans.end(),\
    \ arr.begin() + idx, arr.begin() + i + 1);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    long max_val = arr[0];\n    long max_idx = 1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    for (long i = max_idx;\
    \ i < k; i++) {\n        result.push_back(max_val);\n        max_val--;\n    }\n\
    \    return result;", "    // Your code here\n    std::vector<long> result;\n\
    \    long max = 0;\n    long min = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n      \
    \  if(arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    long mid\
    \ = max - (max - min) / 2;\n    for(long i = 0; i < arr.size(); i++) {\n     \
    \   if(arr[i] > mid) {\n            result.push_back(arr[i]);\n        }\n   \
    \ }\n    for(long i = 0; i < result.size(); i++) {\n        if(result[i] < k)\
    \ {\n            result.erase(result.begin() + i);\n        }\n    }\n    return\
    \ result;", "    // Your code here\n    long max = 0;\n    std::vector<long> res;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            res.push_back(arr[i]);\n \
    \       }\n    }\n    return res;", "    long n = arr.size();\n    long m = std::min(n,\
    \ k);\n    std::vector<long> ans;\n    long cur = 0;\n    for (long i = 0; i <\
    \ m; i++) {\n        long max = 0;\n        for (long j = 0; j < n; j++) {\n \
    \           if (arr[j] > max) {\n                max = arr[j];\n             \
    \   cur = j;\n            }\n        }\n        ans.push_back(max);\n    }\n \
    \   return ans;", "    // Your code here\n    \n    long max_val = arr[0];\n \
    \   std::vector<long> max_vec;\n    \n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    \n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_vec.push_back(arr[i]);\n        }\n    }\n   \
    \ \n    return max_vec;", "    std::vector<long> ans;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;", "    // Your code here\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    long min_val = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n        }\n        if (arr[i] < min_val) {\n            min_val\
    \ = arr[i];\n        }\n    }\n    long mid = max_val - min_val;\n    long count\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(max_val);\n            count++;\n            max_val\
    \ = arr[i];\n        } else if (arr[i] < min_val) {\n            ans.push_back(min_val);\n\
    \            count++;\n            min_val = arr[i];\n        } else {\n     \
    \       ans.push_back(arr[i]);\n        }\n        if (count == k) {\n       \
    \     break;\n        }\n    }\n    return ans;", "    // Your code here\n   \
    \ std::vector<long> ans;\n    long max = 0;\n    long index = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = index; i < arr.size(); i++) {\n        if (arr[i] > max) {\n\
    \            max = arr[i];\n            ans.push_back(i);\n        }\n    }\n\
    \    return ans;", "    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long mid = 0;\n    long count = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n         \
    \   max = arr[i];\n            mid = i;\n        }\n        if (arr[i] < min)\
    \ {\n            min = arr[i];\n            mid = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    ans.push_back(min);\n    ans.push_back(arr[mid]);\n    ans.push_back(arr[arr.size()\
    \ - 1]);\n    ans.push_back(arr[arr.size() - 2]);\n    ans.push_back(arr[arr.size()\
    \ - 3]);\n    ans.push_back(arr[arr.size() - 4]);\n    ans.push_back(arr[arr.size()\
    \ - 5]);\n    ans.push_back(arr[arr.size() - 6]);\n    ans.push_back(arr[arr.size()\
    \ - 7]);\n    ans.push_back(arr[arr.size() - 8]);\n    ans.push_back(arr[arr.size()\
    \ - 9]);\n    ans.push_back(arr[arr.size() - 10]);\n    ans.push_back(arr[arr.size()\
    \ - 11]);\n    ans.push_back(arr[arr.size() - 12]);\n    ans.push_back(arr[arr.size()\
    \ - 13]);\n    ans.push_back(arr[arr.size() - 14]);\n    ans.push_back(arr[arr.size()\
    \ - 15]);\n    ans.push_back(arr[arr.size() - 16]);\n    ans.push_back(arr[arr.size()\
    \ - 17]);\n    ans.push_back(arr[arr.size() - 18]);\n    ans.push_back(arr[arr.size()\
    \ - 19]);\n    ans.push_back(arr[arr.size() - 20]);\n    ans.push_back(arr[arr.size()\
    \ - 21]);\n    ans.push_back(arr[arr.size() - 22]);\n    ans.push_back(arr[arr.size()\
    \ - 23]);\n    ans.push_back(arr[arr.size() - 24]);\n    ans.push_back(arr[arr.size()\
    \ - 25]);\n    ans.push_back(arr[arr.size() - 26]);\n    ans.push_back(arr[arr.size()\
    \ - 27]);\n    ans.push_back(arr[arr.size() - 28]);\n    ans.push_back(arr[arr.size()\
    \ - 29]);\n    ans.push_back(arr[arr.size() - 30]);\n    ans.push_back(arr[arr.size()\
    \ - 31]);\n    ans.push_back(arr[arr.size() - 32]);\n    ans.push_back(arr[arr.size()\
    \ - 33]);\n    ans.push_back(arr[arr.size() - 34]);\n    ans.push_back(arr[arr.size()\
    \ - 35]);\n    ans.push_back(arr[arr.size() - 36]);\n    ans.push_back(arr[arr.size()\
    \ - 37]);\n    an", "    // write your code here\n    long long max = 0;\n   \
    \ long long maxIndex = 0;\n    long long index = 0;\n    long long sum = 0;\n\
    \    long long sumIndex = 0;\n    long long count = 0;\n    long long countIndex\
    \ = 0;\n    long long temp = 0;\n    long long tempIndex = 0;\n    long long maxIndex2\
    \ = 0;\n    long long maxIndex2Index = 0;\n    long long maxIndex3 = 0;\n    long\
    \ long maxIndex3Index = 0;\n    long long maxIndex4 = 0;\n    long long maxIndex4Index\
    \ = 0;\n    long long maxIndex5 = 0;\n    long long maxIndex5Index = 0;\n    long\
    \ long maxIndex6 = 0;\n    long long maxIndex6Index = 0;\n    long long maxIndex7\
    \ = 0;\n    long long maxIndex7Index = 0;\n    long long maxIndex8 = 0;\n    long\
    \ long maxIndex8Index = 0;\n    long long maxIndex9 = 0;\n    long long maxIndex9Index\
    \ = 0;\n    long long maxIndex10 = 0;\n    long long maxIndex10Index = 0;\n  \
    \  long long maxIndex11 = 0;\n    long long maxIndex11Index = 0;\n    long long\
    \ maxIndex12 = 0;\n    long long maxIndex12Index = 0;\n    long long maxIndex13\
    \ = 0;\n    long long maxIndex13Index = 0;\n    long long maxIndex14 = 0;\n  \
    \  long long maxIndex14Index = 0;\n    long long maxIndex15 = 0;\n    long long\
    \ maxIndex15Index = 0;\n    long long maxIndex16 = 0;\n    long long maxIndex16Index\
    \ = 0;\n    long long maxIndex17 = 0;\n    long long maxIndex17Index = 0;\n  \
    \  long long maxIndex18 = 0;\n    long long maxIndex18Index = 0;\n    long long\
    \ maxIndex19 = 0;\n    long long maxIndex19Index = 0;\n    long long maxIndex20\
    \ = 0;\n    long long maxIndex20Index = 0;\n    long long maxIndex21 = 0;\n  \
    \  long long maxIndex21Index = 0;\n    long long maxIndex22 = 0;\n    long long\
    \ maxIndex22Index = 0;\n    long long maxIndex23 = 0;\n    long long maxIndex23Index\
    \ = 0;\n    long long maxIndex24 = 0;\n    long long maxIndex24Index = 0;\n  \
    \  long long maxIndex25 = 0;\n    long long maxIndex25Index = 0;\n    long long\
    \ maxIndex26 = 0;\n    long long maxIndex26Index = 0;\n    long long maxIndex27\
    \ = 0;\n    long long maxIndex27Index = 0;\n    long long maxIndex28 = 0;\n  \
    \  long long max", "    long n = arr.size();\n    long m = std::min(n, k);\n \
    \   std::vector<long> ans;\n    long max_val = arr[0];\n    long max_idx = 1;\n\
    \    for (long i = 1; i < m; ++i) {\n        if (arr[i] > max_val) {\n       \
    \     max_val = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    for (long i = max_idx + 1; i < n; ++i) {\n        if (arr[i] > max_val) {\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;", "   \
    \ long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long> res(m,\
    \ 0);\n    for (long i = 0; i < m; i++) {\n        long curr = arr[i];\n     \
    \   for (long j = i; j < n; j++) {\n            if (arr[j] > curr) {\n       \
    \         res[i] = arr[j];\n                break;\n            }\n        }\n\
    \    }\n    return res;", "    // Your code here\n    std::vector<long> result;\n\
    \    long max = 0;\n    long min = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n      \
    \  if(arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max && arr[i] < min) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    for(long i = 0;\
    \ i < result.size(); i++) {\n        if(result[i] > k) {\n            result.erase(result.begin()\
    \ + i);\n        }\n    }\n    return result;", "    long n = arr.size();\n  \
    \  long m = n;\n    std::vector<long> ans;\n    long max_val = arr[0];\n    long\
    \ max_idx = 1;\n    long min_val = arr[0];\n    long min_idx = 1;\n    for (long\
    \ i = 1; i < n; i++) {\n        if (arr[i] > max_val) {\n            max_val =\
    \ arr[i];\n            max_idx = i;\n        }\n        if (arr[i] < min_val)\
    \ {\n            min_val = arr[i];\n            min_idx = i;\n        }\n    }\n\
    \    long mid = max_idx;\n    long left_idx = max_idx;\n    long right_idx = max_idx;\n\
    \    while (left_idx < n) {\n        mid = (left_idx + right_idx) / 2;\n     \
    \   if (arr[mid] > max_val) {\n            right_idx = mid;\n        } else {\n\
    \            left_idx = mid;\n        }\n    }\n    mid = (left_idx + right_idx)\
    \ / 2;\n    if (arr[mid] > max_val) {\n        ans.push_back(arr[mid]);\n    }\
    \ else {\n        ans.push_back(arr[right_idx]);\n    }\n    while (left_idx >\
    \ 1) {\n        mid = (left_idx + right_idx) / 2;\n        if (arr[mid] > max_val)\
    \ {\n            right_idx = mid;\n        } else {\n            left_idx = mid;\n\
    \        }\n    }\n    mid = (left_idx + right_idx) / 2;\n    if (arr[mid] > max_val)\
    \ {\n        ans.push_back(arr[mid]);\n    } else {\n        ans.push_back(arr[right_idx]);\n\
    \    }\n    while (right_idx < n) {\n        mid = (left_idx + right_idx) / 2;\n\
    \        if (arr[mid] > max_val) {\n            left_idx = mid;\n        } else\
    \ {\n            right_idx = mid;\n        }\n    }\n    mid = (left_idx + right_idx)\
    \ / 2;\n    if (arr[mid] > max_val) {\n        ans.push_back(arr[mid]);\n    }\
    \ else {\n        ans.push_back(arr[left_idx]);\n    }\n    return ans;", "  \
    \  // Your code here\n    std::vector<long> ans;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    long size = arr.size();\n    for (long i =\
    \ 0; i < size; i++) {\n        if (arr[i] > max) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    ans.push_back(max);\n    return ans;", "    std::vector<long>\
    \ ans;\n    long max = 0;\n    long min = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n  \
    \  long mid = max - (min + 1);\n    long mid2 = mid / 2;\n    long mid3 = mid\
    \ - mid2;\n    long mid4 = mid3 / 2;\n    long mid5 = mid3 - mid4;\n    long mid6\
    \ = mid5 / 2;\n    long mid7 = mid5 - mid6;\n    long mid8 = mid7 / 2;\n    long\
    \ mid9 = mid7 - mid8;\n    long mid10 = mid9 / 2;\n    long mid11 = mid9 - mid10;\n\
    \    long mid12 = mid11 / 2;\n    long mid13 = mid11 - mid12;\n    long mid14\
    \ = mid13 / 2;\n    long mid15 = mid13 - mid14;\n    long mid16 = mid15 / 2;\n\
    \    long mid17 = mid15 - mid16;\n    long mid18 = mid17 / 2;\n    long mid19\
    \ = mid17 - mid18;\n    long mid20 = mid19 / 2;\n    long mid21 = mid19 - mid20;\n\
    \    long mid22 = mid21 / 2;\n    long mid23 = mid21 - mid22;\n    long mid24\
    \ = mid23 / 2;\n    long mid25 = mid23 - mid24;\n    long mid26 = mid25 / 2;\n\
    \    long mid27 = mid25 - mid26;\n    long mid28 = mid27 / 2;\n    long mid29\
    \ = mid27 - mid28;\n    long mid30 = mid29 / 2;\n    long mid31 = mid29 - mid30;\n\
    \    long mid32 = mid31 / 2;\n    long mid33 = mid31 - mid32;\n    long mid34\
    \ = mid33 / 2;\n    long mid35 = mid33 - mid34;\n    long mid36 = mid35 / 2;\n\
    \    long mid37 = mid35 - mid36;\n    long mid38 = mid37 / 2;\n    long mid39\
    \ = mid37 - mid38;\n    long mid40 = mid39 / 2;\n    long mid41 = mid39 - mid40;\n\
    \    long mid42 = mid41 / 2;\n    long mid43 = mid41 - mid42;\n    long mid44\
    \ = mid4", "    // Your code here\n    std::vector<long> ans;\n    long max =\
    \ 0;\n    long index = 0;\n    long sum = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \            index = i;\n        }\n    }\n    ans.push_back(arr[index]);\n  \
    \  for(long i = index + 1; i < arr.size(); i++) {\n        sum += arr[i];\n  \
    \      if(sum > max) {\n            max = sum;\n            index = i;\n     \
    \   }\n    }\n    ans.push_back(arr[index]);\n    return ans;", "    std::vector<long>\
    \ result;\n    long max_val = arr[0];\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(max_val);\n\
    \        max_val--;\n    }\n    return result;", "    // Your code here\n    long\
    \ long ans = 0;\n    long long max = 0;\n    long long cur = 0;\n    long long\
    \ i = 0;\n    long long j = 0;\n    long long k = 0;\n    long long n = arr.size();\n\
    \    long long m = n;\n    long long sum = 0;\n    long long temp = 0;\n    long\
    \ long count = 0;\n    long long maxcount = 0;\n    long long maxsum = 0;\n  \
    \  long long maxtemp = 0;\n    long long maxcount = 0;\n    long long maxsum =\
    \ 0;\n    long long maxtemp = 0;\n    long long maxcount = 0;\n    long long maxsum\
    \ = 0;\n    long long maxtemp = 0;\n    long long maxcount = 0;\n    long long\
    \ maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount = 0;\n    long\
    \ long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount = 0;\n\
    \    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    long long maxcount\
    \ = 0;\n    long long maxsum = 0;\n    long long maxtemp = 0;\n    ", "    //\
    \ Your code here\n    \n    long long max = 0;\n    long long maxIndex = 0;\n\
    \    long long index = 0;\n    \n    for(int i = 0; i < arr.size(); i++){\n  \
    \      if(arr[i] > max){\n            max = arr[i];\n            maxIndex = i;\n\
    \        }\n    }\n    \n    std::vector<long> result;\n    \n    while(maxIndex\
    \ < arr.size() && index < k){\n        result.push_back(arr[maxIndex]);\n    \
    \    maxIndex++;\n        index++;\n    }\n    \n    return result;", "    //\
    \ Your code here\n    long long max = 0;\n    long long maxIndex = 0;\n    long\
    \ long index = 0;\n    long long sum = 0;\n    long long count = 0;\n    long\
    \ long sum2 = 0;\n    long long count2 = 0;\n    long long sum3 = 0;\n    long\
    \ long count3 = 0;\n    long long sum4 = 0;\n    long long count4 = 0;\n    long\
    \ long sum5 = 0;\n    long long count5 = 0;\n    long long sum6 = 0;\n    long\
    \ long count6 = 0;\n    long long sum7 = 0;\n    long long count7 = 0;\n    long\
    \ long sum8 = 0;\n    long long count8 = 0;\n    long long sum9 = 0;\n    long\
    \ long count9 = 0;\n    long long sum10 = 0;\n    long long count10 = 0;\n   \
    \ long long sum11 = 0;\n    long long count11 = 0;\n    long long sum12 = 0;\n\
    \    long long count12 = 0;\n    long long sum13 = 0;\n    long long count13 =\
    \ 0;\n    long long sum14 = 0;\n    long long count14 = 0;\n    long long sum15\
    \ = 0;\n    long long count15 = 0;\n    long long sum16 = 0;\n    long long count16\
    \ = 0;\n    long long sum17 = 0;\n    long long count17 = 0;\n    long long sum18\
    \ = 0;\n    long long count18 = 0;\n    long long sum19 = 0;\n    long long count19\
    \ = 0;\n    long long sum20 = 0;\n    long long count20 = 0;\n    long long sum21\
    \ = 0;\n    long long count21 = 0;\n    long long sum22 = 0;\n    long long count22\
    \ = 0;\n    long long sum23 = 0;\n    long long count23 = 0;\n    long long sum24\
    \ = 0;\n    long long count24 = 0;\n    long long sum25 = 0;\n    long long count25\
    \ = 0;\n    long long sum26 = 0;\n    long long count26 = 0;\n    long long sum27\
    \ = 0;\n    long long count27 = 0;\n    long long sum28 = 0;\n    long long count28\
    \ = 0;\n    long long sum29 = 0;\n    long long count29 = 0;\n    long long sum30\
    \ = 0;\n    long long count30 = 0;\n    long long sum31 = 0;\n    long long count31\
    \ = 0;\n    long long sum32 = 0;\n    long long count32 = 0;\n    long long sum33\
    \ = 0;\n    long long count33 = 0;\n    long long sum34 = 0;\n    long long count34\
    \ = 0;\n    long long sum35 = 0;\n    long long count35 = 0;\n    long long sum36\
    \ = 0;\n    long ", "    // Your code goes here\n    \n    long long ans = 0;\n\
    \    long long max = 0;\n    long long i = 0;\n    long long j = 0;\n    \n  \
    \  while(i < arr.size() && j < k) {\n        if(arr[i] > arr[j]) {\n         \
    \   ans = arr[i];\n            max = arr[i];\n            i++;\n        } else\
    \ {\n            ans = arr[j];\n            max = arr[j];\n            j++;\n\
    \        }\n    }\n    \n    while(i < arr.size()) {\n        ans = arr[i];\n\
    \        max = arr[i];\n        i++;\n    }\n    \n    while(j < k) {\n      \
    \  ans = arr[j];\n        max = arr[j];\n        j++;\n    }\n    \n    std::vector<long>\
    \ ans_list;\n    \n    while(i < arr.size()) {\n        ans_list.push_back(ans);\n\
    \        ans = max;\n        max = arr[i];\n        i++;\n    }\n    \n    while(j\
    \ < k) {\n        ans_list.push_back(ans);\n        ans = max;\n        max =\
    \ arr[j];\n        j++;\n    }\n    \n    return ans_list;", "    std::vector<long>\
    \ ans;\n    long max = 0;\n    for (long i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    long\
    \ mid = max / 2;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > mid) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;",
  "    long n = arr.size();\n    long m = std::min(n, k);\n    std::vector<long> ans;\n\
    \    long cur = 0;\n    long max = 0;\n    for (long i = 0; i < m; i++) {\n  \
    \      long cur = arr[i];\n        if (cur > max) {\n            max = cur;\n\
    \        }\n    }\n    long cur = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     long cur = arr[i];\n        if (cur > max) {\n            ans.push_back(cur);\n\
    \        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
