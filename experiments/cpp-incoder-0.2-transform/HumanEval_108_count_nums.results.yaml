language: cpp
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i : arr) {\n        if (i >= 0) {\n           \
    \ ans += 1;\n        } else {\n            ans += std::abs(i);\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n   \
    \ assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ujrp54c.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmp5ujrp54c.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmp5ujrp54c.cpp:\
    \ In function 'int main()':\n/tmp/tmp5ujrp54c.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5ujrp54c.cpp:2:\n/tmp/tmp5ujrp54c.cpp:26:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmp5ujrp54c.cpp:27:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmp5ujrp54c.cpp:27:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmp5ujrp54c.cpp:27:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5ujrp54c.cpp:27:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5ujrp54c.cpp:27:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5ujrp54c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i : arr) {\n        if (i >= 0) {\n           \
    \ ans += i;\n        } else {\n            ans += (i / 10);\n            ans -=\
    \ i % 10;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0mye01bd.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmp0mye01bd.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmp0mye01bd.cpp:\
    \ In function 'int main()':\n/tmp/tmp0mye01bd.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0mye01bd.cpp:2:\n/tmp/tmp0mye01bd.cpp:27:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmp0mye01bd.cpp:28:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmp0mye01bd.cpp:28:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmp0mye01bd.cpp:28:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp0mye01bd.cpp:28:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0mye01bd.cpp:28:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0mye01bd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i : arr) {\n        ans += (i >> 31) & 1;\n   \
    \     ans += (i >> 30) & 1;\n        ans += (i >> 29) & 1;\n        ans += (i\
    \ >> 28) & 1;\n        ans += (i >> 27) & 1;\n        ans += (i >> 26) & 1;\n\
    \        ans += (i >> 25) & 1;\n        ans += (i >> 24) & 1;\n        ans +=\
    \ (i >> 23) & 1;\n        ans += (i >> 22) & 1;\n        ans += (i >> 21) & 1;\n\
    \        ans += (i >> 20) & 1;\n        ans += (i >> 19) & 1;\n        ans +=\
    \ (i >> 18) & 1;\n        ans += (i >> 17) & 1;\n        ans += (i >> 16) & 1;\n\
    \        ans += (i >> 15) & 1;\n        ans += (i >> 14) & 1;\n        ans +=\
    \ (i >> 13) & 1;\n        ans += (i >> 12) & 1;\n        ans += (i >> 11) & 1;\n\
    \        ans += (i >> 10) & 1;\n        ans += (i >> 9) & 1;\n        ans += (i\
    \ >> 8) & 1;\n        ans += (i >> 7) & 1;\n        ans += (i >> 6) & 1;\n   \
    \     ans += (i >> 5) & 1;\n        ans += (i >> 4) & 1;\n        ans += (i >>\
    \ 3) & 1;\n        ans += (i >> 2) & 1;\n        ans += (i >> 1) & 1;\n      \
    \  ans += (i >> 0) & 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvv1x5al7.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpvv1x5al7.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpvv1x5al7.cpp:\
    \ In function 'int main()':\n/tmp/tmpvv1x5al7.cpp:52:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvv1x5al7.cpp:2:\n/tmp/tmpvv1x5al7.cpp:53:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpvv1x5al7.cpp:54:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpvv1x5al7.cpp:54:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpvv1x5al7.cpp:54:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpvv1x5al7.cpp:54:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvv1x5al7.cpp:54:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpvv1x5al7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (auto i : arr) {\n        ans += count_nums(std::vector<long>({i}));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptobu3a94.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmptobu3a94.cpp:15:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmptobu3a94.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return ans;\n     ^\n/tmp/tmptobu3a94.cpp:18:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error:\
    \ expected ';' before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error: expected ')' before 'return'\n\
    /tmp/tmptobu3a94.cpp: In function 'int main()':\n/tmp/tmptobu3a94.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = count_nums;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmptobu3a94.cpp:2:\n/tmp/tmptobu3a94.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmptobu3a94.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmptobu3a94.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmptobu3a94.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmptobu3a94.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptobu3a94.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i : arr) {\n        ans += count_nums(std::vector<long>({i}));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9o5u3lj.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpc9o5u3lj.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpc9o5u3lj.cpp:16:44:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n         ans += count_nums(std::vector<long>({i}));\n\
    \                                            ^\n/tmp/tmpc9o5u3lj.cpp:16:48: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n         ans += count_nums(std::vector<long>({i}));\n         \
    \                                       ^\n/tmp/tmpc9o5u3lj.cpp:16:48: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpc9o5u3lj.cpp: In function 'int main()':\n/tmp/tmpc9o5u3lj.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = count_nums;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc9o5u3lj.cpp:2:\n/tmp/tmpc9o5u3lj.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpc9o5u3lj.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpc9o5u3lj.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpc9o5u3lj.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc9o5u3lj.cpp:23:70: error"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (auto i : arr) {\n        long sum = 0;\n        while\
    \ (i != 0) {\n            sum += i % 10;\n            i /= 10;\n        }\n  \
    \      if (sum > 0) {\n            ans++;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp61f320hj.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmp61f320hj.cpp:15:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmp61f320hj.cpp:25:5: error: expected\
    \ ';' before 'return'\n     return ans;\n     ^\n/tmp/tmp61f320hj.cpp:25:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp61f320hj.cpp:25:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp61f320hj.cpp:25:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp61f320hj.cpp:25:5: error: expected ')' before 'return'\n\
    /tmp/tmp61f320hj.cpp: In function 'int main()':\n/tmp/tmp61f320hj.cpp:28:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = count_nums;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp61f320hj.cpp:2:\n/tmp/tmp61f320hj.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmp61f320hj.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmp61f320hj.cpp:30:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmp61f320hj.cpp:30:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp61f320hj.cpp:30:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp61f320hj.cpp:30:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i : arr) {\n        if (i >= 0) {\n           \
    \ ans += i;\n        } else {\n            ans += (i / 10) * 10;\n           \
    \ ans -= i % 10;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8cnouv_.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpe8cnouv_.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpe8cnouv_.cpp:\
    \ In function 'int main()':\n/tmp/tmpe8cnouv_.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe8cnouv_.cpp:2:\n/tmp/tmpe8cnouv_.cpp:27:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpe8cnouv_.cpp:28:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpe8cnouv_.cpp:28:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpe8cnouv_.cpp:28:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe8cnouv_.cpp:28:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpe8cnouv_.cpp:28:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe8cnouv_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i : arr) {\n        ans += count_nums(std::vector<long>({i}));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9o5u3lj.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpc9o5u3lj.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpc9o5u3lj.cpp:16:44:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n         ans += count_nums(std::vector<long>({i}));\n\
    \                                            ^\n/tmp/tmpc9o5u3lj.cpp:16:48: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n         ans += count_nums(std::vector<long>({i}));\n         \
    \                                       ^\n/tmp/tmpc9o5u3lj.cpp:16:48: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpc9o5u3lj.cpp: In function 'int main()':\n/tmp/tmpc9o5u3lj.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = count_nums;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc9o5u3lj.cpp:2:\n/tmp/tmpc9o5u3lj.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpc9o5u3lj.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpc9o5u3lj.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpc9o5u3lj.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpc9o5u3lj.cpp:23:70: error"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    long sum = 0;\n    long digit = 0;\n    for (long i : arr)\
    \ {\n        sum += i;\n        if (sum > 0) {\n            digit = sum % 10;\n\
    \            sum += digit > 0 ? 1 : 0;\n            ans += digit > 0;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n\
    \    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1r03tef.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmp_1r03tef.cpp:17:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmp_1r03tef.cpp:\
    \ In function 'int main()':\n/tmp/tmp_1r03tef.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_1r03tef.cpp:2:\n/tmp/tmp_1r03tef.cpp:29:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmp_1r03tef.cpp:30:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmp_1r03tef.cpp:30:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmp_1r03tef.cpp:30:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_1r03tef.cpp:30:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_1r03tef.cpp:30:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_1r03tef.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (auto i : arr) {\n        ans += count_nums(std::vector<long>({i}));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptobu3a94.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmptobu3a94.cpp:15:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmptobu3a94.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return ans;\n     ^\n/tmp/tmptobu3a94.cpp:18:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error:\
    \ expected ';' before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error: expected ')' before 'return'\n\
    /tmp/tmptobu3a94.cpp: In function 'int main()':\n/tmp/tmptobu3a94.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = count_nums;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmptobu3a94.cpp:2:\n/tmp/tmptobu3a94.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmptobu3a94.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmptobu3a94.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmptobu3a94.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmptobu3a94.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptobu3a94.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (long i : arr) {\n        if (i >= 0) {\n           \
    \ sum += i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfd_h9otq.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpfd_h9otq.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpfd_h9otq.cpp:\
    \ In function 'int main()':\n/tmp/tmpfd_h9otq.cpp:23:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfd_h9otq.cpp:2:\n/tmp/tmpfd_h9otq.cpp:24:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpfd_h9otq.cpp:25:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpfd_h9otq.cpp:25:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpfd_h9otq.cpp:25:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfd_h9otq.cpp:25:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfd_h9otq.cpp:25:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfd_h9otq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long n : arr) {\n        ans += count_digits(n);\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n  \
    \  assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbhq1xliu.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpbhq1xliu.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long n : arr) {\n                   ^\n/tmp/tmpbhq1xliu.cpp:16:30:\
    \ error: 'count_digits' was not declared in this scope\n         ans += count_digits(n);\n\
    \                              ^\n/tmp/tmpbhq1xliu.cpp: In function 'int main()':\n\
    /tmp/tmpbhq1xliu.cpp:21:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = count_nums;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbhq1xliu.cpp:2:\n/tmp/tmpbhq1xliu.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpbhq1xliu.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpbhq1xliu.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpbhq1xliu.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpbhq1xliu.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbhq1xliu.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbhq1xliu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: te"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i : arr) {\n        ans += i;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqz3x3_xl.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpqz3x3_xl.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpqz3x3_xl.cpp:\
    \ In function 'int main()':\n/tmp/tmpqz3x3_xl.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqz3x3_xl.cpp:2:\n/tmp/tmpqz3x3_xl.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpqz3x3_xl.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpqz3x3_xl.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpqz3x3_xl.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpqz3x3_xl.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqz3x3_xl.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqz3x3_xl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n  }\n\
    \  return sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9wy9rnnp.cpp: In function 'int main()':\n/tmp/tmp9wy9rnnp.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = count_nums;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9wy9rnnp.cpp:2:\n/tmp/tmp9wy9rnnp.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmp9wy9rnnp.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmp9wy9rnnp.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmp9wy9rnnp.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp9wy9rnnp.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9wy9rnnp.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp9wy9rnnp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (long i : arr) {\n        if (i >= 0) {\n           \
    \ ans += i;\n        } else {\n            ans += (i / 10) * 10;\n           \
    \ ans -= i % 10;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = count_nums;\n    assert(candidate((std::vector<long>())) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0}))) == (0));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2, (long)-2,\
    \ (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8cnouv_.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpe8cnouv_.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpe8cnouv_.cpp:\
    \ In function 'int main()':\n/tmp/tmpe8cnouv_.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe8cnouv_.cpp:2:\n/tmp/tmpe8cnouv_.cpp:27:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpe8cnouv_.cpp:28:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpe8cnouv_.cpp:28:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpe8cnouv_.cpp:28:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpe8cnouv_.cpp:28:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpe8cnouv_.cpp:28:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe8cnouv_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n  long\
    \ ans = 0;\n  for (long i : arr) {\n    ans += count_nums(std::vector<long>({i}));\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw13nmzzz.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpw13nmzzz.cpp:15:17: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n   for (long i : arr) {\n                 ^\n/tmp/tmpw13nmzzz.cpp:16:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     ans += count_nums(std::vector<long>({i}));\n    \
    \                                    ^\n/tmp/tmpw13nmzzz.cpp:16:44: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     ans += count_nums(std::vector<long>({i}));\n                \
    \                            ^\n/tmp/tmpw13nmzzz.cpp:16:44: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpw13nmzzz.cpp: In function 'int main()':\n/tmp/tmpw13nmzzz.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = count_nums;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw13nmzzz.cpp:2:\n/tmp/tmpw13nmzzz.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpw13nmzzz.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpw13nmzzz.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpw13nmzzz.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw13nmzzz.cpp:23:70: error: no matching functi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long ans = 0;\n    for (auto i : arr) {\n        ans += count_nums(std::vector<long>({i}));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = count_nums;\n \
    \   assert(candidate((std::vector<long>())) == (0));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)-2, (long)0}))) == (0));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)1, (long)2, (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptobu3a94.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmptobu3a94.cpp:15:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmptobu3a94.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return ans;\n     ^\n/tmp/tmptobu3a94.cpp:18:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error:\
    \ expected ';' before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmptobu3a94.cpp:18:5: error: expected ')' before 'return'\n\
    /tmp/tmptobu3a94.cpp: In function 'int main()':\n/tmp/tmptobu3a94.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = count_nums;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmptobu3a94.cpp:2:\n/tmp/tmptobu3a94.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmptobu3a94.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmptobu3a94.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmptobu3a94.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmptobu3a94.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptobu3a94.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (long i : arr) {\n        sum += i;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvj2s148.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpdvj2s148.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpdvj2s148.cpp:\
    \ In function 'int main()':\n/tmp/tmpdvj2s148.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdvj2s148.cpp:2:\n/tmp/tmpdvj2s148.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpdvj2s148.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpdvj2s148.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpdvj2s148.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpdvj2s148.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdvj2s148.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdvj2s148.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (long i : arr) {\n        sum += i;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvj2s148.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpdvj2s148.cpp:15:19: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long i : arr) {\n                   ^\n/tmp/tmpdvj2s148.cpp:\
    \ In function 'int main()':\n/tmp/tmpdvj2s148.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = count_nums;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdvj2s148.cpp:2:\n/tmp/tmpdvj2s148.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpdvj2s148.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpdvj2s148.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpdvj2s148.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpdvj2s148.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdvj2s148.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdvj2s148.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
    \ which takes an array of integers and returns\n// the number of elements which\
    \ has a sum of digits > 0.\n// If a number is negative, then its first signed\
    \ digit will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>>\
    \ count_nums((std::vector<long>()))\n// (0)\n// >>> count_nums((std::vector<long>({(long)-1,\
    \ (long)11, (long)-11})))\n// (1)\n// >>> count_nums((std::vector<long>({(long)1,\
    \ (long)1, (long)2})))\n// (3)\nlong count_nums(std::vector<long> arr) {\n   \
    \ long sum = 0;\n    for (auto i : arr) {\n        sum += i;\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)-1, (long)-2, (long)0})))\
    \ == (0));\n    assert(candidate((std::vector<long>({(long)1, (long)1, (long)2,\
    \ (long)-2, (long)3, (long)4, (long)5}))) == (6));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)6, (long)9, (long)-6, (long)0, (long)1, (long)5}))) == (5));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)100, (long)98, (long)-7, (long)1, (long)-1}))) == (4));\n    assert(candidate((std::vector<long>({(long)12,\
    \ (long)23, (long)34, (long)-45, (long)-56, (long)0}))) == (5));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)1}))) ==\
    \ (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfabl_yxa.cpp: In function 'long int count_nums(std::vector<long\
    \ int>)':\n/tmp/tmpfabl_yxa.cpp:15:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmpfabl_yxa.cpp:18:5: error: expected\
    \ ';' before 'return'\n     return sum;\n     ^\n/tmp/tmpfabl_yxa.cpp:18:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpfabl_yxa.cpp:18:5: error:\
    \ expected ';' before 'return'\n/tmp/tmpfabl_yxa.cpp:18:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpfabl_yxa.cpp:18:5: error: expected ')' before 'return'\n\
    /tmp/tmpfabl_yxa.cpp: In function 'int main()':\n/tmp/tmpfabl_yxa.cpp:21:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = count_nums;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpfabl_yxa.cpp:2:\n/tmp/tmpfabl_yxa.cpp:22:43: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<long>()))\
    \ == (0));\n                                           ^\n/tmp/tmpfabl_yxa.cpp:23:40:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                        ^\n/tmp/tmpfabl_yxa.cpp:23:70:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)-1, (long)-2,\
    \ (long)0}))) == (0));\n                                                     \
    \                 ^\n/tmp/tmpfabl_yxa.cpp:23:70: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfabl_yxa.cpp:23:70: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfabl_yxa.cpp:23:70:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue"
  stdout: ''
