language: cpp
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long max_weight = w;\n  \
    \  long sum = 0;\n    for (auto i : q) {\n        sum += i;\n        if (sum >\
    \ max_weight) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4sgenx0d.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmp4sgenx0d.cpp:21:15: error: 'i' does not name a type\n \
    \    for (auto i : q) {\n               ^\n/tmp/tmp4sgenx0d.cpp:25:5: error: expected\
    \ ';' before 'return'\n     return true;\n     ^\n/tmp/tmp4sgenx0d.cpp:25:5: error:\
    \ expected primary-expression before 'return'\n/tmp/tmp4sgenx0d.cpp:25:5: error:\
    \ expected ';' before 'return'\n/tmp/tmp4sgenx0d.cpp:25:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp4sgenx0d.cpp:25:5: error: expected ')' before 'return'\n\
    /tmp/tmp4sgenx0d.cpp: In function 'int main()':\n/tmp/tmp4sgenx0d.cpp:28:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = will_it_fly;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4sgenx0d.cpp:2:\n/tmp/tmp4sgenx0d.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp4sgenx0d.cpp:29:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp4sgenx0d.cpp:29:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp4sgenx0d.cpp:29:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4sgenx0d.cpp:29:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4sgenx0d.cpp:2:\n/usr/include/c++/4.8.2/bit"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    // Your code here\n    long\
    \ sum = 0;\n    for (long i : q) {\n        sum += i;\n    }\n    if (sum < w)\
    \ {\n        return false;\n    }\n    long max_sum = 0;\n    for (long i : q)\
    \ {\n        max_sum += i;\n    }\n    if (max_sum > w) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4j0w04gv.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmp4j0w04gv.cpp:21:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmp4j0w04gv.cpp:28:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmp4j0w04gv.cpp: In function 'int main()':\n\
    /tmp/tmp4j0w04gv.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4j0w04gv.cpp:2:\n/tmp/tmp4j0w04gv.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp4j0w04gv.cpp:38:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp4j0w04gv.cpp:38:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp4j0w04gv.cpp:38:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4j0w04gv.cpp:38:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4j0w04gv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for (long i : q) {\n        sum += i;\n        if (sum\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_j78brf.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpt_j78brf.cpp:20:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmpt_j78brf.cpp:25:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmpt_j78brf.cpp: In function 'int main()':\n\
    /tmp/tmpt_j78brf.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt_j78brf.cpp:2:\n/tmp/tmpt_j78brf.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpt_j78brf.cpp:33:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpt_j78brf.cpp:33:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpt_j78brf.cpp:33:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt_j78brf.cpp:33:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt_j78brf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for (long i : q) {\n        if (i > max_sum) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgej4uqrf.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpgej4uqrf.cpp:20:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmpgej4uqrf.cpp:25:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmpgej4uqrf.cpp: In function 'int main()':\n\
    /tmp/tmpgej4uqrf.cpp:31:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgej4uqrf.cpp:2:\n/tmp/tmpgej4uqrf.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpgej4uqrf.cpp:32:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpgej4uqrf.cpp:32:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgej4uqrf.cpp:32:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgej4uqrf.cpp:32:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgej4uqrf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long max_weight = w;\n  \
    \  long sum = 0;\n    for (long i : q) {\n        sum += i;\n        if (sum >\
    \ max_weight) {\n            max_weight = sum;\n        }\n    }\n    if (max_weight\
    \ == w) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8o2qasfi.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmp8o2qasfi.cpp:21:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmp8o2qasfi.cpp:\
    \ In function 'int main()':\n/tmp/tmp8o2qasfi.cpp:33:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8o2qasfi.cpp:2:\n/tmp/tmp8o2qasfi.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp8o2qasfi.cpp:34:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp8o2qasfi.cpp:34:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp8o2qasfi.cpp:34:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8o2qasfi.cpp:34:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8o2qasfi.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (auto\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long maxSum = sum;\n    for (auto i : q) {\n        maxSum -= i;\n\
    \        if (maxSum < 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdzvvusx3.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpdzvvusx3.cpp:20:15: error: 'i' does not name a type\n \
    \    for (auto i : q) {\n               ^\n/tmp/tmpdzvvusx3.cpp:23:5: error: expected\
    \ ';' before 'if'\n     if (sum < w) {\n     ^\n/tmp/tmpdzvvusx3.cpp:23:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmpdzvvusx3.cpp:23:5: error: expected\
    \ ';' before 'if'\n/tmp/tmpdzvvusx3.cpp:23:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpdzvvusx3.cpp:23:5: error: expected ')' before 'if'\n/tmp/tmpdzvvusx3.cpp:27:15:\
    \ error: 'i' does not name a type\n     for (auto i : q) {\n               ^\n\
    /tmp/tmpdzvvusx3.cpp:33:5: error: expected ';' before 'return'\n     return true;\n\
    \     ^\n/tmp/tmpdzvvusx3.cpp:33:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmpdzvvusx3.cpp:33:5: error: expected ';' before 'return'\n/tmp/tmpdzvvusx3.cpp:33:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpdzvvusx3.cpp:33:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpdzvvusx3.cpp: In function 'int\
    \ main()':\n/tmp/tmpdzvvusx3.cpp:36:10: error: 'candidate' does not name a type\n\
    \     auto candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdzvvusx3.cpp:2:\n/tmp/tmpdzvvusx3.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpdzvvusx3.cpp:37:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpdzvvusx3.cpp:37:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    long max\
    \ = 0;\n    for (long i : q) {\n        sum += i;\n        if (sum > max) {\n\
    \            max = sum;\n        }\n    }\n    if (sum == w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsolcehnv.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpsolcehnv.cpp:21:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmpsolcehnv.cpp:\
    \ In function 'int main()':\n/tmp/tmpsolcehnv.cpp:33:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsolcehnv.cpp:2:\n/tmp/tmpsolcehnv.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpsolcehnv.cpp:34:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpsolcehnv.cpp:34:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpsolcehnv.cpp:34:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsolcehnv.cpp:34:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsolcehnv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file inc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long max_weight = w;\n  \
    \  long sum = 0;\n    bool fly_it = false;\n    for (auto i : q) {\n        sum\
    \ += i;\n        if (sum > max_weight) {\n            fly_it = true;\n       \
    \     break;\n        }\n    }\n    return fly_it;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5sf5fom.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpj5sf5fom.cpp:22:15: error: 'i' does not name a type\n \
    \    for (auto i : q) {\n               ^\n/tmp/tmpj5sf5fom.cpp:29:5: error: expected\
    \ ';' before 'return'\n     return fly_it;\n     ^\n/tmp/tmpj5sf5fom.cpp:29:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpj5sf5fom.cpp:29:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpj5sf5fom.cpp:29:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpj5sf5fom.cpp:29:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpj5sf5fom.cpp: In function 'int main()':\n/tmp/tmpj5sf5fom.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj5sf5fom.cpp:2:\n/tmp/tmpj5sf5fom.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpj5sf5fom.cpp:33:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpj5sf5fom.cpp:33:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj5sf5fom.cpp:33:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpj5sf5fom.cpp:33:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpj5sf5fom.cpp:2:\n/usr/include/c++/4.8.2/b"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long max_sum = w;\n    long\
    \ sum = 0;\n    for (auto i : q) {\n        sum += i;\n        if (sum > max_sum)\
    \ {\n            max_sum = sum;\n        }\n    }\n    return max_sum == w &&\
    \ std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpox6avkxq.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpox6avkxq.cpp:21:15: error: 'i' does not name a type\n \
    \    for (auto i : q) {\n               ^\n/tmp/tmpox6avkxq.cpp:27:5: error: expected\
    \ ';' before 'return'\n     return max_sum == w && std::equal(q.begin(), q.end(),\
    \ q.rbegin());\n     ^\n/tmp/tmpox6avkxq.cpp:27:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpox6avkxq.cpp:27:5: error: expected ';' before 'return'\n\
    /tmp/tmpox6avkxq.cpp:27:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpox6avkxq.cpp:27:5: error: expected ')' before 'return'\n/tmp/tmpox6avkxq.cpp:\
    \ In function 'int main()':\n/tmp/tmpox6avkxq.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpox6avkxq.cpp:2:\n/tmp/tmpox6avkxq.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpox6avkxq.cpp:31:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpox6avkxq.cpp:31:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpox6avkxq.cpp:31:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpox6avkxq.cpp:31:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    f"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) return false;\n    long\
    \ max_sum = sum - w;\n    for (long i : q) {\n        sum += i;\n        if (sum\
    \ > max_sum) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_j78brf.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpt_j78brf.cpp:20:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmpt_j78brf.cpp:25:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmpt_j78brf.cpp: In function 'int main()':\n\
    /tmp/tmpt_j78brf.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt_j78brf.cpp:2:\n/tmp/tmpt_j78brf.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpt_j78brf.cpp:33:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpt_j78brf.cpp:33:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpt_j78brf.cpp:33:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpt_j78brf.cpp:33:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt_j78brf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    // write your code in C++14\
    \ (g++ 5.4.0) or C++11 (g++ 4.9.2)\n    long max_weight = w;\n    long sum = 0;\n\
    \    for (auto i : q) {\n        sum += i;\n        if (sum > max_weight) {\n\
    \            max_weight = sum;\n        }\n    }\n    return max_weight == w &&\
    \ std::equal(q.begin(), q.end(), q.rbegin());\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_g4loexj.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmp_g4loexj.cpp:22:15: error: 'i' does not name a type\n \
    \    for (auto i : q) {\n               ^\n/tmp/tmp_g4loexj.cpp:28:5: error: expected\
    \ ';' before 'return'\n     return max_weight == w && std::equal(q.begin(), q.end(),\
    \ q.rbegin());\n     ^\n/tmp/tmp_g4loexj.cpp:28:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmp_g4loexj.cpp:28:5: error: expected ';' before 'return'\n\
    /tmp/tmp_g4loexj.cpp:28:5: error: expected primary-expression before 'return'\n\
    /tmp/tmp_g4loexj.cpp:28:5: error: expected ')' before 'return'\n/tmp/tmp_g4loexj.cpp:\
    \ In function 'int main()':\n/tmp/tmp_g4loexj.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = will_it_fly;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_g4loexj.cpp:2:\n/tmp/tmp_g4loexj.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp_g4loexj.cpp:32:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp_g4loexj.cpp:32:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp_g4loexj.cpp:32:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp_g4loexj.cpp:32:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \  "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum < w) return\
    \ false;\n    long max_sum = sum - w;\n    long max_weight = 0;\n    for (long\
    \ i = 0; i < q.size(); i++) {\n        max_weight = std::max(max_weight, q[i]);\n\
    \    }\n    return max_sum == max_weight;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsiudxh3r.cpp: In function 'int main()':\n/tmp/tmpsiudxh3r.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsiudxh3r.cpp:2:\n/tmp/tmpsiudxh3r.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpsiudxh3r.cpp:33:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpsiudxh3r.cpp:33:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpsiudxh3r.cpp:33:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpsiudxh3r.cpp:33:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpsiudxh3r.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpsiudxh3r.cpp:2:\n/tmp/tmpsiudxh3r.cpp:33:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long max_sum = 0;\n    for\
    \ (long i = 0; i < q.size(); i++) {\n        max_sum += q[i];\n    }\n    if (max_sum\
    \ < w) return false;\n    long sum = 0;\n    for (long i = 0; i < q.size(); i++)\
    \ {\n        sum += q[i];\n        if (sum > w) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw4li7uhk.cpp: In function 'int main()':\n/tmp/tmpw4li7uhk.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw4li7uhk.cpp:2:\n/tmp/tmpw4li7uhk.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpw4li7uhk.cpp:33:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpw4li7uhk.cpp:33:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw4li7uhk.cpp:33:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpw4li7uhk.cpp:33:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpw4li7uhk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw4li7uhk.cpp:2:\n/tmp/tmpw4li7uhk.cpp:33:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n\
    \        if (max_sum > w) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdme7mvnr.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpdme7mvnr.cpp:20:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmpdme7mvnr.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmpdme7mvnr.cpp: In function 'int main()':\n\
    /tmp/tmpdme7mvnr.cpp:36:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdme7mvnr.cpp:2:\n/tmp/tmpdme7mvnr.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpdme7mvnr.cpp:37:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpdme7mvnr.cpp:37:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpdme7mvnr.cpp:37:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdme7mvnr.cpp:37:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdme7mvnr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    // write your code in C++17\n\
    \    long sum = 0;\n    for (auto i : q) {\n        sum += i;\n    }\n    if (sum\
    \ < w) {\n        return false;\n    }\n    long max_sum = 0;\n    for (auto i\
    \ : q) {\n        max_sum += i;\n    }\n    if (max_sum < w) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp29gu3z48.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmp29gu3z48.cpp:21:15: error: 'i' does not name a type\n \
    \    for (auto i : q) {\n               ^\n/tmp/tmp29gu3z48.cpp:24:5: error: expected\
    \ ';' before 'if'\n     if (sum < w) {\n     ^\n/tmp/tmp29gu3z48.cpp:24:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmp29gu3z48.cpp:24:5: error: expected\
    \ ';' before 'if'\n/tmp/tmp29gu3z48.cpp:24:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmp29gu3z48.cpp:24:5: error: expected ')' before 'if'\n/tmp/tmp29gu3z48.cpp:28:15:\
    \ error: 'i' does not name a type\n     for (auto i : q) {\n               ^\n\
    /tmp/tmp29gu3z48.cpp:31:5: error: expected ';' before 'if'\n     if (max_sum <\
    \ w) {\n     ^\n/tmp/tmp29gu3z48.cpp:31:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmp29gu3z48.cpp:31:5: error: expected ';' before 'if'\n/tmp/tmp29gu3z48.cpp:31:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmp29gu3z48.cpp:31:5: error:\
    \ expected ')' before 'if'\n/tmp/tmp29gu3z48.cpp: In function 'int main()':\n\
    /tmp/tmp29gu3z48.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp29gu3z48.cpp:2:\n/tmp/tmp29gu3z48.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp29gu3z48.cpp:38:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp29gu3z48.cpp:38:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp29gu3z"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = sum - w;\n    for (long i : q) {\n        if (i > max_sum)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdt4jgnrd.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpdt4jgnrd.cpp:20:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmpdt4jgnrd.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmpdt4jgnrd.cpp: In function 'int main()':\n\
    /tmp/tmpdt4jgnrd.cpp:35:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdt4jgnrd.cpp:2:\n/tmp/tmpdt4jgnrd.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpdt4jgnrd.cpp:36:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpdt4jgnrd.cpp:36:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpdt4jgnrd.cpp:36:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdt4jgnrd.cpp:36:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdt4jgnrd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = sum - w;\n    long max_weight = 0;\n    for (long i\
    \ : q) {\n        max_weight = max(max_weight, i);\n    }\n    if (max_sum ==\
    \ max_weight) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
    \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9i16se5s.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmp9i16se5s.cpp:20:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmp9i16se5s.cpp:28:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmp9i16se5s.cpp:29:39: error: 'max' was\
    \ not declared in this scope\n         max_weight = max(max_weight, i);\n    \
    \                                   ^\n/tmp/tmp9i16se5s.cpp:29:39: note: suggested\
    \ alternative:\nIn file included from /usr/include/c++/4.8.2/algorithm:61:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmp9i16se5s.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algobase.h:260:5:\
    \ note:   'std::max'\n     max(const _Tp& __a, const _Tp& __b, _Compare __comp)\n\
    \     ^\n/tmp/tmp9i16se5s.cpp: In function 'int main()':\n/tmp/tmp9i16se5s.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9i16se5s.cpp:2:\n/tmp/tmp9i16se5s.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmp9i16se5s.cpp:38:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmp9i16se5s.cpp:38:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp9i16se5s.cpp:38:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    // Your code here\n    long\
    \ sum = 0;\n    for (long i = 0; i < q.size(); i++) {\n        sum += q[i];\n\
    \    }\n    if (sum < w) {\n        return false;\n    }\n    if (sum == w) {\n\
    \        return true;\n    }\n    long max_sum = 0;\n    for (long i = 0; i <\
    \ q.size(); i++) {\n        max_sum += q[i];\n    }\n    if (max_sum == w) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpogrjdydc.cpp: In function 'int main()':\n/tmp/tmpogrjdydc.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = will_it_fly;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpogrjdydc.cpp:2:\n/tmp/tmpogrjdydc.cpp:41:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpogrjdydc.cpp:41:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpogrjdydc.cpp:41:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpogrjdydc.cpp:41:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpogrjdydc.cpp:41:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpogrjdydc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpogrjdydc.cpp:2:\n/tmp/tmpogrjdydc.cpp:41:68: note:\
    \   candidat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) {\n        return false;\n\
    \    }\n    long max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n\
    \    }\n    return max_sum == w;\n}\nint main() {\n    auto candidate = will_it_fly;\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (9)) ==\
    \ (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})), (5))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5)) == (true));\n\
    \    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})), (1)) ==\
    \ (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})),\
    \ (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})), (5))\
    \ == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplhtiyabf.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmplhtiyabf.cpp:20:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmplhtiyabf.cpp:27:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmplhtiyabf.cpp: In function 'int main()':\n\
    /tmp/tmplhtiyabf.cpp:33:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplhtiyabf.cpp:2:\n/tmp/tmplhtiyabf.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmplhtiyabf.cpp:34:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmplhtiyabf.cpp:34:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmplhtiyabf.cpp:34:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmplhtiyabf.cpp:34:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplhtiyabf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ returns True if the object q will fly, and False otherwise.\n// The object q\
    \ will fly if it's balanced (it is a palindromic list) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
    \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
    \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the\
    \ maximum possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n\
    // (true)\n// # 3 is less than the maximum possible weight, and it's balanced.\n\
    bool will_it_fly(std::vector<long> q, long w) {\n    long sum = 0;\n    for (long\
    \ i : q) {\n        sum += i;\n    }\n    if (sum < w) return false;\n    long\
    \ max_sum = 0;\n    for (long i : q) {\n        max_sum += i;\n        if (max_sum\
    \ > w) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2})),\
    \ (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})), (5))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
    \ (5)) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfldnvmku.cpp: In function 'bool will_it_fly(std::vector<long int>,\
    \ long int)':\n/tmp/tmpfldnvmku.cpp:20:19: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long i : q) {\n                   ^\n/tmp/tmpfldnvmku.cpp:25:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : q) {\n                   ^\n/tmp/tmpfldnvmku.cpp: In function 'int main()':\n\
    /tmp/tmpfldnvmku.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = will_it_fly;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfldnvmku.cpp:2:\n/tmp/tmpfldnvmku.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
    \ (9)) == (true));\n                                        ^\n/tmp/tmpfldnvmku.cpp:33:68:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)3, (long)2,\
    \ (long)3})), (9)) == (true));\n                                             \
    \                       ^\n/tmp/tmpfldnvmku.cpp:33:68: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfldnvmku.cpp:33:68: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfldnvmku.cpp:33:68:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfldnvmku.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator _"
  stdout: ''
