language: cpp
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int opening_brackets = 0;\n    int closing_brackets = 0;\n\
    \    for (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(')\
    \ {\n            opening_brackets++;\n        } else if (brackets[i] == ')') {\n\
    \            closing_brackets++;\n        }\n    }\n    if (opening_brackets ==\
    \ closing_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplzr4rr91.cpp: In function 'int main()':\n/tmp/tmplzr4rr91.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplzr4rr91.cpp:2:\n/tmp/tmplzr4rr91.cpp:31:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = 0;\n    size_t closing_brackets =\
    \ 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            ++opening_brackets;\n        } else if (brackets[i] ==\
    \ ')') {\n            ++closing_brackets;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygkn3vl8.cpp: In function 'int main()':\n/tmp/tmpygkn3vl8.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpygkn3vl8.cpp:2:\n/tmp/tmpygkn3vl8.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int len = brackets.size();\n    for (int i = 0; i < len; ++i)\
    \ {\n        if (brackets[i] == '(') {\n            if (brackets[i + 1] != '(')\
    \ {\n                return false;\n            }\n        } else if (brackets[i]\
    \ == ')') {\n            if (brackets[i + 1] != ')') {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n\
    \    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"()()(()())()\"\
    )) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n\
    \    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyr9ziy29.cpp: In function 'int main()':\n/tmp/tmpyr9ziy29.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyr9ziy29.cpp:2:\n/tmp/tmpyr9ziy29.cpp:30:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    size_t brackets_size = brackets.size();\n    for (size_t i = 0; i < brackets_size;\
    \ i++) {\n        if (brackets[i] == '(') {\n            open_brackets++;\n  \
    \      } else if (brackets[i] == ')') {\n            close_brackets++;\n     \
    \   }\n    }\n    if (open_brackets == close_brackets) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8gv271f.cpp: In function 'int main()':\n/tmp/tmp_8gv271f.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_8gv271f.cpp:2:\n/tmp/tmp_8gv271f.cpp:32:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] == '(') {\n            if (brackets[i + 1] !=\
    \ '(') {\n                result = false;\n            }\n        }\n        if\
    \ (brackets[i] == ')') {\n            if (brackets[i + 1] != ')') {\n        \
    \        result = false;\n            }\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo88nw4eh.cpp: In function 'int main()':\n/tmp/tmpo88nw4eh.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo88nw4eh.cpp:2:\n/tmp/tmpo88nw4eh.cpp:31:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool correct = true;\n    size_t open_brackets = 0;\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n  \
    \      if (brackets[i] == '(') {\n            open_brackets++;\n        } else\
    \ if (brackets[i] == ')') {\n            close_brackets++;\n        }\n      \
    \  if (open_brackets != close_brackets) {\n            correct = false;\n    \
    \    }\n    }\n    return correct;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplx4t1mxl.cpp: In function 'int main()':\n/tmp/tmplx4t1mxl.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplx4t1mxl.cpp:2:\n/tmp/tmplx4t1mxl.cpp:31:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.length(); ++i) {\n        if (brackets[i] == '(') {\n\
    \            ++open_brackets;\n        } else if (brackets[i] == ')') {\n    \
    \        ++close_brackets;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk8umsupk.cpp: In function 'int main()':\n/tmp/tmpk8umsupk.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk8umsupk.cpp:2:\n/tmp/tmpk8umsupk.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (auto c : brackets) {\n      \
    \  if (c == '(') {\n            result &= (brackets.find('(') != brackets.find(')'));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzbpitvmm.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmpzbpitvmm.cpp:15:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmpzbpitvmm.cpp:20:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpzbpitvmm.cpp:20:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpzbpitvmm.cpp:20:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpzbpitvmm.cpp:20:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpzbpitvmm.cpp:20:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpzbpitvmm.cpp: In function 'int main()':\n/tmp/tmpzbpitvmm.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzbpitvmm.cpp:2:\n/tmp/tmpzbpitvmm.cpp:24:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (auto c : brackets) {\n        if (c == '(') {\n            open_brackets++;\n\
    \        } else if (c == ')') {\n            close_brackets++;\n        }\n  \
    \  }\n    return open_brackets == close_brackets;\n}\nint main() {\n    auto candidate\
    \ = correct_bracketing;\n    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"\
    (()())\")) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n\
    \    assert(candidate((\"()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"\
    ((()())))\")) == (false));\n    assert(candidate((\")(()\")) == (false));\n  \
    \  assert(candidate((\"(\")) == (false));\n    assert(candidate((\"((((\")) ==\
    \ (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpco9am58r.cpp: In function 'bool correct_bracketing(std::string)':\n\
    /tmp/tmpco9am58r.cpp:16:15: error: 'c' does not name a type\n     for (auto c\
    \ : brackets) {\n               ^\n/tmp/tmpco9am58r.cpp:23:5: error: expected\
    \ ';' before 'return'\n     return open_brackets == close_brackets;\n     ^\n\
    /tmp/tmpco9am58r.cpp:23:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpco9am58r.cpp:23:5: error: expected ';' before 'return'\n/tmp/tmpco9am58r.cpp:23:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpco9am58r.cpp:23:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpco9am58r.cpp: In function 'int\
    \ main()':\n/tmp/tmpco9am58r.cpp:26:10: error: 'candidate' does not name a type\n\
    \     auto candidate = correct_bracketing;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpco9am58r.cpp:2:\n/tmp/tmpco9am58r.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_ciuwso.cpp: In function 'int main()':\n/tmp/tmpp_ciuwso.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp_ciuwso.cpp:2:\n/tmp/tmpp_ciuwso.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpld2bmrzj.cpp: In function 'int main()':\n/tmp/tmpld2bmrzj.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpld2bmrzj.cpp:2:\n/tmp/tmpld2bmrzj.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    int open_brackets = 0;\n    int close_brackets = 0;\n    for\
    \ (int i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '(') {\n\
    \            open_brackets++;\n        } else if (brackets[i] == ')') {\n    \
    \        close_brackets++;\n        }\n    }\n    return open_brackets == close_brackets;\n\
    }\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoi9b8ubi.cpp: In function 'int main()':\n/tmp/tmpoi9b8ubi.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpoi9b8ubi.cpp:2:\n/tmp/tmpoi9b8ubi.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t opening_brackets = brackets.size();\n    size_t closing_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '(') {\n            ++opening_brackets;\n        } else if (brackets[i] ==\
    \ ')') {\n            ++closing_brackets;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_5a1aqwp.cpp: In function 'int main()':\n/tmp/tmp_5a1aqwp.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_5a1aqwp.cpp:2:\n/tmp/tmp_5a1aqwp.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    bool result = true;\n    for (size_t i = 0; i < brackets.size();\
    \ ++i) {\n        if (brackets[i] == '(') {\n            if (brackets[i + 1] !=\
    \ ')') {\n                result = false;\n                break;\n          \
    \  }\n            i += 2;\n        } else if (brackets[i] == ')') {\n        \
    \    if (brackets[i + 1] != '(') {\n                result = false;\n        \
    \        break;\n            }\n            i += 2;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkchivwrc.cpp: In function 'int main()':\n/tmp/tmpkchivwrc.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkchivwrc.cpp:2:\n/tmp/tmpkchivwrc.cpp:34:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    if (open_brackets != close_brackets) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbzzdz44h.cpp: In function 'int main()':\n/tmp/tmpbzzdz44h.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbzzdz44h.cpp:2:\n/tmp/tmpbzzdz44h.cpp:32:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpld2bmrzj.cpp: In function 'int main()':\n/tmp/tmpld2bmrzj.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpld2bmrzj.cpp:2:\n/tmp/tmpld2bmrzj.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets ==\
    \ close_brackets) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
    ()\")) == (true));\n    assert(candidate((\"(()())\")) == (true));\n    assert(candidate((\"\
    ()()(()())()\")) == (true));\n    assert(candidate((\"()()((()()())())(()()(()))\"\
    )) == (true));\n    assert(candidate((\"((()())))\")) == (false));\n    assert(candidate((\"\
    )(()\")) == (false));\n    assert(candidate((\"(\")) == (false));\n    assert(candidate((\"\
    ((((\")) == (false));\n    assert(candidate((\")\")) == (false));\n    assert(candidate((\"\
    (()\")) == (false));\n    assert(candidate((\"()()(()())())(()\")) == (false));\n\
    \    assert(candidate((\"()()(()())()))()\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ou87iey.cpp: In function 'int main()':\n/tmp/tmp8ou87iey.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ou87iey.cpp:2:\n/tmp/tmp8ou87iey.cpp:31:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i] ==\
    \ '(') {\n            open_brackets++;\n        } else if (brackets[i] == ')')\
    \ {\n            close_brackets++;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_ciuwso.cpp: In function 'int main()':\n/tmp/tmpp_ciuwso.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp_ciuwso.cpp:2:\n/tmp/tmpp_ciuwso.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    if (open_brackets != close_brackets) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbzzdz44h.cpp: In function 'int main()':\n/tmp/tmpbzzdz44h.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbzzdz44h.cpp:2:\n/tmp/tmpbzzdz44h.cpp:32:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of\
    \ \"(\" and \")\".\n// return True if every opening bracket has a corresponding\
    \ closing bracket.\n// >>> correct_bracketing((\"(\"))\n// (false)\n// >>> correct_bracketing((\"\
    ()\"))\n// (true)\n// >>> correct_bracketing((\"(()())\"))\n// (true)\n// >>>\
    \ correct_bracketing((\")(()\"))\n// (false)\nbool correct_bracketing(std::string\
    \ brackets) {\n    size_t open_brackets = 0;\n    size_t close_brackets = 0;\n\
    \    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i] ==\
    \ '(') {\n            ++open_brackets;\n        } else if (brackets[i] == ')')\
    \ {\n            ++close_brackets;\n        }\n    }\n    return open_brackets\
    \ == close_brackets;\n}\nint main() {\n    auto candidate = correct_bracketing;\n\
    \    assert(candidate((\"()\")) == (true));\n    assert(candidate((\"(()())\"\
    )) == (true));\n    assert(candidate((\"()()(()())()\")) == (true));\n    assert(candidate((\"\
    ()()((()()())())(()()(()))\")) == (true));\n    assert(candidate((\"((()())))\"\
    )) == (false));\n    assert(candidate((\")(()\")) == (false));\n    assert(candidate((\"\
    (\")) == (false));\n    assert(candidate((\"((((\")) == (false));\n    assert(candidate((\"\
    )\")) == (false));\n    assert(candidate((\"(()\")) == (false));\n    assert(candidate((\"\
    ()()(()())())(()\")) == (false));\n    assert(candidate((\"()()(()())()))()\"\
    )) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp354oiajq.cpp: In function 'int main()':\n/tmp/tmp354oiajq.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = correct_bracketing;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp354oiajq.cpp:2:\n/tmp/tmp354oiajq.cpp:27:28: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"()\"))\
    \ == (true));\n                            ^\n"
  stdout: ''
