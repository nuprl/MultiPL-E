name: HumanEval_139_special_factorial
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// The Brazilian factorial is\
  \ defined as:\n// brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n// where\
  \ n > 0\n// For example:\n// >>> special_factorial((4))\n// (288)\n// The function\
  \ will receive an integer as input and should return the special\n// factorial of\
  \ this integer.\nlong special_factorial(long n) {\n"
tests: "}\nint main() {\n    auto candidate = special_factorial;\n    assert(candidate((4))\
  \ == (288));\n    assert(candidate((5)) == (34560));\n    assert(candidate((7))\
  \ == (125411328000));\n    assert(candidate((1)) == (1));\n}\n"
completions: ["    long fact = 1;\n    long i;\n    for (i = 1; i <= n; i++) {\n \
    \       fact *= i;\n    }\n    return fact;", "    long fact = 1;\n    for (long\
    \ i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;", "    long\
    \ fact = 1;\n    long fact2 = 1;\n    long fact3 = 1;\n    long fact4 = 1;\n \
    \   long fact5 = 1;\n    long fact6 = 1;\n    long fact7 = 1;\n    long fact8\
    \ = 1;\n    long fact9 = 1;\n    long fact10 = 1;\n    long fact11 = 1;\n    long\
    \ fact12 = 1;\n    long fact13 = 1;\n    long fact14 = 1;\n    long fact15 = 1;\n\
    \    long fact16 = 1;\n    long fact17 = 1;\n    long fact18 = 1;\n    long fact19\
    \ = 1;\n    long fact20 = 1;\n    long fact21 = 1;\n    long fact22 = 1;\n   \
    \ long fact23 = 1;\n    long fact24 = 1;\n    long fact25 = 1;\n    long fact26\
    \ = 1;\n    long fact27 = 1;\n    long fact28 = 1;\n    long fact29 = 1;\n   \
    \ long fact30 = 1;\n    long fact31 = 1;\n    long fact32 = 1;\n    long fact33\
    \ = 1;\n    long fact34 = 1;\n    long fact35 = 1;\n    long fact36 = 1;\n   \
    \ long fact37 = 1;\n    long fact38 = 1;\n    long fact39 = 1;\n    long fact40\
    \ = 1;\n    long fact41 = 1;\n    long fact42 = 1;\n    long fact43 = 1;\n   \
    \ long fact44 = 1;\n    long fact45 = 1;\n    long fact46 = 1;\n    long fact47\
    \ = 1;\n    long fact48 = 1;\n    long fact49 = 1;\n    long fact50 = 1;\n   \
    \ long fact51 = 1;\n    long fact52 = 1;\n    long fact53 = 1;\n    long fact54\
    \ = 1;\n    long fact55 = 1;\n    long fact56 = 1;\n    long fact57 = 1;\n   \
    \ long fact58 = 1;\n    long fact59 = 1;\n    long fact60 = 1;\n    long fact61\
    \ = 1;\n    long fact62 = 1;\n    long fact63 = 1;\n    long fact64 = 1;\n   \
    \ long fact65 = 1;\n    long fact66 = 1;\n    long fact67 = 1;\n    long fact68\
    \ = 1;\n    long fact69 = 1;\n    long fact70 = 1;\n    long fact71 = 1;\n   \
    \ long fact72 = 1;\n    long fact73 = 1;\n    long fact74 = 1;\n    long fact75\
    \ = 1;\n    long fact76 = 1;\n    long fact77 = 1;\n    long fact78 = 1;\n   \
    \ long fact79 = 1;\n    long fact80 = 1;\n    long fact81 = 1;\n    long fact82\
    \ = 1;\n    long fact83 = 1;\n    long fact84 = 1;\n    long ", "    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;", "    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact\
    \ *= i;\n    }\n    return fact;", "    if (n == 0)\n        return 1;\n    long\
    \ result = 1;\n    for (long i = 1; i <= n; i++)\n        result *= i;\n    return\
    \ result;", "    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n       \
    \ fact *= i;\n    }\n    return fact;", "    long fact = 1;\n    for (int i =\
    \ 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;", "    long fact\
    \ = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return\
    \ fact;", "    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact\
    \ *= i;\n    }\n    return fact;", "    long fact = 1;\n    long i = 1;\n    while\
    \ (i <= n) {\n        fact *= i;\n        i++;\n    }\n    return fact;", "  \
    \  long fact = 1;\n    long temp;\n    long i;\n    for (i = 1; i <= n; i++) {\n\
    \        temp = fact * i;\n        fact = temp;\n    }\n    return fact;", " \
    \   long fact = 1;\n    long temp = 1;\n    while (n) {\n        temp *= n;\n\
    \        n--;\n    }\n    while (temp > 1) {\n        fact *= temp;\n        temp--;\n\
    \    }\n    return fact;", "    long fact = 1;\n    for (long i = 1; i <= n; i++)\
    \ {\n        fact *= i;\n    }\n    return fact;", "    long fact = 1;\n    for\
    \ (long i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;", " \
    \   long fact = 1;\n    for (long i = 1; i <= n; i++) {\n        fact *= i;\n\
    \    }\n    return fact;", "    long fact = 1;\n    for (long i = 1; i <= n; i++)\
    \ {\n        fact *= i;\n    }\n    return fact;", "    if (n == 0 || n == 1)\
    \ {\n        return 1;\n    }\n    long result = special_factorial(n - 1) * n;\n\
    \    return result;", "    long fact = 1;\n    for (long i = 1; i <= n; i++) {\n\
    \        fact *= i;\n    }\n    return fact;", "    long fact = 1;\n    for (long\
    \ i = 1; i <= n; i++) {\n        fact *= i;\n    }\n    return fact;"]
stop_tokens:
- "\n}"
