name: HumanEval_129_minPath
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a grid with N rows\
  \ and N columns (N >= 2) and a positive integer k, \n// each cell of the grid contains\
  \ a value. Every integer in the range [1, N * N]\n// inclusive appears exactly once\
  \ on the cells of the grid.\n// You have to find the minimum path of length k in\
  \ the grid. You can start\n// from any cell, and in each step you can move to any\
  \ of the neighbor cells,\n// in other words, you can go to cells which share an\
  \ edge with you current\n// cell.\n// Please note that a path of length k means\
  \ visiting exactly k cells (not\n// necessarily distinct).\n// You CANNOT go off\
  \ the grid.\n// A path A (of length k) is considered less than a path B (of length\
  \ k) if\n// after making the ordered lists of the values on the cells that A and\
  \ B go\n// through (let's call them lst_A and lst_B), lst_A is lexicographically\
  \ less\n// than lst_B, in other words, there exist an integer index i (1 <= i <=\
  \ k)\n// such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n// lst_A[j]\
  \ = lst_B[j].\n// It is guaranteed that the answer is unique.\n// Return an ordered\
  \ list of the values on the cells that the minimum path go through.\n// Examples:\
  \    \n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}),\
  \ (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3))\n//\
  \ (std::vector<long>({(long)1, (long)2, (long)1}))\n// >>> minPath((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5,\
  \ (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}),\
  \ (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1))\n//\
  \ (std::vector<long>({(long)1}))\nstd::vector<long> minPath(std::vector<std::vector<long>>\
  \ grid, long k) {\n"
tests: "}\nint main() {\n    auto candidate = minPath;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)5, (long)6}),\
  \ (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)9})})), (3)) ==\
  \ (std::vector<long>({(long)1, (long)2, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)5,\
  \ (long)9, (long)3}), (std::vector<long>)std::vector<long>({(long)4, (long)1, (long)6}),\
  \ (std::vector<long>)std::vector<long>({(long)7, (long)8, (long)2})})), (1)) ==\
  \ (std::vector<long>({(long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}), (std::vector<long>)std::vector<long>({(long)5, (long)6,\
  \ (long)7, (long)8}), (std::vector<long>)std::vector<long>({(long)9, (long)10, (long)11,\
  \ (long)12}), (std::vector<long>)std::vector<long>({(long)13, (long)14, (long)15,\
  \ (long)16})})), (4)) == (std::vector<long>({(long)1, (long)2, (long)1, (long)2})));\n\
  \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6,\
  \ (long)4, (long)13, (long)10}), (std::vector<long>)std::vector<long>({(long)5,\
  \ (long)7, (long)12, (long)1}), (std::vector<long>)std::vector<long>({(long)3, (long)16,\
  \ (long)11, (long)15}), (std::vector<long>)std::vector<long>({(long)8, (long)14,\
  \ (long)9, (long)2})})), (7)) == (std::vector<long>({(long)1, (long)10, (long)1,\
  \ (long)10, (long)1, (long)10, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)8,\
  \ (long)14, (long)9, (long)2}), (std::vector<long>)std::vector<long>({(long)6, (long)4,\
  \ (long)13, (long)15}), (std::vector<long>)std::vector<long>({(long)5, (long)7,\
  \ (long)1, (long)12}), (std::vector<long>)std::vector<long>({(long)3, (long)10,\
  \ (long)11, (long)16})})), (5)) == (std::vector<long>({(long)1, (long)7, (long)1,\
  \ (long)7, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)11,\
  \ (long)8, (long)7, (long)2}), (std::vector<long>)std::vector<long>({(long)5, (long)16,\
  \ (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)9, (long)3, (long)15,\
  \ (long)6}), (std::vector<long>)std::vector<long>({(long)12, (long)13, (long)10,\
  \ (long)1})})), (9)) == (std::vector<long>({(long)1, (long)6, (long)1, (long)6,\
  \ (long)1, (long)6, (long)1, (long)6, (long)1})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)12,\
  \ (long)13, (long)10, (long)1}), (std::vector<long>)std::vector<long>({(long)9,\
  \ (long)3, (long)15, (long)6}), (std::vector<long>)std::vector<long>({(long)5, (long)16,\
  \ (long)14, (long)4}), (std::vector<long>)std::vector<long>({(long)11, (long)8,\
  \ (long)7, (long)2})})), (12)) == (std::vector<long>({(long)1, (long)6, (long)1,\
  \ (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6, (long)1, (long)6})));\n\
  \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)2,\
  \ (long)7, (long)4}), (std::vector<long>)std::vector<long>({(long)3, (long)1, (long)5}),\
  \ (std::vector<long>)std::vector<long>({(long)6, (long)8, (long)9})})), (8)) ==\
  \ (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1,\
  \ (long)3})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)6,\
  \ (long)1, (long)5}), (std::vector<long>)std::vector<long>({(long)3, (long)8, (long)9}),\
  \ (std::vector<long>)std::vector<long>({(long)2, (long)7, (long)4})})), (8)) ==\
  \ (std::vector<long>({(long)1, (long)5, (long)1, (long)5, (long)1, (long)5, (long)1,\
  \ (long)5})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)2}), (std::vector<long>)std::vector<long>({(long)3, (long)4})})), (10))\
  \ == (std::vector<long>({(long)1, (long)2, (long)1, (long)2, (long)1, (long)2, (long)1,\
  \ (long)2, (long)1, (long)2})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
  \ (long)3}), (std::vector<long>)std::vector<long>({(long)3, (long)2})})), (10))\
  \ == (std::vector<long>({(long)1, (long)3, (long)1, (long)3, (long)1, (long)3, (long)1,\
  \ (long)3, (long)1, (long)3})));\n}\n"
completions: ["    std::vector<long> ans;\n    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long cnt = 0;\n    long ans = 0;\n    std::vector<long>\
    \ lst_A, lst_B;\n    std::vector<long> temp;\n    std::vector<long> temp2;\n \
    \   long i, j, k;\n    long cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n\
    \    long cnt5 = 0;\n    long cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n\
    \    long cnt9 = 0;\n    long cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12\
    \ = 0;\n    long cnt13 = 0;\n    long cnt14 = 0;\n    long cnt15 = 0;\n    long\
    \ cnt16 = 0;\n    long cnt17 = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n\
    \    long cnt20 = 0;\n    long cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23\
    \ = 0;\n    long cnt24 = 0;\n    long cnt25 = 0;\n    long cnt26 = 0;\n    long\
    \ cnt27 = 0;\n    long cnt28 = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n\
    \    long cnt31 = 0;\n    long cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34\
    \ = 0;\n    long cnt35 = 0;\n    long cnt36 = 0;\n    long cnt37 = 0;\n    long\
    \ cnt38 = 0;\n    long cnt39 = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n\
    \    long cnt42 = 0;\n    long cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45\
    \ = 0;\n    long cnt46 = 0;\n    long cnt47 = 0;\n    long cnt48 = 0;\n    long\
    \ cnt49 = 0;\n    long cnt50 = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n\
    \    long cnt53 = 0;\n    long cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56\
    \ = 0;\n    long cnt57 = 0;\n    long cnt58 = 0;\n    long cnt59 = 0;\n    long\
    \ cnt60 = 0;\n    long cnt61 = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n\
    \    long cnt64 = 0;\n    long cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67\
    \ = 0;\n    long cnt68 = 0;\n    long cnt69 = 0;\n    long cnt70 = 0;\n    long\
    \ cnt71 = 0;\n    long cnt72 = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n\
    \    long cnt75 = 0;\n    long cnt76 = 0;\n    long ", "    std::vector<long>\
    \ ans;\n    long n = grid.size();\n    long m = grid[0].size();\n    long ans\
    \ = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long cur = grid[0][0];\n\
    \    long an = std::numeric_limits<long>::max();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long cnt = 0;\n    long cur = grid[0][0];\n    long an = std::numeric_limits<long>::max();\n\
    \    long ans = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long\
    \ cur = grid[0][0];\n    long an = std::numeric_limits<long>::max();\n    long\
    \ ans = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long cur = grid[0][0];\n\
    \    long an = std::numeric_limits<long>::max();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long cnt = 0;\n    long cur = grid[0][0];\n    long an = std::numeric_limits<long>::max();\n\
    \    long ans = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long\
    \ cur = grid[0][0];\n    long an = std::numeric_limits<long>::max();\n    long\
    \ ans = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long cur = grid[0][0];\n\
    \    long an = std::numeric_limits<long>::max();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long cnt = 0;\n    long cur = grid[0][0];\n    long an = std::numeric_limits<long>::max();\n\
    \    long ans = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long\
    \ cur = grid[0][0];\n    long an = std::numeric_limits<long>::max();\n    long\
    \ ans = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long cur = grid[0][0];\n\
    \    long an = std::numeric_limits<long>::max();\n    long ans = std::numeric_limits<long>::max();\n\
    \    long cnt = 0;\n    long cur = grid[0][0];\n    long an = std::numeric_limits<long>::max();\n\
    \    long ans = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long\
    \ cur = grid[0][0];\n    long an = std::numeric_limits<long>::max();\n    long\
    \ ans = std::numeric_limits<long>::max();\n    long cnt = 0;\n    long cur = ",
  "    // Your code here\n    std::vector<long> ans;\n    std::vector<std::vector<long>>\
    \ gridCopy = grid;\n    std::vector<long> path;\n    std::vector<long> pathCopy;\n\
    \    std::vector<long> pathCopy2;\n    std::vector<long> pathCopy3;\n    std::vector<long>\
    \ pathCopy4;\n    std::vector<long> pathCopy5;\n    std::vector<long> pathCopy6;\n\
    \    std::vector<long> pathCopy7;\n    std::vector<long> pathCopy8;\n    std::vector<long>\
    \ pathCopy9;\n    std::vector<long> pathCopy10;\n    std::vector<long> pathCopy11;\n\
    \    std::vector<long> pathCopy12;\n    std::vector<long> pathCopy13;\n    std::vector<long>\
    \ pathCopy14;\n    std::vector<long> pathCopy15;\n    std::vector<long> pathCopy16;\n\
    \    std::vector<long> pathCopy17;\n    std::vector<long> pathCopy18;\n    std::vector<long>\
    \ pathCopy19;\n    std::vector<long> pathCopy20;\n    std::vector<long> pathCopy21;\n\
    \    std::vector<long> pathCopy22;\n    std::vector<long> pathCopy23;\n    std::vector<long>\
    \ pathCopy24;\n    std::vector<long> pathCopy25;\n    std::vector<long> pathCopy26;\n\
    \    std::vector<long> pathCopy27;\n    std::vector<long> pathCopy28;\n    std::vector<long>\
    \ pathCopy29;\n    std::vector<long> pathCopy30;\n    std::vector<long> pathCopy31;\n\
    \    std::vector<long> pathCopy32;\n    std::vector<long> pathCopy33;\n    std::vector<long>\
    \ pathCopy34;\n    std::vector<long> pathCopy35;\n    std::vector<long> pathCopy36;\n\
    \    std::vector<long> pathCopy37;\n    std::vector<long> pathCopy38;\n    std::vector<long>\
    \ pathCopy39;\n    std::vector<long> pathCopy40;\n    std::vector<long> pathCopy41;\n\
    \    std::vector<long> pathCopy42;\n    std::vector<long> pathCopy43;\n    std::vector<long>\
    \ pathCopy44;\n    std::vector<long> pathCopy45;\n    std::vector<long> pathCopy46;\n\
    \    std::vector<long> pathCopy47;\n    std::vector<long> pathCopy48;\n    std::vector<long>\
    \ pathCopy49;\n    std::vector<long> pathCopy50;\n    std::vector<long> pathCopy51;\n\
    \    std::vector<long> pathCopy52;\n    std::vector<long> pathCopy53;\n    std::vector<long>\
    \ pathCopy54;\n    std::vector<long> pathCopy55;\n    std::vector<long> pathCopy",
  "    std::vector<long> ans;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long ans = 0;\n    long i = 0;\n    long j = 0;\n    long cnt = 0;\n    long\
    \ cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n    long cnt5 = 0;\n    long\
    \ cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n    long cnt9 = 0;\n    long\
    \ cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n\
    \    long cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17\
    \ = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n    long cnt20 = 0;\n    long\
    \ cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n\
    \    long cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28\
    \ = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n    long cnt31 = 0;\n    long\
    \ cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n\
    \    long cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39\
    \ = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n    long cnt42 = 0;\n    long\
    \ cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n\
    \    long cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50\
    \ = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n    long cnt53 = 0;\n    long\
    \ cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n\
    \    long cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61\
    \ = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n    long cnt64 = 0;\n    long\
    \ cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n\
    \    long cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72\
    \ = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n    long cnt75 = 0;\n    long\
    \ cnt76 = 0;\n    long cnt77 = 0;\n    long cnt78 = 0;\n    long cnt79 = 0;\n\
    \    long cnt80 = 0;\n    ", "    std::vector<long> ans;\n    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long cnt = 0;\n    long ans = 0;\n    std::vector<long>\
    \ lst_A;\n    std::vector<long> lst_B;\n    std::vector<long> lst_C;\n    std::vector<long>\
    \ lst_D;\n    std::vector<long> lst_E;\n    std::vector<long> lst_F;\n    std::vector<long>\
    \ lst_G;\n    std::vector<long> lst_H;\n    std::vector<long> lst_I;\n    std::vector<long>\
    \ lst_J;\n    std::vector<long> lst_K;\n    std::vector<long> lst_L;\n    std::vector<long>\
    \ lst_M;\n    std::vector<long> lst_N;\n    std::vector<long> lst_O;\n    std::vector<long>\
    \ lst_P;\n    std::vector<long> lst_Q;\n    std::vector<long> lst_R;\n    std::vector<long>\
    \ lst_S;\n    std::vector<long> lst_T;\n    std::vector<long> lst_U;\n    std::vector<long>\
    \ lst_V;\n    std::vector<long> lst_W;\n    std::vector<long> lst_X;\n    std::vector<long>\
    \ lst_Y;\n    std::vector<long> lst_Z;\n    std::vector<long> lst_A;\n    std::vector<long>\
    \ lst_B;\n    std::vector<long> lst_C;\n    std::vector<long> lst_D;\n    std::vector<long>\
    \ lst_E;\n    std::vector<long> lst_F;\n    std::vector<long> lst_G;\n    std::vector<long>\
    \ lst_H;\n    std::vector<long> lst_I;\n    std::vector<long> lst_J;\n    std::vector<long>\
    \ lst_K;\n    std::vector<long> lst_L;\n    std::vector<long> lst_M;\n    std::vector<long>\
    \ lst_N;\n    std::vector<long> lst_O;\n    std::vector<long> lst_P;\n    std::vector<long>\
    \ lst_Q;\n    std::vector<long> lst_R;\n    std::vector<long> lst_S;\n    std::vector<long>\
    \ lst_T;\n    std::vector<long> lst_U;\n    std::vector<long> lst_V;\n    std::vector<long>\
    \ lst_W;\n    std::vector<long> lst_X;\n    std::vector<long> lst_Y;\n    std::vector<long>\
    \ lst_Z;\n    std::vector<long> lst_A;\n    std::vector<long> lst_B;", "    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long ans = 0;\n    std::vector<long>\
    \ ans_list;\n    std::vector<std::vector<long>> ans_lists(n);\n    std::vector<std::vector<long>>\
    \ ans_lists_temp;\n    long curr = 0;\n    long curr2 = 0;\n    long curr3 = 0;\n\
    \    long curr4 = 0;\n    long curr5 = 0;\n    long curr6 = 0;\n    long curr7\
    \ = 0;\n    long curr8 = 0;\n    long curr9 = 0;\n    long curr10 = 0;\n    long\
    \ curr11 = 0;\n    long curr12 = 0;\n    long curr13 = 0;\n    long curr14 = 0;\n\
    \    long curr15 = 0;\n    long curr16 = 0;\n    long curr17 = 0;\n    long curr18\
    \ = 0;\n    long curr19 = 0;\n    long curr20 = 0;\n    long curr21 = 0;\n   \
    \ long curr22 = 0;\n    long curr23 = 0;\n    long curr24 = 0;\n    long curr25\
    \ = 0;\n    long curr26 = 0;\n    long curr27 = 0;\n    long curr28 = 0;\n   \
    \ long curr29 = 0;\n    long curr30 = 0;\n    long curr31 = 0;\n    long curr32\
    \ = 0;\n    long curr33 = 0;\n    long curr34 = 0;\n    long curr35 = 0;\n   \
    \ long curr36 = 0;\n    long curr37 = 0;\n    long curr38 = 0;\n    long curr39\
    \ = 0;\n    long curr40 = 0;\n    long curr41 = 0;\n    long curr42 = 0;\n   \
    \ long curr43 = 0;\n    long curr44 = 0;\n    long curr45 = 0;\n    long curr46\
    \ = 0;\n    long curr47 = 0;\n    long curr48 = 0;\n    long curr49 = 0;\n   \
    \ long curr50 = 0;\n    long curr51 = 0;\n    long curr52 = 0;\n    long curr53\
    \ = 0;\n    long curr54 = 0;\n    long curr55 = 0;\n    long curr56 = 0;\n   \
    \ long curr57 = 0;\n    long curr58 = 0;\n    long curr59 = 0;\n    long curr60\
    \ = 0;\n    long curr61 = 0;\n    long curr62 = 0;\n    long curr63 = 0;\n   \
    \ long curr64 = 0;\n    long curr65 = 0;\n    long curr66 = 0;\n    long curr67\
    \ = 0;\n    long curr68 = 0;\n    long curr69 = 0;\n    long curr70 = 0;\n   \
    \ long curr71 = 0;\n    long curr72 = 0;\n    long curr73 = 0;\n    long curr74\
    \ = 0;\n    long curr75 = 0;\n    long curr76 = 0;\n    long curr77 = 0;\n   \
    \ long curr78 = 0;\n", "    // Your code here\n    std::vector<std::vector<long>>\
    \ gridCopy = grid;\n    std::vector<std::vector<long>> gridCopy2 = grid;\n   \
    \ std::vector<std::vector<long>> gridCopy3 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy4 = grid;\n    std::vector<std::vector<long>> gridCopy5 = grid;\n  \
    \  std::vector<std::vector<long>> gridCopy6 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy7 = grid;\n    std::vector<std::vector<long>> gridCopy8 = grid;\n  \
    \  std::vector<std::vector<long>> gridCopy9 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy10 = grid;\n    std::vector<std::vector<long>> gridCopy11 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy12 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy13 = grid;\n    std::vector<std::vector<long>> gridCopy14 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy15 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy16 = grid;\n    std::vector<std::vector<long>> gridCopy17 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy18 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy19 = grid;\n    std::vector<std::vector<long>> gridCopy20 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy21 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy22 = grid;\n    std::vector<std::vector<long>> gridCopy23 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy24 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy25 = grid;\n    std::vector<std::vector<long>> gridCopy26 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy27 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy28 = grid;\n    std::vector<std::vector<long>> gridCopy29 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy30 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy31 = grid;\n    std::vector<std::vector<long>> gridCopy32 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy33 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy34 = grid;\n    std::vector<std::vector<long>> gridCopy35 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy36 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy37 = grid;\n    std::vector<std::vector<long>> gridCopy38 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy39 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy40 = grid;\n    std::vector<std::vector<long>> gridCopy41 = grid;\n\
    \    std::vector<std::vector<long>> gridCopy42 = grid;\n    std::vector<std::vector<long>>\
    \ gridCopy43 = grid;\n    std::vector<std::vector<", "    long n = grid.size();\n\
    \    long m = grid[0].size();\n    long ans = INT_MAX;\n    std::vector<long>\
    \ ans_list;\n    std::vector<long> lst_A;\n    std::vector<long> lst_B;\n    std::vector<long>\
    \ lst_C;\n    std::vector<long> lst_D;\n    std::vector<long> lst_E;\n    std::vector<long>\
    \ lst_F;\n    std::vector<long> lst_G;\n    std::vector<long> lst_H;\n    std::vector<long>\
    \ lst_I;\n    std::vector<long> lst_J;\n    std::vector<long> lst_K;\n    std::vector<long>\
    \ lst_L;\n    std::vector<long> lst_M;\n    std::vector<long> lst_N;\n    std::vector<long>\
    \ lst_O;\n    std::vector<long> lst_P;\n    std::vector<long> lst_Q;\n    std::vector<long>\
    \ lst_R;\n    std::vector<long> lst_S;\n    std::vector<long> lst_T;\n    std::vector<long>\
    \ lst_U;\n    std::vector<long> lst_V;\n    std::vector<long> lst_W;\n    std::vector<long>\
    \ lst_X;\n    std::vector<long> lst_Y;\n    std::vector<long> lst_Z;\n    std::vector<long>\
    \ lst_A;\n    std::vector<long> lst_B;\n    std::vector<long> lst_C;\n    std::vector<long>\
    \ lst_D;\n    std::vector<long> lst_E;\n    std::vector<long> lst_F;\n    std::vector<long>\
    \ lst_G;\n    std::vector<long> lst_H;\n    std::vector<long> lst_I;\n    std::vector<long>\
    \ lst_J;\n    std::vector<long> lst_K;\n    std::vector<long> lst_L;\n    std::vector<long>\
    \ lst_M;\n    std::vector<long> lst_N;\n    std::vector<long> lst_O;\n    std::vector<long>\
    \ lst_P;\n    std::vector<long> lst_Q;\n    std::vector<long> lst_R;\n    std::vector<long>\
    \ lst_S;\n    std::vector<long> lst_T;\n    std::vector<long> lst_U;\n    std::vector<long>\
    \ lst_V;\n    std::vector<long> lst_W;\n    std::vector<long> lst_X;\n    std::vector<long>\
    \ lst_Y;\n    std::vector<long> lst_Z;\n    std::vector<long> lst_A;\n    std::vector<long>\
    \ lst_B;\n", "    // write your code here\n    std::vector<long> ans;\n    long\
    \ n = grid.size();\n    long m = grid[0].size();\n    long cnt = 0;\n    long\
    \ an = INT_MAX;\n    long min;\n    long max;\n    long i;\n    long j;\n    long\
    \ k;\n    long cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n    long cnt5\
    \ = 0;\n    long cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n    long cnt9\
    \ = 0;\n    long cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n    long\
    \ cnt13 = 0;\n    long cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16 = 0;\n\
    \    long cnt17 = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n    long cnt20\
    \ = 0;\n    long cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n    long\
    \ cnt24 = 0;\n    long cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27 = 0;\n\
    \    long cnt28 = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n    long cnt31\
    \ = 0;\n    long cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n    long\
    \ cnt35 = 0;\n    long cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38 = 0;\n\
    \    long cnt39 = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n    long cnt42\
    \ = 0;\n    long cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n    long\
    \ cnt46 = 0;\n    long cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49 = 0;\n\
    \    long cnt50 = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n    long cnt53\
    \ = 0;\n    long cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n    long\
    \ cnt57 = 0;\n    long cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60 = 0;\n\
    \    long cnt61 = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n    long cnt64\
    \ = 0;\n    long cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n    long\
    \ cnt68 = 0;\n    long cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71 = 0;\n\
    \    long cnt72 = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n    long cnt75\
    \ = 0;\n    long cnt76 = 0;\n    long cnt", "    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    std::vector<long> ans;\n    std::vector<std::vector<long>>\
    \ gridCopy(grid);\n    std::vector<long> ans(n);\n    long start = 0;\n    long\
    \ end = 0;\n    long start2 = 0;\n    long end2 = 0;\n    long start3 = 0;\n \
    \   long end3 = 0;\n    long start4 = 0;\n    long end4 = 0;\n    long start5\
    \ = 0;\n    long end5 = 0;\n    long start6 = 0;\n    long end6 = 0;\n    long\
    \ start7 = 0;\n    long end7 = 0;\n    long start8 = 0;\n    long end8 = 0;\n\
    \    long start9 = 0;\n    long end9 = 0;\n    long start10 = 0;\n    long end10\
    \ = 0;\n    long start11 = 0;\n    long end11 = 0;\n    long start12 = 0;\n  \
    \  long end12 = 0;\n    long start13 = 0;\n    long end13 = 0;\n    long start14\
    \ = 0;\n    long end14 = 0;\n    long start15 = 0;\n    long end15 = 0;\n    long\
    \ start16 = 0;\n    long end16 = 0;\n    long start17 = 0;\n    long end17 = 0;\n\
    \    long start18 = 0;\n    long end18 = 0;\n    long start19 = 0;\n    long end19\
    \ = 0;\n    long start20 = 0;\n    long end20 = 0;\n    long start21 = 0;\n  \
    \  long end21 = 0;\n    long start22 = 0;\n    long end22 = 0;\n    long start23\
    \ = 0;\n    long end23 = 0;\n    long start24 = 0;\n    long end24 = 0;\n    long\
    \ start25 = 0;\n    long end25 = 0;\n    long start26 = 0;\n    long end26 = 0;\n\
    \    long start27 = 0;\n    long end27 = 0;\n    long start28 = 0;\n    long end28\
    \ = 0;\n    long start29 = 0;\n    long end29 = 0;\n    long start30 = 0;\n  \
    \  long end30 = 0;\n    long start31 = 0;\n    long end31 = 0;\n    long start32\
    \ = 0;\n    long end32 = 0;\n    long start33 = 0;\n    long end33 = 0;\n    long\
    \ start34 = 0;\n    long end34 = 0;\n    long start35 = 0;\n    long end35 = 0;\n\
    \    long start36 = 0;\n    long end36 = 0;\n    long start37 = 0;\n    long end37\
    \ = 0;\n    long start38 = 0;\n    long end38 = 0;\n    long start39 = 0;\n  \
    \  long end39 = 0;\n    long start40 = 0;\n    long end40 = 0;\n    ", "    std::vector<std::vector<long>>\
    \ gridCopy(grid);\n    std::vector<long> ans;\n    long start = 0;\n    long end\
    \ = 0;\n    long minVal = gridCopy[0].front();\n    long minIndex = gridCopy[0].front();\n\
    \    long minPathLen = gridCopy[0].size();\n    long currVal = gridCopy[0].front();\n\
    \    long currIndex = gridCopy[0].front();\n    long currPathLen = gridCopy[0].size();\n\
    \    long currPath = 0;\n    long currPathLen = 0;\n    long currPathVal = 0;\n\
    \    long currPathIndex = 0;\n    long currPathVal2 = 0;\n    long currPathIndex2\
    \ = 0;\n    long currPathVal3 = 0;\n    long currPathIndex3 = 0;\n    long currPathVal4\
    \ = 0;\n    long currPathIndex4 = 0;\n    long currPathVal5 = 0;\n    long currPathIndex5\
    \ = 0;\n    long currPathVal6 = 0;\n    long currPathIndex6 = 0;\n    long currPathVal7\
    \ = 0;\n    long currPathIndex7 = 0;\n    long currPathVal8 = 0;\n    long currPathIndex8\
    \ = 0;\n    long currPathVal9 = 0;\n    long currPathIndex9 = 0;\n    long currPathVal10\
    \ = 0;\n    long currPathIndex10 = 0;\n    long currPathVal11 = 0;\n    long currPathIndex11\
    \ = 0;\n    long currPathVal12 = 0;\n    long currPathIndex12 = 0;\n    long currPathVal13\
    \ = 0;\n    long currPathIndex13 = 0;\n    long currPathVal14 = 0;\n    long currPathIndex14\
    \ = 0;\n    long currPathVal15 = 0;\n    long currPathIndex15 = 0;\n    long currPathVal16\
    \ = 0;\n    long currPathIndex16 = 0;\n    long currPathVal17 = 0;\n    long currPathIndex17\
    \ = 0;\n    long currPathVal18 = 0;\n    long currPathIndex18 = 0;\n    long currPathVal19\
    \ = 0;\n    long currPathIndex19 = 0;\n    long currPathVal20 = 0;\n    long currPathIndex20\
    \ = 0;\n    long currPathVal21 = 0;\n    long currPathIndex21 = 0;\n    long currPathVal22\
    \ = 0;\n    long currPathIndex22 = 0;\n    long currPathVal23 = 0;\n    long currPathIndex23\
    \ = 0;\n    long currPathVal24 = 0;\n    long currPathIndex24 = 0;\n    long currPathVal25\
    \ = 0;\n    long currPathIndex25 = 0;\n    long currPathVal26 = 0;\n    long currPathIndex26\
    \ = 0;", "    std::vector<long> ans;\n    long n = grid.size();\n    long m =\
    \ grid[0].size();\n    long cnt = 0;\n    long cur = 0;\n    long cnt2 = 0;\n\
    \    long cur2 = 0;\n    long cnt3 = 0;\n    long cur3 = 0;\n    long cnt4 = 0;\n\
    \    long cur4 = 0;\n    long cnt5 = 0;\n    long cur5 = 0;\n    long cnt6 = 0;\n\
    \    long cur6 = 0;\n    long cnt7 = 0;\n    long cur7 = 0;\n    long cnt8 = 0;\n\
    \    long cur8 = 0;\n    long cnt9 = 0;\n    long cur9 = 0;\n    long cnt10 =\
    \ 0;\n    long cur10 = 0;\n    long cnt11 = 0;\n    long cur11 = 0;\n    long\
    \ cnt12 = 0;\n    long cur12 = 0;\n    long cnt13 = 0;\n    long cur13 = 0;\n\
    \    long cnt14 = 0;\n    long cur14 = 0;\n    long cnt15 = 0;\n    long cur15\
    \ = 0;\n    long cnt16 = 0;\n    long cur16 = 0;\n    long cnt17 = 0;\n    long\
    \ cur17 = 0;\n    long cnt18 = 0;\n    long cur18 = 0;\n    long cnt19 = 0;\n\
    \    long cur19 = 0;\n    long cnt20 = 0;\n    long cur20 = 0;\n    long cnt21\
    \ = 0;\n    long cur21 = 0;\n    long cnt22 = 0;\n    long cur22 = 0;\n    long\
    \ cnt23 = 0;\n    long cur23 = 0;\n    long cnt24 = 0;\n    long cur24 = 0;\n\
    \    long cnt25 = 0;\n    long cur25 = 0;\n    long cnt26 = 0;\n    long cur26\
    \ = 0;\n    long cnt27 = 0;\n    long cur27 = 0;\n    long cnt28 = 0;\n    long\
    \ cur28 = 0;\n    long cnt29 = 0;\n    long cur29 = 0;\n    long cnt30 = 0;\n\
    \    long cur30 = 0;\n    long cnt31 = 0;\n    long cur31 = 0;\n    long cnt32\
    \ = 0;\n    long cur32 = 0;\n    long cnt33 = 0;\n    long cur33 = 0;\n    long\
    \ cnt34 = 0;\n    long cur34 = 0;\n    long cnt35 = 0;\n    long cur35 = 0;\n\
    \    long cnt36 = 0;\n    long cur36 = 0;\n    long cnt37 = 0;\n    long cur37\
    \ = 0;\n    long cnt38 = 0;\n    long cur38 = 0;\n    long cnt39 = 0;\n    long\
    \ cur39 = 0;\n    long cnt40 = 0;\n    long cur40 = 0;\n    long cnt41 = 0;\n\
    \    long cur41 = 0;\n    long cnt42 = 0;\n    long ", "    // Your code here\n\
    \    std::vector<long> ans;\n    long n = grid.size();\n    long m = grid[0].size();\n\
    \    long cnt = 0;\n    long ans = INT_MAX;\n    long long ans = INT_MAX;\n  \
    \  long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans =\
    \ INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long\
    \ long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n\
    \    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans\
    \ = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n   \
    \ long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans =\
    \ INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long\
    \ long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n\
    \    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans\
    \ = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n   \
    \ long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans =\
    \ INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long\
    \ long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n\
    \    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans\
    \ = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n   \
    \ long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans =\
    \ INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long\
    \ long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n\
    \    long long ans = INT_MAX;\n    long long ans = INT_MAX;\n    long long ans\
    \ = INT_MAX;\n    long long ans = INT_MAX;\n    long long an", "    std::vector<long>\
    \ ans;\n    long n = grid.size();\n    long m = grid[0].size();\n    long cnt\
    \ = 0;\n    long cur = 0;\n    long cnt2 = 0;\n    long cur2 = 0;\n    long cnt3\
    \ = 0;\n    long cur3 = 0;\n    long cnt4 = 0;\n    long cur4 = 0;\n    long cnt5\
    \ = 0;\n    long cur5 = 0;\n    long cnt6 = 0;\n    long cur6 = 0;\n    long cnt7\
    \ = 0;\n    long cur7 = 0;\n    long cnt8 = 0;\n    long cur8 = 0;\n    long cnt9\
    \ = 0;\n    long cur9 = 0;\n    long cnt10 = 0;\n    long cur10 = 0;\n    long\
    \ cnt11 = 0;\n    long cur11 = 0;\n    long cnt12 = 0;\n    long cur12 = 0;\n\
    \    long cnt13 = 0;\n    long cur13 = 0;\n    long cnt14 = 0;\n    long cur14\
    \ = 0;\n    long cnt15 = 0;\n    long cur15 = 0;\n    long cnt16 = 0;\n    long\
    \ cur16 = 0;\n    long cnt17 = 0;\n    long cur17 = 0;\n    long cnt18 = 0;\n\
    \    long cur18 = 0;\n    long cnt19 = 0;\n    long cur19 = 0;\n    long cnt20\
    \ = 0;\n    long cur20 = 0;\n    long cnt21 = 0;\n    long cur21 = 0;\n    long\
    \ cnt22 = 0;\n    long cur22 = 0;\n    long cnt23 = 0;\n    long cur23 = 0;\n\
    \    long cnt24 = 0;\n    long cur24 = 0;\n    long cnt25 = 0;\n    long cur25\
    \ = 0;\n    long cnt26 = 0;\n    long cur26 = 0;\n    long cnt27 = 0;\n    long\
    \ cur27 = 0;\n    long cnt28 = 0;\n    long cur28 = 0;\n    long cnt29 = 0;\n\
    \    long cur29 = 0;\n    long cnt30 = 0;\n    long cur30 = 0;\n    long cnt31\
    \ = 0;\n    long cur31 = 0;\n    long cnt32 = 0;\n    long cur32 = 0;\n    long\
    \ cnt33 = 0;\n    long cur33 = 0;\n    long cnt34 = 0;\n    long cur34 = 0;\n\
    \    long cnt35 = 0;\n    long cur35 = 0;\n    long cnt36 = 0;\n    long cur36\
    \ = 0;\n    long cnt37 = 0;\n    long cur37 = 0;\n    long cnt38 = 0;\n    long\
    \ cur38 = 0;\n    long cnt39 = 0;\n    long cur39 = 0;\n    long cnt40 = 0;\n\
    \    long cur40 = 0;\n    long cnt41 = 0;\n    long cur41 = 0;\n    long cnt42\
    \ = 0;\n    long ", "    std::vector<std::vector<long>> gridCopy = grid;\n   \
    \ std::vector<long> ans;\n    long n = gridCopy.size();\n    long m = gridCopy[0].size();\n\
    \    long ans = std::numeric_limits<long>::max();\n    long ans1 = 0;\n    long\
    \ ans2 = 0;\n    long ans3 = 0;\n    long ans4 = 0;\n    long ans5 = 0;\n    long\
    \ ans6 = 0;\n    long ans7 = 0;\n    long ans8 = 0;\n    long ans9 = 0;\n    long\
    \ ans10 = 0;\n    long ans11 = 0;\n    long ans12 = 0;\n    long ans13 = 0;\n\
    \    long ans14 = 0;\n    long ans15 = 0;\n    long ans16 = 0;\n    long ans17\
    \ = 0;\n    long ans18 = 0;\n    long ans19 = 0;\n    long ans20 = 0;\n    long\
    \ ans21 = 0;\n    long ans22 = 0;\n    long ans23 = 0;\n    long ans24 = 0;\n\
    \    long ans25 = 0;\n    long ans26 = 0;\n    long ans27 = 0;\n    long ans28\
    \ = 0;\n    long ans29 = 0;\n    long ans30 = 0;\n    long ans31 = 1;\n    long\
    \ ans32 = 0;\n    long ans33 = 0;\n    long ans34 = 0;\n    long ans35 = 0;\n\
    \    long ans36 = 0;\n    long ans37 = 0;\n    long ans38 = 0;\n    long ans39\
    \ = 0;\n    long ans40 = 0;\n    long ans41 = 1;\n    long ans42 = 0;\n    long\
    \ ans43 = 0;\n    long ans44 = 0;\n    long ans45 = 0;\n    long ans46 = 0;\n\
    \    long ans47 = 0;\n    long ans48 = 0;\n    long ans49 = 0;\n    long ans50\
    \ = 0;\n    long ans51 = 1;\n    long ans52 = 0;\n    long ans53 = 0;\n    long\
    \ ans54 = 0;\n    long ans55 = 0;\n    long ans56 = 0;\n    long ans57 = 0;\n\
    \    long ans58 = 0;\n    long ans59 = 0;\n    long ans60 = 0;\n    long ans61\
    \ = 1;\n    long ans62 = 0;\n    long ans63 = 0;\n    long ans64 = 0;\n    long\
    \ ans65 = 0;\n    long ans66 = 0;\n    long ans67 = 0;\n    long ans68 = 0;\n\
    \    long ans69 = 0;\n    long ans70 = 0;\n    long ans = std::numeric_limits<long>::max();\n\
    \    long ans1 = 0;\n    long ans2 = 0;\n    long ans3 = 0;\n    long ans4 = 0;\n\
    \    long ans5 = 0;\n    long ans6 = 0;", "    // Your code here\n    std::vector<long>\
    \ ans;\n    std::vector<std::vector<long>> gridCopy = grid;\n    long ans = gridCopy[0].size();\n\
    \    long curr = 0;\n    long curr2 = gridCopy[0].size();\n    long curr3 = gridCopy[0].size();\n\
    \    long curr4 = gridCopy[0].size();\n    long curr5 = gridCopy[0].size();\n\
    \    long curr6 = gridCopy[0].size();\n    long curr7 = gridCopy[0].size();\n\
    \    long curr8 = gridCopy[0].size();\n    long curr9 = gridCopy[0].size();\n\
    \    long curr10 = gridCopy[0].size();\n    long curr11 = gridCopy[0].size();\n\
    \    long curr12 = gridCopy[0].size();\n    long curr13 = gridCopy[0].size();\n\
    \    long curr14 = gridCopy[0].size();\n    long curr15 = gridCopy[0].size();\n\
    \    long curr16 = gridCopy[0].size();\n    long curr17 = gridCopy[0].size();\n\
    \    long curr18 = gridCopy[0].size();\n    long curr19 = gridCopy[0].size();\n\
    \    long curr20 = gridCopy[0].size();\n    long curr21 = gridCopy[0].size();\n\
    \    long curr22 = gridCopy[0].size();\n    long curr23 = gridCopy[0].size();\n\
    \    long curr24 = gridCopy[0].size();\n    long curr25 = gridCopy[0].size();\n\
    \    long curr26 = gridCopy[0].size();\n    long curr27 = gridCopy[0].size();\n\
    \    long curr28 = gridCopy[0].size();\n    long curr29 = gridCopy[0].size();\n\
    \    long curr30 = gridCopy[0].size();\n    long curr31 = gridCopy[0].size();\n\
    \    long curr32 = gridCopy[0].size();\n    long curr33 = gridCopy[0].size();\n\
    \    long curr34 = gridCopy[0].size();\n    long curr35 = gridCopy[0].size();\n\
    \    long curr36 = gridCopy[0].size();\n    long curr37 = gridCopy[0].size();\n\
    \    long curr38 = gridCopy[0].size();\n    long curr39 = gridCopy[0].size();\n\
    \    long curr40 = gridCopy[0].size();\n    long curr41 = gridCopy[0].size();\n\
    \    long curr42 = gridCopy[0].size();\n    long curr43 = gridCopy[0].size();\n\
    \    long curr44 = gridCopy[0].size();\n    long curr45 = gridCopy[0].size();\n\
    \    ", "    // Your code here\n    std::vector<std::vector<long>> gridCopy =\
    \ grid;\n    std::vector<long> ans;\n    long n = gridCopy.size();\n    long m\
    \ = gridCopy[0].size();\n    long ans = 0;\n    long minPath = 0;\n    long index\
    \ = 0;\n    long minPathIndex = 0;\n    long minPathValue = 0;\n    long minPathValueIndex\
    \ = 0;\n    long minPathValueIndex2 = 0;\n    long minPathValueIndex3 = 0;\n \
    \   long minPathValueIndex4 = 0;\n    long minPathValueIndex5 = 0;\n    long minPathValueIndex6\
    \ = 0;\n    long minPathValueIndex7 = 0;\n    long minPathValueIndex8 = 0;\n \
    \   long minPathValueIndex9 = 0;\n    long minPathValueIndex10 = 0;\n    long\
    \ minPathValueIndex11 = 0;\n    long minPathValueIndex12 = 0;\n    long minPathValueIndex13\
    \ = 0;\n    long minPathValueIndex14 = 0;\n    long minPathValueIndex15 = 0;\n\
    \    long minPathValueIndex16 = 0;\n    long minPathValueIndex17 = 0;\n    long\
    \ minPathValueIndex18 = 0;\n    long minPathValueIndex19 = 0;\n    long minPathValueIndex20\
    \ = 0;\n    long minPathValueIndex21 = 0;\n    long minPathValueIndex22 = 0;\n\
    \    long minPathValueIndex23 = 0;\n    long minPathValueIndex24 = 0;\n    long\
    \ minPathValueIndex25 = 0;\n    long minPathValueIndex26 = 0;\n    long minPathValueIndex27\
    \ = 0;\n    long minPathValueIndex28 = 0;\n    long minPathValueIndex29 = 0;\n\
    \    long minPathValueIndex30 = 0;\n    long minPathValueIndex31 = 0;\n    long\
    \ minPathValueIndex32 = 0;\n    long minPathValueIndex33 = 0;\n    long minPathValueIndex34\
    \ = 0;\n    long minPathValueIndex35 = 0;\n    long minPathValueIndex36 = 0;\n\
    \    long minPathValueIndex37 = 0;\n    long minPathValueIndex38 = 0;\n    long\
    \ minPathValueIndex39 = 0;\n    long minPathValueIndex40 = 0;\n    long minPathValueIndex41\
    \ = 0;\n    long minPathValueIndex42 = 0;\n    long minPathValueIndex43 = 0;\n\
    \    long minPathValueIndex44 = 0;\n    long minPathValueIndex45 = 0;\n    long\
    \ minPathValueIndex46 = 0;\n    long minPathValueIndex47 = 0;\n    long minPathValueIndex48\
    \ = 0;\n    long minPathValueIndex49 = 0;\n    long minPathValueIndex", "    std::vector<long>\
    \ ans;\n    long n = grid.size();\n    long m = grid[0].size();\n    long ans\
    \ = std::numeric_limits<long>::max();\n    long cnt = 0;\n    std::vector<long>\
    \ lst_A;\n    std::vector<long> lst_B;\n    std::vector<long> lst_C;\n    std::vector<long>\
    \ lst_D;\n    std::vector<long> lst_E;\n    std::vector<long> lst_F;\n    std::vector<long>\
    \ lst_G;\n    std::vector<long> lst_H;\n    std::vector<long> lst_I;\n    std::vector<long>\
    \ lst_J;\n    std::vector<long> lst_K;\n    std::vector<long> lst_L;\n    std::vector<long>\
    \ lst_M;\n    std::vector<long> lst_N;\n    std::vector<long> lst_O;\n    std::vector<long>\
    \ lst_P;\n    std::vector<long> lst_Q;\n    std::vector<long> lst_R;\n    std::vector<long>\
    \ lst_S;\n    std::vector<long> lst_T;\n    std::vector<long> lst_U;\n    std::vector<long>\
    \ lst_V;\n    std::vector<long> lst_W;\n    std::vector<long> lst_X;\n    std::vector<long>\
    \ lst_Y;\n    std::vector<long> lst_Z;\n    std::vector<long> lst_A;\n    std::vector<long>\
    \ lst_B;\n    std::vector<long> lst_C;\n    std::vector<long> lst_D;\n    std::vector<long>\
    \ lst_E;\n    std::vector<long> lst_F;\n    std::vector<long> lst_G;\n    std::vector<long>\
    \ lst_H;\n    std::vector<long> lst_I;\n    std::vector<long> lst_J;\n    std::vector<long>\
    \ lst_K;\n    std::vector<long> lst_L;\n    std::vector<long> lst_M;\n    std::vector<long>\
    \ lst_N;\n    std::vector<long> lst_O;\n    std::vector<long> lst_P;\n    std::vector<long>\
    \ lst_Q;\n    std::vector<long> lst_R;\n    std::vector<long> lst_S;\n    std::vector<long>\
    \ lst_T;\n    std::vector<long> lst_U;\n    std::vector<long> lst_V;\n    std::vector<long>\
    \ lst_W;\n    std::vector<long> lst_X;\n    std::vector<long> lst_Y;\n    std::vector<long>\
    \ lst_Z;\n    std::vector<long> lst_A;\n", "    // Your code here\n    std::vector<long>\
    \ ans;\n    long n = grid.size();\n    long m = grid[0].size();\n    long cnt\
    \ = 0;\n    long ans = 0;\n    long cnt2 = 0;\n    long ans2 = 0;\n    long cnt3\
    \ = 0;\n    long ans3 = 0;\n    long cnt4 = 0;\n    long ans4 = 0;\n    long cnt5\
    \ = 0;\n    long ans5 = 0;\n    long cnt6 = 0;\n    long ans6 = 0;\n    long cnt7\
    \ = 0;\n    long ans7 = 0;\n    long cnt8 = 0;\n    long ans8 = 0;\n    long cnt9\
    \ = 0;\n    long ans9 = 0;\n    long cnt10 = 0;\n    long ans10 = 0;\n    long\
    \ cnt11 = 0;\n    long ans11 = 0;\n    long cnt12 = 0;\n    long ans12 = 0;\n\
    \    long cnt13 = 0;\n    long ans13 = 0;\n    long cnt14 = 0;\n    long ans14\
    \ = 0;\n    long cnt15 = 0;\n    long ans15 = 0;\n    long cnt16 = 0;\n    long\
    \ ans16 = 0;\n    long cnt17 = 0;\n    long ans17 = 0;\n    long cnt18 = 0;\n\
    \    long ans18 = 0;\n    long cnt19 = 0;\n    long ans19 = 0;\n    long cnt20\
    \ = 0;\n    long ans20 = 0;\n    long cnt21 = 0;\n    long ans21 = 0;\n    long\
    \ cnt22 = 0;\n    long ans22 = 0;\n    long cnt23 = 0;\n    long ans23 = 0;\n\
    \    long cnt24 = 0;\n    long ans24 = 0;\n    long cnt25 = 0;\n    long ans25\
    \ = 0;\n    long cnt26 = 0;\n    long ans26 = 0;\n    long cnt27 = 0;\n    long\
    \ ans27 = 0;\n    long cnt28 = 0;\n    long ans28 = 0;\n    long cnt29 = 0;\n\
    \    long ans29 = 0;\n    long cnt30 = 0;\n    long ans30 = 0;\n    long cnt31\
    \ = 0;\n    long ans31 = 0;\n    long cnt32 = 0;\n    long ans32 = 0;\n    long\
    \ cnt33 = 0;\n    long ans33 = 0;\n    long cnt34 = 0;\n    long ans34 = 0;\n\
    \    long cnt35 = 0;\n    long ans35 = 0;\n    long cnt36 = 0;\n    long ans36\
    \ = 0;\n    long cnt37 = 0;\n    long ans37 = 0;\n    long cnt38 = 0;\n    long\
    \ ans38 = 0;\n    long cnt39 = 0;\n    long ans39 = 0;\n    long cnt40 = 0;\n\
    \    long ans40 = 0;\n    long cnt41 = 0;\n    long ans41 = 0;\n    ", "    //\
    \ Your code here\n    std::vector<long> ans;\n    long n = grid.size();\n    long\
    \ m = grid[0].size();\n    long ans = 0;\n    long cnt = 0;\n    long i = 0;\n\
    \    long j = 0;\n    long cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n\
    \    long cnt5 = 0;\n    long cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n\
    \    long cnt9 = 0;\n    long cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12\
    \ = 0;\n    long cnt13 = 0;\n    long cnt14 = 0;\n    long cnt15 = 0;\n    long\
    \ cnt16 = 0;\n    long cnt17 = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n\
    \    long cnt20 = 0;\n    long cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23\
    \ = 0;\n    long cnt24 = 0;\n    long cnt25 = 0;\n    long cnt26 = 0;\n    long\
    \ cnt27 = 0;\n    long cnt28 = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n\
    \    long cnt31 = 0;\n    long cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34\
    \ = 0;\n    long cnt35 = 0;\n    long cnt36 = 0;\n    long cnt37 = 0;\n    long\
    \ cnt38 = 0;\n    long cnt39 = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n\
    \    long cnt42 = 0;\n    long cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45\
    \ = 0;\n    long cnt46 = 0;\n    long cnt47 = 0;\n    long cnt48 = 0;\n    long\
    \ cnt49 = 0;\n    long cnt50 = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n\
    \    long cnt53 = 0;\n    long cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56\
    \ = 0;\n    long cnt57 = 0;\n    long cnt58 = 0;\n    long cnt59 = 0;\n    long\
    \ cnt60 = 0;\n    long cnt61 = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n\
    \    long cnt64 = 0;\n    long cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67\
    \ = 0;\n    long cnt68 = 0;\n    long cnt69 = 0;\n    long cnt70 = 0;\n    long\
    \ cnt71 = 0;\n    long cnt72 = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n\
    \    long cnt75 = 0;\n    long cnt76 = 0;\n    long cnt77 = 0;\n    long cnt78\
    \ = 0;\n    long cnt79 = 0;\n    long "]
stop_tokens:
- "\n}"
