name: HumanEval_29_filter_by_prefix
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings\
  \ only for ones that start with a given prefix.\n// >>> filter_by_prefix((std::vector<std::string>()),\
  \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_prefix((std::vector<std::string>({(std::string)\"\
  abc\", (std::string)\"bcd\", (std::string)\"cde\", (std::string)\"array\"})), (\"\
  a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"array\"\
  }))\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings,\
  \ std::string prefix) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\", (std::string)\"\
  xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
  xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n}\n"
completions: ["  std::vector<std::string> result;\n  for (auto &s : strings) {\n \
    \   if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.length()) == prefix)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;", "  std::vector<std::string>\
    \ result;\n  for (auto it = strings.begin(); it != strings.end(); ++it) {\n  \
    \  if (it->starts_with(prefix)) {\n      result.push_back(*it);\n    }\n  }\n\
    \  return result;", "    std::vector<std::string> result;\n    for (auto &s :\
    \ strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n          \
    \  result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.length()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.length())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.substr(0, prefix.length())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &str : strings) {\n        if (str.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(str);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (std::string s : strings) {\n    if (s.substr(0, prefix.size()) == prefix)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;"]
stop_tokens:
- "\n}"
