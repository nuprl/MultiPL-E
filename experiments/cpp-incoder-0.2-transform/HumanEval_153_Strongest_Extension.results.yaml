language: cpp
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions){\n        cap += ext.length();\n        sm += ext.length()-1;\n\
    \    }\n    float strength = cap - sm;\n    for(auto &ext : extensions){\n   \
    \     if(ext.length() == cap){\n            strongest_extension += class_name\
    \ + \".\" + ext;\n        }\n        else if(ext.length() == sm){\n          \
    \  strongest_extension += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n\
    \        }\n        else if(ext.length() > cap && ext.length() > sm){\n      \
    \      strongest_extension += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n\
    \        }\n        else if(ext.length() < cap && ext.length() < sm){\n      \
    \      strongest_extension += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n\
    \        }\n        else if(ext.length() == cap && ext.length() < sm){\n     \
    \       strongest_extension += class_name + \".\" + ext;\n        }\n        else\
    \ if(ext.length() == sm && ext.length() > cap){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() == sm && ext.length() < cap){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() > cap && ext.length() == sm){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() < cap && ext.length() == sm){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() == cap && ext.length() > sm){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() == sm && ext.length() == cap){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() > cap && ext.length() == sm){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() < cap && ext.length() == sm){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() == sm && ext.length() > cap){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() == sm \n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcijqupd_.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpcijqupd_.cpp:24:15: error:\
    \ ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n     for(auto\
    \ &ext : extensions){\n               ^\n/tmp/tmpcijqupd_.cpp:24:21: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for(auto &ext : extensions){\n\
    \                     ^\n/tmp/tmpcijqupd_.cpp:25:20: error: request for member\
    \ 'length' in 'ext', which is of non-class type 'int'\n         cap += ext.length();\n\
    \                    ^\n/tmp/tmpcijqupd_.cpp:26:19: error: request for member\
    \ 'length' in 'ext', which is of non-class type 'int'\n         sm += ext.length()-1;\n\
    \                   ^\n/tmp/tmpcijqupd_.cpp:29:15: error: ISO C++ forbids declaration\
    \ of 'ext' with no type [-fpermissive]\n     for(auto &ext : extensions){\n  \
    \             ^\n/tmp/tmpcijqupd_.cpp:29:21: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for(auto &ext : extensions){\n             \
    \        ^\n/tmp/tmpcijqupd_.cpp:30:16: error: request for member 'length' in\
    \ 'ext', which is of non-class type 'int'\n         if(ext.length() == cap){\n\
    \                ^\n/tmp/tmpcijqupd_.cpp:31:53: error: no match for 'operator+'\
    \ (operand types are 'std::basic_string<char>' and 'int')\n             strongest_extension\
    \ += class_name + \".\" + ext;\n                                             \
    \        ^\n/tmp/tmpcijqupd_.cpp:31:53: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n      \
    \           from /tmp/tmpcijqupd_.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpcijqupd_.cpp:31:55: note:   mismatched\
    \ types 'cons"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &extension : extensions) {\n        cap += (extension.at(0) - 'A');\n      \
    \  sm += (extension.at(1) - 'a');\n    }\n    \n    double strength = cap - sm;\n\
    \    \n    for(auto &extension : extensions) {\n        if(strength == (extension.at(0)\
    \ - 'A') - (extension.at(1) - 'a')) {\n            strongest_extension = class_name\
    \ + \".\" + extension;\n            break;\n        }\n    }\n    \n    return\
    \ strongest_extension;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7b40c208.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmp7b40c208.cpp:25:15: error:\
    \ ISO C++ forbids declaration of 'extension' with no type [-fpermissive]\n   \
    \  for(auto &extension : extensions) {\n               ^\n/tmp/tmp7b40c208.cpp:25:27:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(auto\
    \ &extension : extensions) {\n                           ^\n/tmp/tmp7b40c208.cpp:26:27:\
    \ error: request for member 'at' in 'extension', which is of non-class type 'int'\n\
    \         cap += (extension.at(0) - 'A');\n                           ^\n/tmp/tmp7b40c208.cpp:27:26:\
    \ error: request for member 'at' in 'extension', which is of non-class type 'int'\n\
    \         sm += (extension.at(1) - 'a');\n                          ^\n/tmp/tmp7b40c208.cpp:32:15:\
    \ error: ISO C++ forbids declaration of 'extension' with no type [-fpermissive]\n\
    \     for(auto &extension : extensions) {\n               ^\n/tmp/tmp7b40c208.cpp:32:27:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(auto\
    \ &extension : extensions) {\n                           ^\n/tmp/tmp7b40c208.cpp:33:35:\
    \ error: request for member 'at' in 'extension', which is of non-class type 'int'\n\
    \         if(strength == (extension.at(0) - 'A') - (extension.at(1) - 'a')) {\n\
    \                                   ^\n/tmp/tmp7b40c208.cpp:33:61: error: request\
    \ for member 'at' in 'extension', which is of non-class type 'int'\n         if(strength\
    \ == (extension.at(0) - 'A') - (extension.at(1) - 'a')) {\n                  \
    \                                           ^\n/tmp/tmp7b40c208.cpp:34:52: error:\
    \ no match for 'operator+' (operand types are 'std::basic_string<char>' and 'int')\n\
    \             strongest_extension = class_name + \".\" + extension;\n        \
    \                                            ^\n/tmp/tmp7b40c208.cpp:34:52: note:\
    \ candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp7b40c208.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for (auto &extension :\
    \ extensions) {\n        auto cap = extension.find_first_of('A');\n        auto\
    \ sm = extension.find_first_of('l');\n        auto strength = cap - sm;\n    \
    \    if (strength > 0) {\n            strongest_extension += class_name + \".\"\
    \ + extension;\n        }\n    }\n    \n    return strongest_extension;\n}\nint\
    \ main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7gfoxw6z.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmp7gfoxw6z.cpp:24:16: error:\
    \ ISO C++ forbids declaration of 'extension' with no type [-fpermissive]\n   \
    \  for (auto &extension : extensions) {\n                ^\n/tmp/tmp7gfoxw6z.cpp:24:28:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &extension : extensions) {\n                            ^\n/tmp/tmp7gfoxw6z.cpp:25:14:\
    \ error: 'cap' does not name a type\n         auto cap = extension.find_first_of('A');\n\
    \              ^\n/tmp/tmp7gfoxw6z.cpp:26:14: error: 'sm' does not name a type\n\
    \         auto sm = extension.find_first_of('l');\n              ^\n/tmp/tmp7gfoxw6z.cpp:27:14:\
    \ error: 'strength' does not name a type\n         auto strength = cap - sm;\n\
    \              ^\n/tmp/tmp7gfoxw6z.cpp:28:13: error: 'strength' was not declared\
    \ in this scope\n         if (strength > 0) {\n             ^\n/tmp/tmp7gfoxw6z.cpp:29:53:\
    \ error: no match for 'operator+' (operand types are 'std::basic_string<char>'\
    \ and 'int')\n             strongest_extension += class_name + \".\" + extension;\n\
    \                                                     ^\n/tmp/tmp7gfoxw6z.cpp:29:53:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp7gfoxw6z.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp7gfoxw6z.cpp:29:55: note:   mismatched\
    \ types 'const std::valarray<_Tp>' and 'int'\n             strongest_extension\
    \ += class_name + \".\" + extension;\n                                       \
    \                ^\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \  "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for\
    \ (auto ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    \n    float strength = cap - sm;\n    \n    for (auto ext : extensions)\
    \ {\n        if (ext.length() == strength) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpervi4n5f.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpervi4n5f.cpp:26:15: error:\
    \ 'ext' does not name a type\n     for (auto ext : extensions) {\n           \
    \    ^\n/tmp/tmpervi4n5f.cpp:31:5: error: expected ';' before 'float'\n     float\
    \ strength = cap - sm;\n     ^\n/tmp/tmpervi4n5f.cpp:33:5: error: expected primary-expression\
    \ before 'for'\n     for (auto ext : extensions) {\n     ^\n/tmp/tmpervi4n5f.cpp:33:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpervi4n5f.cpp:33:15: error: 'ext' does\
    \ not name a type\n     for (auto ext : extensions) {\n               ^\n/tmp/tmpervi4n5f.cpp:39:5:\
    \ error: expected ';' before 'return'\n     return strongest_extension;\n    \
    \ ^\n/tmp/tmpervi4n5f.cpp:39:5: error: expected primary-expression before 'return'\n\
    /tmp/tmpervi4n5f.cpp:39:5: error: expected ';' before 'return'\n/tmp/tmpervi4n5f.cpp:39:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpervi4n5f.cpp:39:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpervi4n5f.cpp: In function 'int\
    \ main()':\n/tmp/tmpervi4n5f.cpp:42:10: error: 'candidate' does not name a type\n\
    \     auto candidate = Strongest_Extension;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpervi4n5f.cpp:2:\n/tmp/tmpervi4n5f.cpp:43:60: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmpervi4n5f.cpp:43:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    \n    for(int i = 0; i < extensions.size();\
    \ i++) {\n        std::string extension = extensions[i];\n        \n        int\
    \ cap = extension.find_first_of('A');\n        int sm = extension.find_first_of('l');\n\
    \        \n        int strength = cap - sm;\n        \n        if(strength > 0)\
    \ {\n            strongest_extension += class_name + \".\" + extension;\n    \
    \    }\n    }\n    \n    return strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj2c0hosp.cpp: In function 'int main()':\n/tmp/tmpj2c0hosp.cpp:40:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = Strongest_Extension;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj2c0hosp.cpp:2:\n/tmp/tmpj2c0hosp.cpp:41:60: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmpj2c0hosp.cpp:41:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                                        \
    \                                                        ^\n/tmp/tmpj2c0hosp.cpp:41:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj2c0hosp.cpp:41:128: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpj2c0hosp.cpp:41:128: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpj2c0hosp.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/subst"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    cap = cap - sm;\n    if (cap > 0) {\n        strongest_extension =\
    \ class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() < strongest_extension.length()) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiwymzl5_.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpiwymzl5_.cpp:24:16: error:\
    \ ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n     for (auto\
    \ &ext : extensions) {\n                ^\n/tmp/tmpiwymzl5_.cpp:24:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &ext :\
    \ extensions) {\n                      ^\n/tmp/tmpiwymzl5_.cpp:25:20: error: request\
    \ for member 'length' in 'ext', which is of non-class type 'int'\n         cap\
    \ += ext.length();\n                    ^\n/tmp/tmpiwymzl5_.cpp:26:19: error:\
    \ request for member 'length' in 'ext', which is of non-class type 'int'\n   \
    \      sm += ext.length();\n                   ^\n/tmp/tmpiwymzl5_.cpp:32:16:\
    \ error: ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n  \
    \   for (auto &ext : extensions) {\n                ^\n/tmp/tmpiwymzl5_.cpp:32:22:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &ext : extensions) {\n                      ^\n/tmp/tmpiwymzl5_.cpp:33:17: error:\
    \ request for member 'length' in 'ext', which is of non-class type 'int'\n   \
    \      if (ext.length() < strongest_extension.length()) {\n                 ^\n\
    /tmp/tmpiwymzl5_.cpp:34:52: error: no match for 'operator+' (operand types are\
    \ 'std::basic_string<char>' and 'int')\n             strongest_extension = class_name\
    \ + \".\" + ext;\n                                                    ^\n/tmp/tmpiwymzl5_.cpp:34:52:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmpiwymzl5_.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpiwymzl5_.cpp:34"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &extension : extensions) {\n        cap += (extension.at(0) - 'A');\n      \
    \  sm += (extension.at(1) - 'a');\n    }\n    float strength = cap - sm;\n   \
    \ if (strength > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (auto &extension : extensions) {\n        if (strength > 0) {\n\
    \            if (extension.at(0) - 'A' > strongest_extension.at(0) - 'A') {\n\
    \                strongest_extension = class_name + \".\" + extension;\n     \
    \       }\n        }\n    }\n    return strongest_extension;\n}\nint main() {\n\
    \    auto candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"\
    ), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\", (std::string)\"\
    eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"Boku123\"\
    ), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\",\
    \ (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_xj4m7m.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmp2_xj4m7m.cpp:24:16: error:\
    \ ISO C++ forbids declaration of 'extension' with no type [-fpermissive]\n   \
    \  for (auto &extension : extensions) {\n                ^\n/tmp/tmp2_xj4m7m.cpp:24:28:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &extension : extensions) {\n                            ^\n/tmp/tmp2_xj4m7m.cpp:25:27:\
    \ error: request for member 'at' in 'extension', which is of non-class type 'int'\n\
    \         cap += (extension.at(0) - 'A');\n                           ^\n/tmp/tmp2_xj4m7m.cpp:26:26:\
    \ error: request for member 'at' in 'extension', which is of non-class type 'int'\n\
    \         sm += (extension.at(1) - 'a');\n                          ^\n/tmp/tmp2_xj4m7m.cpp:32:16:\
    \ error: ISO C++ forbids declaration of 'extension' with no type [-fpermissive]\n\
    \     for (auto &extension : extensions) {\n                ^\n/tmp/tmp2_xj4m7m.cpp:32:28:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &extension : extensions) {\n                            ^\n/tmp/tmp2_xj4m7m.cpp:34:27:\
    \ error: request for member 'at' in 'extension', which is of non-class type 'int'\n\
    \             if (extension.at(0) - 'A' > strongest_extension.at(0) - 'A') {\n\
    \                           ^\n/tmp/tmp2_xj4m7m.cpp:35:56: error: no match for\
    \ 'operator+' (operand types are 'std::basic_string<char>' and 'int')\n      \
    \           strongest_extension = class_name + \".\" + extension;\n          \
    \                                              ^\n/tmp/tmp2_xj4m7m.cpp:35:56:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp2_xj4m7m.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (int i = 1; i < extensions.size();\
    \ i++) {\n        if (strength > 0) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgg2d51fk.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpgg2d51fk.cpp:24:16: error:\
    \ ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n     for (auto\
    \ &ext : extensions) {\n                ^\n/tmp/tmpgg2d51fk.cpp:24:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &ext :\
    \ extensions) {\n                      ^\n/tmp/tmpgg2d51fk.cpp:25:20: error: request\
    \ for member 'length' in 'ext', which is of non-class type 'int'\n         cap\
    \ += ext.length();\n                    ^\n/tmp/tmpgg2d51fk.cpp:26:19: error:\
    \ request for member 'length' in 'ext', which is of non-class type 'int'\n   \
    \      sm += ext.length();\n                   ^\n/tmp/tmpgg2d51fk.cpp: In function\
    \ 'int main()':\n/tmp/tmpgg2d51fk.cpp:40:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = Strongest_Extension;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgg2d51fk.cpp:2:\n/tmp/tmpgg2d51fk.cpp:41:60: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmpgg2d51fk.cpp:41:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                                        \
    \                                                        ^\n/tmp/tmpgg2d51fk.cpp:41:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpgg2d51fk.cpp:41:128: error: no matc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string extension_strength;\n    int cap_counter = 0;\n    int sm_counter\
    \ = 0;\n    \n    for (auto extension : extensions) {\n        cap_counter++;\n\
    \        auto cap = extension.substr(0, 1);\n        sm_counter++;\n        auto\
    \ sm = extension.substr(1, 1);\n        \n        if (cap == sm) {\n         \
    \   extension_strength += extension;\n        }\n    }\n    \n    if (cap_counter\
    \ > sm_counter) {\n        extension_strength += class_name;\n    }\n    \n  \
    \  return extension_strength;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp39ws9t1q.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmp39ws9t1q.cpp:26:15: error:\
    \ 'extension' does not name a type\n     for (auto extension : extensions) {\n\
    \               ^\n/tmp/tmp39ws9t1q.cpp:37:5: error: expected ';' before 'if'\n\
    \     if (cap_counter > sm_counter) {\n     ^\n/tmp/tmp39ws9t1q.cpp:37:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmp39ws9t1q.cpp:37:5: error: expected\
    \ ';' before 'if'\n/tmp/tmp39ws9t1q.cpp:37:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmp39ws9t1q.cpp:37:5: error: expected ')' before 'if'\n/tmp/tmp39ws9t1q.cpp:\
    \ In function 'int main()':\n/tmp/tmp39ws9t1q.cpp:44:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = Strongest_Extension;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp39ws9t1q.cpp:2:\n/tmp/tmp39ws9t1q.cpp:45:60: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmp39ws9t1q.cpp:45:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                                        \
    \                                                        ^\n/tmp/tmp39ws9t1q.cpp:45:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp39ws9t1q.cpp:45:128: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp39ws9"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - ext.length();\n    }\n    \n    float strength = cap - sm;\n    \n    for(auto\
    \ &ext : extensions) {\n        if(ext.length() == strongest_extension.length())\
    \ {\n            if(strength > ext.length() - ext.length()) {\n              \
    \  strongest_extension = ext;\n            }\n        }\n    }\n    \n    return\
    \ class_name + \".\" + strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpug9h2uwe.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpug9h2uwe.cpp:25:15: error:\
    \ ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n     for(auto\
    \ &ext : extensions) {\n               ^\n/tmp/tmpug9h2uwe.cpp:25:21: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for(auto &ext : extensions)\
    \ {\n                     ^\n/tmp/tmpug9h2uwe.cpp:26:20: error: request for member\
    \ 'length' in 'ext', which is of non-class type 'int'\n         cap += ext.length();\n\
    \                    ^\n/tmp/tmpug9h2uwe.cpp:27:19: error: request for member\
    \ 'length' in 'ext', which is of non-class type 'int'\n         sm += ext.length()\
    \ - ext.length();\n                   ^\n/tmp/tmpug9h2uwe.cpp:27:34: error: request\
    \ for member 'length' in 'ext', which is of non-class type 'int'\n         sm\
    \ += ext.length() - ext.length();\n                                  ^\n/tmp/tmpug9h2uwe.cpp:32:15:\
    \ error: ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n  \
    \   for(auto &ext : extensions) {\n               ^\n/tmp/tmpug9h2uwe.cpp:32:21:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(auto\
    \ &ext : extensions) {\n                     ^\n/tmp/tmpug9h2uwe.cpp:33:16: error:\
    \ request for member 'length' in 'ext', which is of non-class type 'int'\n   \
    \      if(ext.length() == strongest_extension.length()) {\n                ^\n\
    /tmp/tmpug9h2uwe.cpp:34:31: error: request for member 'length' in 'ext', which\
    \ is of non-class type 'int'\n             if(strength > ext.length() - ext.length())\
    \ {\n                               ^\n/tmp/tmpug9h2uwe.cpp:34:46: error: request\
    \ for member 'length' in 'ext', which is of non-class type 'int'\n           \
    \  if(strength > ext.length() - ext.length()) {\n                            \
    \                  ^\n/tmp/tmpug9h2uwe.cpp: In function 'int main()':\n/tmp/tmpug9h2uwe.cpp:43:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = Strongest_Extension;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/casse"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    \n    for (auto extension : extensions) {\n        cap_counter += extension.at(0)\
    \ - 'A';\n        sm_counter += extension.at(1) - 'a';\n    }\n    \n    if (cap_counter\
    \ > sm_counter) {\n        strongest_extension = class_name + extensions[0];\n\
    \    } else {\n        strongest_extension = class_name + extensions[1];\n   \
    \ }\n    \n    return strongest_extension;\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxg7aces.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpjxg7aces.cpp:26:15: error:\
    \ 'extension' does not name a type\n     for (auto extension : extensions) {\n\
    \               ^\n/tmp/tmpjxg7aces.cpp:31:5: error: expected ';' before 'if'\n\
    \     if (cap_counter > sm_counter) {\n     ^\n/tmp/tmpjxg7aces.cpp:31:5: error:\
    \ expected primary-expression before 'if'\n/tmp/tmpjxg7aces.cpp:31:5: error: expected\
    \ ';' before 'if'\n/tmp/tmpjxg7aces.cpp:31:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpjxg7aces.cpp:31:5: error: expected ')' before 'if'\n/tmp/tmpjxg7aces.cpp:\
    \ In function 'int main()':\n/tmp/tmpjxg7aces.cpp:40:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = Strongest_Extension;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpjxg7aces.cpp:2:\n/tmp/tmpjxg7aces.cpp:41:60: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmpjxg7aces.cpp:41:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                                        \
    \                                                        ^\n/tmp/tmpjxg7aces.cpp:41:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpjxg7aces.cpp:41:128: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpjxg7a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        cap_num += ext.length();\n       \
    \ sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n  \
    \  }\n    double strength = cap_num - sm_num;\n    double max_strength = -1;\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n        if (ext_strength >\
    \ max_strength) {\n            max_strength = ext_strength;\n        }\n    }\n\
    \    if (max_strength == -1) {\n        return class_name;\n    }\n    double\
    \ strength_diff = strength - max_strength;\n    double max_strength_diff = -1;\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n        if (ext_strength >\
    \ max_strength) {\n            max_strength = ext_strength;\n        }\n     \
    \   double ext_diff = ext_strength - max_strength;\n        if (ext_diff > max_strength_diff)\
    \ {\n            max_strength_diff = ext_diff;\n        }\n    }\n    if (max_strength_diff\
    \ == -1) {\n        return class_name;\n    }\n    double strength_diff = strength\
    \ - max_strength;\n    double max_strength_diff = -1;\n    for (auto &ext : extensions)\
    \ {\n        double ext_strength = ext.length() - ext.find_first_not_of(ext.begin(),\
    \ ext.end());\n        if (ext_strength > max_strength) {\n            max_strength\
    \ = ext_strength;\n        }\n        double ext_diff = ext_strength - max_strength;\n\
    \        if (ext_diff > max_strength_diff) {\n            max_strength_diff =\
    \ ext_diff;\n        }\n    }\n    if (max_strength_diff == -1) {\n        return\
    \ class_name;\n    }\n    double strength_diff = strength - max_strength;\n  \
    \  double max_strength_diff = -1;\n    for (auto &ext : extensions) {\n      \
    \  double ext_strength = ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \        if (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n        double ext_diff = ext_strength - max_strength;\n        if\
    \ (ext_diff > max_strength_diff) {\n            max_strength_diff = ext_diff;\n\
    \        }\n    }\n    if (max_strength_diff == -1) {\n        return class_name;\n\
    \    }\n    double strength_diff = strength - max_strength;\n    double max_strength_diff\
    \ = -1;\n    for (auto &ext : extensions) {\n        double ext_strength = ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n        if (ext_strength >\
    \ max_strength) {\n            max_\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rfrpeaj.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmp7rfrpeaj.cpp:21:16: error:\
    \ ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n     for (auto\
    \ &ext : extensions) {\n                ^\n/tmp/tmp7rfrpeaj.cpp:21:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &ext :\
    \ extensions) {\n                      ^\n/tmp/tmp7rfrpeaj.cpp:22:24: error: request\
    \ for member 'length' in 'ext', which is of non-class type 'int'\n         cap_num\
    \ += ext.length();\n                        ^\n/tmp/tmp7rfrpeaj.cpp:23:23: error:\
    \ request for member 'length' in 'ext', which is of non-class type 'int'\n   \
    \      sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \                       ^\n/tmp/tmp7rfrpeaj.cpp:23:38: error: request for member\
    \ 'find_first_not_of' in 'ext', which is of non-class type 'int'\n         sm_num\
    \ += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n         \
    \                             ^\n/tmp/tmp7rfrpeaj.cpp:23:60: error: request for\
    \ member 'begin' in 'ext', which is of non-class type 'int'\n         sm_num +=\
    \ ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n            \
    \                                                ^\n/tmp/tmp7rfrpeaj.cpp:23:73:\
    \ error: request for member 'end' in 'ext', which is of non-class type 'int'\n\
    \         sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \                                                                         ^\n\
    /tmp/tmp7rfrpeaj.cpp:27:16: error: ISO C++ forbids declaration of 'ext' with no\
    \ type [-fpermissive]\n     for (auto &ext : extensions) {\n                ^\n\
    /tmp/tmp7rfrpeaj.cpp:27:22: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (auto &ext : extensions) {\n                      ^\n/tmp/tmp7rfrpeaj.cpp:28:35:\
    \ error: request for member 'length' in 'ext', which is of non-class type 'int'\n\
    \         double ext_strength = ext.length() - ext.find_first_not_of(ext.begin(),\
    \ ext.end());"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_extensions = 0, sm_extensions\
    \ = 0;\n    for (auto ext : extensions) {\n        if (ext.at(0) == ext.at(1).toupper())\
    \ {\n            cap_extensions++;\n        } else {\n            sm_extensions++;\n\
    \        }\n    }\n    double strength = cap_extensions - sm_extensions;\n   \
    \ if (strength > 0) {\n        return class_name + \".\" + extensions[extensions.size()\
    \ - 1].substr(0, extensions[extensions.size() - 1].find_first_of(\"0123456789\"\
    )) + \".\" + extensions[extensions.size() - 1].substr(extensions[extensions.size()\
    \ - 1].find_first_of(\"0123456789\") + 1);\n    }\n    return class_name + \"\
    .\" + extensions[extensions.size() - 1];\n}\nint main() {\n    auto candidate\
    \ = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpamd7nms4.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpamd7nms4.cpp:21:15: error:\
    \ 'ext' does not name a type\n     for (auto ext : extensions) {\n           \
    \    ^\n/tmp/tmpamd7nms4.cpp:28:5: error: expected ';' before 'double'\n     double\
    \ strength = cap_extensions - sm_extensions;\n     ^\n/tmp/tmpamd7nms4.cpp:29:5:\
    \ error: expected primary-expression before 'if'\n     if (strength > 0) {\n \
    \    ^\n/tmp/tmpamd7nms4.cpp:29:5: error: expected ')' before 'if'\n/tmp/tmpamd7nms4.cpp:\
    \ In function 'int main()':\n/tmp/tmpamd7nms4.cpp:35:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = Strongest_Extension;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpamd7nms4.cpp:2:\n/tmp/tmpamd7nms4.cpp:36:60: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmpamd7nms4.cpp:36:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                                        \
    \                                                        ^\n/tmp/tmpamd7nms4.cpp:36:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpamd7nms4.cpp:36:128: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpamd7nms4.cpp:36:128: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:6"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_letters = 0, sm_letters\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap_letters += ext.length();\n\
    \        sm_letters += ext.length();\n    }\n    int strength = cap_letters -\
    \ sm_letters;\n    for (auto &ext : extensions) {\n        if (ext.length() ==\
    \ strength) {\n            return class_name + \".\" + ext;\n        }\n    }\n\
    \    return class_name;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ng4snx7.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmp5ng4snx7.cpp:21:16: error:\
    \ ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n     for (auto\
    \ &ext : extensions) {\n                ^\n/tmp/tmp5ng4snx7.cpp:21:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &ext :\
    \ extensions) {\n                      ^\n/tmp/tmp5ng4snx7.cpp:22:28: error: request\
    \ for member 'length' in 'ext', which is of non-class type 'int'\n         cap_letters\
    \ += ext.length();\n                            ^\n/tmp/tmp5ng4snx7.cpp:23:27:\
    \ error: request for member 'length' in 'ext', which is of non-class type 'int'\n\
    \         sm_letters += ext.length();\n                           ^\n/tmp/tmp5ng4snx7.cpp:26:16:\
    \ error: ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n  \
    \   for (auto &ext : extensions) {\n                ^\n/tmp/tmp5ng4snx7.cpp:26:22:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &ext : extensions) {\n                      ^\n/tmp/tmp5ng4snx7.cpp:27:17: error:\
    \ request for member 'length' in 'ext', which is of non-class type 'int'\n   \
    \      if (ext.length() == strength) {\n                 ^\n/tmp/tmp5ng4snx7.cpp:28:37:\
    \ error: no match for 'operator+' (operand types are 'std::basic_string<char>'\
    \ and 'int')\n             return class_name + \".\" + ext;\n                \
    \                     ^\n/tmp/tmp5ng4snx7.cpp:28:37: note: candidates are:\nIn\
    \ file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp5ng4snx7.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp5ng4snx7.cpp:28:39: note:   mism"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    int cap_num = 0, sm_num = 0;\n \
    \   for (auto &ext : extensions) {\n        if (ext.size() >= cap_num && ext.size()\
    \ <= sm_num) {\n            cap_num = ext.size();\n            sm_num = ext.size();\n\
    \        }\n        else if (ext.size() > sm_num) {\n            sm_num = ext.size();\n\
    \        }\n    }\n    double cap_frac = cap_num - sm_num;\n    double sm_frac\
    \ = cap_num - sm_num;\n    if (cap_frac > sm_frac) {\n        cap_frac = sm_frac;\n\
    \    }\n    std::string strongest_ext;\n    if (cap_frac > 0.5) {\n        strongest_ext\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if (cap_frac > 0.25)\
    \ {\n        strongest_ext = class_name + \".\" + extensions[1];\n    }\n    else\
    \ if (cap_frac > 0.10) {\n        strongest_ext = class_name + \".\" + extensions[2];\n\
    \    }\n    else {\n        strongest_ext = class_name + \".\" + extensions[3];\n\
    \    }\n    return strongest_ext;\n}\nint main() {\n    auto candidate = Strongest_Extension;\n\
    \    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppuslsqct.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmppuslsqct.cpp:21:16: error:\
    \ ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n     for (auto\
    \ &ext : extensions) {\n                ^\n/tmp/tmppuslsqct.cpp:21:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &ext :\
    \ extensions) {\n                      ^\n/tmp/tmppuslsqct.cpp:22:17: error: request\
    \ for member 'size' in 'ext', which is of non-class type 'int'\n         if (ext.size()\
    \ >= cap_num && ext.size() <= sm_num) {\n                 ^\n/tmp/tmppuslsqct.cpp:22:42:\
    \ error: request for member 'size' in 'ext', which is of non-class type 'int'\n\
    \         if (ext.size() >= cap_num && ext.size() <= sm_num) {\n             \
    \                             ^\n/tmp/tmppuslsqct.cpp:23:27: error: request for\
    \ member 'size' in 'ext', which is of non-class type 'int'\n             cap_num\
    \ = ext.size();\n                           ^\n/tmp/tmppuslsqct.cpp:24:26: error:\
    \ request for member 'size' in 'ext', which is of non-class type 'int'\n     \
    \        sm_num = ext.size();\n                          ^\n/tmp/tmppuslsqct.cpp:26:22:\
    \ error: request for member 'size' in 'ext', which is of non-class type 'int'\n\
    \         else if (ext.size() > sm_num) {\n                      ^\n/tmp/tmppuslsqct.cpp:27:26:\
    \ error: request for member 'size' in 'ext', which is of non-class type 'int'\n\
    \             sm_num = ext.size();\n                          ^\n/tmp/tmppuslsqct.cpp:\
    \ In function 'int main()':\n/tmp/tmppuslsqct.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = Strongest_Extension;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmppuslsqct.cpp:2:\n/tmp/tmppuslsqct.cpp:52:60: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_extension = 0;\n    int sml_extension\
    \ = 0;\n    for (auto extension : extensions) {\n        cap_extension = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {return std::toupper(c) == c; });\n        sml_extension\
    \ = std::count_if(extension.begin(), extension.end(), [](char c) {return std::tolower(c)\
    \ == c; });\n        if (cap_extension - sml_extension > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7qp13v4.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpb7qp13v4.cpp:24:15: error:\
    \ 'extension' does not name a type\n     for (auto extension : extensions) {\n\
    \               ^\n/tmp/tmpb7qp13v4.cpp:31:5: error: expected ';' before 'return'\n\
    \     return strongest_extension;\n     ^\n/tmp/tmpb7qp13v4.cpp:31:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpb7qp13v4.cpp:31:5: error: expected\
    \ ';' before 'return'\n/tmp/tmpb7qp13v4.cpp:31:5: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpb7qp13v4.cpp:31:5: error: expected ')' before 'return'\n\
    /tmp/tmpb7qp13v4.cpp: In function 'int main()':\n/tmp/tmpb7qp13v4.cpp:34:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = Strongest_Extension;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb7qp13v4.cpp:2:\n/tmp/tmpb7qp13v4.cpp:35:60: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmpb7qp13v4.cpp:35:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                                        \
    \                                                        ^\n/tmp/tmpb7qp13v4.cpp:35:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb7qp13v4.cpp:35:128: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    \n    for\
    \ (auto &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length();\n\
    \    }\n    \n    int strength = cap - sm;\n    \n    if (strength > 0) {\n  \
    \      for (auto &ext : extensions) {\n            if (ext.length() == strength)\
    \ {\n                strongest_extension = class_name + ext;\n               \
    \ break;\n            }\n        }\n    }\n    \n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ffxqsxu.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmp6ffxqsxu.cpp:26:16: error:\
    \ ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n     for (auto\
    \ &ext : extensions) {\n                ^\n/tmp/tmp6ffxqsxu.cpp:26:22: error:\
    \ range-based 'for' loops are not allowed in C++98 mode\n     for (auto &ext :\
    \ extensions) {\n                      ^\n/tmp/tmp6ffxqsxu.cpp:27:20: error: request\
    \ for member 'length' in 'ext', which is of non-class type 'int'\n         cap\
    \ += ext.length();\n                    ^\n/tmp/tmp6ffxqsxu.cpp:28:19: error:\
    \ request for member 'length' in 'ext', which is of non-class type 'int'\n   \
    \      sm += ext.length();\n                   ^\n/tmp/tmp6ffxqsxu.cpp:34:20:\
    \ error: ISO C++ forbids declaration of 'ext' with no type [-fpermissive]\n  \
    \       for (auto &ext : extensions) {\n                    ^\n/tmp/tmp6ffxqsxu.cpp:34:26:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n         for (auto\
    \ &ext : extensions) {\n                          ^\n/tmp/tmp6ffxqsxu.cpp:35:21:\
    \ error: request for member 'length' in 'ext', which is of non-class type 'int'\n\
    \             if (ext.length() == strength) {\n                     ^\n/tmp/tmp6ffxqsxu.cpp:36:50:\
    \ error: no match for 'operator+' (operand types are 'std::string {aka std::basic_string<char>}'\
    \ and 'int')\n                 strongest_extension = class_name + ext;\n     \
    \                                             ^\n/tmp/tmp6ffxqsxu.cpp:36:50: note:\
    \ candidates are:\nIn file included from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:94:0,\n\
    \                 from /tmp/tmp6ffxqsxu.cpp:2:\n/usr/include/c++/4.8.2/valarray:1167:1:\
    \ note: template<class _Tp> std::_Expr<std::_BinClos<std::__plus, std::_Constant,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__plus, _Tp>::result_type>\
    \ std::operator+(const _Tp&, const std::valarray<_Tp>&)\n _DEFINE_BINARY_OPERATOR(+,\
    \ __plus)\n ^\n/usr/include/c++/4.8.2/valarray:1167:1: note:   template argument\
    \ deduction/substitution failed:\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for(auto extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc5rf6v38.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpc5rf6v38.cpp:24:14: error:\
    \ 'extension' does not name a type\n     for(auto extension : extensions) {\n\
    \              ^\n/tmp/tmpc5rf6v38.cpp:32:5: error: expected ';' before 'float'\n\
    \     float strength = cap_counter - sm_counter;\n     ^\n/tmp/tmpc5rf6v38.cpp:33:5:\
    \ error: expected primary-expression before 'if'\n     if(strength > 0) {\n  \
    \   ^\n/tmp/tmpc5rf6v38.cpp:33:5: error: expected ')' before 'if'\n/tmp/tmpc5rf6v38.cpp:\
    \ In function 'int main()':\n/tmp/tmpc5rf6v38.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = Strongest_Extension;\n          ^\nIn\
    \ file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpc5rf6v38.cpp:2:\n/tmp/tmpc5rf6v38.cpp:43:60: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmpc5rf6v38.cpp:43:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                                        \
    \                                                        ^\n/tmp/tmpc5rf6v38.cpp:43:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpc5rf6v38.cpp:43:128: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpc5rf6v38.cpp:43:128: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Write your code here\n    \n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    \n    for (auto ext : extensions) {\n        cap += ext.length();\n     \
    \   sm += ext.length();\n    }\n    \n    float strength = cap - sm;\n    \n \
    \   for (auto ext : extensions) {\n        if (ext.length() == strongest_extension.length())\
    \ {\n            if (ext.length() < strongest_extension.length()) {\n        \
    \        strongest_extension = ext;\n            }\n        }\n    }\n    \n \
    \   return class_name + \".\" + strongest_extension;\n}\nint main() {\n    auto\
    \ candidate = Strongest_Extension;\n    assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n    assert(candidate((\"Boku123\"), (std::vector<std::string>({(std::string)\"\
    nani\", (std::string)\"NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"\
    32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"));\n    assert(candidate((\"__YESIMHERE\"\
    ), (std::vector<std::string>({(std::string)\"t\", (std::string)\"eMptY\", (std::string)\"\
    nothing\", (std::string)\"zeR00\", (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"\
    }))) == (\"__YESIMHERE.NuLl__\"));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa23mcgu_.cpp: In function 'std::string Strongest_Extension(std::string,\
    \ std::vector<std::basic_string<char> >)':\n/tmp/tmpa23mcgu_.cpp:26:15: error:\
    \ 'ext' does not name a type\n     for (auto ext : extensions) {\n           \
    \    ^\n/tmp/tmpa23mcgu_.cpp:31:5: error: expected ';' before 'float'\n     float\
    \ strength = cap - sm;\n     ^\n/tmp/tmpa23mcgu_.cpp:33:5: error: expected primary-expression\
    \ before 'for'\n     for (auto ext : extensions) {\n     ^\n/tmp/tmpa23mcgu_.cpp:33:5:\
    \ error: expected ')' before 'for'\n/tmp/tmpa23mcgu_.cpp:33:15: error: 'ext' does\
    \ not name a type\n     for (auto ext : extensions) {\n               ^\n/tmp/tmpa23mcgu_.cpp:41:5:\
    \ error: expected ';' before 'return'\n     return class_name + \".\" + strongest_extension;\n\
    \     ^\n/tmp/tmpa23mcgu_.cpp:41:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmpa23mcgu_.cpp:41:5: error: expected ';' before 'return'\n/tmp/tmpa23mcgu_.cpp:41:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpa23mcgu_.cpp:41:5:\
    \ error: expected ')' before 'return'\n/tmp/tmpa23mcgu_.cpp: In function 'int\
    \ main()':\n/tmp/tmpa23mcgu_.cpp:44:10: error: 'candidate' does not name a type\n\
    \     auto candidate = Strongest_Extension;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa23mcgu_.cpp:2:\n/tmp/tmpa23mcgu_.cpp:45:60: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmpa23mcgu_.cpp:45:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n             "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the\
    \ name of a class (a string) and a list of extensions.\n// The extensions are\
    \ to be used to load additional classes to the class. The\n// strength of the\
    \ extension is as follows: Let CAP be the number of the uppercase\n// letters\
    \ in the extension's name, and let SM be the number of lowercase letters \n//\
    \ in the extension's name, the strength is given by the fraction CAP - SM. \n\
    // You should find the strongest extension and return a string in this \n// format:\
    \ ClassName.StrongestExtensionName.\n// If there are two or more extensions with\
    \ the same strength, you should\n// choose the one that comes first in the list.\n\
    // For example, if you are given \"Slices\" as the class and a list of the\n//\
    \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n// return\
    \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n//\
    \ (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"my_class\"\
    ), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\", (std::string)\"\
    CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string class_name,\
    \ std::vector<std::string> extensions) {\n    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        cap = cap + toupper(extensions[i][0])\
    \ - toupper(extensions[i][0]);\n        sm = sm + tolower(extensions[i][0]) -\
    \ tolower(extensions[i][0]);\n    }\n    float strength = cap - sm;\n    for (int\
    \ i = 0; i < extensions.size(); i++) {\n        if (strength == cap - toupper(extensions[i][0])\
    \ - toupper(extensions[i][0])) {\n            strongest_extension = class_name\
    \ + \".\" + extensions[i];\n            break;\n        }\n    }\n    return strongest_extension;\n\
    }\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
    Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
    , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
    Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"\
    NazeDa\", (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
    ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
    t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\"\
    , (std::string)\"NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"\
    ));\n    assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"\
    Ta\", (std::string)\"TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"})))\
    \ == (\"K.TAR\"));\n    assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"\
    Tab\", (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"})))\
    \ == (\"__HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
    HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
    Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
    finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
    NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"\
    ));\n    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"\
    Bb\", (std::string)\"91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"\
    ), (std::vector<std::string>({(std::string)\"671235\", (std::string)\"Bb\"})))\
    \ == (\"Sp.671235\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0jvr3d4c.cpp: In function 'int main()':\n/tmp/tmp0jvr3d4c.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = Strongest_Extension;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0jvr3d4c.cpp:2:\n/tmp/tmp0jvr3d4c.cpp:39:60: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                            ^\n/tmp/tmp0jvr3d4c.cpp:39:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"Watashi\"), (std::vector<std::string>({(std::string)\"\
    tEN\", (std::string)\"niNE\", (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"\
    ));\n                                                                        \
    \                                                        ^\n/tmp/tmp0jvr3d4c.cpp:39:128:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0jvr3d4c.cpp:39:128: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp0jvr3d4c.cpp:39:128: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp0jvr3d4c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/subst"
  stdout: ''
