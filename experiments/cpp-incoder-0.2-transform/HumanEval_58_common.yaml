name: HumanEval_58_common
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique common\
  \ elements for two lists.\n// >>> common((std::vector<long>({(long)1, (long)4, (long)3,\
  \ (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5, (long)7,\
  \ (long)1, (long)5, (long)9, (long)653, (long)121})))\n// (std::vector<long>({(long)1,\
  \ (long)5, (long)653}))\n// >>> common((std::vector<long>({(long)5, (long)3, (long)2,\
  \ (long)8})), (std::vector<long>({(long)3, (long)2})))\n// (std::vector<long>({(long)2,\
  \ (long)3}))\nstd::vector<long> common(std::vector<long> l1, std::vector<long> l2)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = common;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)3, (long)34, (long)653, (long)2, (long)5})), (std::vector<long>({(long)5,\
  \ (long)7, (long)1, (long)5, (long)9, (long)653, (long)121}))) == (std::vector<long>({(long)1,\
  \ (long)5, (long)653})));\n    assert(candidate((std::vector<long>({(long)5, (long)3,\
  \ (long)2, (long)8})), (std::vector<long>({(long)3, (long)2}))) == (std::vector<long>({(long)2,\
  \ (long)3})));\n    assert(candidate((std::vector<long>({(long)4, (long)3, (long)2,\
  \ (long)8})), (std::vector<long>({(long)3, (long)2, (long)4}))) == (std::vector<long>({(long)2,\
  \ (long)3, (long)4})));\n    assert(candidate((std::vector<long>({(long)4, (long)3,\
  \ (long)2, (long)8})), (std::vector<long>())) == (std::vector<long>()));\n}\n"
completions: ["    std::vector<long> res;\n    std::vector<long>::iterator it;\n \
    \   for (it = std::begin(l1); it != std::end(l1); ++it) {\n        bool found\
    \ = false;\n        for (auto it2 = std::begin(l2); it2 != std::end(l2); ++it2)\
    \ {\n            if (*it == *it2) {\n                found = true;\n         \
    \       break;\n            }\n        }\n        if (!found) {\n            res.push_back(*it);\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    for (long i : l1) {\n        if (std::find(l2.begin(), l2.end(),\
    \ i) != l2.end()) {\n            common++;\n        }\n    }\n    for (long i\
    \ : l2) {\n        if (std::find(l1.begin(), l1.end(), i) != l1.end()) {\n   \
    \         common++;\n        }\n    }\n    for (long i : l1) {\n        if (std::find(l2.begin(),\
    \ l2.end(), i) != l2.end()) {\n            common++;\n        }\n    }\n    for\
    \ (long i : l2) {\n        if (std::find(l1.begin(), l1.end(), i) != l1.end())\
    \ {\n            common++;\n        }\n    }\n    for (long i : l1) {\n      \
    \  if (std::find(l2.begin(), l2.end(), i) != l2.end()) {\n            common++;\n\
    \        }\n    }\n    for (long i : l2) {\n        if (std::find(l1.begin(),\
    \ l1.end(), i) != l1.end()) {\n            common++;\n        }\n    }\n    for\
    \ (long i : l1) {\n        if (std::find(l2.begin(), l2.end(), i) != l2.end())\
    \ {\n            common++;\n        }\n    }\n    for (long i : l2) {\n      \
    \  if (std::find(l1.begin(), l1.end(), i) != l1.end()) {\n            common++;\n\
    \        }\n    }\n    for (long i : l1) {\n        if (std::find(l2.begin(),\
    \ l2.end(), i) != l2.end()) {\n            common++;\n        }\n    }\n    for\
    \ (long i : l2) {\n        if (std::find(l1.begin(), l1.end(), i) != l1.end())\
    \ {\n            common++;\n        }\n    }\n    for (long i : l1) {\n      \
    \  if (std::find(l2.begin(), l2.end(), i) != l2.end()) {\n            common++;\n\
    \        }\n    }\n    for (long i : l2) {\n        if (std::find(l1.begin(),\
    \ l1.end(), i) != l1.end()) {\n            common++;\n        }\n    }\n    for\
    \ (long i : l1) {\n        if (std::find(l2.begin(), l2.end(), i) != l2.end())\
    \ {\n            common++;\n        }\n    }\n    for (long i : l2) {\n      \
    \  if (std::find(l1.begin(), l1.end(), i) != l1.end()) {\n            common++;\n\
    \        }\n    }\n    for (long i : l1) {\n        if (std::find(l2.begin(),\
    \ l2.end(), i) != l2.end()) {\n            common++;\n        }\n    }\n    for\
    \ (long i : l2) {", "    std::vector<long> result;\n    std::vector<long>::iterator\
    \ it;\n    for (it = std::set_intersection(l1.begin(), l1.end(), l2.begin(), l2.end(),\
    \ std::back_inserter(result)).begin(); it != result.end(); ++it) {\n        result.erase(it);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(l1[0]);\n\
    \    for(long i = 1, j = 0, k = 0; i <= l1.size() && j <= l2.size(); i++, j++)\
    \ {\n        if(l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n    \
    \        i++;\n            j++;\n            k++;\n        }\n    }\n    while(i\
    \ <= l1.size()) {\n        result.push_back(l1[i]);\n        i++;\n    }\n   \
    \ while(j <= l2.size()) {\n        result.push_back(l2[j]);\n        j++;\n  \
    \  }\n    while(k <= result.size()) {\n        result.erase(result.begin());\n\
    \        k++;\n    }\n    return result;", "    std::vector<long> result;\n  \
    \  long common = 0;\n    for (long i = 0; i < l1.size(); i++) {\n        for (long\
    \ j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n          \
    \      common++;\n            }\n        }\n    }\n    for (long i = 0; i < l1.size();\
    \ i++) {\n        if (common != 0) {\n            for (long j = 0; j < l2.size();\
    \ j++) {\n                if (l1[i] == l2[j]) {\n                    common--;\n\
    \                }\n            }\n        }\n        if (common != 0) {\n   \
    \         result.push_back(l1[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    result.push_back(l1[0]);\n    for(long i=1;i<l1.size();i++)\
    \ {\n        for(long j=0;j<l2.size();j++) {\n            if(l1[i]==l2[j]) {\n\
    \                result.push_back(l1[i]);\n                break;\n          \
    \  }\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    result.push_back(l1[0]);\n    for(long i = 1, j = 0, k = 0; i <= l1.size()\
    \ && j <= l2.size(); i++, j++) {\n        if(l1[i] == l2[j]) {\n            result.push_back(l1[i]);\n\
    \            k++;\n        }\n    }\n    for(long i = k; i < l1.size(); i++) {\n\
    \        result.push_back(l1[i]);\n    }\n    for(long i = k; i < l2.size(); i++)\
    \ {\n        result.push_back(l2[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long long max1 = 0, max2 = 0;\n    for (auto i : l1) {\n      \
    \  if (max1 < i) {\n            max1 = i;\n        }\n    }\n    for (auto i :\
    \ l2) {\n        if (max2 < i) {\n            max2 = i;\n        }\n    }\n  \
    \  for (auto i : l1) {\n        if (max1 < i && max2 < i) {\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(res));\n    return res;",
  "    std::vector<long> result;\n    long long common = std::min(l1[0], l2[0]);\n\
    \    for(long long i = 1; i < l1.size(); i++) {\n        if(l1[i] == common) {\n\
    \            result.push_back(l1[i]);\n        }\n    }\n    for(long long i =\
    \ 1; i < l2.size(); i++) {\n        if(l2[i] == common) {\n            result.push_back(l2[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    long\
    \ common = 0;\n    long min1 = l1[0], min2 = l2[0];\n    long max1 = l1[0], max2\
    \ = l2[0];\n    for (long i = 0; i < l1.size(); i++) {\n        if (l1[i] < min1)\
    \ min1 = l1[i];\n        if (l2[i] < min2) min2 = l2[i];\n        if (l1[i] >\
    \ max1) max1 = l1[i];\n        if (l2[i] > max2) max2 = l2[i];\n    }\n    if\
    \ (min1 < min2) {\n        for (long i = 0; i < l1.size(); i++) {\n          \
    \  if (l1[i] < min1) min1 = l1[i];\n        }\n        for (long i = 0; i < l2.size();\
    \ i++) {\n            if (l2[i] < min2) min2 = l2[i];\n        }\n    }\n    if\
    \ (max1 > max2) {\n        for (long i = 0; i < l1.size(); i++) {\n          \
    \  if (l1[i] > max1) max1 = l1[i];\n        }\n        for (long i = 0; i < l2.size();\
    \ i++) {\n            if (l2[i] > max2) max2 = l2[i];\n        }\n    }\n    for\
    \ (long i = 0; i < l1.size(); i++) {\n        if (l1[i] == l2[i]) {\n        \
    \    common++;\n        } else {\n            if (common > 0) {\n            \
    \    result.push_back(common);\n                common = 0;\n            }\n \
    \           result.push_back(l1[i]);\n        }\n    }\n    if (common > 0) {\n\
    \        result.push_back(common);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(l1[0]);\n    for(long i = 1; i < l1.size(); i++)\
    \ {\n        if(l1[i] == l2[i]) {\n            result.push_back(l1[i]);\n    \
    \    }\n    }\n    for(long i = 2; i < l2.size(); i++) {\n        if(l1[i] !=\
    \ l2[i]) {\n            result.push_back(l2[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    std::set_intersection(l1.begin(),\
    \ l1.end(), l2.begin(), l2.end(), std::back_inserter(res));\n    return res;",
  "    std::vector<long> result;\n    result.push_back(l1[0]);\n    for(size_t i =\
    \ 1; i < l1.size(); i++) {\n        for(size_t j = 0; j < l2.size(); j++) {\n\
    \            if(l1[i] == l2[j]) {\n                result.push_back(l1[i]);\n\
    \                break;\n            }\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    long long common = 0;\n    for (long long i\
    \ = 0; i < l1.size(); i++) {\n        for (long long j = 0; j < l2.size(); j++)\
    \ {\n            if (l1[i] == l2[j]) {\n                common++;\n          \
    \  }\n        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n    \
    \    if (common != 0) {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        } else {\n            result.push_back(l1[i]);\n     \
    \   }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if (common\
    \ != 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        } else {\n            result.push_back(l2[i]);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    long long\
    \ common = 0;\n    for (long long i = 0; i < l1.size(); i++) {\n        for (long\
    \ long j = 0; j < l2.size(); j++) {\n            if (l1[i] == l2[j]) {\n     \
    \           common++;\n            }\n        }\n    }\n    for (long long i =\
    \ 0; i < l1.size(); i++) {\n        if (common > 0) {\n            if (l1[i] !=\
    \ common) {\n                result.push_back(l1[i]);\n            }\n       \
    \ }\n    }\n    for (long long i = 0; i < l2.size(); i++) {\n        if (common\
    \ > 0) {\n            if (l2[i] != common) {\n                result.push_back(l2[i]);\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::vector<long>::iterator it1 = l1.begin();\n    std::vector<long>::iterator\
    \ it2 = l2.begin();\n    while (it1 != l1.end() && it2 != l2.end()) {\n      \
    \  if (*it1 == *it2) {\n            result.push_back(*it1);\n            ++it1;\n\
    \            ++it2;\n        } else if (*it1 < *it2) {\n            ++it1;\n \
    \       } else {\n            ++it2;\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    long common = 0;\n    for (long i = 0; i <\
    \ l1.size(); i++) {\n        for (long j = 0; j < l2.size(); j++) {\n        \
    \    if (l1[i] == l2[j]) {\n                common++;\n            }\n       \
    \ }\n    }\n    for (long i = 0; i < l1.size(); i++) {\n        if (common > 0)\
    \ {\n            if (l1[i] != common) {\n                result.push_back(l1[i]);\n\
    \            }\n        }\n    }\n    for (long i = 0; i < l2.size(); i++) {\n\
    \        if (common > 0) {\n            if (l2[i] != common) {\n             \
    \   result.push_back(l2[i]);\n            }\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;", "    std::vector<long> result;\n    long\
    \ long common = 0;\n    long long common2 = 0;\n    long long common3 = 0;\n \
    \   long long common4 = 0;\n    long long common5 = 0;\n    long long common6\
    \ = 0;\n    long long common7 = 0;\n    long long common8 = 0;\n    long long\
    \ common9 = 0;\n    long long common10 = 0;\n    long long common11 = 0;\n   \
    \ long long common12 = 0;\n    long long common13 = 0;\n    long long common14\
    \ = 0;\n    long long common15 = 0;\n    long long common16 = 0;\n    long long\
    \ common17 = 0;\n    long long common18 = 0;\n    long long common19 = 0;\n  \
    \  long long common20 = 0;\n    long long common21 = 0;\n    long long common22\
    \ = 0;\n    long long common23 = 0;\n    long long common24 = 0;\n    long long\
    \ common25 = 0;\n    long long common26 = 0;\n    long long common27 = 0;\n  \
    \  long long common28 = 0;\n    long long common29 = 0;\n    long long common30\
    \ = 0;\n    long long common31 = 0;\n    long long common32 = 0;\n    long long\
    \ common33 = 0;\n    long long common34 = 0;\n    long long common35 = 0;\n  \
    \  long long common36 = 0;\n    long long common37 = 0;\n    long long common38\
    \ = 0;\n    long long common39 = 0;\n    long long common40 = 0;\n    long long\
    \ common41 = 0;\n    long long common42 = 0;\n    long long common43 = 0;\n  \
    \  long long common44 = 0;\n    long long common45 = 0;\n    long long common46\
    \ = 0;\n    long long common47 = 0;\n    long long common48 = 0;\n    long long\
    \ common49 = 0;\n    long long common50 = 0;\n    long long common51 = 0;\n  \
    \  long long common52 = 0;\n    long long common53 = 0;\n    long long common54\
    \ = 0;\n    long long common55 = 0;\n    long long common56 = 0;\n    long long\
    \ common57 = 0;\n    long long common58 = 0;\n    long long common59 = 0;\n  \
    \  long long common60 = 0;\n    long long common61 = 0;\n    long long common62\
    \ = 0;\n    long long common63 = 0;\n    long long common64 = 0;\n    long long\
    \ common65 = 0;\n    long long common66 = 0;\n    long long common67 = 0;\n  \
    \  long long common68 = 0;\n    long long common69 = 0;\n    long long common70\
    \ = 0;\n    long long common71 = 0;\n    long long common72 = 0;\n    long long\
    \ common73 = 0;\n", "    std::vector<long> result;\n    long long max = 0;\n \
    \   for (long long i = 0; i < l1.size(); i++) {\n        if (l1.at(i) > l2.at(i))\
    \ {\n            max = l1.at(i);\n        } else {\n            max = l2.at(i);\n\
    \        }\n    }\n    for (long long i = 0; i < l1.size(); i++) {\n        if\
    \ (l1.at(i) == max) {\n            result.push_back(l1.at(i));\n        }\n  \
    \  }\n    for (long long i = 0; i < l2.size(); i++) {\n        if (l2.at(i) ==\
    \ max) {\n            result.push_back(l2.at(i));\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;"]
stop_tokens:
- "\n}"
