name: HumanEval_49_modp
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware\
  \ of numerics).\n// >>> modp((3), (5))\n// (3)\n// >>> modp((1101), (101))\n// (2)\n\
  // >>> modp((0), (101))\n// (1)\n// >>> modp((3), (11))\n// (8)\n// >>> modp((100),\
  \ (101))\n// (1)\nlong modp(long n, long p) {\n"
tests: "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
  \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
  \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
  \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
  \ (5)) == (3));\n}\n"
completions: ["    long res = 1;\n    while (n != 0) {\n        if (n & 1)\n     \
    \       res = (res * p) % p;\n        n >>= 1;\n        p = (p * p) % p;\n   \
    \ }\n    return res;", "    long r = 1;\n    while (n) {\n        if ((n&1) !=\
    \ 0) r *= p;\n        n >>= 1;\n        p *= p;\n    }\n    return r;", "    long\
    \ ans = 1;\n    while (n > p) {\n        ans = (ans * n) % p;\n        n = (n\
    \ * n) % p;\n    }\n    return ans;", "    long r = 1;\n    while (n) {\n    \
    \    if ((n & 1) != 0) {\n            r = (r * p) % p;\n        }\n        n >>=\
    \ 1;\n        p = (p * p) % p;\n    }\n    return r;", "    long res = 1;\n  \
    \  while (p > 1) {\n        if (p & 1) res = (res * n) % p;\n        n /= p;\n\
    \        p /= 2;\n    }\n    return res;", "  assert(p > 0);\n  long r = 1;\n\
    \  for (long i = 1; i < p; i++) {\n    r = (r * n) % p;\n  }\n  return r;", " \
    \   long res = 1;\n    while (n) {\n        if (n&1) res = (res * p) % p;\n  \
    \      n >>= 1;\n        p = (p * p) % p;\n    }\n    return res;", "    long\
    \ r = 1;\n    while (n) {\n        if (n & 1)\n            r = (r * p) % p;\n\
    \        n >>= 1;\n        p = (p * p) % p;\n    }\n    return r;", "  assert(p\
    \ > 0);\n  long r = 1;\n  while (n) {\n    if (n & 1)\n      r *= p;\n    n >>=\
    \ 1;\n    p *= p;\n  }\n  return r;", "  assert(p > 0);\n  long r = 1;\n  while\
    \ (n > 0) {\n    if (n & 1)\n      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n \
    \ return r;", "    long res = 1;\n    while (p > 1) {\n        if (p & 1) {\n\
    \            res = (res * n) % p;\n        }\n        n = ((n * n) % p) % p;\n\
    \        p >>= 1;\n    }\n    return res;", "    long r = 1;\n    while (n) {\n\
    \        if ((n & 1) == 1)\n            r = (r * p) % p;\n        n >>= 1;\n \
    \       p = (p * p) % p;\n    }\n    return r;", "    long ans = 1;\n    while\
    \ (n) {\n        if (n&1) ans = (ans*p)%p;\n        n >>= 1;\n        p = (p*p)%p;\n\
    \    }\n    return ans;", "  assert(p > 0);\n  long res = 1;\n  while (n > p)\
    \ {\n    res *= p;\n    n -= p;\n  }\n  return res + n;", "    long ans = 1;\n\
    \    while (n) {\n        ans = (ans * p) % p;\n        n /= p;\n    }\n    return\
    \ ans;", "    long r = 1;\n    while (n) {\n        if ((n & 1) != 0) {\n    \
    \        r = (r * p) % p;\n        }\n        n >>= 1;\n        p = (p * p) %\
    \ p;\n    }\n    return r;", "    long res = 1;\n    while (n) {\n        if (n&1)\
    \ res *= p;\n        n >>= 1;\n        p *= p;\n    }\n    return res;", "   \
    \ long r = 1;\n    while (n) {\n        if (n&1) r += p;\n        n >>= 1;\n \
    \       p >>= 1;\n    }\n    return r;", "  assert(p > 0);\n  long r = 1;\n  while\
    \ (n > 0) {\n    if (n & 1)\n      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n \
    \ return r;", "  assert(p > 0);\n  long r = 1;\n  while (n) {\n    if (n & 1)\n\
    \      r *= p;\n    n >>= 1;\n    p *= p;\n  }\n  return r;"]
stop_tokens:
- "\n}"
