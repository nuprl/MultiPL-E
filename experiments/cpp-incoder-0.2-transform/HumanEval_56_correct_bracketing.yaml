name: HumanEval_56_correct_bracketing
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// brackets is a string of \"\
  <\" and \">\".\n// return True if every opening bracket has a corresponding closing\
  \ bracket.\n// >>> correct_bracketing((\"<\"))\n// (false)\n// >>> correct_bracketing((\"\
  <>\"))\n// (true)\n// >>> correct_bracketing((\"<<><>>\"))\n// (true)\n// >>> correct_bracketing((\"\
  ><<>\"))\n// (false)\nbool correct_bracketing(std::string brackets) {\n"
tests: "}\nint main() {\n    auto candidate = correct_bracketing;\n    assert(candidate((\"\
  <>\")) == (true));\n    assert(candidate((\"<<><>>\")) == (true));\n    assert(candidate((\"\
  <><><<><>><>\")) == (true));\n    assert(candidate((\"<><><<<><><>><>><<><><<>>>\"\
  )) == (true));\n    assert(candidate((\"<<<><>>>>\")) == (false));\n    assert(candidate((\"\
  ><<>\")) == (false));\n    assert(candidate((\"<\")) == (false));\n    assert(candidate((\"\
  <<<<\")) == (false));\n    assert(candidate((\">\")) == (false));\n    assert(candidate((\"\
  <<>\")) == (false));\n    assert(candidate((\"<><><<><>><>><<>\")) == (false));\n\
  \    assert(candidate((\"<><><<><>><>>><>\")) == (false));\n}\n"
completions: ["    int open_brackets = 0;\n    int close_brackets = 0;\n    for (int\
    \ i = 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n    \
    \        open_brackets++;\n        } else if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    size_t open_brackets\
    \ = brackets.size();\n    size_t close_brackets = 0;\n    for (size_t i = 0; i\
    \ < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n            ++close_brackets;\n\
    \        } else if (brackets[i] == '>') {\n            --close_brackets;\n   \
    \     }\n    }\n    return open_brackets == close_brackets;", "    size_t len\
    \ = brackets.size();\n    bool flag = false;\n    for (size_t i = 0; i < len;\
    \ ++i) {\n        if (brackets[i] == '<') {\n            if (brackets[i + 1] ==\
    \ '>') {\n                flag = true;\n                break;\n            }\n\
    \        }\n    }\n    return flag;", "    size_t brackets_size = brackets.size();\n\
    \    size_t opening_brackets_size = 0;\n    size_t closing_brackets_size = 0;\n\
    \    for (size_t i = 0; i < brackets_size; ++i) {\n        char c = brackets[i];\n\
    \        if (c == '<') {\n            opening_brackets_size++;\n        } else\
    \ if (c == '>') {\n            closing_brackets_size++;\n        }\n    }\n  \
    \  if (opening_brackets_size == closing_brackets_size) {\n        return true;\n\
    \    }\n    return false;", "    size_t open_brackets = 0;\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); i++) {\n        if (brackets[i]\
    \ == '<') {\n            open_brackets++;\n        } else if (brackets[i] == '>')\
    \ {\n            close_brackets++;\n        }\n    }\n    if (open_brackets !=\
    \ close_brackets) {\n        return false;\n    }\n    return true;", "    size_t\
    \ len = brackets.size();\n    bool result = true;\n    for (size_t i = 0; i <\
    \ len; ++i) {\n        bool found = false;\n        for (size_t j = 0; j < len;\
    \ ++j) {\n            if (brackets[i] == brackets[j]) {\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (!found)\
    \ {\n            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    std::string opening_brackets = brackets;\n    std::string closing_brackets\
    \ = \"\";\n    std::string opening_chars = \"\";\n    std::string closing_chars\
    \ = \"\";\n    std::string opening_char = \"\";\n    std::string closing_char\
    \ = \"\";\n    std::string opening_char2 = \"\";\n    std::string closing_char2\
    \ = \"\";\n    std::string opening_char3 = \"\";\n    std::string closing_char3\
    \ = \"\";\n    std::string opening_char4 = \"\";\n    std::string closing_char4\
    \ = \"\";\n    std::string opening_char5 = \"\";\n    std::string closing_char5\
    \ = \"\";\n    std::string opening_char6 = \"\";\n    std::string closing_char6\
    \ = \"\";\n    std::string opening_char7 = \"\";\n    std::string closing_char7\
    \ = \"\";\n    std::string opening_char8 = \"\";\n    std::string closing_char8\
    \ = \"\";\n    std::string opening_char9 = \"\";\n    std::string closing_char9\
    \ = \"\";\n    std::string opening_char10 = \"\";\n    std::string closing_char10\
    \ = \"\";\n    std::string opening_char11 = \"\";\n    std::string closing_char11\
    \ = \"\";\n    std::string opening_char12 = \"\";\n    std::string closing_char12\
    \ = \"\";\n    std::string opening_char13 = \"\";\n    std::string closing_char13\
    \ = \"\";\n    std::string opening_char14 = \"\";\n    std::string closing_char14\
    \ = \"\";\n    std::string opening_char15 = \"\";\n    std::string closing_char15\
    \ = \"\";\n    std::string opening_char16 = \"\";\n    std::string closing_char16\
    \ = \"\";\n    std::string opening_char17 = \"\";\n    std::string closing_char17\
    \ = \"\";\n    std::string opening_char18 = \"\";\n    std::string closing_char18\
    \ = \"\";\n    std::string opening_char19 = \"\";\n    std::string closing_char19\
    \ = \"\";\n    std::string opening_char20 = \"\";\n    std::string closing_char20\
    \ = \"\";\n    std::string opening_char21 = \"\";\n    std::string closing_char21\
    \ = \"\";\n    std::string opening_char22 = \"\";\n    std::string closing_char22\
    \ = \"\";\n    std::string opening_char23 = \"\";\n    std::string closing_char23\
    \ = \"\";\n    std::string opening_char24 = \"\";\n    std::string closing_char24\
    \ = \"\";\n    std::string opening_char25 = \"\";\n    std::string closing_char25\
    \ = \"\";\n    std::string opening_char26 = \"\";\n    std::string closing_char26\
    \ = \"\";\n    std::string opening_char27 = \"\";\n    std::string closing_char27\
    \ = \"\";\n    std::string opening_char28 = \"\";\n    std::string closing_char28\
    \ = \"\";\n    std::string opening_char29 = \"\";\n    std::string closing_char29\
    \ = \"\";\n    std::string opening_char30 = \"\";\n    std::string closing_",
  "    size_t len = brackets.size();\n    bool result = true;\n    for (size_t i =\
    \ 0; i < len; ++i) {\n        char c = brackets[i];\n        if (c == '<') {\n\
    \            if (i + 1 < len && brackets[i + 1] == '>') {\n                ++i;\n\
    \            } else {\n                result = false;\n                break;\n\
    \            }\n        }\n    }\n    return result;", "    size_t brackets_size\
    \ = brackets.size();\n    size_t open_brackets_size = 0;\n    for (size_t i =\
    \ 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<') {\n          \
    \  open_brackets_size++;\n        }\n    }\n    if (open_brackets_size == 0) {\n\
    \        return false;\n    }\n    size_t close_brackets_size = 0;\n    for (size_t\
    \ i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '>') {\n      \
    \      close_brackets_size++;\n        }\n    }\n    if (close_brackets_size ==\
    \ 0) {\n        return false;\n    }\n    size_t open_brackets_size2 = 0;\n  \
    \  for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i] == '<')\
    \ {\n            open_brackets_size2++;\n        }\n    }\n    if (open_brackets_size2\
    \ != open_brackets_size) {\n        return false;\n    }\n    size_t close_brackets_size2\
    \ = 0;\n    for (size_t i = 0; i < brackets_size; ++i) {\n        if (brackets[i]\
    \ == '>') {\n            close_brackets_size2++;\n        }\n    }\n    if (close_brackets_size2\
    \ != close_brackets_size) {\n        return false;\n    }\n    return true;",
  "    size_t len = brackets.size();\n    bool result = true;\n    for (size_t i =\
    \ 0; i < len; ++i) {\n        if (brackets[i] != '<' && brackets[i] != '>') {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;", "    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    bool result\
    \ = true;\n    for (auto c : brackets) {\n        if (c != \">\" && c != \"<\"\
    \ && c != \">>\" && c != \"<<\") {\n            result = false;\n        }\n \
    \   }\n    return result;", "    bool result = true;\n    for (size_t i = 0; i\
    \ < brackets.size(); i++) {\n        if (brackets[i] != '<') {\n            result\
    \ = false;\n            break;\n        }\n    }\n    for (size_t i = 0; i < brackets.size();\
    \ i++) {\n        if (brackets[i] != '>') {\n            result = false;\n   \
    \         break;\n        }\n    }\n    return result;", "    size_t open_brackets\
    \ = brackets.size() - 1;\n    size_t close_brackets = 0;\n    for (size_t i =\
    \ 0; i < brackets.size(); i++) {\n        if (brackets[i] == '<') {\n        \
    \    open_brackets--;\n        }\n        if (brackets[i] == '>') {\n        \
    \    close_brackets++;\n        }\n    }\n    if (open_brackets != close_brackets)\
    \ {\n        return false;\n    }\n    return true;", "    bool result = true;\n\
    \    for (auto c : brackets) {\n        if (c == '<') {\n            if (brackets[brackets.size()\
    \ - 1] != '>') {\n                result = false;\n            }\n        }\n\
    \    }\n    return result;", "    size_t len = brackets.size();\n    if (len ==\
    \ 0) return false;\n    bool ans = false;\n    for (size_t i = 0; i < len; ++i)\
    \ {\n        char c = brackets[i];\n        if (c == '<') {\n            ans =\
    \ !ans;\n        } else if (c == '>') {\n            ans = ans;\n        } else\
    \ {\n            ans = false;\n            break;\n        }\n    }\n    return\
    \ ans;", "    size_t open_brackets = brackets.size();\n    size_t close_brackets\
    \ = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n        if (brackets[i]\
    \ == '<') {\n            ++open_brackets;\n        } else if (brackets[i] == '>')\
    \ {\n            ++close_brackets;\n        } else {\n            return false;\n\
    \        }\n    }\n    return open_brackets == close_brackets;", "    size_t opening_brackets\
    \ = brackets.size();\n    size_t closing_brackets = 0;\n    for (size_t i = 0;\
    \ i < brackets.size(); ++i) {\n        if (brackets[i] == '<') {\n           \
    \ ++opening_brackets;\n        } else if (brackets[i] == '>') {\n            ++closing_brackets;\n\
    \        } else {\n            return false;\n        }\n    }\n    return opening_brackets\
    \ == closing_brackets;", "    size_t open_brackets = brackets.size();\n    size_t\
    \ close_brackets = 0;\n    for (size_t i = 0; i < brackets.size(); ++i) {\n  \
    \      if (brackets[i] == '<') {\n            ++open_brackets;\n        } else\
    \ if (brackets[i] == '>') {\n            ++close_brackets;\n        } else {\n\
    \            return false;\n        }\n    }\n    return open_brackets == close_brackets;",
  "    bool result = true;\n    for (auto c : brackets) {\n        if (c == '<') {\n\
    \            if (brackets[brackets.size() - 1] != '>') {\n                result\
    \ = false;\n            }\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
