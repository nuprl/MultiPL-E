language: cpp
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = std::numeric_limits<long>::min();\n  long max_val = std::numeric_limits<long>::max();\n\
    \  std::vector<std::string> result;\n  for (long val : arr) {\n    if (val < min_val)\
    \ continue;\n    if (val > max_val) break;\n    result.push_back(to_string(val));\n\
    \  }\n  std::reverse(result.begin(), result.end());\n  for (int i = 0; i < result.size();\
    \ i++) {\n    result[i] = to_string(result[i]) + \" \";\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphvfu7id4.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmphvfu7id4.cpp:20:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long val : arr) {\n     \
    \              ^\n/tmp/tmphvfu7id4.cpp:23:35: error: 'to_string' was not declared\
    \ in this scope\n     result.push_back(to_string(val));\n                    \
    \               ^\n/tmp/tmphvfu7id4.cpp:27:36: error: 'to_string' was not declared\
    \ in this scope\n     result[i] = to_string(result[i]) + \" \";\n            \
    \                        ^\n/tmp/tmphvfu7id4.cpp: In function 'int main()':\n\
    /tmp/tmphvfu7id4.cpp:32:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphvfu7id4.cpp:2:\n/tmp/tmphvfu7id4.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmphvfu7id4.cpp:33:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmphvfu7id4.cpp:33:113:\
    \ warning: extended initializer lists only available with"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = std::numeric_limits<long>::min();\n  long max_val = std::numeric_limits<long>::max();\n\
    \  for (long i : arr) {\n    if (i < min_val) min_val = i;\n    if (i > max_val)\
    \ max_val = i;\n  }\n  std::vector<std::string> res;\n  for (long i = min_val;\
    \ i <= max_val; i++) {\n    res.push_back(to_string(static_cast<int>(i)));\n \
    \ }\n  std::reverse(std::begin(res), std::end(res));\n  for (auto& i : res) {\n\
    \    i = to_string(static_cast<int>(i));\n  }\n  return res;\n}\nint main() {\n\
    \    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwz009l4q.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpwz009l4q.cpp:19:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpwz009l4q.cpp:25:48: error: 'to_string' was not declared\
    \ in this scope\n     res.push_back(to_string(static_cast<int>(i)));\n       \
    \                                         ^\n/tmp/tmpwz009l4q.cpp:27:16: error:\
    \ 'begin' is not a member of 'std'\n   std::reverse(std::begin(res), std::end(res));\n\
    \                ^\n/tmp/tmpwz009l4q.cpp:27:33: error: 'end' is not a member of\
    \ 'std'\n   std::reverse(std::begin(res), std::end(res));\n                  \
    \               ^\n/tmp/tmpwz009l4q.cpp:28:14: error: ISO C++ forbids declaration\
    \ of 'i' with no type [-fpermissive]\n   for (auto& i : res) {\n             \
    \ ^\n/tmp/tmpwz009l4q.cpp:28:18: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n   for (auto& i : res) {\n                  ^\n/tmp/tmpwz009l4q.cpp:29:38:\
    \ error: 'to_string' was not declared in this scope\n     i = to_string(static_cast<int>(i));\n\
    \                                      ^\n/tmp/tmpwz009l4q.cpp: In function 'int\
    \ main()':\n/tmp/tmpwz009l4q.cpp:34:10: error: 'candidate' does not name a type\n\
    \     auto candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwz009l4q.cpp:2:\n/tmp/tmpwz009l4q.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpwz009l4q.cpp:35:113:\
    \ warning: extended initializer lists only a"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end()); // get the minimum value\n\
    \  long max = *std::max_element(arr.begin(), arr.end()); // get the maximum value\n\
    \  long diff = max - min + 1; // get the difference between max and min\n  std::vector<std::string>\
    \ res;\n  for (long i = min; i <= max; i++) {\n    res.push_back(to_string(static_cast<int>(i)));\n\
    \  }\n  for (long i = diff; i >= 0; i--) {\n    res.push_back(to_string(static_cast<int>(min)\
    \ + i));\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_5x8ios.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpu_5x8ios.cpp:22:48: error: 'to_string'\
    \ was not declared in this scope\n     res.push_back(to_string(static_cast<int>(i)));\n\
    \                                                ^\n/tmp/tmpu_5x8ios.cpp:25:54:\
    \ error: 'to_string' was not declared in this scope\n     res.push_back(to_string(static_cast<int>(min)\
    \ + i));\n                                                      ^\n/tmp/tmpu_5x8ios.cpp:\
    \ In function 'int main()':\n/tmp/tmpu_5x8ios.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu_5x8ios.cpp:2:\n/tmp/tmpu_5x8ios.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpu_5x8ios.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpu_5x8ios.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu_5x8ios.cpp:31:113: e"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  std::vector<long> arr_rev(arr.size());\n\
    \  for (size_t i = 0; i < arr.size(); i++) {\n    if (arr[i] < mid) {\n      arr_rev[i]\
    \ = arr[arr.size() - i - 1];\n    } else {\n      arr_rev[i] = arr[arr.size()\
    \ - 1 - i];\n    }\n  }\n  std::vector<std::string> arr_rev_str(arr_rev.size());\n\
    \  for (size_t i = 0; i < arr_rev.size(); i++) {\n    arr_rev_str[i] = \"One\"\
    ;\n    if (arr_rev[i] < 10) {\n      arr_rev_str[i] = \"Two\";\n      if (arr_rev[i]\
    \ < 20) {\n        arr_rev_str[i] = \"Three\";\n        if (arr_rev[i] < 30) {\n\
    \          arr_rev_str[i] = \"Four\";\n          if (arr_rev[i] < 40) {\n    \
    \        arr_rev_str[i] = \"Five\";\n            if (arr_rev[i] < 50) {\n    \
    \          arr_rev_str[i] = \"Six\";\n              if (arr_rev[i] < 60) {\n \
    \               arr_rev_str[i] = \"Seven\";\n                if (arr_rev[i] <\
    \ 70) {\n                  arr_rev_str[i] = \"Eight\";\n                  if (arr_rev[i]\
    \ < 80) {\n                    arr_rev_str[i] = \"Nine\";\n                  }\n\
    \                }\n              }\n            }\n          }\n        }\n \
    \     }\n    }\n  }\n  return arr_rev_str;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_3wmu99.cpp: In function 'int main()':\n/tmp/tmpr_3wmu99.cpp:61:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr_3wmu99.cpp:2:\n/tmp/tmpr_3wmu99.cpp:62:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpr_3wmu99.cpp:62:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpr_3wmu99.cpp:62:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpr_3wmu99.cpp:62:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpr_3wmu99.cpp:62:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpr_3wmu99.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> result;\n  for (long i = min; i <= max;\
    \ i++) {\n    result.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwv6ll7hc.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpwv6ll7hc.cpp:21:51: error: 'to_string'\
    \ was not declared in this scope\n     result.push_back(to_string(static_cast<int>(i)));\n\
    \                                                   ^\n/tmp/tmpwv6ll7hc.cpp:24:14:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n   for\
    \ (auto &i : result) {\n              ^\n/tmp/tmpwv6ll7hc.cpp:24:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (auto &i : result) {\n   \
    \               ^\n/tmp/tmpwv6ll7hc.cpp:25:38: error: 'to_string' was not declared\
    \ in this scope\n     i = to_string(static_cast<int>(i));\n                  \
    \                    ^\n/tmp/tmpwv6ll7hc.cpp: In function 'int main()':\n/tmp/tmpwv6ll7hc.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwv6ll7hc.cpp:2:\n/tmp/tmpwv6ll7hc.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpwv6ll7hc.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> names;\n  std::string name;\n  for (long i : arr)\
    \ {\n    if (i <= 9) {\n      name = to_string(static_cast<int>(i));\n    } else\
    \ {\n      name = \"Nine\";\n    }\n    names.push_back(name);\n  }\n  std::reverse(names.begin(),\
    \ names.end());\n  return names;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0fg_xizp.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp0fg_xizp.cpp:19:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmp0fg_xizp.cpp:21:43: error: 'to_string' was not declared\
    \ in this scope\n       name = to_string(static_cast<int>(i));\n             \
    \                              ^\n/tmp/tmp0fg_xizp.cpp: In function 'int main()':\n\
    /tmp/tmp0fg_xizp.cpp:31:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0fg_xizp.cpp:2:\n/tmp/tmp0fg_xizp.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp0fg_xizp.cpp:32:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp0fg_xizp.cpp:32:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp0fg_xizp.cpp:32:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long val : arr) {\n\
    \    min_val = std::min(min_val, val);\n    max_val = std::max(max_val, val);\n\
    \  }\n  long length = max_val - min_val + 1;\n  std::vector<std::string> result;\n\
    \  for (long i = min_val; i <= max_val; i++) {\n    result.push_back(to_string(i\
    \ - min_val));\n  }\n  for (long i = min_val; i <= max_val; i++) {\n    long index\
    \ = i - min_val;\n    std::string name = to_string(index);\n    result.push_back(name);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3mbkbt8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpn3mbkbt8.cpp:19:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long val : arr) {\n     \
    \              ^\n/tmp/tmpn3mbkbt8.cpp:26:43: error: 'to_string' was not declared\
    \ in this scope\n     result.push_back(to_string(i - min_val));\n            \
    \                               ^\n/tmp/tmpn3mbkbt8.cpp:30:39: error: 'to_string'\
    \ was not declared in this scope\n     std::string name = to_string(index);\n\
    \                                       ^\n/tmp/tmpn3mbkbt8.cpp: In function 'int\
    \ main()':\n/tmp/tmpn3mbkbt8.cpp:36:10: error: 'candidate' does not name a type\n\
    \     auto candidate = by_length;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpn3mbkbt8.cpp:2:\n/tmp/tmpn3mbkbt8.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpn3mbkbt8.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpn3mbkbt8.cpp:37:113:\
    \ warning: extended initializer lists onl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::sort(arr.begin(), arr.end());\n  std::reverse(arr.begin(), arr.end());\n\
    \  std::string ret = \"\";\n  for (long i : arr) {\n    std::string s = std::to_string(i);\n\
    \    std::string t = std::to_string(static_cast<int>(i));\n    if (t == \"0\"\
    ) t = \"One\";\n    if (t == \"1\") t = \"Two\";\n    if (t == \"2\") t = \"Three\"\
    ;\n    if (t == \"3\") t = \"Four\";\n    if (t == \"4\") t = \"Five\";\n    if\
    \ (t == \"5\") t = \"Six\";\n    if (t == \"6\") t = \"Seven\";\n    if (t ==\
    \ \"7\") t = \"Eight\";\n    if (t == \"8\") t = \"Nine\";\n    ret += s;\n  }\n\
    \  return std::vector<std::string>{ret};\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi3nys_qv.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpi3nys_qv.cpp:20:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpi3nys_qv.cpp:21:21: error: 'to_string' is not a member of\
    \ 'std'\n     std::string s = std::to_string(i);\n                     ^\n/tmp/tmpi3nys_qv.cpp:22:21:\
    \ error: 'to_string' is not a member of 'std'\n     std::string t = std::to_string(static_cast<int>(i));\n\
    \                     ^\n/tmp/tmpi3nys_qv.cpp:34:15: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \   return std::vector<std::string>{ret};\n               ^\n/tmp/tmpi3nys_qv.cpp:34:38:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n   return std::vector<std::string>{ret};\n\
    \                                      ^\n/tmp/tmpi3nys_qv.cpp:34:38: note: candidates\
    \ are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n          \
    \       from /usr/include/c++/4.8.2/queue:61,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpi3nys_qv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpi3nys_qv.cpp:34:38:\
    \ note:   candidate expects 3 arguments, 1 provided\n   return std::vector<std::string>{ret};\n\
    \                                      ^\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpi3nys_qv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:310:7:\
    \ note:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  long cur = arr[0];\n  res.push_back(to_string(cur));\n\
    \  for (long i : arr) {\n    if (i >= 1 && i <= 9) {\n      res.push_back(to_string(cur));\n\
    \      cur = i;\n    } else {\n      res.push_back(to_string(cur));\n      cur\
    \ = i;\n    }\n  }\n  res.push_back(to_string(cur));\n  return res;\n}\nint main()\
    \ {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprkv9829c.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmprkv9829c.cpp:19:30: error: 'to_string'\
    \ was not declared in this scope\n   res.push_back(to_string(cur));\n        \
    \                      ^\n/tmp/tmprkv9829c.cpp:20:17: error: range-based 'for'\
    \ loops are not allowed in C++98 mode\n   for (long i : arr) {\n             \
    \    ^\n/tmp/tmprkv9829c.cpp: In function 'int main()':\n/tmp/tmprkv9829c.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprkv9829c.cpp:2:\n/tmp/tmprkv9829c.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmprkv9829c.cpp:34:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmprkv9829c.cpp:34:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprkv9829c.cpp:34:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initialize"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long i : arr) {\n\
    \    min_val = std::min(min_val, i);\n    max_val = std::max(max_val, i);\n  }\n\
    \  std::vector<std::string> result;\n  for (long i = min_val; i <= max_val; i++)\
    \ {\n    result.push_back(to_string(static_cast<int>(i)));\n  }\n  std::reverse(result.begin(),\
    \ result.end());\n  for (auto &i : result) {\n    i = to_string(static_cast<int>(i));\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = by_length;\n   \
    \ assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4, (long)5,\
    \ (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgb7j0flr.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpgb7j0flr.cpp:19:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpgb7j0flr.cpp:25:51: error: 'to_string' was not declared\
    \ in this scope\n     result.push_back(to_string(static_cast<int>(i)));\n    \
    \                                               ^\n/tmp/tmpgb7j0flr.cpp:28:14:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n   for\
    \ (auto &i : result) {\n              ^\n/tmp/tmpgb7j0flr.cpp:28:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (auto &i : result) {\n   \
    \               ^\n/tmp/tmpgb7j0flr.cpp:29:38: error: 'to_string' was not declared\
    \ in this scope\n     i = to_string(static_cast<int>(i));\n                  \
    \                    ^\n/tmp/tmpgb7j0flr.cpp: In function 'int main()':\n/tmp/tmpgb7j0flr.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgb7j0flr.cpp:2:\n/tmp/tmpgb7j0flr.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpgb7j0flr.cpp:35:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  long max_num = *std::max_element(arr.begin(), arr.end());\n  long min_num\
    \ = *std::min_element(arr.begin(), arr.end());\n  long length = max_num - min_num\
    \ + 1;\n  std::vector<std::string> result;\n  for (long i = min_num; i <= max_num;\
    \ i++) {\n    std::string name;\n    switch (i) {\n      case 1:\n        name\
    \ = \"One\";\n        break;\n      case 2:\n        name = \"Two\";\n       \
    \ break;\n      case 3:\n        name = \"Three\";\n        break;\n      case\
    \ 4:\n        name = \"Four\";\n        break;\n      case 5:\n        name =\
    \ \"Five\";\n        break;\n      case 6:\n        name = \"Six\";\n        break;\n\
    \      case 7:\n        name = \"Seven\";\n        break;\n      case 8:\n   \
    \     name = \"Eight\";\n        break;\n      case 9:\n        name = \"Nine\"\
    ;\n        break;\n      default:\n        continue;\n    }\n    result.push_back(name);\n\
    \  }\n  for (long i = min_num; i <= max_num; i++) {\n    std::string name;\n \
    \   switch (i) {\n      case 1:\n        name = \"One\";\n        break;\n   \
    \   case 2:\n        name = \"Two\";\n        break;\n      case 3:\n        name\
    \ = \"Three\";\n        break;\n      case 4:\n        name = \"Four\";\n    \
    \    break;\n      case 5:\n        name = \"Five\";\n        break;\n      case\
    \ 6:\n        name = \"Six\";\n        break;\n      case 7:\n        name = \"\
    Seven\";\n        break;\n      case 8:\n        name = \"Eight\";\n        break;\n\
    \      case 9:\n        name = \"Nine\";\n        break;\n      default:\n   \
    \     continue;\n    }\n    result.push_back(name);\n  }\n  for (long i = min_num;\
    \ i <= max_num; i++) {\n    std::string name;\n    switch (i) {\n      case 1:\n\
    \        name = \"One\";\n        break;\n      case 2:\n        name = \"Two\"\
    ;\n        break;\n      case 3:\n        name = \"Three\";\n        break;\n\
    \      case 4:\n        name = \"Four\";\n        break;\n      case 5:\n    \
    \    name = \"Five\";\n        break;\n      case 6:\n        name = \"Six\";\n\
    \        break;\n      case 7:\n        name = \"Seven\";\n        break;\n  \
    \    case 8:\n        name = \"Eight\";\n        break;\n      case 9:\n     \
    \   name = \"Nine\";\n        break;\n      default:\n        continue;\n    }\n\
    \    result.push_back(name);\n  }\n  for (long i = min_num; i <= max_num; i++)\
    \ {\n    std::string name;\n    switch (i) {\n      case 1:\n        name = \"\
    One\";\n        break;\n      case 2:\n        name = \"Two\";\n        break;\n\
    \      case 3:\n        name = \"Three\";\n        break;\n      case 4:\n   \
    \     name = \"Four\";\n        break;\n      case 5:\n        name = \"Five\"\
    ;\n        break;\n      case 6:\n        name = \"S\n}\nint main() {\n    auto\
    \ candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplb00fody.cpp:147:16: warning: missing terminating \" character\
    \ [enabled by default]\n         name = \"S\n                ^\n/tmp/tmplb00fody.cpp:147:9:\
    \ error: missing terminating \" character\n         name = \"S\n         ^\n/tmp/tmplb00fody.cpp:\
    \ In function 'std::vector<std::basic_string<char> > by_length(std::vector<long\
    \ int>)':\n/tmp/tmplb00fody.cpp:148:1: error: expected primary-expression before\
    \ '}' token\n }\n ^\n/tmp/tmplb00fody.cpp:148:1: error: expected ';' before '}'\
    \ token\n/tmp/tmplb00fody.cpp:149:12: error: a function-definition is not allowed\
    \ here before '{' token\n int main() {\n            ^\n/tmp/tmplb00fody.cpp:156:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmplb00fody.cpp:156:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> ans;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      ans.push_back(std::to_string(i));\n    }\n  }\n  std::reverse(ans.begin(),\
    \ ans.end());\n  for (auto &i : ans) {\n    i = lookup(i);\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvc8vvef1.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpvc8vvef1.cpp:18:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpvc8vvef1.cpp:20:21: error: 'to_string' is not a member of\
    \ 'std'\n       ans.push_back(std::to_string(i));\n                     ^\n/tmp/tmpvc8vvef1.cpp:24:14:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n   for\
    \ (auto &i : ans) {\n              ^\n/tmp/tmpvc8vvef1.cpp:24:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (auto &i : ans) {\n      \
    \            ^\n/tmp/tmpvc8vvef1.cpp:25:17: error: 'lookup' was not declared in\
    \ this scope\n     i = lookup(i);\n                 ^\n/tmp/tmpvc8vvef1.cpp: In\
    \ function 'int main()':\n/tmp/tmpvc8vvef1.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvc8vvef1.cpp:2:\n/tmp/tmpvc8vvef1.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpvc8vvef1.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) {\n    return std::vector<std::string>();\n\
    \  }\n  long min_val = arr[0];\n  long max_val = arr[0];\n  for (long i : arr)\
    \ {\n    min_val = std::min(min_val, i);\n    max_val = std::max(max_val, i);\n\
    \  }\n  std::vector<std::string> res;\n  long cur = min_val;\n  while (cur <=\
    \ max_val) {\n    res.push_back(to_string(cur));\n    cur += 10;\n  }\n  for (long\
    \ i : arr) {\n    if (i < min_val || i > max_val) {\n      res.push_back(to_string(i\
    \ - min_val));\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = by_length;\n    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpon_e70gn.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpon_e70gn.cpp:21:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpon_e70gn.cpp:28:32: error: 'to_string' was not declared\
    \ in this scope\n     res.push_back(to_string(cur));\n                       \
    \         ^\n/tmp/tmpon_e70gn.cpp:31:17: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n   for (long i : arr) {\n                 ^\n/tmp/tmpon_e70gn.cpp:33:42:\
    \ error: 'to_string' was not declared in this scope\n       res.push_back(to_string(i\
    \ - min_val));\n                                          ^\n/tmp/tmpon_e70gn.cpp:\
    \ In function 'int main()':\n/tmp/tmpon_e70gn.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpon_e70gn.cpp:2:\n/tmp/tmpon_e70gn.cpp:40:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpon_e70gn.cpp:40:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \     "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  assert(arr.size() > 0);\n  std::vector<std::string>\
    \ res;\n  for (long i : arr) {\n    if (i >= 1 && i <= 9) {\n      res.push_back(\"\
    One\");\n    } else if (i >= 10 && i <= 99) {\n      res.push_back(\"Two\");\n\
    \    } else if (i >= 100 && i <= 999) {\n      res.push_back(\"Three\");\n   \
    \ } else if (i >= 1000 && i <= 9999) {\n      res.push_back(\"Four\");\n    }\
    \ else if (i >= 10000 && i <= 99999) {\n      res.push_back(\"Five\");\n    }\
    \ else if (i >= 100000 && i <= 999999) {\n      res.push_back(\"Six\");\n    }\
    \ else if (i >= 1000000 && i <= 9999999) {\n      res.push_back(\"Seven\");\n\
    \    } else if (i >= 10000000 && i <= 99999999) {\n      res.push_back(\"Eight\"\
    );\n    } else if (i >= 100000000 && i <= 999999999) {\n      res.push_back(\"\
    Nine\");\n    } else {\n      res.push_back(\"?\");\n    }\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxm9dehv.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpfxm9dehv.cpp:18:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpfxm9dehv.cpp: In function 'int main()':\n/tmp/tmpfxm9dehv.cpp:44:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfxm9dehv.cpp:2:\n/tmp/tmpfxm9dehv.cpp:45:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpfxm9dehv.cpp:45:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpfxm9dehv.cpp:45:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfxm9dehv.cpp:45:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpfxm9dehv.cpp:45:113: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /us"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = std::numeric_limits<long>::min();\n  long max = std::numeric_limits<long>::max();\n\
    \  long mid = min + (max - min) / 2;\n  long length = arr.size();\n  std::vector<std::string>\
    \ result;\n  while (length > 0) {\n    long mid = min + (max - min) / 2;\n   \
    \ if (arr[mid] < mid) {\n      result.push_back(to_string(mid));\n      length--;\n\
    \    } else {\n      result.push_back(to_string(arr[mid]));\n      min = mid +\
    \ 1;\n      max = mid - 1;\n    }\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp32daxig.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpp32daxig.cpp:25:37: error: 'to_string'\
    \ was not declared in this scope\n       result.push_back(to_string(mid));\n \
    \                                    ^\n/tmp/tmpp32daxig.cpp:28:42: error: 'to_string'\
    \ was not declared in this scope\n       result.push_back(to_string(arr[mid]));\n\
    \                                          ^\n/tmp/tmpp32daxig.cpp: In function\
    \ 'int main()':\n/tmp/tmpp32daxig.cpp:36:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = by_length;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp32daxig.cpp:2:\n/tmp/tmpp32daxig.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmpp32daxig.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmpp32daxig.cpp:37:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpp32daxig.cpp:37:113: error: no matching function\
    \ for call to 'std::v"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.size() == 0) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    }\n  }\n\
    \  std::reverse(std::begin(res), std::end(res));\n  for (auto &i : res) {\n  \
    \  i = lookup(i);\n  }\n  return res;\n}\nint main() {\n    auto candidate = by_length;\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)1, (long)1, (long)4,\
    \ (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplj6kfdgo.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmplj6kfdgo.cpp:18:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmplj6kfdgo.cpp:20:34: error: 'to_string' is not a member of\
    \ 'std'\n       res.push_back((std::string)std::to_string(i));\n             \
    \                     ^\n/tmp/tmplj6kfdgo.cpp:23:16: error: 'begin' is not a member\
    \ of 'std'\n   std::reverse(std::begin(res), std::end(res));\n               \
    \ ^\n/tmp/tmplj6kfdgo.cpp:23:33: error: 'end' is not a member of 'std'\n   std::reverse(std::begin(res),\
    \ std::end(res));\n                                 ^\n/tmp/tmplj6kfdgo.cpp:24:14:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n   for\
    \ (auto &i : res) {\n              ^\n/tmp/tmplj6kfdgo.cpp:24:18: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (auto &i : res) {\n      \
    \            ^\n/tmp/tmplj6kfdgo.cpp:25:17: error: 'lookup' was not declared in\
    \ this scope\n     i = lookup(i);\n                 ^\n/tmp/tmplj6kfdgo.cpp: In\
    \ function 'int main()':\n/tmp/tmplj6kfdgo.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplj6kfdgo.cpp:2:\n/tmp/tmplj6kfdgo.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmplj6kfdgo.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  long min = *std::min_element(arr.begin(), arr.end());\n  long max = *std::max_element(arr.begin(),\
    \ arr.end());\n  std::vector<std::string> res;\n  for (long i = min; i <= max;\
    \ i++) {\n    res.push_back(to_name(i));\n  }\n  std::reverse(arr.begin(), arr.end());\n\
    \  for (long i : arr) {\n    res.push_back(to_name(i));\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84gamfli.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp84gamfli.cpp:21:28: error: 'to_name'\
    \ was not declared in this scope\n     res.push_back(to_name(i));\n          \
    \                  ^\n/tmp/tmp84gamfli.cpp:24:17: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n   for (long i : arr) {\n                 ^\n\
    /tmp/tmp84gamfli.cpp:25:28: error: 'to_name' was not declared in this scope\n\
    \     res.push_back(to_name(i));\n                            ^\n/tmp/tmp84gamfli.cpp:\
    \ In function 'int main()':\n/tmp/tmp84gamfli.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = by_length;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp84gamfli.cpp:2:\n/tmp/tmp84gamfli.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp84gamfli.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp84gamfli.cpp:31:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by def"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  for (long i : arr) {\n    if (i >= 1 && i\
    \ <= 9) {\n      res.push_back((std::string)std::to_string(i));\n    } else {\n\
    \      res.push_back((std::string)std::to_string(i));\n    }\n  }\n  std::reverse(std::begin(res),\
    \ std::end(res));\n  for (auto &i : res) {\n    i = std::to_string(i);\n  }\n\
    \  return res;\n}\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5b6a1pm.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmpy5b6a1pm.cpp:18:17: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n   for (long i : arr) {\n       \
    \          ^\n/tmp/tmpy5b6a1pm.cpp:20:34: error: 'to_string' is not a member of\
    \ 'std'\n       res.push_back((std::string)std::to_string(i));\n             \
    \                     ^\n/tmp/tmpy5b6a1pm.cpp:22:34: error: 'to_string' is not\
    \ a member of 'std'\n       res.push_back((std::string)std::to_string(i));\n \
    \                                 ^\n/tmp/tmpy5b6a1pm.cpp:25:16: error: 'begin'\
    \ is not a member of 'std'\n   std::reverse(std::begin(res), std::end(res));\n\
    \                ^\n/tmp/tmpy5b6a1pm.cpp:25:33: error: 'end' is not a member of\
    \ 'std'\n   std::reverse(std::begin(res), std::end(res));\n                  \
    \               ^\n/tmp/tmpy5b6a1pm.cpp:26:14: error: ISO C++ forbids declaration\
    \ of 'i' with no type [-fpermissive]\n   for (auto &i : res) {\n             \
    \ ^\n/tmp/tmpy5b6a1pm.cpp:26:18: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n   for (auto &i : res) {\n                  ^\n/tmp/tmpy5b6a1pm.cpp:27:9:\
    \ error: 'to_string' is not a member of 'std'\n     i = std::to_string(i);\n \
    \        ^\n/tmp/tmpy5b6a1pm.cpp: In function 'int main()':\n/tmp/tmpy5b6a1pm.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy5b6a1pm.cpp:2:\n/tmp/tmpy5b6a1pm.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                  "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n  if (arr.empty()) return std::vector<std::string>();\n\
    \  std::vector<std::string> ans;\n  long num = arr[0];\n  for (long i = 1; i <\
    \ arr.size(); i++) {\n    if (arr[i] < num) break;\n    ans.push_back(to_string(num));\n\
    \    num = arr[i];\n  }\n  ans.push_back(to_string(num));\n  return ans;\n}\n\
    int main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphe6y_9n8.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmphe6y_9n8.cpp:21:32: error: 'to_string'\
    \ was not declared in this scope\n     ans.push_back(to_string(num));\n      \
    \                          ^\n/tmp/tmphe6y_9n8.cpp:24:30: error: 'to_string' was\
    \ not declared in this scope\n   ans.push_back(to_string(num));\n            \
    \                  ^\n/tmp/tmphe6y_9n8.cpp: In function 'int main()':\n/tmp/tmphe6y_9n8.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphe6y_9n8.cpp:2:\n/tmp/tmphe6y_9n8.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmphe6y_9n8.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmphe6y_9n8.cpp:29:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphe6y_9n8.cpp:29:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enc"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers,\
    \ sort the integers that are between 1 and 9 inclusive,\n// reverse the resulting\
    \ array, and then replace each digit by its corresponding name from\n// \"One\"\
    , \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\
    .\n// For example:\n// >>> by_length((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3})))\n// (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"}))\n// If the array is empty, return an empty array:\n// >>> by_length((std::vector<long>()))\n\
    // (std::vector<std::string>())\n// If the array has any strange number ignore\
    \ it:\n// >>> by_length((std::vector<long>({(long)1, (long)-1, (long)55})))\n\
    // (std::vector<std::string>({(std::string)\"One\"}))\nstd::vector<std::string>\
    \ by_length(std::vector<long> arr) {\n    std::vector<std::string> res;\n    if\
    \ (arr.size() == 0) {\n        return res;\n    }\n    long min = arr[0];\n  \
    \  long max = arr[0];\n    for (long i : arr) {\n        if (i < min) {\n    \
    \        min = i;\n        }\n        if (i > max) {\n            max = i;\n \
    \       }\n    }\n    long mid = min + (max - min) / 2;\n    long mid2 = mid /\
    \ 10;\n    long mid3 = mid % 10;\n    long mid4 = mid2 / 10;\n    long mid5 =\
    \ mid2 % 10;\n    long mid6 = mid3 / 10;\n    long mid7 = mid3 % 10;\n    long\
    \ mid8 = mid4 / 10;\n    long mid9 = mid4 % 10;\n    long mid10 = mid5 / 10;\n\
    \    long mid11 = mid5 % 10;\n    long mid12 = mid6 / 10;\n    long mid13 = mid6\
    \ % 10;\n    long mid14 = mid7 / 10;\n    long mid15 = mid7 % 10;\n    long mid16\
    \ = mid8 / 10;\n    long mid17 = mid8 % 10;\n    long mid18 = mid9 / 10;\n   \
    \ long mid19 = mid9 % 10;\n    long mid20 = mid10 / 10;\n    long mid21 = mid10\
    \ % 10;\n    long mid22 = mid11 / 10;\n    long mid23 = mid11 % 10;\n    long\
    \ mid24 = mid12 / 10;\n    long mid25 = mid12 % 10;\n    long mid26 = mid13 /\
    \ 10;\n    long mid27 = mid13 % 10;\n    long mid28 = mid14 / 10;\n    long mid29\
    \ = mid14 % 10;\n    long mid30 = mid15 / 10;\n    long mid31 = mid15 % 10;\n\
    \    long mid32 = mid16 / 10;\n    long mid33 = mid16 % 10;\n    long mid34 =\
    \ mid17 / 10;\n    long mid35 = mid17 % 10;\n    long mid36 = mid18 / 10;\n  \
    \  long mid37 = mid18 % 10;\n    long mid38 = mid19 / 10;\n    long mid39 = mid19\
    \ % 10;\n    long mid40 = mid20 / 10;\n    long mid41 = mid20 % 10;\n    long\
    \ mid42 = mid21 / 10;\n    long mid43 = mid21 % 10;\n    long mid44 = mid22 /\
    \ 10;\n    long mid45 = mid22 % 10;\n    long mid46 = mid23 / 10;\n    long mid47\n\
    }\nint main() {\n    auto candidate = by_length;\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)1, (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>())) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)55}))) == (std::vector<std::string>({(std::string)\"\
    One\"})));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)3,\
    \ (long)2}))) == (std::vector<std::string>({(std::string)\"Three\", (std::string)\"\
    Two\", (std::string)\"One\"})));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)4, (long)8}))) == (std::vector<std::string>({(std::string)\"Nine\", (std::string)\"\
    Eight\", (std::string)\"Four\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2m13gj5e.cpp: In function 'std::vector<std::basic_string<char>\
    \ > by_length(std::vector<long int>)':\n/tmp/tmp2m13gj5e.cpp:22:19: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (long i : arr) {\n     \
    \              ^\n/tmp/tmp2m13gj5e.cpp:77:1: error: expected initializer before\
    \ '}' token\n }\n ^\n/tmp/tmp2m13gj5e.cpp: In function 'int main()':\n/tmp/tmp2m13gj5e.cpp:79:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = by_length;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2m13gj5e.cpp:2:\n/tmp/tmp2m13gj5e.cpp:80:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1, (long)1,\
    \ (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                        ^\n/tmp/tmp2m13gj5e.cpp:80:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)2, (long)1,\
    \ (long)1, (long)4, (long)5, (long)8, (long)2, (long)3}))) == (std::vector<std::string>({(std::string)\"\
    Eight\", (std::string)\"Five\", (std::string)\"Four\", (std::string)\"Three\"\
    , (std::string)\"Two\", (std::string)\"Two\", (std::string)\"One\", (std::string)\"\
    One\"})));\n                                                                 \
    \                                                ^\n/tmp/tmp2m13gj5e.cpp:80:113:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2m13gj5e.cpp:80:113: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2m13gj5e.cpp:80:113: note: candidates are:\nI"
  stdout: ''
