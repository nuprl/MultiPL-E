name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a list\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty list.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"\
  ), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"\
  Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\"\
  , (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n\
  // (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n//\
  \ (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
  Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string>\
  \ select_words(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
  })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
  Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
  ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
  ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
  Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n \
  \   assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
  a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
  c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    if (s.empty()) {\n      \
    \  return result;\n    }\n    \n    std::string word = \"\";\n    \n    for (char\
    \ c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n        else if (c == 'n') {\n       \
    \     if (word.length() == n) {\n                result.push_back(word);\n   \
    \             word = \"\";\n            }\n        }\n    }\n    \n    if (word.length()\
    \ > 0) {\n        result.push_back(word);\n    }\n    \n    return result;", " \
    \   std::vector<std::string> res;\n    \n    if(s.empty())\n        return res;\n\
    \    \n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n            continue;\n        \n        if(c == 'n')\n\
    \            continue;\n        \n        if(c == 't')\n            continue;\n\
    \        \n        if(c == 's')\n            continue;\n        \n        if(c\
    \ == 'h')\n            continue;\n        \n        if(c == 'l')\n           \
    \ continue;\n        \n        if(c == 'd')\n            continue;\n        \n\
    \        if(c == 'r')\n            continue;\n        \n        if(c == 'b')\n\
    \            continue;\n        \n        if(c == 'k')\n            continue;\n\
    \        \n        if(c == 'm')\n            continue;\n        \n        if(c\
    \ == 'v')\n            continue;\n        \n        if(c == 'w')\n           \
    \ continue;\n        \n        if(c == 'f')\n            continue;\n        \n\
    \        if(c == 'r')\n            continue;\n        \n        if(c == 'y')\n\
    \            continue;\n        \n        if(c == 'u')\n            continue;\n\
    \        \n        if(c == 'g')\n            continue;\n        \n        if(c\
    \ == 'p')\n            continue;\n        \n        if(c == 'b')\n           \
    \ continue;\n        \n        if(c == 'm')\n            continue;\n        \n\
    \        if(c == 't')\n            continue;\n        \n        if(c == 's')\n\
    \            continue;\n        \n        if(c == 'k')\n            continue;\n\
    \        \n        if(c == 'b')\n            continue;\n        \n        if(c\
    \ == 'a')\n            continue;\n        \n        if(c == 'b')\n           \
    \ continue;\n        \n        if(c == 'r')\n            continue;\n        \n\
    \        if(c == 'k')\n            continue;\n        \n        if(c == 'h')\n\
    \            continue;\n        \n        if(c == 'a')\n            continue;\n\
    \        \n        if(c == 'b')\n            continue;\n        \n        if(c\
    \ == 'r')\n            continue;\n        \n        if(c == 'k')\n           \
    \ continue;\n        \n        if(c == 'h')\n            continue;\n        \n\
    \        if(c == 'a')\n            continue;\n        \n        if(c == 'b')\n\
    \            continue;\n        \n        if(c == 'r')\n            continue;\n\
    \        \n        if(c == 'k')\n            continue;\n        \n        if(c\
    \ == 'h')\n            continue;\n        \n        if(c == 'a')\n           \
    \ continue;\n        \n        if(c == 'b')\n            continue;\n        \n\
    \        if(c == 'r')\n            continue;\n        \n        if(c == 'k')\n\
    \            continue;\n        \n        if(c == 'h')\n            continue;\n\
    \        \n", "    std::vector<std::string> v;\n    \n    // Write your code here\n\
    \    \n    return v;", "    std::vector<std::string> res;\n    \n    if (s.empty())\
    \ {\n        return res;\n    }\n    \n    std::string word = \"\";\n    \n  \
    \  for (char c : s) {\n        if (c == ' ' || c == '\\t' || c == '\\n') {\n \
    \           if (word.size() == n) {\n                res.push_back(word);\n  \
    \              word = \"\";\n            }\n        } else {\n            word\
    \ += c;\n        }\n    }\n    \n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    \n    return res;", "    std::vector<std::string> v;\n    for(auto\
    \ &c: s) {\n        if(isalpha(c)) {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    sort(v.begin(), v.end());\n    v.erase(unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;", "    std::vector<std::string> result;\n\
    \    if (s.empty()) {\n        return result;\n    }\n    \n    // Your code here\n\
    \    \n    return result;", "    std::vector<std::string> v;\n    v.push_back(s);\n\
    \    return v;", "    std::vector<std::string> ans;\n    \n    // Write your code\
    \ here\n    \n    return ans;", "    std::vector<std::string> res;\n    \n   \
    \ // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    // code here\n\
    \    std::vector<std::string> result;\n    \n    for(auto &i : s)\n    {\n   \
    \     if(isspace(i))\n        {\n            continue;\n        }\n        \n\
    \        for(auto &j : i)\n        {\n            if(j == 'a' || j == 'e' || j\
    \ == 'i' || j == 'o' || j == 'u')\n            {\n                continue;\n\
    \            }\n            \n            if(j == 'n')\n            {\n      \
    \          result.push_back(std::string(\"n\"));\n                continue;\n\
    \            }\n            \n            if(j == 't')\n            {\n      \
    \          result.push_back(std::string(\"t\"));\n                continue;\n\
    \            }\n            \n            if(j == 's')\n            {\n      \
    \          result.push_back(std::string(\"s\"));\n                continue;\n\
    \            }\n            \n            if(j == 'h')\n            {\n      \
    \          result.push_back(std::string(\"h\"));\n                continue;\n\
    \            }\n            \n            if(j == 'r')\n            {\n      \
    \          result.push_back(std::string(\"r\"));\n                continue;\n\
    \            }\n            \n            if(j == 'l')\n            {\n      \
    \          result.push_back(std::string(\"l\"));\n                continue;\n\
    \            }\n            \n            if(j == 'd')\n            {\n      \
    \          result.push_back(std::string(\"d\"));\n                continue;\n\
    \            }\n            \n            if(j == 'c')\n            {\n      \
    \          result.push_back(std::string(\"c\"));\n                continue;\n\
    \            }\n            \n            if(j == 'm')\n            {\n      \
    \          result.push_back(std::string(\"m\"));\n                continue;\n\
    \            }\n            \n            if(j == 'p')\n            {\n      \
    \          result.push_back(std::string(\"p\"));\n                continue;\n\
    \            }\n            \n            if(j == 'f')\n            {\n      \
    \          result.push_back(std::string(\"f\"));\n                continue;\n\
    \            }\n            \n            if(j == 'v')\n            {\n      \
    \          result.push_back(std::string(\"v\"));\n                continue;\n\
    \            }\n            \n            if(j == 'b')\n            {\n      \
    \          result.push_back(std::string(\"b\"));\n                continue;\n\
    \            }\n            \n            if(j == 'y')\n            {\n      \
    \          result.push_back(std::string(\"y\"));\n                continue;\n\
    \            }\n            \n            if(j == 'k')\n            {\n      \
    \          result.push_back(std::string(\"k\"));\n                continue;\n\
    \            }\n            \n            if(j == 'w')\n            {\n      \
    \          result.push_back(std::string(\"w\"));\n                continue;\n\
    \            }\n            \n            if(j == 'g')\n            {\n      \
    \          result.push_back(std::string(\"g\"));\n                continue;\n\
    \            }\n            \n            if(j == 'q')\n            {\n      \
    \          result.push_back(std::string(\"q\"));\n                continue;\n\
    \            }\n            \n            if(j == 'x')\n            {\n      \
    \          result.push_back(std::string(\"x\"));\n                continue;\n\
    \            }\n            \n            if(j == 'z')\n            {", "    std::vector<std::string>\
    \ res;\n    \n    for(int i = 0; i < s.length(); i++) {\n        for(int j = 0;\
    \ j < n; j++) {\n            if(s[i] == \" \") {\n                res.push_back(\"\
    \");\n            } else {\n                res.push_back(s[i]);\n           \
    \ }\n        }\n    }\n    \n    return res;", "    std::vector<std::string> result;\n\
    \    \n    // Write your code here\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    \n    if (s.empty()) {\n        return res;\n    }\n    \n    std::string\
    \ word = \"\";\n    \n    for (char c : s) {\n        if (c == ' ') {\n      \
    \      if (word.length() == 0) {\n                continue;\n            }\n \
    \           \n            if (word.length() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            } else {\n                word += c;\n\
    \            }\n        } else {\n            word += c;\n        }\n    }\n \
    \   \n    if (word.length() > 0) {\n        res.push_back(word);\n    }\n    \n\
    \    return res;", "    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;", "    std::vector<std::string> v;\n    \n    // Write\
    \ your code here\n    \n    return v;", "    std::vector<std::string> v;\n   \
    \ v.push_back(s);\n    return v;", "    // code here\n    std::vector<std::string>\
    \ v;\n    for(auto &i : s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i'\
    \ || i == 'o' || i == 'u')\n        {\n            v.push_back(i);\n        }\n\
    \    }\n    return v;", "    // code here\n    std::vector<std::string> v;\n \
    \   \n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            v.push_back(c);\n        }\n    }\n    \n\
    \    return v;", "    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;", "    std::vector<std::string> result;\n    \n  \
    \  // Write your code here\n    \n    return result;", "    // Write your code\
    \ here\n    std::vector<std::string> res;\n    \n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            for(int j = i; j < s.size(); j++)\
    \ {\n                if(s[j] == ' ') {\n                    for(int k = i; k <\
    \ j; k++) {\n                        if(s[k] == ' ') {\n                     \
    \       res.push_back(s.substr(i, j - i));\n                            break;\n\
    \                        }\n                    }\n                    break;\n\
    \                }\n            }\n        }\n    }\n    \n    return res;", " \
    \   std::vector<std::string> v;\n    \n    // Write your code here\n    \n   \
    \ return v;", "    std::vector<std::string> result;\n    \n    // Write your code\
    \ here\n    \n    return result;", "    std::vector<std::string> v;\n    \n  \
    \  // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.empty())\n        return res;\n    \n    for(size_t i =\
    \ 0; i < s.size(); i++) {\n        for(size_t j = 0; j < n; j++) {\n         \
    \   if(s[i] == ' ')\n                break;\n            else if(s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n\
    \                res.push_back(s.substr(i, 1));\n                break;\n    \
    \        }\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    if (s.empty()) {\n        return res;\n    }\n    \n    std::string\
    \ word;\n    \n    for (size_t i = 0; i < s.size(); i++) {\n        word = s.substr(i,\
    \ 1);\n        if (word.find_first_not_of(\"aeiou\") == std::string::npos) {\n\
    \            res.push_back(word);\n        }\n    }\n    \n    return res;", " \
    \   std::vector<std::string> v;\n    v.push_back(\"\");\n    if (s.size() == 0)\
    \ {\n        return v;\n    }\n    std::string word = \"\";\n    for (auto c :\
    \ s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n        else if (c == 'y') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if\
    \ (c == 'n') {\n            v.push_back(word);\n            word = \"\";\n   \
    \     }\n        else if (c == 't' || c == 'h' || c == 'e' || c == 'l' || c ==\
    \ 'l' || c == 'o' || c == 'r' || c == 's' || c == 'e' || c == 'd' || c == 'a'\
    \ || c == 'm' || c == 'a' || c == 'p' || c == 'l' || c == 'u' || c == 's' || c\
    \ == 'e' || c == 'r' || c == 't' || c == 'h' || c == 'e' || c == 'd' || c == 'a'\
    \ || c == 'm' || c == 'a' || c == 'p' || c == 'l' || c == 'u' || c == 's' || c\
    \ == 'e' || c == 'r' || c == 't' || c == 'h' || c == 'e' || c == 'd' || c == 'a'\
    \ || c == 'm' || c == 'a' || c == 'p' || c == 'l' || c == 'u' || c == 's' || c\
    \ == 'e' || c == 'r' || c == 't' || c == 'h' || c == 'e' || c == 'd' || c == 'a'\
    \ || c == 'm' || c == 'a' || c == 'p' || c == 'l' || c == 'u' || c == 's' || c\
    \ == 'e' || c == 'r' || c == 't' || c == 'h' || c == 'e' || c == 'd' || c == 'a'\
    \ || c == 'm' || c == 'a' || c == 'p' || c == 'l' || c == 'u' || c == 's' || c\
    \ == 'e' || c == 'r' || c == 't' || c == 'h' || c == 'e' || c == 'd' || c == 'a'\
    \ || c == 'm' || c == 'a' || c == 'p' || c == 'l' || c == 'u' || c == 's' || c\
    \ == 'e' || c == 'r' || c == 't' || c == 'h' || c == 'e' || c == 'd' || c == 'a'\
    \ || c == 'm' || c == 'a' || c == 'p' || c == 'l' || c == 'u' || c == 's' || c\
    \ == 'e' || c == 'r' || c == 't' || c == 'h' || c == 'e' || c == 'd' || c == 'a'\
    \ || c == 'm' || c == 'a", "    std::vector<std::string> result;\n    \n    //\
    \ Write your code here\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    long start\
    \ = 0;\n    long end = 0;\n    \n    for (long i = 0; i < s.size(); i++) {\n \
    \       if (s[i] == ' ') {\n            end = i;\n        }\n        if (end !=\
    \ 0 && end + 1 == s.size() && s[i] == s[end]) {\n            end = i;\n      \
    \  }\n        if (end != 0 && end + 1 == s.size() && s[i] == s[end] && s[end]\
    \ == ' ') {\n            end = i;\n        }\n    }\n    \n    start = end - n;\n\
    \    end = s.size();\n    \n    for (long i = start; i < end; i++) {\n       \
    \ res.push_back(s.substr(i, n));\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> res;\n    \n    if (s.empty()) {\n        return res;\n\
    \    }\n    \n    long start = 0;\n    long end = 0;\n    \n    for (long i =\
    \ 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            end = i;\n\
    \        }\n        if (end != 0 && end == i) {\n            end = i;\n      \
    \  }\n    }\n    \n    start = end - n;\n    \n    if (start < 0) {\n        start\
    \ = 0;\n    }\n    \n    end = start + n;\n    \n    if (end > s.size()) {\n \
    \       end = s.size();\n    }\n    \n    for (long i = start; i < end; i++) {\n\
    \        res.push_back(s.substr(i, n));\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word;\n\
    \    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            v.push_back(word);\n            word =\
    \ \"\";\n        }\n        else if (c == 'n') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 't' || c == 'h' ||\
    \ c == 'e' || c == 'l' || c == 'l' || c == 'o' || c == 'r') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'd' || c == 'a' ||\
    \ c == 'l' || c == 'l' || c == 'e' || c == 't' || c == 'e' || c == 's') {\n  \
    \          v.push_back(word);\n            word = \"\";\n        }\n        else\
    \ if (c == 'w' || c == 'o' || c == 'r' || c == 'd' || c == 'a' || c == 'l' ||\
    \ c == 'l' || c == 'e' || c == 't' || c == 'e' || c == 's') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'p' || c == 'l' ||\
    \ c == 'a' || c == 't' || c == 'h' || c == 'e' || c == 'r' || c == 'e' || c ==\
    \ 'd' || c == 'e' || c == 't' || c == 'h' || c == 'e' || c == 'r' || c == 'e'\
    \ || c == 'd' || c == 'e' || c == 't' || c == 'h' || c == 'e' || c == 'r' || c\
    \ == 'e' || c == 'd' || c == 'e' || c == 't' || c == 'h' || c == 'e' || c == 'r'\
    \ || c == 'e' || c == 'd' || c == 'e' || c == 't' || c == 'h' || c == 'e' || c\
    \ == 'r' || c == 'e' || c == 'd' || c == 'e' || c == 't' || c == 'h' || c == 'e'\
    \ || c == 'r' || c == 'e' || c == 'd' || c == 'e' || c == 't' || c == 'h' || c\
    \ == 'e' || c == 'r' || c == 'e' || c == 'd' || c == 'e' || c == 't' || c == 'h'\
    \ || c == 'e' || c == 'r' || c == 'e' || c == 'd' || c == 'e' || c == 't' || c\
    \ == 'h' || c == 'e' || c == 'r' || c == 'e' || c == 'd' || c == 'e' || c == 't'\
    \ || c == 'h' || c == 'e' || c == 'r' || c == '", '    // code here', "    std::vector<std::string>\
    \ res;\n    \n    if (s.empty()) {\n        return res;\n    }\n    \n    std::vector<std::string>\
    \ words;\n    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            words.push_back(c);\n       \
    \ }\n    }\n    \n    sort(words.begin(), words.end());\n    \n    for (auto &w\
    \ : words) {\n        if (w.size() == n) {\n            res.push_back(w);\n  \
    \      }\n    }\n    \n    return res;", "    std::vector<std::string> v;\n  \
    \  \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> result;\n    \n    // Write your code here\n    \n\
    \    return result;", "    std::vector<std::string> res;\n    \n    // Write your\
    \ code here\n    \n    return res;", "    std::vector<std::string> res;\n    \n\
    \    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ ans;\n    \n    // Write your code here\n    \n    return ans;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    return res;", "    std::vector<std::string>\
    \ ans;\n    \n    // Write your code here\n    \n    return ans;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> res;\n    \n    // Write your code here\n    \n   \
    \ return res;", "    std::vector<std::string> v;\n    for(auto &c: s) {\n    \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        \
    \    v.push_back((std::string)c);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n     \
    \       for(int j=i;j<s.size();j++){\n                if(s[j]==' '){\n       \
    \             res.push_back(s.substr(i,j-i));\n                    i=j;\n    \
    \                break;\n                }\n            }\n        }\n    }\n\
    \    \n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            for(int\
    \ j=i;j<s.size();j++){\n                if(s[j]==' '){\n                    res.push_back(s.substr(i,j-i));\n\
    \                    i=j;\n                    break;\n                }\n   \
    \         }\n        }\n    }\n    \n    for(int i=0;i<s.size();i++){\n      \
    \  if(s[i]==' '){\n            for(int j=i;j<s.size();j++){\n                if(s[j]=='\
    \ '){\n                    res.push_back(s.substr(i,j-i));\n                 \
    \   i=j;\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    \n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n\
    \            for(int j=i;j<s.size();j++){\n                if(s[j]==' '){\n  \
    \                  res.push_back(s.substr(i,j-i));\n                    i=j;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n        \
    \    for(int j=i;j<s.size();j++){\n                if(s[j]==' '){\n          \
    \          res.push_back(s.substr(i,j-i));\n                    i=j;\n       \
    \             break;\n                }\n            }\n        }\n    }\n   \
    \ \n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            for(int\
    \ j=i;j<s.size();j++){\n                if(s[j]==' '){\n                    res.push_back(s.substr(i,j-i));\n\
    \                    i=j;\n                    break;\n                }\n   \
    \         }\n        }\n    }\n    \n    for(int i=0;i<s.size();i++){\n      \
    \  if(s[i]==' '){\n            for(int j=i;j<s.size();j++){\n                if(s[j]=='\
    \ '){\n                    res.push_back(s.substr(i,j-i));\n                 \
    \   i=j;\n                    break;\n                }\n            }\n     \
    \   }\n    }\n    \n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n\
    \            for(int j=i;j<s.size();j++){\n                if(s[j]==' '){\n  \
    \                  res.push_back(s.substr(i,j-i));\n                    i=j;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    for(int i=0;i<s.size();i++){", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    \n    for(long i = 0; i\
    \ < v.size(); i++) {\n        for(long j = 0; j < v[i].size(); j++) {\n      \
    \      if(v[i][j] == ' ') {\n                v.erase(v[i].begin() + j);\n    \
    \            v.erase(v[i].begin() + j);\n            }\n        }\n    }\n   \
    \ \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0; j < v[i].size();\
    \ j++) {\n            if(v[i][j] == ' ') {\n                v.erase(v[i].begin()\
    \ + j);\n                v.erase(v[i].begin() + j);\n            }\n        }\n\
    \    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0;\
    \ j < v[i].size(); j++) {\n            if(v[i][j] == ' ') {\n                v.erase(v[i].begin()\
    \ + j);\n                v.erase(v[i].begin() + j);\n            }\n        }\n\
    \    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0;\
    \ j < v[i].size(); j++) {\n            if(v[i][j] == ' ') {\n                v.erase(v[i].begin()\
    \ + j);\n                v.erase(v[i].begin() + j);\n            }\n        }\n\
    \    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0;\
    \ j < v[i].size(); j++) {\n            if(v[i][j] == ' ') {\n                v.erase(v[i].begin()\
    \ + j);\n                v.erase(v[i].begin() + j);\n            }\n        }\n\
    \    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0;\
    \ j < v[i].size(); j++) {\n            if(v[i][j] == ' ') {\n                v.erase(v[i].begin()\
    \ + j);\n                v.erase(v[i].begin() + j);\n            }\n        }\n\
    \    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0;\
    \ j < v[i].size(); j++) {\n            if(v[i][j] == ' ') {\n                v.erase(v[i].begin()\
    \ + j);\n                v.erase(v[i].begin() + j);\n            }\n        }\n\
    \    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0;\
    \ j < v[i].size(); j++) {\n            if(v[i][j] == ' ') {\n                v.erase(v[i].begin()\
    \ + j);\n                v.erase(v[i].begin() + j);\n            }\n        }\n\
    \    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0;\
    \ j < v[i].size(); j++) {\n            if(v[i][j] == ' ') {\n                v.erase(v[i].begin()\
    \ + j);\n                v.erase(v[i].begin() + j);\n            }\n        }\n\
    \    }\n    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0;\
    \ j < v[i].size(); j++) {\n            if(v[i][j] == ' ') {\n                v.erase",
  "    std::vector<std::string> res;\n    \n    // Write your code here\n    \n  \
    \  return res;", "    std::vector<std::string> res;\n    // Write your code here\n\
    \    return res;", "    std::vector<std::string> res;\n    \n    // Write your\
    \ code here\n    \n    return res;", "    std::vector<std::string> v;\n    \n\
    \    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.empty()) return res;\n    \n    for(auto &c: s) {\n   \
    \     if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
    \     if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
    \         res.push_back((std::string)c);\n            }\n        }\n    }\n  \
    \  \n    return res;", "    std::vector<std::string> res;\n    \n    if(s.empty())\n\
    \        return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n                res.push_back((std::string)c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back((std::string)c);\n    \n    for(auto\
    \ &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              res.push_back((std::string)c);\n    \n    for(auto &c: s)\n   \
    \     if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n         \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           \
    \     res.push_back((std::string)c);\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back((std::string)c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back((std::string)c);\n    \n    for(auto\
    \ &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              res.push_back((std::string)c);\n    \n    for(auto &c: s)\n   \
    \     if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n         \
    \   if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n           \
    \     res.push_back((std::string)c);\n    ", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    std::string word = \"\
    \";\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n    v.push_back(word);\n\
    \    return v;", "    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;", "    std::vector<std::string> v;\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(std::string(c));\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.", "    std::vector<std::string> res;\n    \n    long count\
    \ = 0;\n    \n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n \
    \   if(count == n) {\n        for(auto &c: s) {\n            if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                res.push_back(c);\n\
    \            }\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ // Write your code here\n    std::vector<std::string> v;\n    for(auto &i :\
    \ s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u'\
    \ || i == 'A' || i == 'E' || i == 'I' || i == 'O' || i == 'U')\n        {\n  \
    \          v.push_back(i);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> v;\n    \n    // Write your code here\n    \n    return\
    \ v;", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    // Write your code here\n    std::vector<std::string>\
    \ v;\n    std::string word;\n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        word += c;\n    }\n    v.push_back(word);\n\
    \    return v;", "    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;", "    std::vector<std::string> v;\n    v.push_back(\"\
    \");\n    v.push_back(s);\n    \n    long count = 0;\n    \n    for(long i = 0;\
    \ i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n       \
    \ }\n    }\n    \n    if(count == n) {\n        for(long i = 0; i < s.size();\
    \ i++) {\n            if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u' || s[i] == 'y') {\n                v.push_back(s.substr(0,\
    \ i));\n            }\n        }\n    }\n    \n    return v;", "    std::vector<std::string>\
    \ ans;\n    \n    // Write your code here\n    \n    return ans;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    // Write your code here\n    \n    return result;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.empty())\n        return res;\n    \n    std::string word;\n\
    \    \n    for(size_t i = 0; i < s.size(); i++) {\n        word = s.substr(i,\
    \ 1);\n        \n        if(n == 1) {\n            res.push_back(word);\n    \
    \    }\n        \n        for(size_t j = 0; j < word.size(); j++) {\n        \
    \    if(word[j] != 'a' && word[j] != 'e' && word[j] != 'i' && word[j] != 'o' &&\
    \ word[j] != 'u') {\n                res.push_back(word);\n                break;\n\
    \            }\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    long start\
    \ = 0;\n    long end = 0;\n    \n    for (long i = 0; i < s.size(); i++) {\n \
    \       if (s[i] == ' ') {\n            end = i;\n        }\n        if (end !=\
    \ 0 && end == i) {\n            end = i;\n        }\n    }\n    \n    long count\
    \ = 0;\n    \n    for (long i = 0; i < s.size(); i++) {\n        if (s[i] == '\
    \ ') {\n            count++;\n        }\n        if (count == n) {\n         \
    \   res.push_back(s.substr(start, i - start));\n            start = i + 1;\n \
    \           count = 0;\n        }\n    }\n    \n    if (start != s.size()) {\n\
    \        res.push_back(s.substr(start));\n    }\n    \n    return res;", "   \
    \ std::vector<std::string> res;\n    \n    if (s.empty()) {\n        return res;\n\
    \    }\n    \n    long count = 0;\n    \n    for (char c : s) {\n        if (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n\
    \        }\n    }\n    \n    if (count == n) {\n        res.push_back(s);\n  \
    \  }\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n \
    \   if (count == n) {\n        res.push_back(s);\n    }\n    \n    for (char c\
    \ : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            count++;\n        }\n    }\n    \n    if (count == n) {\n   \
    \     res.push_back(s);\n    }\n    \n    for (char c : s) {\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n\
    \        }\n    }\n    \n    if (count == n) {\n        res.push_back(s);\n  \
    \  }\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n \
    \   if (count == n) {\n        res.push_back(s);\n    }\n    \n    for (char c\
    \ : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            count++;\n        }\n    }\n    \n    if (count == n) {\n   \
    \     res.push_back(s);\n    }\n    \n    for (char c : s) {\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n\
    \        }\n    }\n    \n    if (count == n) {\n        res.push_back(s);\n  \
    \  }\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n \
    \   if (count == n) {\n        res.push_back(s);\n    }\n    \n    for (char c\
    \ : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            count++;\n        }\n    }\n    \n    if (count == n) {\n   \
    \     res.push_back(s);\n    }\n    \n    for (char c : s) {\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ ans;\n    if (s.empty()) {\n        return ans;\n    }\n    \n    std::string\
    \ word = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n\
    \        else if (c == 'n') {\n            if (word.size() == n) {\n         \
    \       ans.push_back(word);\n                word = \"\";\n            }\n  \
    \      }\n    }\n    \n    if (word.size() > 0) {\n        ans.push_back(word);\n\
    \    }\n    \n    return ans;", "    std::vector<std::string> res;\n    \n   \
    \ // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> res;\n    \n    // Write your code here\n    \n   \
    \ return res;", "    std::vector<std::string> res;\n    if (s.empty()) {\n   \
    \     return res;\n    }\n    \n    std::string word = \"\";\n    \n    for (char\
    \ c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n        else if (c == 'y') {\n       \
    \     word += c;\n        }\n        else if (c == 's') {\n            word +=\
    \ c;\n        }\n        else if (c == 'h') {\n            word += c;\n      \
    \  }\n        else if (c == 'l') {\n            word += c;\n        }\n      \
    \  else if (c == 'd') {\n            word += c;\n        }\n        else if (c\
    \ == 't') {\n            word += c;\n        }\n        else if (c == 'r') {\n\
    \            word += c;\n        }\n        else if (c == 'p') {\n           \
    \ word += c;\n        }\n        else if (c == 'f') {\n            word += c;\n\
    \        }\n        else if (c == 'v') {\n            word += c;\n        }\n\
    \        else if (c == 'w') {\n            word += c;\n        }\n        else\
    \ if (c == 'b' || c == 'c' || c == 'm' || c == 'n' || c == 'k') {\n          \
    \  word += c;\n        }\n        else if (c == 'x') {\n            word += c;\n\
    \        }\n        else if (c == 'q') {\n            word += c;\n        }\n\
    \        else if (c == 'z') {\n            word += c;\n        }\n        else\
    \ if (c == 'j') {\n            word += c;\n        }\n        else if (c == 'q')\
    \ {\n            word += c;\n        }\n        else if (c == 'p') {\n       \
    \     word += c;\n        }\n        else if (c == 'h') {\n            word +=\
    \ c;\n        }\n        else if (c == 'v') {\n            word += c;\n      \
    \  }\n        else if (c == 'w') {\n            word += c;\n        }\n      \
    \  else if (c == 'b' || c == 'c' || c == 'm' || c == 'n' || c == 'k') {\n    \
    \        word += c;\n        }\n        else if (c == 'x') {\n            word\
    \ += c;\n        }\n        else if (c == 'q') {\n            word += c;\n   \
    \     }\n        else if (c == 'z') {\n            word += c;\n        }\n   \
    \     else if (c == 'j') {\n            word += c;\n        }\n        else if\
    \ (c == 'q') {\n            word += c;\n        }\n        else if (c == 'p')\
    \ {\n            word += c;\n        }\n        else if (c == 'h') {\n       \
    \     word += c;\n        }\n        else if (c == 'v') {\n            word +=\
    \ c;\n        }\n        else if (c == 'w') {\n            word += c;\n      \
    \  }\n        else if (c == 'b' || c == 'c' || c == 'm' || c == 'n' || c", " \
    \   std::vector<std::string> res;\n    long count = 0;\n    for(auto &c : s) {\n\
    \        if(isalpha(c)) {\n            if(c == ' ') {\n                count++;\n\
    \            }\n            else {\n                if(count == n) {\n       \
    \             res.push_back((std::string)c);\n                }\n            \
    \    count = 0;\n            }\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> res;\n    \n    // Write your code here\n    \n   \
    \ return res;", "    std::vector<std::string> res;\n    if (s.empty()) {\n   \
    \     return res;\n    }\n    \n    std::vector<std::string> temp;\n    \n   \
    \ for (auto &c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            temp.push_back(c);\n        }\n    }\n    \n   \
    \ for (auto &c: temp) {\n        if (std::count(temp.begin(), temp.end(), c) ==\
    \ n) {\n            res.push_back(std::string(temp.begin(), temp.end()));\n  \
    \      }\n    }\n    \n    return res;", "    std::vector<std::string> v;\n  \
    \  \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ ans;\n    \n    // Write your code here\n    \n    return ans;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> v;\n    \n    // Write your code here\n    \n    return\
    \ v;", "    std::vector<std::string> v;\n    v.push_back(\"\");\n    for(auto\
    \ &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            v.push_back(\"\");\n        } else {\n            v.back() +=\
    \ c;\n        }\n    }\n    return v;", "    std::vector<std::string> res;\n \
    \   \n    // Your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    // Write your\
    \ code here\n    std::vector<std::string> res;\n    std::string word;\n    bool\
    \ flag = false;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == 'a')\
    \ {\n            flag = true;\n        }\n        if(flag == true) {\n       \
    \     flag = false;\n            word += s[i];\n        }\n        if(i == s.size()\
    \ - 1) {\n            if(word == s) {\n                res.push_back(word);\n\
    \            }\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.empty()) {\n        return res;\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            res.push_back((std::string)c);\n        }\n    }\n    \n    for(auto\
    \ &c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            if(n == 1) {\n                res.push_back((std::string)c);\n\
    \            }\n            \n            for(auto &c2 : s) {\n              \
    \  if(c2 == 'a' || c2 == 'e' || c2 == 'i' || c2 == 'o' || c2 == 'u') {\n     \
    \               if(n == 2) {\n                        res.push_back((std::string)c);\n\
    \                    }\n                    \n                    for(auto &c3\
    \ : s) {\n                        if(c3 == 'a' || c3 == 'e' || c3 == 'i' || c3\
    \ == 'o' || c3 == 'u') {\n                            if(n == 3) {\n         \
    \                       res.push_back((std::string)c);\n                     \
    \       }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ ans;\n    \n    // Write your code here\n    \n    return ans;", "    std::vector<std::string>\
    \ v;\n    for(long i = 0; i < s.length(); i++) {\n        for(long j = 0; j <\
    \ n; j++) {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(i,\
    \ 1));\n                i = s.length();\n                break;\n            }\n\
    \            else if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n                v.push_back(s.substr(i, 1));\n          \
    \      i = s.length();\n                break;\n            }\n        }\n   \
    \ }\n    return v;", "    std::vector<std::string> result;\n    \n    // Write\
    \ your code here\n    \n    return result;", "    std::vector<std::string> v;\n\
    \    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    for(auto &i : s) {\n        for(auto &j : i) {\n            if((j\
    \ == 'a' || j == 'e' || j == 'i' || j == 'o' || j == 'u') && j != ' ') {\n   \
    \             v.push_back(j);\n            }\n        }\n    }\n    \n    for(auto\
    \ &i : v) {\n        if(i == ' ') {\n            v.erase(v.begin());\n       \
    \ }\n    }\n    \n    for(auto &i : v) {\n        if(i == ' ') {\n           \
    \ v.erase(v.begin());\n        }\n    }\n    \n    for(auto &i : v) {\n      \
    \  if(i == ' ') {\n            v.erase(v.begin());\n        }\n    }\n    \n \
    \   for(auto &i : v) {\n        if(i == ' ') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &i : v) {\n        if(i == ' ') {\n    \
    \        v.erase(v.begin());\n        }\n    }\n    \n    for(auto &i : v) {\n\
    \        if(i == ' ') {\n            v.erase(v.begin());\n        }\n    }\n \
    \   \n    for(auto &i : v) {\n        if(i == ' ') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &i : v) {\n        if(i == ' ') {\n    \
    \        v.erase(v.begin());\n        }\n    }\n    \n    for(auto &i : v) {\n\
    \        if(i == ' ') {\n            v.erase(v.begin());\n        }\n    }\n \
    \   \n    for(auto &i : v) {\n        if(i == ' ') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &i : v) {\n        if(i == ' ') {\n    \
    \        v.erase(v.begin());\n        }\n    }\n    \n    for(auto &i : v) {\n\
    \        if(i == ' ') {\n            v.erase(v.begin());\n        }\n    }\n \
    \   \n    for(auto &i : v) {\n        if(i == ' ') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &i : v) {\n        if(i == ' ') {\n    \
    \        v.erase(v.begin());\n        }\n    }\n    \n    for(auto &i : v) {\n\
    \        if(i == ' ') {\n            v.erase(v.begin());\n        }\n    }\n \
    \   \n    for(auto &i : v) {\n        if(i == ' ') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    ", "    std::vector<std::string> v;\n    \n    // Write\
    \ your code here\n    \n    return v;", "    std::vector<std::string> v;\n   \
    \ \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    // Write\
    \ your code here\n    std::vector<std::string> v;\n    std::string temp;\n   \
    \ long count = 0;\n    for (auto &c : s) {\n        if (std::isalpha(c)) {\n \
    \           temp = temp + c;\n            count++;\n        }\n    }\n    if (count\
    \ == n) {\n        v.push_back(temp);\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    long count = 0;\n    for(auto &c : s) {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n      \
    \  }\n    }\n    if(count == n) {\n        res.push_back(s);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    std::vector<std::string> v;\n    if (s.empty())\
    \ {\n        return v;\n    }\n    \n    std::string word = \"\";\n    \n    for\
    \ (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            word += c;\n        }\n        else if (c == 'y' ||\
    \ c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word\
    \ += c;\n        }\n        else if (c == 'h' || c == 'e' || c == 'l' || c ==\
    \ 'l' || c == 'o' || c == 'r' || c == 'y') {\n            word += c;\n       \
    \ }\n        else if (c == 'w' || c == 'o' || c == 'r' || c == 'd' || c == 'l'\
    \ || c == 'd' || c == 'y') {\n            word += c;\n        }\n        else\
    \ if (c == 's' || c == 'p' || c == 'p' || c == 'e' || c == 'c' || c == 'e' ||\
    \ c == 'n' || c == 't') {\n            word += c;\n        }\n        else if\
    \ (c == 'b' || c == 'a' || c == 'l' || c == 'l' || c == 'e' || c == 'd' || c ==\
    \ 'e' || c == 'l' || c == 'l' || c == 'o' || c == 's' || c == 't' || c == 'y')\
    \ {\n            word += c;\n        }\n        else if (c == 'm' || c == 'a'\
    \ || c == 'r' || c == 'y') {\n            word += c;\n        }\n        else\
    \ if (c == 'c' || c == 'h' || c == 'e' || c == 'l' || c == 'l' || c == 'o' ||\
    \ c == 'r' || c == 'y') {\n            word += c;\n        }\n        else if\
    \ (c == 'f' || c == 'e' || c == 'l' || c == 'l' || c == 'o' || c == 'r' || c ==\
    \ 'y') {\n            word += c;\n        }\n        else if (c == 'v' || c ==\
    \ 'e' || c == 'r' || c == 'y') {\n            word += c;\n        }\n        else\
    \ if (c == 'g' || c == 'e' || c == 'l' || c == 'l' || c == 'o' || c == 'r' ||\
    \ c == 'y') {\n            word += c;\n        }\n        else if (c == 'j' ||\
    \ c == 'u' || c == 'n' || c == 't' || c == 'y') {\n            word += c;\n  \
    \      }\n        else if (c == 'k' || c == 'e' || c == 'y') {\n            word\
    \ += c;\n        }\n        else if (c == 'p' || c == 'e' || c == 'r' || c ==\
    \ 'y') {\n            word += c;\n        }\n        else if (c == 'q", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    // Write\
    \ your code here\n    std::vector<std::string> v;\n    for(auto &i : s)\n    {\n\
    \        if(isalpha(i))\n        {\n            v.push_back(i);\n        }\n \
    \   }\n    for(auto &i : v)\n    {\n        if(isspace(i))\n        {\n      \
    \      v.erase(v.begin());\n        }\n    }\n    for(auto &i : v)\n    {\n  \
    \      if(isupper(i))\n        {\n            v.erase(v.begin());\n        }\n\
    \    }\n    for(auto &i : v)\n    {\n        if(islower(i))\n        {\n     \
    \       v.erase(v.begin());\n        }\n    }\n    for(auto &i : v)\n    {\n \
    \       if(isdigit(i))\n        {\n            v.erase(v.begin());\n        }\n\
    \    }\n    for(auto &i : v)\n    {\n        if(n == 0)\n        {\n         \
    \   v.erase(v.begin());\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> v;\n    \n    // Write your code here\n    \n    return\
    \ v;", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    std::vector<std::string> res;\n    \n    // Write\
    \ your code here\n    \n    return res;", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n     \
    \   else if (c == 'y') {\n            word += \"ay\";\n        }\n        else\
    \ if (c == 'h') {\n            word += \"ah\";\n        }\n        else if (c\
    \ == 'l' || c == 'l' || c == 'o' || c == 'r' || c == 's') {\n            word\
    \ += c;\n        }\n        else if (c == 'd') {\n            word += \"ad\";\n\
    \        }\n        else if (c == 'c' || c == 'k' || c == 'm' || c == 'n' || c\
    \ == 't') {\n            word += c;\n        }\n        else if (c == 'b' || c\
    \ == 'p' || c == 't' || c == 'v' || c == 'x') {\n            word += c;\n    \
    \    }\n        else if (c == 'f' || c == 'k' || c == 'h' || c == 'v' || c ==\
    \ 'x') {\n            word += c;\n        }\n        else if (c == 'j' || c ==\
    \ 'p' || c == 't' || c == 'v' || c == 'x') {\n            word += c;\n       \
    \ }\n        else if (c == 'q' || c == 'u' || c == 'e' || c == 'r' || c == 't'\
    \ || c == 'y') {\n            word += c;\n        }\n        else if (c == 'p'\
    \ || c == 'h' || c == 'v' || c == 'x') {\n            word += c;\n        }\n\
    \        else if (c == 'q' || c == 'u' || c == 'e' || c == 'r' || c == 't' ||\
    \ c == 'y') {\n            word += c;\n        }\n        else if (c == 'm' ||\
    \ c == 'a' || c == 'p' || c == 'h' || c == 'v' || c == 'x') {\n            word\
    \ += c;\n        }\n        else if (c == 'n' || c == 'a' || c == 'p' || c ==\
    \ 'h' || c == 'v' || c == 'x') {\n            word += c;\n        }\n        else\
    \ if (c == 'c' || c == 'h' || c == 'v' || c == 'x') {\n            word += c;\n\
    \        }\n        else if (c == 'b' || c == 'h' || c == 'v' || c == 'x') {\n\
    \            word += c;\n        }\n        else if (c == 'f' || c == 'h' || c\
    \ == 'v' || c == 'x') {\n            word += c;\n        }\n        else if (c\
    \ == 'j' || c == 'h' || c == 'v' || c == 'x') {\n            word += c;\n    \
    \    }\n        else if (c == 'q' || c == 'u' || ", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    // Write\
    \ your code here\n    std::vector<std::string> v;\n    \n    for(int i=0;i<s.length();i++){\n\
    \        for(int j=0;j<s.length();j++){\n            if(s[i]==s[j]){\n       \
    \         v.push_back(s.substr(i,1));\n                v.push_back(s.substr(j,1));\n\
    \                break;\n            }\n        }\n    }\n    \n    return v;",
  "    std::vector<std::string> res;\n    \n    // Write your code here\n    \n  \
    \  return res;", "    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;", "    std::vector<std::string> v;\n    \n    //\
    \ Write your code here\n    \n    return v;", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    long start\
    \ = 0;\n    long end = s.size();\n    long mid = 0;\n    \n    while (start <\
    \ end) {\n        mid = (start + end) / 2;\n        if (s[mid] == 'a') {\n   \
    \         end = mid;\n        } else if (s[mid] == 'e') {\n            end = mid;\n\
    \        } else if (s[mid] == 'i') {\n            end = mid;\n        } else if\
    \ (s[mid] == 'o') {\n            end = mid;\n        } else if (s[mid] == 'u')\
    \ {\n            end = mid;\n        } else if (s[mid] == 'y') {\n           \
    \ end = mid;\n        } else if (s[mid] == 'h') {\n            end = mid;\n  \
    \      } else if (s[mid] == 'l') {\n            end = mid;\n        } else if\
    \ (s[mid] == 'l') {\n            end = mid;\n        } else if (s[mid] == 'e')\
    \ {\n            end = mid;\n        } else if (s[mid] == 's') {\n           \
    \ end = mid;\n        } else if (s[mid] == 't') {\n            end = mid;\n  \
    \      } else if (s[mid] == 'r') {\n            end = mid;\n        } else if\
    \ (s[mid] == 'y') {\n            end = mid;\n        } else if (s[mid] == 'a')\
    \ {\n            end = mid;\n        } else if (s[mid] == 'm') {\n           \
    \ end = mid;\n        } else if (s[mid] == 'y') {\n            end = mid;\n  \
    \      } else if (s[mid] == 's') {\n            end = mid;\n        } else if\
    \ (s[mid] == 's') {\n            end = mid;\n        } else if (s[mid] == 's')\
    \ {\n            end = mid;\n        } else if (s[mid] == 's') {\n           \
    \ end = mid;\n        } else if (s[mid] == 's') {\n            end = mid;\n  \
    \      } else if (s[mid] == 's') {\n            end = mid;\n        } else if\
    \ (s[mid] == 's') {\n            end = mid;\n        } else if (s[mid] == 's')\
    \ {\n            end = mid;\n        } else if (s[mid] == 's') {\n           \
    \ end = mid;\n        } else if (s[mid] == 's') {\n            end = mid;\n  \
    \      } else if (s[mid] == 's') {\n            end = mid;\n        } else if\
    \ (s[mid] == 's') {\n            end = mid;\n        } else if (s[mid] == 's')\
    \ {\n            end = mid;\n        } else if (s[mid] == 's') {\n           \
    \ end = mid;\n        } else if (s[mid] == 's') {\n            end = mid;\n  \
    \      } else if (s[mid] == 's') {\n            end = mid;\n        } else if\
    \ (s[mid] == 's') {\n            end = mid;\n        } else if (s[mid] == 's')\
    \ {\n            end = mid;\n        } else if (s[mid] == 's') {\n           \
    \ end = mid;\n        } else if (s[mid] == 's') {\n            end = mid;\n  \
    \      } else if (s[mid] == 's') {\n            end = mid;\n        } else if\
    \ (s[mid] == 's') {\n", "    std::vector<std::string> res;\n    // Write your\
    \ code here\n    return res;", "    std::vector<std::string> v;\n    \n    //\
    \ Write your code here\n    \n    return v;", "    std::vector<std::string> ans;\n\
    \    \n    // Write your code here\n    \n    return ans;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    \n    std::vector<std::string>\
    \ words;\n    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            words.push_back(s);\n       \
    \ }\n    }\n    \n    sort(words.begin(), words.end());\n    \n    for (auto &w\
    \ : words) {\n        if (w.size() >= n) {\n            res.push_back(w);\n  \
    \      }\n    }\n    \n    return res;", "    std::vector<std::string> res;\n\
    \    \n    if (s.empty()) {\n        return res;\n    }\n    \n    std::vector<std::string>\
    \ words;\n    \n    for (auto &c: s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            words.push_back(c);\n       \
    \ }\n    }\n    \n    sort(words.begin(), words.end());\n    \n    for (auto &w:\
    \ words) {\n        if (w.size() == n) {\n            res.push_back(w);\n    \
    \    }\n    }\n    \n    return res;", "    std::vector<std::string> res;\n  \
    \  \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    for(auto &i : s) {\n        for(auto &j : i) {\n            if((j\
    \ == 'a' || j == 'e' || j == 'i' || j == 'o' || j == 'u') && \n              \
    \ j != ' ') {\n                v.push_back(j);\n            }\n        }\n   \
    \ }\n    \n    for(auto &i : v) {\n        if(i == ' ') {\n            v.erase(v.begin());\n\
    \        }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || i == 'o' || i == 'u') {\n            v.erase(v.begin());\n  \
    \      }\n    }\n    \n    for(auto &i : v) {\n        if(i == 'a' || i == 'e'\
    \ || i == 'i' || ", "    std::vector<std::string> res;\n    if (s.empty()) {\n\
    \        return res;\n    }\n    \n    std::vector<std::string> words;\n    \n\
    \    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            words.push_back(c);\n        }\n    }\n    \n\
    \    for (auto &w : words) {\n        if (w.size() == n) {\n            res.push_back(w);\n\
    \        }\n    }\n    \n    return res;", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;"]
stop_tokens:
- "\n}"
