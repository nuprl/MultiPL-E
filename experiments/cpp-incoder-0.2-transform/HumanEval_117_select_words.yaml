name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a list\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty list.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"\
  ), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"\
  Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\"\
  , (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n\
  // (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n//\
  \ (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
  Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string>\
  \ select_words(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
  })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
  Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
  ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
  ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
  Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n \
  \   assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
  a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
  c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    if (s.empty()) {\n      \
    \  return result;\n    }\n    \n    std::string word = \"\";\n    \n    for (char\
    \ c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n        else if (c == 'n') {\n       \
    \     if (word.length() == n) {\n                result.push_back(word);\n   \
    \             word = \"\";\n            }\n        }\n    }\n    \n    if (word.length()\
    \ > 0) {\n        result.push_back(word);\n    }\n    \n    return result;", " \
    \   std::vector<std::string> res;\n    \n    if(s.empty())\n        return res;\n\
    \    \n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u')\n            continue;\n        \n        if(c == 'n')\n\
    \            continue;\n        \n        if(c == 't')\n            continue;\n\
    \        \n        if(c == 's')\n            continue;\n        \n        if(c\
    \ == 'h')\n            continue;\n        \n        if(c == 'l')\n           \
    \ continue;\n        \n        if(c == 'd')\n            continue;\n        \n\
    \        if(c == 'r')\n            continue;\n        \n        if(c == 'b')\n\
    \            continue;\n        \n        if(c == 'k')\n            continue;\n\
    \        \n        if(c == 'm')\n            continue;\n        \n        if(c\
    \ == 'v')\n            continue;\n        \n        if(c == 'w')\n           \
    \ continue;\n        \n        if(c == 'f')\n            continue;\n        \n\
    \        if(c == 'r')\n            continue;\n        \n        if(c == 'y')\n\
    \            continue;\n        \n        if(c == 'u')\n            continue;\n\
    \        \n        if(c == 'g')\n            continue;\n        \n        if(c\
    \ == 'p')\n            continue;\n        \n        if(c == 'b')\n           \
    \ continue;\n        \n        if(c == 'm')\n            continue;\n        \n\
    \        if(c == 't')\n            continue;\n        \n        if(c == 's')\n\
    \            continue;\n        \n        if(c == 'k')\n            continue;\n\
    \        \n        if(c == 'b')\n            continue;\n        \n        if(c\
    \ == 'a')\n            continue;\n        \n        if(c == 'b')\n           \
    \ continue;\n        \n        if(c == 'r')\n            continue;\n        \n\
    \        if(c == 'k')\n            continue;\n        \n        if(c == 'h')\n\
    \            continue;\n        \n        if(c == 'a')\n            continue;\n\
    \        \n        if(c == 'b')\n            continue;\n        \n        if(c\
    \ == 'r')\n            continue;\n        \n        if(c == 'k')\n           \
    \ continue;\n        \n        if(c == 'h')\n            continue;\n        \n\
    \        if(c == 'a')\n            continue;\n        \n        if(c == 'b')\n\
    \            continue;\n        \n        if(c == 'r')\n            continue;\n\
    \        \n        if(c == 'k')\n            continue;\n        \n        if(c\
    \ == 'h')\n            continue;\n        \n        if(c == 'a')\n           \
    \ continue;\n        \n        if(c == 'b')\n            continue;\n        \n\
    \        if(c == 'r')\n            continue;\n        \n        if(c == 'k')\n\
    \            continue;\n        \n        if(c == 'h')\n            continue;\n\
    \        \n", "    std::vector<std::string> v;\n    \n    // Write your code here\n\
    \    \n    return v;", "    std::vector<std::string> res;\n    \n    if (s.empty())\
    \ {\n        return res;\n    }\n    \n    std::string word = \"\";\n    \n  \
    \  for (char c : s) {\n        if (c == ' ' || c == '\\t' || c == '\\n') {\n \
    \           if (word.size() == n) {\n                res.push_back(word);\n  \
    \              word = \"\";\n            }\n        } else {\n            word\
    \ += c;\n        }\n    }\n    \n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    \n    return res;", "    std::vector<std::string> v;\n    for(auto\
    \ &c: s) {\n        if(isalpha(c)) {\n            v.push_back((std::string)c);\n\
    \        }\n    }\n    sort(v.begin(), v.end());\n    v.erase(unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end());\n    v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    v.push_back(s);\n    return v;", "    std::vector<std::string> result;\n\
    \    if (s.empty()) {\n        return result;\n    }\n    \n    // Your code here\n\
    \    \n    return result;", "    std::vector<std::string> v;\n    v.push_back(s);\n\
    \    return v;", "    std::vector<std::string> ans;\n    \n    // Write your code\
    \ here\n    \n    return ans;", "    std::vector<std::string> res;\n    \n   \
    \ // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    // code here\n\
    \    std::vector<std::string> result;\n    \n    for(auto &i : s)\n    {\n   \
    \     if(isspace(i))\n        {\n            continue;\n        }\n        \n\
    \        for(auto &j : i)\n        {\n            if(j == 'a' || j == 'e' || j\
    \ == 'i' || j == 'o' || j == 'u')\n            {\n                continue;\n\
    \            }\n            \n            if(j == 'n')\n            {\n      \
    \          result.push_back(std::string(\"n\"));\n                continue;\n\
    \            }\n            \n            if(j == 't')\n            {\n      \
    \          result.push_back(std::string(\"t\"));\n                continue;\n\
    \            }\n            \n            if(j == 's')\n            {\n      \
    \          result.push_back(std::string(\"s\"));\n                continue;\n\
    \            }\n            \n            if(j == 'h')\n            {\n      \
    \          result.push_back(std::string(\"h\"));\n                continue;\n\
    \            }\n            \n            if(j == 'r')\n            {\n      \
    \          result.push_back(std::string(\"r\"));\n                continue;\n\
    \            }\n            \n            if(j == 'l')\n            {\n      \
    \          result.push_back(std::string(\"l\"));\n                continue;\n\
    \            }\n            \n            if(j == 'd')\n            {\n      \
    \          result.push_back(std::string(\"d\"));\n                continue;\n\
    \            }\n            \n            if(j == 'c')\n            {\n      \
    \          result.push_back(std::string(\"c\"));\n                continue;\n\
    \            }\n            \n            if(j == 'm')\n            {\n      \
    \          result.push_back(std::string(\"m\"));\n                continue;\n\
    \            }\n            \n            if(j == 'p')\n            {\n      \
    \          result.push_back(std::string(\"p\"));\n                continue;\n\
    \            }\n            \n            if(j == 'f')\n            {\n      \
    \          result.push_back(std::string(\"f\"));\n                continue;\n\
    \            }\n            \n            if(j == 'v')\n            {\n      \
    \          result.push_back(std::string(\"v\"));\n                continue;\n\
    \            }\n            \n            if(j == 'b')\n            {\n      \
    \          result.push_back(std::string(\"b\"));\n                continue;\n\
    \            }\n            \n            if(j == 'y')\n            {\n      \
    \          result.push_back(std::string(\"y\"));\n                continue;\n\
    \            }\n            \n            if(j == 'k')\n            {\n      \
    \          result.push_back(std::string(\"k\"));\n                continue;\n\
    \            }\n            \n            if(j == 'w')\n            {\n      \
    \          result.push_back(std::string(\"w\"));\n                continue;\n\
    \            }\n            \n            if(j == 'g')\n            {\n      \
    \          result.push_back(std::string(\"g\"));\n                continue;\n\
    \            }\n            \n            if(j == 'q')\n            {\n      \
    \          result.push_back(std::string(\"q\"));\n                continue;\n\
    \            }\n            \n            if(j == 'x')\n            {\n      \
    \          result.push_back(std::string(\"x\"));\n                continue;\n\
    \            }\n            \n            if(j == 'z')\n            {", "    std::vector<std::string>\
    \ res;\n    \n    for(int i = 0; i < s.length(); i++) {\n        for(int j = 0;\
    \ j < n; j++) {\n            if(s[i] == \" \") {\n                res.push_back(\"\
    \");\n            } else {\n                res.push_back(s[i]);\n           \
    \ }\n        }\n    }\n    \n    return res;", "    std::vector<std::string> result;\n\
    \    \n    // Write your code here\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    \n    if (s.empty()) {\n        return res;\n    }\n    \n    std::string\
    \ word = \"\";\n    \n    for (char c : s) {\n        if (c == ' ') {\n      \
    \      if (word.length() == 0) {\n                continue;\n            }\n \
    \           \n            if (word.length() == n) {\n                res.push_back(word);\n\
    \                word = \"\";\n            } else {\n                word += c;\n\
    \            }\n        } else {\n            word += c;\n        }\n    }\n \
    \   \n    if (word.length() > 0) {\n        res.push_back(word);\n    }\n    \n\
    \    return res;", "    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;"]
stop_tokens:
- "\n}"
