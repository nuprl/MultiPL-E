name: HumanEval_12_longest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of list of strings, return\
  \ the longest one. Return the first one in case of multiple\n// strings of the same\
  \ length. Return None in case the input list is empty.\n// >>> longest((std::vector<std::string>()))\n\
  // std::nullopt\n// >>> longest((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
  b\", (std::string)\"c\"})))\n// \"a\"\n// >>> longest((std::vector<std::string>({(std::string)\"\
  a\", (std::string)\"bb\", (std::string)\"ccc\"})))\n// \"ccc\"\nstd::optional<std::string>\
  \ longest(std::vector<std::string> strings) {\n"
tests: "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
  kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
completions: []
stop_tokens:
- "\n}"
