name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
  \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
  )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
  \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] ==\
    \ ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"-\");\n    }\n    return\
    \ s;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (pos < result.length()) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string out = text;\n    size_t pos\
    \ = 0;\n    while ((pos = out.find(' ', pos)) != std::string::npos) {\n      \
    \  out.replace(pos, 1, \" \");\n        pos = out.find(' ', pos + 1);\n    }\n\
    \    while (out.size() > 2 && out.substr(0, 2) == \" \") {\n        out = out.substr(1);\n\
    \    }\n    return out;", "    std::string out = text;\n    for (size_t i = 0;\
    \ i < out.size(); i++) {\n        if (out[i] == ' ') {\n            out[i] = '_';\n\
    \        }\n    }\n    if (out.size() > 2) {\n        size_t i = 0;\n        while\
    \ (i < out.size() - 2) {\n            if (out[i] == ' ' && out[i + 1] == ' ')\
    \ {\n                out[i] = '_';\n                i++;\n            }\n    \
    \        else if (out[i] == ' ' && out[i + 1] != ' ') {\n                out[i]\
    \ = '-';\n                i++;\n            }\n            else if (out[i] !=\
    \ ' ' && out[i + 1] == ' ') {\n                out[i] = '-';\n               \
    \ i++;\n            }\n            else if (out[i] != ' ' && out[i + 1] != ' ')\
    \ {\n                i++;\n            }\n        }\n    }\n    return out;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;", "    std::string s =\
    \ text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '_', ' ');\n    return s;", "    std::string out = text;\n    size_t\
    \ pos = 0;\n    while(pos < out.size()) {\n        size_t next = out.find(' ',\
    \ pos);\n        if(next == std::string::npos) {\n            next = out.size();\n\
    \        }\n        out.replace(pos, 1, out[pos]);\n        pos = next + 1;\n\
    \    }\n    size_t prev = out.find(' ', pos);\n    if(prev == std::string::npos)\
    \ {\n        prev = out.size();\n    }\n    out.replace(prev, 2, out[prev]);\n\
    \    return out;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        size_t pos2 = result.find(\" \", pos);\n        while (pos2 != std::string::npos)\
    \ {\n            result.replace(pos2, result.size() - 1, std::string(\"-\"));\n\
    \            pos2 += 1;\n        }\n    }\n    return result;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    if (text.size() > 2) {\n        std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    }\n    return text;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"_\"\
    );\n        pos += 2;\n    }\n    return fixed_text;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length()\
    \ && result[pos] == ' ') {\n        result.replace(pos, 1, std::string(\"-\"));\n\
    \    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n        std::replace(s.begin(), s.end(), '-', '_');\n \
    \   }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), '_', '-');\n    }\n\
    \    return s;", "    std::string fixed_text = text;\n    size_t pos = 0;\n  \
    \  size_t prev_pos = 0;\n    while (pos < fixed_text.size()) {\n        pos =\
    \ fixed_text.find(' ', pos);\n        if (pos == std::string::npos) {\n      \
    \      pos = fixed_text.size();\n        }\n        fixed_text.replace(pos, 1,\
    \ \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \"-\");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \"-\");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find('", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string res = text;\n\
    \    std::size_t found = -1;\n    while ((found = res.find_first_of(' ', found\
    \ + 1)) != std::string::npos) {\n        res = res.substr(0, found) + \"_\" +\
    \ res.substr(found + 1);\n    }\n    if (res.find_first_of(' ') != std::string::npos)\
    \ {\n        std::size_t found = -1;\n        while ((found = res.find_first_of('\
    \ ', found + 1)) != std::string::npos) {\n            res = res.substr(0, found)\
    \ + \"-\" + res.substr(found + 1);\n        }\n    }\n    return res;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if (result.size()\
    \ > 2) {\n        std::replace(result.begin(), result.end(), ' ', '_');\n    }\n\
    \    return result;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    return res;", "    std::string fixed_text = text;\n    size_t\
    \ pos = 0;\n    while(pos < fixed_text.length()) {\n        size_t next = fixed_text.find('\
    \ ', pos);\n        if(next == std::string::npos) {\n            fixed_text =\
    \ fixed_text.substr(pos);\n        } else {\n            fixed_text = fixed_text.substr(pos,\
    \ next - pos);\n            fixed_text += \"-\";\n            pos = next + 1;\n\
    \        }\n    }\n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0,\
    \ 2) == \" \") {\n        s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n\
    \    return s;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (pos < result.length()) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string fixed_text = text;\n    size_t\
    \ pos = 0;\n    while(pos < fixed_text.length()) {\n        size_t next = fixed_text.find('\
    \ ', pos);\n        if(next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n            pos = fixed_text.length();\n        } else {\n     \
    \       fixed_text.replace(pos, next - pos, \"_\");\n            pos = next +\
    \ 1;\n        }\n    }\n    return fixed_text;", "    std::string fixed_text =\
    \ text;\n    \n    size_t pos = 0;\n    \n    while (pos < fixed_text.size())\
    \ {\n        size_t next_space = fixed_text.find(' ', pos);\n        if (next_space\
    \ == std::string::npos) {\n            fixed_text.replace(pos, 1, \" \");\n  \
    \          pos += 1;\n        } else {\n            fixed_text.replace(pos, 1,\
    \ \" _\");\n            pos += 1;\n            while (next_space != std::string::npos)\
    \ {\n                next_space = fixed_text.find(' ', next_space);\n        \
    \        if (next_space == std::string::npos) {\n                    fixed_text.replace(next_space,\
    \ 1, \"-\");\n                    break;\n                }\n                fixed_text.replace(next_space,\
    \ 1, \"-\");\n                next_space = fixed_text.find(' ', next_space);\n\
    \            }\n        }\n    }\n    \n    return fixed_text;", "    std::string\
    \ fixed_text = text;\n    size_t pos = 0;\n    while(pos < fixed_text.size())\
    \ {\n        size_t found = fixed_text.find(\" \", pos);\n        if(found !=\
    \ std::string::npos) {\n            fixed_text.replace(pos, 1, std::string(\"\
    _\"));\n            pos = found + 1;\n        }\n        else {\n            pos\
    \ = fixed_text.size();\n        }\n    }\n    return fixed_text;", "    std::string\
    \ fixed_text = text;\n    size_t pos = 0;\n    while (pos < fixed_text.size())\
    \ {\n        size_t next = fixed_text.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, \" \");\n        } else {\n      \
    \      fixed_text.replace(pos, 1, \" _\");\n            pos = next + 1;\n    \
    \    }\n    }\n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if\
    \ (s.size() > 2 && s[0] == ' ' && s[1] == ' ') {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while ((pos = fixed_text.find(\"  \", pos)) != std::string::npos)\
    \ {\n        fixed_text.replace(pos, 2, \" \");\n        ++pos;\n    }\n    return\
    \ fixed_text;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2)\n    \
    \    std::replace(s.begin(), s.end(), '_', '-');\n    return s;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos = 0;\n  \
    \      while ((pos = result.find(\" \", pos)) != std::string::npos) {\n      \
    \      result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n  \
    \      }\n    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;", " \
    \   std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length())\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    size_t pos = 0;\n  \
    \  while(pos < text.size()) {\n        size_t next = text.find(' ', pos);\n  \
    \      if(next != std::string::npos) {\n            text.erase(next, 1);\n   \
    \         text.insert(next, \"-\");\n            pos = next + 1;\n        } else\
    \ {\n            pos = text.size();\n        }\n    }\n    return text;", "  \
    \  std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    if (result.size() > 2) {\n        size_t pos = 0;\n        while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos += 1;\n        }\n    }\n    return\
    \ result;", "    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(", "    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if (result.size()\
    \ > 2) {\n        std::replace(result.begin(), result.end(), ' ', '_');\n    }\n\
    \    return result;", "    std::string fixed_text = text;\n    size_t pos = 0;\n\
    \    while (pos < fixed_text.length()) {\n        size_t next_space = fixed_text.find('\
    \ ', pos);\n        if (next_space != std::string::npos) {\n            fixed_text.replace(pos,\
    \ next_space - pos, \"_\");\n            pos = next_space + 1;\n        } else\
    \ {\n            pos = fixed_text.length();\n        }\n    }\n    return fixed_text;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;", "    std::string result = text;\n    std::replace(result.begin(), result.end(),\
    \ ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;", "    std::string s = text;\n\
    \    s.replace(s.begin(), s.end(), ' ');\n    int count = 0;\n    for (int i =\
    \ 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            count++;\n\
    \        } else {\n            count = 1;\n        }\n        if (count > 2) {\n\
    \            s.replace(i, i + 1, \"-\");\n            i += 1;\n        }\n   \
    \ }\n    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;", "    std::string s = text;\n    size_t pos = 0;\n\
    \    while (pos < s.size()) {\n        size_t next_space = s.find_first_of(' ',\
    \ pos);\n        if (next_space != std::string::npos) {\n            s.erase(pos,\
    \ next_space - pos);\n            pos = next_space;\n        } else {\n      \
    \      pos = s.size();\n        }\n    }\n    while (pos < s.size()) {\n     \
    \   size_t next_space = s.find_first_of(' ', pos);\n        if (next_space !=\
    \ std::string::npos) {\n            s.insert(pos, \"_\");\n            pos = next_space\
    \ + 1;\n        } else {\n            pos = s.size();\n        }\n    }\n    return\
    \ s;", "    std::string out = text;\n    std::size_t pos = 0;\n    while (pos\
    \ < out.size()) {\n        char c = out[pos];\n        if (c == ' ') {\n     \
    \       while (pos < out.size() && out[pos] == ' ') {\n                pos++;\n\
    \            }\n            if (pos < out.size() && out[pos] == ' ') {\n     \
    \           out.insert(out.begin() + pos, \"_\");\n                pos++;\n  \
    \          }\n        }\n        else {\n            pos++;\n        }\n    }\n\
    \    return out;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size() > 2\
    \ && text.substr(0, 2) == \" \") {\n        std::replace(text.begin(), text.end(),\
    \ ' ', '-');\n    }\n    return text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n     \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n        std::replace(s.begin(),\
    \ s.end(), '-', '_');\n    }\n    return s;", "    std::string res = text;\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string out = text;\n    size_t pos = 0;\n    while\
    \ (pos < out.size()) {\n        size_t next = out.find(' ', pos);\n        if\
    \ (next == std::string::npos) {\n            next = out.size();\n        }\n \
    \       out = out.substr(0, pos) + \"_\" + out.substr(next);\n        pos = next\
    \ + 1;\n    }\n    return out;", "    std::string res = text;\n    size_t pos\
    \ = 0;\n    while (pos < res.size()) {\n        size_t next = res.find(' ', pos);\n\
    \        if (next == std::string::npos) {\n            next = res.size();\n  \
    \      }\n        size_t prev = res.rfind(' ', pos);\n        if (prev == std::string::npos)\
    \ {\n            prev = res.size();\n        }\n        size_t len = next - prev;\n\
    \        if (len > 2) {\n            size_t count = 0;\n            while (count\
    \ < len) {\n                next = res.find(' ', pos + count);\n             \
    \   if (next == std::string::npos) {\n                    next = res.size();\n\
    \                }\n                res[pos + count] = '-';\n                count++;\n\
    \            }\n        }\n        pos = next;\n    }\n    return res;", "   \
    \ std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    return\
    \ res;", "    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos\
    \ < fixed_text.size()) {\n        size_t next = fixed_text.find(' ', pos);\n \
    \       if (next == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\"\
    );\n            pos = next + 1;\n        }\n    }\n    return fixed_text;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n   \
    \     std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;", "  \
    \  std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n        std::replace(s.begin(), s.end(), '-', '_');\n \
    \   }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string res = text;\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    if (res.size()\
    \ > 2 && res[0] == res[res.size() - 1]) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    }\n    return res;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '_', ' ');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), '_', '-');\n    }\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while (pos < fixed_text.size()) {\n        size_t next_space\
    \ = fixed_text.find(' ', pos);\n        if (next_space == std::string::npos) {\n\
    \            fixed_text.replace(pos, 1, \" \");\n        } else {\n          \
    \  fixed_text.replace(pos, 1, \" _\");\n            pos = next_space + 1;\n  \
    \      }\n    }\n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.size() > 2\
    \ && text.substr(0, 2) == \" \") {\n        std::replace(text.begin(), text.end(),\
    \ ' ', '-');\n    }\n    return text;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    int count\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n\
    \            count++;\n            if (count == 2) {\n                s.replace(i,\
    \ i + 1, \"-\");\n                i += 2;\n                count = 0;\n      \
    \      }\n        }\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n        std::replace(s.begin(), s.end(), '_', '-');\n \
    \   }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2 && s[0]\
    \ == ' ' && s[1] == ' ') {\n        std::replace(s.begin(), s.end(), ' ', '-');\n\
    \    }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (pos < result.length()) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string s = text;\n    size_t pos\
    \ = 0;\n    while (pos < s.size()) {\n        pos = s.find_first_not_of(\" \"\
    , pos);\n        if (pos == std::string::npos) break;\n        s.replace(pos,\
    \ 1, std::string(\" \"));\n        pos = s.find_first_not_of(\" \", pos);\n  \
    \      if (pos == std::string::npos) break;\n        s.replace(pos, 1, std::string(\"\
    -\"));\n        pos = s.find_first_not_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ break;\n        s.replace(pos, 1, std::string(\" \"));\n    }\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (result.size() > 2) {\n        pos = 0;\n        while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n            result.replace(pos, 1, std::string(\"\
    -\"));\n            pos = result.find(\" \", pos + 1);\n        }\n    }\n   \
    \ return result;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ (pos < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) break;\n        result.replace(pos, 1,\
    \ \" \");\n        pos = result.find_first_not_of(\" \", pos + 1);\n    }\n  \
    \  if (result.length() > 2) {\n        pos = 0;\n        while (pos < result.length())\
    \ {\n            pos = result.find_first_not_of(\"  \", pos);\n            if\
    \ (pos == std::string::npos) break;\n            result.replace(pos, 2, \"-\"\
    );\n            pos = result.find_first_not_of(\"  \", pos + 1);\n        }\n\
    \    }\n    return result;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while (pos < fixed_text.size()) {\n        size_t next_space\
    \ = fixed_text.find(' ', pos);\n        if (next_space == std::string::npos) {\n\
    \            fixed_text.replace(pos, 1, \" \");\n        } else {\n          \
    \  fixed_text.replace(pos, 1, \" _\");\n            pos = next_space + 1;\n  \
    \      }\n    }\n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    return\
    \ s;", "    std::string res = text;\n    std::size_t pos = 0;\n    while (pos\
    \ < res.size()) {\n        pos = res.find_first_not_of(\" \", pos);\n        if\
    \ (pos == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::npos) {\n            break;\n        }\n        pos = res.find_first_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            pos = res.size();\n\
    \        }\n        pos = res.find_first_not_of(\" \", pos);\n        if (pos\
    \ == std::string::", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    }\n    return s;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    if (result.size() > 2) {\n        result.replace(result.find(\"\
    \ \"), 2, std::string(\"-\"));\n    }\n    return result;", "    std::string s\
    \ = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() >\
    \ 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(), s.end(), '\
    \ ', '_');\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string s = text;\n    size_t pos = 0;\n    while ((pos = s.find_first_not_of(\"\
    \ \\t\\n\", pos)) != std::string::npos) {\n        s.replace((pos), 1, std::string(\"\
    _\"));\n        pos = s.find_first_not_of(\" \\t\\n\", pos);\n    }\n    return\
    \ s;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (result.size() > 2) {\n        pos = 0;\n        while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n            result.replace(pos, 1, std::string(\"\
    -\"));\n            pos = result.find(\" \", pos + 1);\n        }\n    }\n   \
    \ return result;", "    std::string fixed_text = text;\n    size_t pos = 0;\n\
    \    while (pos < fixed_text.size()) {\n        size_t next_space = fixed_text.find('\
    \ ', pos);\n        if (next_space == std::string::npos) {\n            fixed_text.replace(pos,\
    \ 1, \" \");\n        } else {\n            fixed_text.replace(pos, 1, \" _\"\
    );\n            pos = next_space + 1;\n        }\n    }\n    return fixed_text;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n    \
    \    std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;", "   \
    \ std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n   \
    \ std::replace(s.begin(), s.end(), '_', ' ');\n    if (s.size() > 2) {\n     \
    \   std::replace(s.begin(), s.end(), '_', '-');\n    }\n    return s;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\" _\"));\n\
    \        pos += 1;\n    }\n    while((pos = result.find_first_not_of(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"-\"));\n\
    \        pos += 1;\n    }\n    return result;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find_first_not_of(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, \" \");\n        pos\
    \ = result.find_first_not_of(\" \", pos + 1);\n    }\n    if (result.find_first_not_of(\"\
    \ \", pos) != std::string::npos) {\n        result.replace(pos, 1, \"\");\n  \
    \  }\n    return result;", "    std::string res = text;\n    size_t pos = 0;\n\
    \    while ((pos = res.find_first_of(' ', pos)) != std::string::npos) {\n    \
    \    res.replace(pos, 1, std::string(\"_\"));\n        pos = res.find_first_of('\
    \ ', pos + 1);\n    }\n    while ((pos = res.find_first_of('  ', pos)) != std::string::npos)\
    \ {\n        res.replace(pos, 2, std::string(\"-\"));\n        pos = res.find_first_of('\
    \  ', pos + 2);\n    }\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n\
    \    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;", "    std::string s = text;\n   \
    \ size_t pos = 0;\n    size_t len = s.size();\n    while (pos < len) {\n     \
    \   char c = s[pos];\n        if (c == ' ') {\n            s[pos] = '_';\n   \
    \         ++pos;\n        } else if (c == '\\n') {\n            s[pos] = '_';\n\
    \            ++pos;\n            s[pos] = '_';\n            ++pos;\n        }\
    \ else {\n            ++pos;\n        }\n    }\n    return s;", "    std::string\
    \ s = text;\n    size_t pos = 0;\n    while((pos = s.find_first_not_of(\" \",\
    \ pos)) != std::string::npos) {\n        s.replace((pos), 1, std::string(\"_\"\
    ));\n        pos = pos + 1;\n    }\n    while((pos = s.find_first_of(\" \", pos))\
    \ != std::string::npos) {\n        s.replace((pos), 1, std::string(\"-\"));\n\
    \        pos = pos + 1;\n    }\n    return s;", "    std::string out = text;\n\
    \    size_t pos = 0;\n    while ((pos = out.find(\"  \", pos)) != std::string::npos)\
    \ {\n        out.replace(pos, 2, \"_\");\n        pos += 2;\n    }\n    return\
    \ out;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;", "    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if (result.size()\
    \ > 2) {\n        std::replace(result.begin(), result.end(), '  ', '-');\n   \
    \ }\n    return result;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (pos < result.length()) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find_first_not_of(\" \", pos)) != std::string::npos) {\n    \
    \    result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n    }\n \
    \   if (result.size() > 2) {\n        pos = 0;\n        while ((pos = result.find_first_of(\"\
    \ \", pos)) != std::string::npos) {\n            result.replace(pos, 1, std::string(\"\
    -\"));\n            pos += 1;\n        }\n    }\n    return result;", "    std::string\
    \ res = text;\n    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) !=\
    \ std::string::npos) {\n        res.replace(pos, 1, std::string(\"_\"));\n   \
    \     pos += 1;\n    }\n    if (res.size() > 2) {\n        res.replace(res.begin(),\
    \ res.begin() + 2, std::string(\"-\"));\n    }\n    return res;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), '_', '-');\n    }\n    return s;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    if (result.size() > 2) {\n        size_t pos = 0;\n\
    \        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n    \
    \        result.replace(pos, 1, std::string(\"-\"));\n            pos = result.find(\"\
    \ \", pos + 1);\n        }\n    }\n    return result;", "    std::string res =\
    \ text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string result = text;\n\
    \    std::replace(result.begin(), result.end(), ' ', '_');\n    if (result.size()\
    \ > 2) {\n        std::replace(result.begin(), result.end(), ' ', '_');\n    }\n\
    \    return result;", "    std::string result = text;\n    size_t pos = 0;\n \
    \   while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    return res;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    if (result.size() > 2) {\n        pos = 0;\n        while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos += 1;\n        }\n    }\n    return\
    \ result;", "    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    return res;",
  "    std::string res = text;\n    size_t pos = 0;\n    while (pos < res.size())\
    \ {\n        size_t next = res.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = res.size();\n        }\n        res.replace(pos, next\
    \ - pos, \"_\");\n        pos = next + 1;\n    }\n    return res;", "    std::string\
    \ res = text;\n    size_t pos = 0;\n    while (pos < res.size()) {\n        size_t\
    \ next = res.find(' ', pos);\n        if (next == std::string::npos) {\n     \
    \       next = res.size();\n        }\n        res.replace(pos, 1, res[pos]);\n\
    \        res.replace(next, 1, \"_\");\n        pos = next + 1;\n    }\n    return\
    \ res;", "    std::string s = text;\n    size_t pos = 0;\n    while (pos < s.size())\
    \ {\n        size_t next = s.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            next = s.size();\n        }\n        s.erase(pos, next - pos);\n\
    \        pos = next;\n    }\n    while (pos < s.size()) {\n        size_t next\
    \ = s.find(' ', pos);\n        if (next == std::string::npos) {\n            next\
    \ = s.size();\n        }\n        s.insert(next, \"_\");\n        pos = next +\
    \ 1;\n    }\n    return s;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;", "    std::string res\
    \ = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = pos +\
    \ 1;\n    }\n    if (result.size() > 2) {\n        size_t pos = 0;\n        while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos = pos + 1;\n        }\n    }\n    return\
    \ result;", "    std::string s = text;\n    size_t pos = 0;\n    while ((pos =\
    \ s.find_first_not_of(\" \\t\\n\", pos)) != std::string::npos) {\n        s.erase(pos,\
    \ 1);\n    }\n    if (s.find_first_not_of(\" \\t\\n\") != std::string::npos) {\n\
    \        s = \"_\" + s;\n    }\n    return s;", "    std::string s = text;\n \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n   \
    \     std::replace(s.begin(), s.end(), ' ', '_');\n        std::replace(s.begin(),\
    \ s.end(), '-', '_');\n    }\n    return s;", "    std::string fixed_text = text;\n\
    \    size_t pos = 0;\n    while(pos < fixed_text.length()) {\n        size_t space_pos\
    \ = fixed_text.find(\" \", pos);\n        if(space_pos != std::string::npos) {\n\
    \            fixed_text.replace(space_pos, 1, std::string(\" _\"));\n        \
    \    pos = space_pos + 1;\n        } else {\n            pos = fixed_text.length();\n\
    \        }\n    }\n    return fixed_text;", "    std::string res = text;\n   \
    \ std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string s = text;\n  \
    \  std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n    \
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", "   \
    \ std::string fixed_text = \"\";\n    size_t pos = 0;\n    while (pos < text.size())\
    \ {\n        pos = text.find(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            fixed_text += text[pos];\n        } else {\n            fixed_text\
    \ += text[pos];\n            pos = text.find(\" \", pos + 1);\n            if\
    \ (pos == std::string::npos) {\n                fixed_text += \"-\";\n       \
    \     }\n        }\n    }\n    return fixed_text;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \" \"\
    );\n        pos++;\n    }\n    return fixed_text;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '_', ' ');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), '_', '-');\n    }\n    return s;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    if (result.size() > 2) {\n        size_t pos2 = result.find(\"\
    \ \", 2);\n        result.replace(pos2, result.size() - 2, std::string(\"-\"));\n\
    \    }\n    return result;", "    std::string s = text;\n    size_t pos = 0;\n\
    \    while(pos < s.size()) {\n        size_t prev = pos;\n        pos = s.find_first_not_of(\"\
    \ \", pos);\n        if(pos == std::string::npos) {\n            pos = s.size();\n\
    \        }\n        s.replace(pos, 1, std::string(prev, '_'));\n    }\n    return\
    \ s;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;", "    std::string res = text;\n\
    \    std::size_t pos = 0;\n    while (pos < res.size()) {\n        pos = res.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            break;\n   \
    \     }\n        res.replace(pos, 1, \" \");\n        pos = res.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        res.replace(pos, 1, \" \");\n        pos = res.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        res.replace(pos, 1, \"-\");\n    }\n    return res;", "  \
    \  std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  std::replace(s.begin(), s.end(), '_', ' ');\n    std::replace(s.begin(), s.end(),\
    \ '-', ' ');\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    -\"));\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string fixed_text = \"\
    \";\n    for (auto c : text) {\n        if (c != ' ') {\n            fixed_text\
    \ += c;\n        } else {\n            fixed_text += \"_\";\n        }\n    }\n\
    \    if (fixed_text.size() > 2) {\n        fixed_text.resize(fixed_text.size()\
    \ - 2);\n    }\n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n        std::replace(s.begin(), s.end(), '-', '_');\n \
    \   }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), '_', '-');\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;", "    std::string fixed_text = text;\n    \n    size_t pos = 0;\n    while\
    \ (pos < fixed_text.size()) {\n        if (fixed_text[pos] == ' ') {\n       \
    \     fixed_text.replace(pos, 1, std::string(\"_\"));\n            pos += 1;\n\
    \        }\n        else if (fixed_text[pos] == ' ' && pos != fixed_text.size()\
    \ - 1) {\n            fixed_text.replace(pos, 1, std::string(\"-\"));\n      \
    \      pos += 1;\n        }\n        pos += 1;\n    }\n    return fixed_text;",
  "    std::string fixed_text = text;\n    \n    // Replace all spaces with underscores\n\
    \    std::replace(fixed_text.begin(), fixed_text.end(), ' ', '_');\n    \n   \
    \ // If there are more than 2 consecutive spaces, \n    // then replace all consecutive\
    \ spaces with -\n    size_t pos = 0;\n    \n    while(pos < fixed_text.size())\
    \ {\n        if(fixed_text[pos] == ' ' && fixed_text[pos+1] == ' ') {\n      \
    \      fixed_text[pos] = '-';\n            fixed_text[pos+1] = '-';\n        \
    \    pos += 2;\n        }\n        pos++;\n    }\n    \n    return fixed_text;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    if (result.size() > 2 && result.substr(0, 2) == \" \") {\n       \
    \ result.replace(result.begin(), result.begin() + 2, std::string(\"-\"));\n  \
    \  }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n        std::replace(s.begin(), s.end(), '-', '_');\n \
    \   }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            pos\
    \ += 1;\n        }\n    }\n    return result;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find_first_not_of(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos += 1;\n    }\n    if (result.find_first_not_of(\" \", pos) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"-\"));\n    }\n    return result;",
  "    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos < fixed_text.size())\
    \ {\n        size_t next = fixed_text.find(' ', pos);\n        if (next == std::string::npos)\
    \ {\n            fixed_text.replace(pos, 1, \" \");\n        } else {\n      \
    \      fixed_text.replace(pos, 1, \" _\");\n            pos = next + 1;\n    \
    \    }\n    }\n    return fixed_text;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string result = text;\n\
    \    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    if (result.size() > 2) {\n        pos = 0;\n        while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos += 1;\n        }\n    }\n    return\
    \ result;", "    std::string result = text;\n    size_t pos = 0;\n    while (pos\
    \ < result.length()) {\n        pos = result.find_first_not_of(\" \", pos);\n\
    \        if (pos == std::string::npos) {\n            break;\n        }\n    \
    \    result.replace(pos, 1, \" \");\n        pos = result.find_first_not_of(\"\
    \ \", pos + 1);\n        if (pos == std::string::npos) {\n            break;\n\
    \        }\n        result.replace(pos, 1, \"-\");\n    }\n    return result;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t\
    \ pos2 = result.find(\" \", pos);\n        while (pos2 != std::string::npos) {\n\
    \            result.replace(pos2, result.size() - 1, std::string(\"-\"));\n  \
    \          pos2 += 1;\n        }\n    }\n    return result;", "    std::string\
    \ res = text;\n    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) !=\
    \ std::string::npos) {\n        res.replace(pos, 1, std::string(\"_\"));\n   \
    \     pos += 1;\n    }\n    if (res.size() > 2) {\n        res.erase(res.size()\
    \ - 2, res.size());\n    }\n    return res;", "    std::string s = text;\n   \
    \ size_t pos = 0;\n    while ((pos = s.find_first_not_of(\" \", pos)) != std::string::npos)\
    \ {\n        s.replace((pos), 1, std::string(\"_\"));\n        pos = s.find_first_not_of(\"\
    \ \", pos + 1);\n    }\n    if (s.size() > 2) {\n        size_t pos = 0;\n   \
    \     while ((pos = s.find_first_not_of(\" \", pos)) != std::string::npos) {\n\
    \            s.replace((pos), 1, std::string(\"-\"));\n            pos = s.find_first_not_of(\"\
    \ \", pos + 1);\n        }\n    }\n    return s;", "    std::string s = text;\n\
    \    s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, next = 0, count\
    \ = 0;\n    while (next < s.size()) {\n        next = s.find_first_of(' ', prev);\n\
    \        if (next == std::string::npos) {\n            next = s.size();\n    \
    \    }\n        size_t len = next - prev;\n        if (len > 2) {\n          \
    \  s.replace(prev, next, \"-\");\n            prev = next + 1;\n            count\
    \ = 0;\n        } else {\n            prev = next;\n            count++;\n   \
    \     }\n    }\n    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    return res;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while ((pos = result.find_first_of(' ', pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    while ((pos = result.find_first_of('  ', pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 2, std::string(\"-\"));\n        pos += 2;\n\
    \    }\n    return result;", "    std::string s = text;\n    size_t pos = 0;\n\
    \    while (pos < s.size()) {\n        size_t next_pos = s.find_first_not_of(\"\
    \ \", pos);\n        if (next_pos == std::string::npos) {\n            pos = s.size();\n\
    \        } else {\n            s.insert(pos, \"_\");\n            pos = next_pos\
    \ + 1;\n        }\n    }\n    return s;", "    std::string result = text;\n  \
    \  size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n\
    \    }\n    if (result.size() > 2) {\n        size_t pos = 0;\n        while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n            pos += 1;\n        }\n    }\n    return\
    \ result;", "    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    if (res.size() > 2) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos = result.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ result;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos\
    \ = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (result.size() > 2) {\n        result.replace(result.find(\" \"), 2, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string s = text;\n   \
    \ size_t pos = 0;\n    while (pos < s.size()) {\n        size_t next_space = s.find_first_of('\
    \ ', pos);\n        if (next_space == std::string::npos) {\n            break;\n\
    \        }\n        size_t prev_space = s.find_last_of(' ', next_space);\n   \
    \     if (prev_space == std::string::npos) {\n            prev_space = s.size();\n\
    \        }\n        s.replace(next_space, prev_space - next_space, \" \");\n \
    \       pos = next_space + 1;\n    }\n    return s;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;", "    std::string res = text;\n    size_t\
    \ pos = 0;\n    while (pos < res.size()) {\n        size_t next = std::find(res.begin(),\
    \ res.end(), ' ');\n        if (next == res.end()) {\n            next = res.end();\n\
    \        }\n        size_t prev = std::find(res.begin(), res.end(), ' ', next);\n\
    \        if (prev == res.end()) {\n            prev = res.end();\n        }\n\
    \        size_t len = next - prev;\n        if (len > 2) {\n            std::replace(prev,\
    \ prev + len, '-');\n        }\n        pos = next;\n    }\n    return res;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string res = text;\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;", "  \
    \  std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (result.size()\
    \ > 2) {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) !=\
    \ std::string::npos) {\n            result.replace(pos, 1, std::string(\"-\"));\n\
    \            pos = result.find(\" \", pos + 1);\n        }\n    }\n    return\
    \ result;", "    std::replace(text.begin(), text.end(), ' ', '_');\n    std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n    return text;", "    std::string out = text;\n \
    \   for (auto &c : out) {\n        if (c != ' ') {\n            c = tolower(c);\n\
    \        }\n    }\n    for (auto &c : out) {\n        if (c != ' ') {\n      \
    \      c = toupper(c);\n        }\n    }\n    for (auto &c : out) {\n        if\
    \ (c != ' ') {\n            c = tolower(c);\n        }\n    }\n    for (auto &c\
    \ : out) {\n        if (c != ' ') {\n            c = toupper(c);\n        }\n\
    \    }\n    return out;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2 && result.substr(0, 2) ==\
    \ \" \") {\n        std::replace(result.begin(), result.begin() + 2, ' ', '-');\n\
    \    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    }\n    return result;", "    std::string result\
    \ = text;\n    size_t pos = 0;\n    while((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = result.find(\"\
    \ \", pos + 1);\n    }\n    if(result.size() > 2) {\n        size_t pos = 0;\n\
    \        while((pos = result.find(\" \", pos)) != std::string::npos) {\n     \
    \       result.replace(pos, 1, std::string(\"-\"));\n            pos = result.find(\"\
    \ \", pos + 1);\n        }\n    }\n    return result;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    if (text.size() > 2) {\n        std::replace(text.begin(), text.end(), '\
    \ ', '_');\n    }\n    return text;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2 && result.substr(0, 2) ==\
    \ \" \") {\n        std::replace(result.begin(), result.begin() + 2, ' ', '-');\n\
    \    }\n    return result;", "    std::string res = text;\n    std::size_t pos\
    \ = 0;\n    while (pos < res.size()) {\n        pos = res.find_first_not_of(\"\
    \ \", pos);\n        if (pos == std::string::npos) {\n            break;\n   \
    \     }\n        pos = res.find_first_of(\" \", pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = res.size();\n        }\n        res.replace(pos, 1, \"\
    \ \");\n    }\n    return res;", "    std::string s = text;\n    size_t pos =\
    \ 0;\n    while (pos < s.size()) {\n        size_t next = s.find_first_not_of(\"\
    \ \", pos);\n        if (next == std::string::npos) {\n            next = s.size();\n\
    \        }\n        s.erase(pos, next - pos);\n        pos = next;\n    }\n  \
    \  return s;", "    std::string fixed_text = text;\n    size_t pos = 0;\n    while\
    \ (pos < fixed_text.size()) {\n        size_t next_space = fixed_text.find(' ',\
    \ pos);\n        if (next_space != std::string::npos) {\n            fixed_text.replace(pos,\
    \ next_space - pos, \"_\");\n            pos = next_space + 1;\n        } else\
    \ {\n            pos = fixed_text.size();\n        }\n    }\n    return fixed_text;",
  "    std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    if (result.size() > 2) {\n        pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while(pos < s.size()) {\n\
    \        pos = s.find_first_of(' ', prev);\n        if(pos == std::string::npos)\
    \ {\n            pos = s.size();\n        }\n        s.replace(pos, 1, std::string(\"\
    -\"));\n        prev = pos + 1;\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string res = text;\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), '_', '-');\n    }\n\
    \    return s;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (result.size() > 2) {\n        result.replace(result.begin(), result.end()\
    \ - 2, std::string(\"_\"));\n    }\n    return result;", "    std::string s =\
    \ text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2)\
    \ {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;",
  "    std::string fixed_text = text;\n    size_t pos = 0;\n    while (pos < fixed_text.size())\
    \ {\n        if (fixed_text[pos] == ' ') {\n            fixed_text[pos] = '_';\n\
    \            while (pos < fixed_text.size() && fixed_text[pos] == ' ') {\n   \
    \             pos++;\n            }\n            if (pos < fixed_text.size() -\
    \ 1) {\n                fixed_text[pos] = '-';\n            }\n        }\n   \
    \     pos++;\n    }\n    return fixed_text;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n     \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", "    std::string\
    \ result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos))\
    \ != std::string::npos) {\n        result.replace(pos, 1, std::string(\"_\"));\n\
    \        pos += 1;\n    }\n    if (result.size() > 2) {\n        size_t pos =\
    \ 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \            result.replace(pos, 1, std::string(\"-\"));\n            pos += 1;\n\
    \        }\n    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;"]
stop_tokens:
- "\n}"
