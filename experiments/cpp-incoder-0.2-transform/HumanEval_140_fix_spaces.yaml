name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
  \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
  )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
  \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ',\
    \ '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] ==\
    \ ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"-\");\n    }\n    return\
    \ s;", "    std::string result = text;\n    size_t pos = 0;\n    while ((pos =\
    \ result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    if (pos < result.length()) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string out = text;\n    size_t pos\
    \ = 0;\n    while ((pos = out.find(' ', pos)) != std::string::npos) {\n      \
    \  out.replace(pos, 1, \" \");\n        pos = out.find(' ', pos + 1);\n    }\n\
    \    while (out.size() > 2 && out.substr(0, 2) == \" \") {\n        out = out.substr(1);\n\
    \    }\n    return out;", "    std::string out = text;\n    for (size_t i = 0;\
    \ i < out.size(); i++) {\n        if (out[i] == ' ') {\n            out[i] = '_';\n\
    \        }\n    }\n    if (out.size() > 2) {\n        size_t i = 0;\n        while\
    \ (i < out.size() - 2) {\n            if (out[i] == ' ' && out[i + 1] == ' ')\
    \ {\n                out[i] = '_';\n                i++;\n            }\n    \
    \        else if (out[i] == ' ' && out[i + 1] != ' ') {\n                out[i]\
    \ = '-';\n                i++;\n            }\n            else if (out[i] !=\
    \ ' ' && out[i + 1] == ' ') {\n                out[i] = '-';\n               \
    \ i++;\n            }\n            else if (out[i] != ' ' && out[i + 1] != ' ')\
    \ {\n                i++;\n            }\n        }\n    }\n    return out;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string result = text;\n    std::replace(result.begin(),\
    \ result.end(), ' ', '_');\n    if (result.size() > 2) {\n        std::replace(result.begin(),\
    \ result.end(), '  ', '-');\n    }\n    return result;", "    std::string s =\
    \ text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '_', ' ');\n    return s;", "    std::string out = text;\n    size_t\
    \ pos = 0;\n    while(pos < out.size()) {\n        size_t next = out.find(' ',\
    \ pos);\n        if(next == std::string::npos) {\n            next = out.size();\n\
    \        }\n        out.replace(pos, 1, out[pos]);\n        pos = next + 1;\n\
    \    }\n    size_t prev = out.find(' ', pos);\n    if(prev == std::string::npos)\
    \ {\n        prev = out.size();\n    }\n    out.replace(prev, 2, out[prev]);\n\
    \    return out;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    if (result.size() > 2)\
    \ {\n        size_t pos2 = result.find(\" \", pos);\n        while (pos2 != std::string::npos)\
    \ {\n            result.replace(pos2, result.size() - 1, std::string(\"-\"));\n\
    \            pos2 += 1;\n        }\n    }\n    return result;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    if (text.size() > 2) {\n        std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    }\n    return text;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string fixed_text = text;\n    size_t pos = 0;\n    while ((pos = fixed_text.find(\"\
    \  \", pos)) != std::string::npos) {\n        fixed_text.replace(pos, 2, \"_\"\
    );\n        pos += 2;\n    }\n    return fixed_text;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos = result.find(\" \", pos + 1);\n    }\n    if (pos < result.length()\
    \ && result[pos] == ' ') {\n        result.replace(pos, 1, std::string(\"-\"));\n\
    \    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n        std::replace(s.begin(), s.end(), '-', '_');\n \
    \   }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if\
    \ (s.size() > 2) {\n        std::replace(s.begin(), s.end(), '_', '-');\n    }\n\
    \    return s;", "    std::string fixed_text = text;\n    size_t pos = 0;\n  \
    \  size_t prev_pos = 0;\n    while (pos < fixed_text.size()) {\n        pos =\
    \ fixed_text.find(' ', pos);\n        if (pos == std::string::npos) {\n      \
    \      pos = fixed_text.size();\n        }\n        fixed_text.replace(pos, 1,\
    \ \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \"-\");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \"-\");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find(' ', pos);\n        if (pos == std::string::npos)\
    \ {\n            pos = fixed_text.size();\n        }\n        fixed_text.replace(pos,\
    \ 1, \" \");\n        pos = fixed_text.find('", "    std::string res = text;\n\
    \    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string res = text;\n\
    \    std::size_t found = -1;\n    while ((found = res.find_first_of(' ', found\
    \ + 1)) != std::string::npos) {\n        res = res.substr(0, found) + \"_\" +\
    \ res.substr(found + 1);\n    }\n    if (res.find_first_of(' ') != std::string::npos)\
    \ {\n        std::size_t found = -1;\n        while ((found = res.find_first_of('\
    \ ', found + 1)) != std::string::npos) {\n            res = res.substr(0, found)\
    \ + \"-\" + res.substr(found + 1);\n        }\n    }\n    return res;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;"]
stop_tokens:
- "\n}"
