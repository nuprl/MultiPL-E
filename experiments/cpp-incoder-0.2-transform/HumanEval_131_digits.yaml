name: HumanEval_131_digits
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
  \ n, return the product of the odd digits.\n// Return 0 if all digits are even.\n\
  // For example:\n// >>> digits((1))\n// (1)\n// >>> digits((4))\n// (0)\n// >>>\
  \ digits((235))\n// (15)\nlong digits(long n) {\n"
tests: "}\nint main() {\n    auto candidate = digits;\n    assert(candidate((5)) ==\
  \ (5));\n    assert(candidate((54)) == (5));\n    assert(candidate((120)) == (1));\n\
  \    assert(candidate((5014)) == (5));\n    assert(candidate((98765)) == (315));\n\
  \    assert(candidate((5576543)) == (2625));\n    assert(candidate((2468)) == (0));\n\
  }\n"
completions: ["    long res = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n\
    \            res += n % 10;\n        }\n        n /= 10;\n    }\n    return res;",
  "    long ans = 1;\n    while (n > 0) {\n        ans *= n % 10;\n        n /= 10;\n\
    \    }\n    return ans;", "    long product = 1;\n    while (n > 0) {\n      \
    \  product *= n % 10;\n        n /= 10;\n    }\n    return product;", "    long\
    \ ans = 1;\n    while (n > 0) {\n        ans *= n % 10;\n        n /= 10;\n  \
    \  }\n    return ans;", "    long res = 0;\n    while (n > 0) {\n        if (n\
    \ % 2 == 1) {\n            res += 1;\n        }\n        n /= 2;\n    }\n    return\
    \ res;", "    long res = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n\
    \            res += n % 10;\n        }\n        n /= 10;\n    }\n    return res;",
  "    long product = 1;\n    while (n > 0) {\n        product *= n % 10;\n      \
    \  n /= 10;\n    }\n    return product;", "    long product = 1;\n    while (n\
    \ > 0) {\n        if (n % 2 == 1) {\n            product *= n % 10;\n        }\n\
    \        n /= 10;\n    }\n    return product;", "    long res = 0;\n    while\
    \ (n > 0) {\n        if (n % 2 == 1) {\n            res += n % 10;\n        }\n\
    \        n /= 10;\n    }\n    return res;", "    long ret = 1;\n    while (n >\
    \ 0) {\n        ret = ret * n % 10;\n        n /= 10;\n    }\n    return ret;",
  "  long res = 0;\n  while (n > 0) {\n    if (n % 2 == 1) {\n      res += n % 10;\n\
    \    }\n    n /= 10;\n  }\n  return res;", "    long ans = 1;\n    while (n >\
    \ 0)\n    {\n        long d = n % 10;\n        ans *= (d & 1);\n        n /= 10;\n\
    \    }\n    return ans;", "    long res = 0;\n    while (n > 0) {\n        if\
    \ (n % 2 == 1) {\n            res += n % 10;\n        }\n        n /= 10;\n  \
    \  }\n    return res;", "    long product = 1;\n    while (n > 0) {\n        if\
    \ (n % 2 == 1) {\n            product *= n % 10;\n        }\n        n /= 10;\n\
    \    }\n    return product;", "    long res = 0;\n    while (n > 0) {\n      \
    \  res = res * 10 + (n % 10);\n        n /= 10;\n    }\n    return res == 0 ?\
    \ 0 : res;", "    long ret = 1;\n    while (n > 0) {\n        if (n % 2 == 1)\
    \ {\n            ret *= (n / 10);\n        }\n        n /= 10;\n    }\n    return\
    \ ret;", "    long res = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n\
    \            res += n;\n        }\n        n /= 2;\n    }\n    return res;", " \
    \   long product = 1;\n    while (n > 0)\n    {\n        if (n % 2 == 1)\n   \
    \         product *= n % 10;\n        n /= 10;\n    }\n    return product;", " \
    \   long res = 0;\n    while (n > 0) {\n        if (n % 2 == 1) {\n          \
    \  res += n % 10;\n        }\n        n /= 10;\n    }\n    return res;", "   \
    \ long res = 0;\n    while (n > 0) {\n        res *= 10;\n        res += n % 10;\n\
    \        n /= 10;\n    }\n    return res == 0 ? 0 : res;"]
stop_tokens:
- "\n}"
