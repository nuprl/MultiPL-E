language: cpp
name: HumanEval_52_below_threshold
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    long threshold = sum * t;\n    for (auto i : l) {\n        if (i >=\
    \ threshold) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40jxnon1.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp40jxnon1.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp40jxnon1.cpp:13:5: error:\
    \ expected ';' before 'long'\n     long threshold = sum * t;\n     ^\n/tmp/tmp40jxnon1.cpp:14:5:\
    \ error: expected primary-expression before 'for'\n     for (auto i : l) {\n \
    \    ^\n/tmp/tmp40jxnon1.cpp:14:5: error: expected ')' before 'for'\n/tmp/tmp40jxnon1.cpp:14:15:\
    \ error: 'i' does not name a type\n     for (auto i : l) {\n               ^\n\
    /tmp/tmp40jxnon1.cpp:19:5: error: expected ';' before 'return'\n     return true;\n\
    \     ^\n/tmp/tmp40jxnon1.cpp:19:5: error: expected primary-expression before\
    \ 'return'\n/tmp/tmp40jxnon1.cpp:19:5: error: expected ';' before 'return'\n/tmp/tmp40jxnon1.cpp:19:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp40jxnon1.cpp:19:5:\
    \ error: expected ')' before 'return'\n/tmp/tmp40jxnon1.cpp: In function 'int\
    \ main()':\n/tmp/tmp40jxnon1.cpp:22:10: error: 'candidate' does not name a type\n\
    \     auto candidate = below_threshold;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp40jxnon1.cpp:2:\n/tmp/tmp40jxnon1.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp40jxnon1.cpp:23:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp40jxnon1.cpp:23:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp40jxnon1.cpp:23:78: error: no matchin"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    long threshold = sum * t;\n    for (long i : l) {\n        if (i >=\
    \ threshold) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphl9byq1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821964
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    long long threshold = sum * t;\n    for (long long i : l)\
    \ {\n        if (i >= threshold) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsioz70se.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    long threshold = sum / l.size();\n    for (long i : l) {\n       \
    \ if (i >= threshold) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpawr17lz5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821964
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    long long threshold = sum * t;\n    for (long long i : l)\
    \ {\n        if (i >= threshold) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsioz70se.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    long threshold = sum * t;\n    for (long i : l) {\n        if (i >=\
    \ threshold) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphl9byq1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821964
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    long threshold = sum * t;\n    for (long i : l) {\n        if (i >=\
    \ threshold) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphl9byq1e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821964
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    long threshold = sum * t;\n    for (auto i : l) {\n        if (i <\
    \ threshold) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_tv5gmt4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    long long threshold = sum * t;\n    for (auto i : l) {\n    \
    \    if (i < threshold) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2hwax2db.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphcd24sli.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmphcd24sli.cpp:10:24: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long i : l) {\n              \
    \          ^\n/tmp/tmphcd24sli.cpp: In function 'int main()':\n/tmp/tmphcd24sli.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphcd24sli.cpp:2:\n/tmp/tmphcd24sli.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmphcd24sli.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmphcd24sli.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphcd24sli.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphcd24sli.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphcd24sli.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (auto i : l) {\n        sum +=\
    \ i;\n    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_d2odht.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpl_d2odht.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmpl_d2odht.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpl_d2odht.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpl_d2odht.cpp: In function 'int main()':\n/tmp/tmpl_d2odht.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl_d2odht.cpp:2:\n/tmp/tmpl_d2odht.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpl_d2odht.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpl_d2odht.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpl_d2odht.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpl_d2odht.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ysa5jio.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmp8ysa5jio.cpp:10:15: error: 'i' does not name a type\n\
    \     for (auto i : l) {\n               ^\n/tmp/tmp8ysa5jio.cpp:13:5: error:\
    \ expected ';' before 'return'\n     return sum < t;\n     ^\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp8ysa5jio.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmp8ysa5jio.cpp: In function 'int main()':\n/tmp/tmp8ysa5jio.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = below_threshold;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8ysa5jio.cpp:2:\n/tmp/tmp8ysa5jio.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmp8ysa5jio.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmp8ysa5jio.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8ysa5jio.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8ysa5jio.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    long threshold = sum / l.size();\n    for (long i : l) {\n       \
    \ if (i >= threshold) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = below_threshold;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpawr17lz5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821964
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long sum = 0;\n    for (long i : l) {\n        sum += i;\n\
    \    }\n    return sum < t;\n}\nint main() {\n    auto candidate = below_threshold;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto1jxomy.cpp: In function 'bool below_threshold(std::vector<long\
    \ int>, long int)':\n/tmp/tmpto1jxomy.cpp:10:19: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long i : l) {\n                   ^\n\
    /tmp/tmpto1jxomy.cpp: In function 'int main()':\n/tmp/tmpto1jxomy.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = below_threshold;\n \
    \         ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n    \
    \             from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpto1jxomy.cpp:2:\n/tmp/tmpto1jxomy.cpp:17:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10})), (100)) == (true));\n                                        ^\n\
    /tmp/tmpto1jxomy.cpp:17:78: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100)) == (true));\n                        \
    \                                                      ^\n/tmp/tmpto1jxomy.cpp:17:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpto1jxomy.cpp:17:78: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpto1jxomy.cpp:17:78: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpto1jxomy.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True if all numbers\
    \ in the list l are below threshold t.\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10})), (100))\n// (true)\n// >>> below_threshold((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (5))\n// (false)\nbool below_threshold(std::vector<long>\
    \ l, long t) {\n    long long sum = 0;\n    for (long long i : l) {\n        sum\
    \ += i;\n    }\n    long long threshold = sum * t;\n    for (long long i : l)\
    \ {\n        if (i < threshold) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = below_threshold;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})),\
    \ (100)) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)20,\
    \ (long)4, (long)10})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (21)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})), (22)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (11)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)8, (long)4, (long)10})), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5o25wj7_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659821964
