language: cpp
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long pos = 0;\n    long len = string.length();\n    long sublen =\
    \ substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos += sublen;\n            count++;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 1] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 1] == substring[sublen - 2]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 2] == substring[sublen - 2]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 2] == substring[sublen - 3]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 3] == substring[sublen - 3]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 3] == substring[sublen - 4]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 4] == substring[sublen - 4]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 4] == substring[sublen - 5]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 5] == substring[sublen - 5]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 5] == substring[sublen - 6]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 6] == substring[sublen - 6]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 6] == substring[sublen - 7]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 7] == substring[sublen - 7]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0] &&\
    \ string[pos + 7] == substring[sublen - 8]) {\n            \n}\nint main() {\n\
    \    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbciv8zfw.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpbciv8zfw.cpp:79:12: error: a function-definition is\
    \ not allowed here before '{' token\n int main() {\n            ^\n/tmp/tmpbciv8zfw.cpp:85:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmpbciv8zfw.cpp:85:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i += 1;\n\
    \            j += 1;\n        }\n        else if (string[i] == substring[j]) {\n\
    \            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j += 1;\n        }\n        else if (string[i] == substring[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (string[i] == substring[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (string[i]\
    \ == substring[j]) {\n            i += 1;\n            j += 1;\n        }\n  \
    \      else if (string[i] == substring[j]) {\n            i += 1;\n          \
    \  j\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp476dbs4t.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmp476dbs4t.cpp:129:1: error: expected ';' before '}' token\n\
    \ }\n ^\n/tmp/tmp476dbs4t.cpp:130:12: error: a function-definition is not allowed\
    \ here before '{' token\n int main() {\n            ^\n/tmp/tmp476dbs4t.cpp:136:1:\
    \ error: expected '}' at end of input\n }\n ^\n/tmp/tmp476dbs4t.cpp:136:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substringLength\
    \ = substring.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substringLength) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpof0bkpkp.cpp: In function 'int main()':\n/tmp/tmpof0bkpkp.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpof0bkpkp.cpp:2:\n/tmp/tmpof0bkpkp.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos = pos + 1;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpro2py42w.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpro2py42w.cpp:16:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpro2py42w.cpp:\
    \ In function 'int main()':\n/tmp/tmpro2py42w.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpro2py42w.cpp:2:\n/tmp/tmpro2py42w.cpp:26:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\n\
    \            break;\n        count++;\n        pos = pos + substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3gaipou.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpy3gaipou.cpp:16:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos)\n                    ^\n/tmp/tmpy3gaipou.cpp:\
    \ In function 'int main()':\n/tmp/tmpy3gaipou.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy3gaipou.cpp:2:\n/tmp/tmpy3gaipou.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A\
    \ = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n \
    \   long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J\
    \ = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n \
    \   long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S\
    \ = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n \
    \   long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C\
    \ = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n \
    \   long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L\
    \ = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n \
    \   long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U\
    \ = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n \
    \   long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyujm8kb.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpwyujm8kb.cpp:67:10: error: redeclaration of 'long int\
    \ i'\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:15:10: error: 'long\
    \ int i' previously declared here\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:68:10:\
    \ error: redeclaration of 'long int j'\n     long j = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:16:10:\
    \ error: 'long int j' previously declared here\n     long j = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:69:10: error: redeclaration of 'long int k'\n     long k\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:17:10: error: 'long int k' previously\
    \ declared here\n     long k = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:70:10: error:\
    \ redeclaration of 'long int l'\n     long l = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:18:10:\
    \ error: 'long int l' previously declared here\n     long l = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:71:10: error: redeclaration of 'long int m'\n     long m\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:19:10: error: 'long int m' previously\
    \ declared here\n     long m = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:72:10: error:\
    \ redeclaration of 'long int n'\n     long n = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:20:10:\
    \ error: 'long int n' previously declared here\n     long n = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:73:10: error: redeclaration of 'long int o'\n     long o\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:21:10: error: 'long int o' previously\
    \ declared here\n     long o = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:74:10: error:\
    \ redeclaration of 'long int p'\n     long p = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:22:10:\
    \ error: 'long int p' previously declared here\n     long p = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:75:10: error: redeclaration of 'long int q'\n     long q\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:23:10: error: 'long int q' previously\
    \ declared here\n     long q = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:76:10: error:\
    \ redeclaration of 'long int r'\n     long r = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:24:10:\
    \ error: 'long int r' previously declared here\n     long r = 0;\n          ^\n\
    /"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        ++pos;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfg9lknvy.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpfg9lknvy.cpp:16:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpfg9lknvy.cpp:\
    \ In function 'int main()':\n/tmp/tmpfg9lknvy.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfg9lknvy.cpp:2:\n/tmp/tmpfg9lknvy.cpp:26:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       count += 1;\n            for (auto &c2 : substring) {\n              \
    \  if (c == c2) break;\n                count += 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgcuyscu.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpbgcuyscu.cpp:12:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : string) {\n        \
    \        ^\n/tmp/tmpbgcuyscu.cpp:12:20: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (auto &c : string) {\n                    ^\n\
    /tmp/tmpbgcuyscu.cpp:15:24: error: ISO C++ forbids declaration of 'c2' with no\
    \ type [-fpermissive]\n             for (auto &c2 : substring) {\n           \
    \             ^\n/tmp/tmpbgcuyscu.cpp:15:29: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n             for (auto &c2 : substring) {\n     \
    \                        ^\n/tmp/tmpbgcuyscu.cpp: In function 'int main()':\n\
    /tmp/tmpbgcuyscu.cpp:24:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = how_many_times;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgcuyscu.cpp:2:\n/tmp/tmpbgcuyscu.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       count += 1;\n            for (auto &c2 : substring) {\n              \
    \  if (c == c2) break;\n                count += 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgcuyscu.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpbgcuyscu.cpp:12:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : string) {\n        \
    \        ^\n/tmp/tmpbgcuyscu.cpp:12:20: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (auto &c : string) {\n                    ^\n\
    /tmp/tmpbgcuyscu.cpp:15:24: error: ISO C++ forbids declaration of 'c2' with no\
    \ type [-fpermissive]\n             for (auto &c2 : substring) {\n           \
    \             ^\n/tmp/tmpbgcuyscu.cpp:15:29: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n             for (auto &c2 : substring) {\n     \
    \                        ^\n/tmp/tmpbgcuyscu.cpp: In function 'int main()':\n\
    /tmp/tmpbgcuyscu.cpp:24:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = how_many_times;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgcuyscu.cpp:2:\n/tmp/tmpbgcuyscu.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9gimulol.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmp9gimulol.cpp:15:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmp9gimulol.cpp:\
    \ In function 'int main()':\n/tmp/tmp9gimulol.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9gimulol.cpp:2:\n/tmp/tmp9gimulol.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5e43h2x.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpv5e43h2x.cpp:13:51: error: 'string' is not a class or\
    \ namespace\n     while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n                                                   ^\n/tmp/tmpv5e43h2x.cpp:\
    \ In function 'int main()':\n/tmp/tmpv5e43h2x.cpp:20:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv5e43h2x.cpp:2:\n/tmp/tmpv5e43h2x.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    while (start < len) {\n        end\
    \ = start + sublen;\n        if (string[start] == substring[0]) {\n          \
    \  if (end == len) {\n                count++;\n            } else {\n       \
    \         count += how_many_times(string.substr(start + 1, end - start), substring);\n\
    \            }\n            start = end + 1;\n        } else {\n            start\
    \ = end;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphrv3ge8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        ++count;\n        pos += sublen;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"),\
    \ (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n \
    \   assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpclq607o4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos = pos + 1;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_dcbx1ol.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto it = string.begin(); it != string.end(); ++it) {\n     \
    \   if (it == string.begin() || it == string.end() || (*it != *substring)) {\n\
    \            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (it == string.begin() || it == string.end()\
    \ || (*it != *substring)) {\n            continue;\n        }\n        ++count;\n\
    \        if (it == string.begin() || it == string.end() || (*it != *substring))\
    \ {\n            continue;\n        }\n        ++count;\n        if (it == string.begin()\
    \ || it == string.end() || (*it != *substring)) {\n            continue;\n   \
    \     }\n        ++count;\n        if (\n}\nint main() {\n    auto candidate =\
    \ how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptu9z1ty8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substring_length\
    \ = substring.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substring_length) == substring)\
    \ {\n            count++;\n            start = mid + 1;\n        } else {\n  \
    \          end = mid;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuslr3wk7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        } else if (string[i] > substring[j]) {\n         \
    \   j++;\n        } else {\n            i++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxy8vwwaf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen\
    \ && string[i] == substring[j]) {\n            j++;\n        }\n        if (j\
    \ == sublen) {\n            count++;\n            i += sublen - 1;\n         \
    \   j = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8oab9657.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substring_start\
    \ = string.length();\n    long substring_end = string.length();\n    long substring_start_index\
    \ = 0;\n    long substring_end_index = 0;\n    long substring_start_index2 = 0;\n\
    \    long substring_end_index2 = 0;\n    long substring_start_index3 = 0;\n  \
    \  long substring_end_index3 = 0;\n    long substring_start_index4 = 0;\n    long\
    \ substring_end_index4 = 0;\n    long substring_start_index5 = 0;\n    long substring_end_index5\
    \ = 0;\n    long substring_start_index6 = 0;\n    long substring_end_index6 =\
    \ 0;\n    long substring_start_index7 = 0;\n    long substring_end_index7 = 0;\n\
    \    long substring_start_index8 = 0;\n    long substring_end_index8 = 0;\n  \
    \  long substring_start_index9 = 0;\n    long substring_end_index9 = 0;\n    long\
    \ substring_start_index10 = 0;\n    long substring_end_index10 = 0;\n    long\
    \ substring_start_index11 = 0;\n    long substring_end_index11 = 0;\n    long\
    \ substring_start_index12 = 0;\n    long substring_end_index12 = 0;\n    long\
    \ substring_start_index13 = 0;\n    long substring_end_index13 = 0;\n    long\
    \ substring_start_index14 = 0;\n    long substring_end_index14 = 0;\n    long\
    \ substring_start_index15 = 0;\n    long substring_end_index15 = 0;\n    long\
    \ substring_start_index16 = 0;\n    long substring_end_index16 = 0;\n    long\
    \ substring_start_index17 = 0;\n    long substring_end_index17 = 0;\n    long\
    \ substring_start_index18 = 0;\n    long substring_end_index18 = 0;\n    long\
    \ substring_start_index19 = 0;\n    long substring_end_index19 = 0;\n    long\
    \ substring_start_index20 = 0;\n    long substring_end_index20 = 0;\n    long\
    \ substring_start_index21 = 0;\n    long substring_end_index21 = 0;\n    long\
    \ substring_start_index22 = 0;\n    long substring_end_index22 = 0;\n    long\
    \ substring_start_index23 = 0;\n    long substring_end_index23 = 0;\n    long\
    \ substring_start_index24 = 0;\n    long substring_end_index24 = 0;\n    long\
    \ substring_start_index25 = 0;\n    long substring_end_index25 = 0;\n    long\
    \ substring_start_index26 = 0;\n    long substring_end_index26 = 0;\n    long\
    \ substring_start_index27 = 0;\n    long substring_end_index27 = 0;\n    long\
    \ \n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4xhmyobt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5e43h2x.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpv5e43h2x.cpp:13:51: error: 'string' is not a class or\
    \ namespace\n     while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n                                                   ^\n/tmp/tmpv5e43h2x.cpp:\
    \ In function 'int main()':\n/tmp/tmpv5e43h2x.cpp:20:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv5e43h2x.cpp:2:\n/tmp/tmpv5e43h2x.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        ++count;\n        pos += sublen;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"),\
    \ (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n \
    \   assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpclq607o4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A\
    \ = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n \
    \   long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J\
    \ = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n \
    \   long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S\
    \ = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n \
    \   long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C\
    \ = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n \
    \   long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L\
    \ = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n \
    \   long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U\
    \ = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n \
    \   long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyujm8kb.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpwyujm8kb.cpp:67:10: error: redeclaration of 'long int\
    \ i'\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:15:10: error: 'long\
    \ int i' previously declared here\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:68:10:\
    \ error: redeclaration of 'long int j'\n     long j = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:16:10:\
    \ error: 'long int j' previously declared here\n     long j = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:69:10: error: redeclaration of 'long int k'\n     long k\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:17:10: error: 'long int k' previously\
    \ declared here\n     long k = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:70:10: error:\
    \ redeclaration of 'long int l'\n     long l = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:18:10:\
    \ error: 'long int l' previously declared here\n     long l = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:71:10: error: redeclaration of 'long int m'\n     long m\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:19:10: error: 'long int m' previously\
    \ declared here\n     long m = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:72:10: error:\
    \ redeclaration of 'long int n'\n     long n = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:20:10:\
    \ error: 'long int n' previously declared here\n     long n = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:73:10: error: redeclaration of 'long int o'\n     long o\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:21:10: error: 'long int o' previously\
    \ declared here\n     long o = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:74:10: error:\
    \ redeclaration of 'long int p'\n     long p = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:22:10:\
    \ error: 'long int p' previously declared here\n     long p = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:75:10: error: redeclaration of 'long int q'\n     long q\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:23:10: error: 'long int q' previously\
    \ declared here\n     long q = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:76:10: error:\
    \ redeclaration of 'long int r'\n     long r = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:24:10:\
    \ error: 'long int r' previously declared here\n     long r = 0;\n          ^\n\
    /"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkxsel43f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74dvf_lr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.substr(mid, len) == substring) {\n            count++;\n           \
    \ start = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl8v7ez8d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        } else {\n    \
    \        count++;\n            pos += 1;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp13i4mznr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfs0iv9n1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        ++count;\n        pos += sublen;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"),\
    \ (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n \
    \   assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpclq607o4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\n\
    \            break;\n        count++;\n        pos += substring.length();\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp001bheew.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long pos = 0;\n    long len = string.length();\n    long sublen =\
    \ substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        } else {\n    \
    \        pos = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppr1lkzf3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       count += 1;\n            for (auto &c2 : substring) {\n              \
    \  if (c == c2) break;\n                count += 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgcuyscu.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpbgcuyscu.cpp:12:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : string) {\n        \
    \        ^\n/tmp/tmpbgcuyscu.cpp:12:20: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (auto &c : string) {\n                    ^\n\
    /tmp/tmpbgcuyscu.cpp:15:24: error: ISO C++ forbids declaration of 'c2' with no\
    \ type [-fpermissive]\n             for (auto &c2 : substring) {\n           \
    \             ^\n/tmp/tmpbgcuyscu.cpp:15:29: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n             for (auto &c2 : substring) {\n     \
    \                        ^\n/tmp/tmpbgcuyscu.cpp: In function 'int main()':\n\
    /tmp/tmpbgcuyscu.cpp:24:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = how_many_times;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgcuyscu.cpp:2:\n/tmp/tmpbgcuyscu.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74dvf_lr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       count += 1;\n            for (auto &c2 : substring) {\n              \
    \  if (c == c2) break;\n                count += 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgcuyscu.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpbgcuyscu.cpp:12:16: error: ISO C++ forbids declaration\
    \ of 'c' with no type [-fpermissive]\n     for (auto &c : string) {\n        \
    \        ^\n/tmp/tmpbgcuyscu.cpp:12:20: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (auto &c : string) {\n                    ^\n\
    /tmp/tmpbgcuyscu.cpp:15:24: error: ISO C++ forbids declaration of 'c2' with no\
    \ type [-fpermissive]\n             for (auto &c2 : substring) {\n           \
    \             ^\n/tmp/tmpbgcuyscu.cpp:15:29: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n             for (auto &c2 : substring) {\n     \
    \                        ^\n/tmp/tmpbgcuyscu.cpp: In function 'int main()':\n\
    /tmp/tmpbgcuyscu.cpp:24:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = how_many_times;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgcuyscu.cpp:2:\n/tmp/tmpbgcuyscu.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos += sublen;\n            count++;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else {\n            pos++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptpu0hsdc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74dvf_lr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.substr(mid, len) == substring) {\n            count++;\n           \
    \ start = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl8v7ez8d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       for (auto &cc : substring) {\n                if (c == cc) {\n       \
    \             count++;\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\nint main() {\n    auto candidate = how_many_times;\n   \
    \ assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpardkp6xw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        } else {\n    \
    \        pos = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_xumpqfo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5e43h2x.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpv5e43h2x.cpp:13:51: error: 'string' is not a class or\
    \ namespace\n     while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n                                                   ^\n/tmp/tmpv5e43h2x.cpp:\
    \ In function 'int main()':\n/tmp/tmpv5e43h2x.cpp:20:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv5e43h2x.cpp:2:\n/tmp/tmpv5e43h2x.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkxsel43f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    while (start\
    \ < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring.length()).compare(substring) == 0) {\n            count++;\n     \
    \       start = mid + 1;\n        } else {\n            end = mid;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp495m5aoc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        count++;\n        pos += sublen;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"),\
    \ (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n \
    \   assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl3zyf7mj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        ++count;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnd2ex0y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        } else {\n    \
    \        pos = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_xumpqfo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos = pos + 1;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_dcbx1ol.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            count++;\n            i += 1;\n            j += 1;\n        }\n \
    \       else if (string[i] > substring[j]) {\n            end = i;\n        }\n\
    \        else if (string[i] < substring[j]) {\n            start = i;\n      \
    \  }\n        else {\n            i += 1;\n            j += 1;\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3_bpw4uq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkxsel43f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i++;\n\
    \            j++;\n        } else if (string[i] < substring[j]) {\n          \
    \  i++;\n        } else {\n            j++;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp51lavyfw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n\
    \        start = i;\n        while (i < len && string[i] == substring[0]) {\n\
    \            i++;\n        }\n        end = i;\n        while (i < len && string[end\
    \ - 1] == substring[sublen - 1]) {\n            end--;\n        }\n        if\
    \ (start >= end) {\n            count++;\n        }\n        i = end;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6zxtinx4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5e43h2x.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpv5e43h2x.cpp:13:51: error: 'string' is not a class or\
    \ namespace\n     while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n                                                   ^\n/tmp/tmpv5e43h2x.cpp:\
    \ In function 'int main()':\n/tmp/tmpv5e43h2x.cpp:20:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv5e43h2x.cpp:2:\n/tmp/tmpv5e43h2x.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    while (start < end) {\n        if (string.compare(start, len, substring)\
    \ == 0) {\n            count++;\n        }\n        start += len;\n        end\
    \ += len;\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqvgxzirx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos += sublen;\n            count += 1;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count += 1;\n        }\n        else {\n            pos += 1;\n   \
    \     }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeilj5p83.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    while (i < len) {\n\
    \        end = i;\n        while (end < len && string[end] == substring[0]) {\n\
    \            end++;\n        }\n        if (end == len) {\n            break;\n\
    \        }\n        if (string[start] == substring[0]) {\n            start =\
    \ end;\n        }\n        long j = start;\n        while (j < end && string[j]\
    \ == substring[j]) {\n            j++;\n        }\n        if (j == end) {\n \
    \           count++;\n        }\n        i = j;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"\
    ), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu5j980ng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5e43h2x.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpv5e43h2x.cpp:13:51: error: 'string' is not a class or\
    \ namespace\n     while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n                                                   ^\n/tmp/tmpv5e43h2x.cpp:\
    \ In function 'int main()':\n/tmp/tmpv5e43h2x.cpp:20:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv5e43h2x.cpp:2:\n/tmp/tmpv5e43h2x.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkxsel43f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.length()) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb4o9wx54.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        } else {\n    \
    \        pos = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_xumpqfo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i += 1;\n\
    \            j += 1;\n        }\n        else if (string[i] < substring[j]) {\n\
    \            i += 1;\n        }\n        else {\n            j += 1;\n       \
    \ }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ockskol.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos += sublen;\n            count++;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else {\n            pos += 1;\n      \
    \  }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo90qfu6u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            count++;\n        \
    \    pos += sublen;\n        }\n        else {\n            pos++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb7c6tqxn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len) {\n        while (j < sublen)\
    \ {\n            if (string[i] == substring[j]) {\n                count++;\n\
    \                i += 1;\n                j += 1;\n            } else {\n    \
    \            j += 1;\n            }\n        }\n        i += 1;\n        j = 0;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt6wb2ik.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos++;\n            count++;\n            while (pos < len &&\
    \ string[pos] == substring[sublen]) {\n                pos++;\n              \
    \  count++;\n            }\n        }\n        else {\n            pos = 0;\n\
    \        }\n    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprnwufgvd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[1]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[2]) {\n      \
    \      count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[3]) {\n            count++;\n            pos += sublen;\n     \
    \   }\n        else if (string[pos] == substring[4]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[5])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[6]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[7]) {\n      \
    \      count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[8]) {\n            count++;\n            pos += sublen;\n     \
    \   }\n        else if (string[pos] == substring[9]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[10])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[11]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[12]) {\n     \
    \       count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[13]) {\n            count++;\n            pos += sublen;\n    \
    \    }\n        else if (string[pos] == substring[14]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[15])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[16]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[17]) {\n     \
    \       count++;\n            pos += sublen;\n        }\n        else if (string[pos]\
    \ == substring[18]) {\n            count++;\n            pos += sublen;\n    \
    \    }\n        else if (string[pos] == substring[19]) {\n            count++;\n\
    \            pos += sublen;\n        }\n        else if (string[pos] == substring[20])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[21]) {\n            count++;\n            pos +=\
    \ sublen;\n        }\n        else if (string[pos] == substring[22]) {\n\n}\n\
    int main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"\
    ), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpn5epdzl9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        ++count;\n        ++pos;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpelpw1ddj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto it = string.begin(); it != string.end(); ++it) {\n     \
    \   if (*it == substring[0]) {\n            for (auto it2 = substring.begin();\
    \ it2 != substring.end(); ++it2) {\n                if (*it == *it2) {\n     \
    \               ++count;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbuley8u5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substringLength\
    \ = substring.length();\n    long i = 0;\n    while (i < end) {\n        if (string[i]\
    \ == substring[0]) {\n            start = i;\n            while (i < end && string[i]\
    \ == substring[substringLength - 1]) {\n                i++;\n            }\n\
    \            end = i;\n            count += end - start;\n        }\n        i++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfuvj6_59.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos = pos + 1;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_dcbx1ol.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substring_length\
    \ = substring.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substring.length()) == substring)\
    \ {\n            count++;\n            start = mid + 1;\n        } else {\n  \
    \          if (mid - substring_length >= 0) {\n                start = mid + 1;\n\
    \            } else {\n                end = mid;\n            }\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpus_wee_i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            count++;\n        \
    \    pos += sublen;\n        }\n        else {\n            pos++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb7c6tqxn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5e43h2x.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpv5e43h2x.cpp:13:51: error: 'string' is not a class or\
    \ namespace\n     while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n                                                   ^\n/tmp/tmpv5e43h2x.cpp:\
    \ In function 'int main()':\n/tmp/tmpv5e43h2x.cpp:20:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv5e43h2x.cpp:2:\n/tmp/tmpv5e43h2x.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9gimulol.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmp9gimulol.cpp:15:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmp9gimulol.cpp:\
    \ In function 'int main()':\n/tmp/tmp9gimulol.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9gimulol.cpp:2:\n/tmp/tmp9gimulol.cpp:25:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        count++;\n        pos += sublen;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"),\
    \ (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n \
    \   assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl3zyf7mj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos = pos + 1;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_dcbx1ol.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       ++count;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0860cf1f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    while (start\
    \ < end) {\n        long mid = (start + end) / 2;\n        if (string.substr(mid,\
    \ substring.length()).compare(substring) == 0) {\n            count++;\n     \
    \       start = mid + 1;\n        } else {\n            end = mid;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp495m5aoc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] > substring[j]) {\n\
    \            i++;\n        }\n        else {\n            j++;\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx15lo1b_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long len = substring.length();\n\
    \    while (start < end) {\n        long mid = (start + end) / 2;\n        if\
    \ (string.compare(mid, len) == 0) {\n            start = mid + 1;\n          \
    \  end = mid;\n        } else if (string.compare(mid, len) < 0) {\n          \
    \  start = mid + 1;\n        } else {\n            end = mid;\n        }\n   \
    \     count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp46d1a7rl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            count++;\n            i++;\n            j++;\n        }\n       \
    \ else if (string[i] > substring[j]) {\n            end = i;\n            i =\
    \ i + 1;\n        }\n        else if (string[i] < substring[j]) {\n          \
    \  start = i;\n            i = i + 1;\n        }\n        else {\n           \
    \ i = i + 1;\n            j = j + 1;\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"\
    ), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmkpqyebq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long start = 0;\n    long end = 0;\n    long i = 0;\n    long j = 0;\n  \
    \  while (i < len) {\n        end = i;\n        while (j < sublen) {\n       \
    \     if (string[i] == substring[j]) {\n                end = i;\n           \
    \     ++count;\n                ++j;\n                break;\n            }\n\
    \            ++j;\n        }\n        ++i;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8wr8wcek.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos++;\n            count++;\n            while (pos < len &&\
    \ string[pos] == substring[sublen]) {\n                pos++;\n              \
    \  count++;\n            }\n        }\n        pos++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu5ijt4t7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    bool found = false;\n    while (i < string.size()) {\n        end\
    \ = string.find(substring, start);\n        if (end == string::npos) {\n     \
    \       end = string.size();\n        }\n        len = end - start;\n        if\
    \ (len > 0) {\n            found = true;\n            count += 1;\n        }\n\
    \        start = end + 1;\n        i += 1;\n    }\n    if (!found) {\n       \
    \ count = 0;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzl1mfea5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    while (start\
    \ < end) {\n        long mid = (start + end) / 2;\n        if (string.compare(mid,\
    \ substring.length(), substring) == 0) {\n            count++;\n            start\
    \ = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4v08h105.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos += sublen;\n            count++;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else {\n            pos++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptpu0hsdc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == std::string::npos) {\n            break;\n       \
    \ }\n        ++count;\n        pos += sublen;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"),\
    \ (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n \
    \   assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpclq607o4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        ++count;\n        ++pos;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfg9lknvy.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpfg9lknvy.cpp:16:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpfg9lknvy.cpp:\
    \ In function 'int main()':\n/tmp/tmpfg9lknvy.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfg9lknvy.cpp:2:\n/tmp/tmpfg9lknvy.cpp:26:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substringLength\
    \ = substring.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substringLength) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpof0bkpkp.cpp: In function 'int main()':\n/tmp/tmpof0bkpkp.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpof0bkpkp.cpp:2:\n/tmp/tmpof0bkpkp.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A\
    \ = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n \
    \   long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J\
    \ = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n \
    \   long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S\
    \ = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n \
    \   long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C\
    \ = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n \
    \   long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L\
    \ = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n \
    \   long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U\
    \ = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n \
    \   long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyujm8kb.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpwyujm8kb.cpp:67:10: error: redeclaration of 'long int\
    \ i'\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:15:10: error: 'long\
    \ int i' previously declared here\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:68:10:\
    \ error: redeclaration of 'long int j'\n     long j = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:16:10:\
    \ error: 'long int j' previously declared here\n     long j = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:69:10: error: redeclaration of 'long int k'\n     long k\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:17:10: error: 'long int k' previously\
    \ declared here\n     long k = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:70:10: error:\
    \ redeclaration of 'long int l'\n     long l = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:18:10:\
    \ error: 'long int l' previously declared here\n     long l = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:71:10: error: redeclaration of 'long int m'\n     long m\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:19:10: error: 'long int m' previously\
    \ declared here\n     long m = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:72:10: error:\
    \ redeclaration of 'long int n'\n     long n = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:20:10:\
    \ error: 'long int n' previously declared here\n     long n = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:73:10: error: redeclaration of 'long int o'\n     long o\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:21:10: error: 'long int o' previously\
    \ declared here\n     long o = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:74:10: error:\
    \ redeclaration of 'long int p'\n     long p = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:22:10:\
    \ error: 'long int p' previously declared here\n     long p = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:75:10: error: redeclaration of 'long int q'\n     long q\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:23:10: error: 'long int q' previously\
    \ declared here\n     long q = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:76:10: error:\
    \ redeclaration of 'long int r'\n     long r = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:24:10:\
    \ error: 'long int r' previously declared here\n     long r = 0;\n          ^\n\
    /"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substring_length\
    \ = substring.length();\n    long i = 0;\n    long j = 0;\n    while (i < end\
    \ && j < substring_length) {\n        if (string[i] == substring[j]) {\n     \
    \       i++;\n            j++;\n            count++;\n        }\n        else\
    \ if (string[i] > substring[j]) {\n            i++;\n        }\n        else {\n\
    \            j++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwv8wdd49.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substring_length\
    \ = substring.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.compare(mid, substring_length, substring, 0,\
    \ substring_length) == 0) {\n            count++;\n            start = mid + 1;\n\
    \        } else {\n            end = mid;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3rav50i3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A\
    \ = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n \
    \   long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J\
    \ = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n \
    \   long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S\
    \ = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n \
    \   long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C\
    \ = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n \
    \   long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L\
    \ = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n \
    \   long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U\
    \ = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n \
    \   long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyujm8kb.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpwyujm8kb.cpp:67:10: error: redeclaration of 'long int\
    \ i'\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:15:10: error: 'long\
    \ int i' previously declared here\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:68:10:\
    \ error: redeclaration of 'long int j'\n     long j = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:16:10:\
    \ error: 'long int j' previously declared here\n     long j = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:69:10: error: redeclaration of 'long int k'\n     long k\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:17:10: error: 'long int k' previously\
    \ declared here\n     long k = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:70:10: error:\
    \ redeclaration of 'long int l'\n     long l = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:18:10:\
    \ error: 'long int l' previously declared here\n     long l = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:71:10: error: redeclaration of 'long int m'\n     long m\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:19:10: error: 'long int m' previously\
    \ declared here\n     long m = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:72:10: error:\
    \ redeclaration of 'long int n'\n     long n = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:20:10:\
    \ error: 'long int n' previously declared here\n     long n = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:73:10: error: redeclaration of 'long int o'\n     long o\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:21:10: error: 'long int o' previously\
    \ declared here\n     long o = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:74:10: error:\
    \ redeclaration of 'long int p'\n     long p = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:22:10:\
    \ error: 'long int p' previously declared here\n     long p = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:75:10: error: redeclaration of 'long int q'\n     long q\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:23:10: error: 'long int q' previously\
    \ declared here\n     long q = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:76:10: error:\
    \ redeclaration of 'long int r'\n     long r = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:24:10:\
    \ error: 'long int r' previously declared here\n     long r = 0;\n          ^\n\
    /"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.length()) {\n        pos\
    \ = string.find(substring, pos);\n        if (pos == string::npos) {\n       \
    \     break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb4o9wx54.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long pos = 0;\n    long len = string.length();\n    long sublen =\
    \ substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            count++;\n            pos += sublen;\n        } else {\n    \
    \        pos = 0;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppr1lkzf3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos = pos + substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74dvf_lr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len) {\n        start = i;\n        while (i < len && string[i] ==\
    \ substring[j]) {\n            i++;\n            j++;\n        }\n        if (j\
    \ == sublen) {\n            end = i;\n            count++;\n        }\n      \
    \  while (i < len && string[i] == substring[j]) {\n            i++;\n        \
    \    j++;\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp02kfdz5w.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ long k = 0;\n    while (i < len) {\n        while (j < sublen) {\n         \
    \   if (string[i] == substring[j]) {\n                count++;\n             \
    \   j++;\n            } else {\n                break;\n            }\n      \
    \  }\n        if (j == sublen) {\n            count++;\n            j = 0;\n \
    \       }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_3alhxwz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A\
    \ = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n \
    \   long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J\
    \ = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n \
    \   long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S\
    \ = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n \
    \   long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C\
    \ = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n \
    \   long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L\
    \ = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n \
    \   long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U\
    \ = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n \
    \   long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyujm8kb.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpwyujm8kb.cpp:67:10: error: redeclaration of 'long int\
    \ i'\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:15:10: error: 'long\
    \ int i' previously declared here\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:68:10:\
    \ error: redeclaration of 'long int j'\n     long j = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:16:10:\
    \ error: 'long int j' previously declared here\n     long j = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:69:10: error: redeclaration of 'long int k'\n     long k\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:17:10: error: 'long int k' previously\
    \ declared here\n     long k = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:70:10: error:\
    \ redeclaration of 'long int l'\n     long l = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:18:10:\
    \ error: 'long int l' previously declared here\n     long l = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:71:10: error: redeclaration of 'long int m'\n     long m\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:19:10: error: 'long int m' previously\
    \ declared here\n     long m = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:72:10: error:\
    \ redeclaration of 'long int n'\n     long n = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:20:10:\
    \ error: 'long int n' previously declared here\n     long n = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:73:10: error: redeclaration of 'long int o'\n     long o\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:21:10: error: 'long int o' previously\
    \ declared here\n     long o = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:74:10: error:\
    \ redeclaration of 'long int p'\n     long p = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:22:10:\
    \ error: 'long int p' previously declared here\n     long p = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:75:10: error: redeclaration of 'long int q'\n     long q\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:23:10: error: 'long int q' previously\
    \ declared here\n     long q = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:76:10: error:\
    \ redeclaration of 'long int r'\n     long r = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:24:10:\
    \ error: 'long int r' previously declared here\n     long r = 0;\n          ^\n\
    /"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = string.length();\n\
    \    long sublen = substring.length();\n    long i = 0;\n    long j = 0;\n   \
    \ while (i < len && j < sublen) {\n        if (string[i] == substring[j]) {\n\
    \            i++;\n            j++;\n            count++;\n        } else {\n\
    \            if (j == sublen) {\n                end = i;\n            }\n   \
    \         i = i + 1;\n            j = 0;\n        }\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcf5eq81l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while (pos < string.size()) {\n        pos =\
    \ string.find(substring, pos);\n        if (pos == string::npos) {\n         \
    \   break;\n        }\n        count++;\n        pos += substring.size();\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_7retl7o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       ++count;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0860cf1f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            count++;\n            i++;\n\
    \            j++;\n        }\n        else if (string[i] > substring[j]) {\n \
    \           i++;\n        }\n        else {\n            j++;\n        }\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvdwzyg6o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        if (string[pos] == substring[0])\
    \ {\n            pos += sublen;\n            count++;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else if (string[pos] == substring[0])\
    \ {\n            pos += sublen;\n            count++;\n        }\n        else\
    \ if (string[pos] == substring[sublen - 1]) {\n            pos += sublen;\n  \
    \          count++;\n        }\n        else {\n            pos++;\n        }\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpedp2oi4s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       for (auto &cc : substring) {\n                if (c == cc) {\n       \
    \             count++;\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"\
    xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\"\
    )) == (4));\n    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwanaya9y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = 0;\n    long len = 0;\n    long i\
    \ = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n \
    \   long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A\
    \ = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n \
    \   long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J\
    \ = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n \
    \   long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S\
    \ = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n \
    \   long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n \
    \   long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t\
    \ = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n \
    \   long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n    long C\
    \ = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long G = 0;\n \
    \   long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n    long L\
    \ = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long P = 0;\n \
    \   long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n    long U\
    \ = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long Y = 0;\n \
    \   long Z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d\
    \ = 0;\n}\nint main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\
    \"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwyujm8kb.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpwyujm8kb.cpp:67:10: error: redeclaration of 'long int\
    \ i'\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:15:10: error: 'long\
    \ int i' previously declared here\n     long i = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:68:10:\
    \ error: redeclaration of 'long int j'\n     long j = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:16:10:\
    \ error: 'long int j' previously declared here\n     long j = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:69:10: error: redeclaration of 'long int k'\n     long k\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:17:10: error: 'long int k' previously\
    \ declared here\n     long k = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:70:10: error:\
    \ redeclaration of 'long int l'\n     long l = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:18:10:\
    \ error: 'long int l' previously declared here\n     long l = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:71:10: error: redeclaration of 'long int m'\n     long m\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:19:10: error: 'long int m' previously\
    \ declared here\n     long m = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:72:10: error:\
    \ redeclaration of 'long int n'\n     long n = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:20:10:\
    \ error: 'long int n' previously declared here\n     long n = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:73:10: error: redeclaration of 'long int o'\n     long o\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:21:10: error: 'long int o' previously\
    \ declared here\n     long o = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:74:10: error:\
    \ redeclaration of 'long int p'\n     long p = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:22:10:\
    \ error: 'long int p' previously declared here\n     long p = 0;\n          ^\n\
    /tmp/tmpwyujm8kb.cpp:75:10: error: redeclaration of 'long int q'\n     long q\
    \ = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:23:10: error: 'long int q' previously\
    \ declared here\n     long q = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:76:10: error:\
    \ redeclaration of 'long int r'\n     long r = 0;\n          ^\n/tmp/tmpwyujm8kb.cpp:24:10:\
    \ error: 'long int r' previously declared here\n     long r = 0;\n          ^\n\
    /"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       count += 1;\n            if (c == substring[1]) {\n                count\
    \ += 1;\n            }\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnudm5jqp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substring_length\
    \ = substring.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substring_length) == substring)\
    \ {\n            count++;\n            start = mid + 1;\n        } else {\n  \
    \          end = mid;\n        }\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) ==\
    \ (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuslr3wk7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       ++count;\n        pos = pos + sublen;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"),\
    \ (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n \
    \   assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa_gycs4z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (c == substring[0]) {\n     \
    \       count += 1;\n            for (auto &c2 : substring) {\n              \
    \  if (c == c2) break;\n            }\n        }\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"\
    ), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n\
    \    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"\
    john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpie_7szhp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       ++count;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0860cf1f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto it = string.begin(); it != string.end(); ++it) {\n     \
    \   if (*it == substring[0]) {\n            for (auto it2 = substring.begin();\
    \ it2 != substring.end(); ++it2) {\n                if (*it == *it2) {\n     \
    \               ++count;\n                }\n            }\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbuley8u5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        ++count;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnd2ex0y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ string::npos) {\n        count++;\n        pos += substring.length();\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n  \
    \  assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5e43h2x.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpv5e43h2x.cpp:13:51: error: 'string' is not a class or\
    \ namespace\n     while ((pos = string.find(substring, pos)) != string::npos)\
    \ {\n                                                   ^\n/tmp/tmpv5e43h2x.cpp:\
    \ In function 'int main()':\n/tmp/tmpv5e43h2x.cpp:20:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv5e43h2x.cpp:2:\n/tmp/tmpv5e43h2x.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long len = string.length();\n    long sublen = substring.length();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < len && j < sublen) {\n     \
    \   if (string[i] == substring[j]) {\n            i++;\n            j++;\n   \
    \         count++;\n        }\n        else if (string[i] < substring[j]) {\n\
    \            j++;\n        }\n        else {\n            i++;\n        }\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj5z4zeq4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797552
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto &c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe15l2dlw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    long start = 0;\n    long end = string.length();\n    long substringLength\
    \ = substring.length();\n    while (start < end) {\n        long mid = (start\
    \ + end) / 2;\n        if (string.substr(mid, substringLength) == substring) {\n\
    \            count++;\n            start = mid + 1;\n        } else {\n      \
    \      end = mid;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\")) == (0));\n\
    \    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpof0bkpkp.cpp: In function 'int main()':\n/tmp/tmpof0bkpkp.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpof0bkpkp.cpp:2:\n/tmp/tmpof0bkpkp.cpp:28:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    while (pos\
    \ < len) {\n        pos = string.find(substring, pos);\n        if (pos == string::npos)\
    \ {\n            break;\n        }\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplq9xogq2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        count++;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7boi2hux.cpp: In function 'int main()':\n/tmp/tmp7boi2hux.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7boi2hux.cpp:2:\n/tmp/tmp7boi2hux.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    while ((pos = string.find(substring, pos)) !=\
    \ std::string::npos) {\n        ++count;\n        pos += substring.length();\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = how_many_times;\n\
    \    assert(candidate((\"\"), (\"x\")) == (0));\n    assert(candidate((\"xyxyxyx\"\
    ), (\"x\")) == (4));\n    assert(candidate((\"cacacacac\"), (\"cac\")) == (4));\n\
    \    assert(candidate((\"john doe\"), (\"john\")) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5k19ct9t.cpp: In function 'int main()':\n/tmp/tmp5k19ct9t.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = how_many_times;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5k19ct9t.cpp:2:\n/tmp/tmp5k19ct9t.cpp:21:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    size_t pos = 0;\n    size_t len = string.length();\n    size_t sublen\
    \ = substring.length();\n    while (pos < len) {\n        pos = string.find(substring,\
    \ pos);\n        if (pos == string::npos) {\n            break;\n        }\n \
    \       count++;\n        pos += sublen;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq26wid4j.cpp: In function 'long int how_many_times(std::string,\
    \ std::string)':\n/tmp/tmpq26wid4j.cpp:17:20: error: 'string' is not a class or\
    \ namespace\n         if (pos == string::npos) {\n                    ^\n/tmp/tmpq26wid4j.cpp:\
    \ In function 'int main()':\n/tmp/tmpq26wid4j.cpp:26:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = how_many_times;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpq26wid4j.cpp:2:\n/tmp/tmpq26wid4j.cpp:27:33: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\"), (\"\
    x\")) == (0));\n                                 ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Find how many times a\
    \ given substring can be found in the original string. Count overlaping cases.\n\
    // >>> how_many_times((\"\"), (\"a\"))\n// (0)\n// >>> how_many_times((\"aaa\"\
    ), (\"a\"))\n// (3)\n// >>> how_many_times((\"aaaa\"), (\"aa\"))\n// (3)\nlong\
    \ how_many_times(std::string string, std::string substring) {\n    long count\
    \ = 0;\n    for (auto c : string) {\n        if (substring.find(c) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = how_many_times;\n    assert(candidate((\"\"), (\"x\"\
    )) == (0));\n    assert(candidate((\"xyxyxyx\"), (\"x\")) == (4));\n    assert(candidate((\"\
    cacacacac\"), (\"cac\")) == (4));\n    assert(candidate((\"john doe\"), (\"john\"\
    )) == (1));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkxsel43f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797551
