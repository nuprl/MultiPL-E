name: HumanEval_71_triangle_area
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
  \ three sides of a triangle. Return the area of\n// the triangle rounded to 2 decimal\
  \ points if the three sides form a valid triangle. \n// Otherwise return -1\n//\
  \ Three sides make a valid triangle when the sum of any two sides is greater \n\
  // than the third side.\n// Example:\n// >>> triangle_area((3), (4), (5))\n// (6.0)\n\
  // >>> triangle_area((1), (2), (10))\n// (float(-1))\nfloat triangle_area(long a,\
  \ long b, long c) {\n"
tests: "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((3),\
  \ (4), (5)) == (6.0));\n    assert(candidate((1), (2), (10)) == (float(-1)));\n\
  \    assert(candidate((4), (8), (5)) == (8.18));\n    assert(candidate((2), (2),\
  \ (2)) == (1.73));\n    assert(candidate((1), (2), (3)) == (float(-1)));\n    assert(candidate((10),\
  \ (5), (7)) == (16.25));\n    assert(candidate((2), (6), (3)) == (float(-1)));\n\
  \    assert(candidate((1), (1), (1)) == (0.43));\n    assert(candidate((2), (2),\
  \ (10)) == (float(-1)));\n}\n"
completions: ["    float s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n    return area;", "    float s = (a+b+c)/2;\n    float\
    \ area = sqrt(s*(s-a)*(s-b)*(s-c));\n    return area;", "    float s = (a + b\
    \ + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return\
    \ area;", "    float s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) *\
    \ (s - b) * (s - c));\n    return area;", "    float s = (a + b + c) / 2;\n  \
    \  float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;", " \
    \   float area = 0.0;\n    if (a + b > c) {\n        area = (a * b) / c;\n   \
    \ }\n    else {\n        area = -1;\n    }\n    return area;", "    float s =\
    \ (a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    return area;", "    float area;\n    if (a + b > c) {\n        area = (a\
    \ * b) / c;\n    } else {\n        area = -1;\n    }\n    return round(area, 2);",
  "  assert(a >= 0 && b >= 0 && c >= 0);\n  float s = (a + b + c) / 2;\n  float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n  return round(area, 2);", "    float\
    \ s = (a+b+c)/2;\n    if (s > a+b+c) {\n        return -1;\n    }\n    return\
    \ sqrt(s*(s-a)*(s-b)*(s-c));", "    float s = (a + b + c) / 2;\n    if (s > 0\
    \ && s <= a && s <= b && s <= c) {\n        return s;\n    }\n    return -1;",
  "    float s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s\
    \ - c));\n    return area;", "    float s = (a + b + c) / 2;\n    float area =\
    \ sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;", "    float s = (a+b+c)/2;\n\
    \    if (s > a+b+c) {\n        return -1;\n    }\n    float area = sqrt(s*(s-a)*(s-b)*(s-c));\n\
    \    return round(area*100)/100;", "    float s = (a + b + c) / 2;\n    float\
    \ area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;", "    float\
    \ s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    return area;", "    float s = (a + b + c) / 2;\n    float area = sqrt(s *\
    \ (s - a) * (s - b) * (s - c));\n    return area;", "    float s = (a + b + c)\
    \ / 2;\n    if (s > 0)\n        return sqrt(s * (s - a) * (s - b) * (s - c));\n\
    \    else\n        return -1;", "    float s = (a + b + c) / 2;\n    float area\
    \ = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;", "    float s =\
    \ (a + b + c) / 2;\n    float area = (sqrt(s * (s - a) * (s - b) * (s - c)) *\
    \ (b - a) * (c - b) * (a - c)) / 2;\n    return area;"]
stop_tokens:
- "\n}"
